export const CHALLENGES =  [
    {
      "id": "587d774c367417b2b2512a9c",
      "description": [
        "It's likely you've seen an <code>alt</code> attribute on an <code>img</code> tag in other challenges. <code>Alt</code> text describes the content of the image and provides a text-alternative. This helps in case the image fails to load or can't be seen by a user. It's also used by search engines to understand what an image contains to include it in search results. Here's an example:",
        "<code>&lt;img src=&quot;importantLogo.jpeg&quot; alt=&quot;Company logo&quot;&gt;</code>",
        "People with visual impairments rely on screen readers to convert web content to an audio interface. They won't get information if it's only presented visually. For images, screen readers can access the <code>alt</code> attribute and read its contents to deliver key information.",
        "Good <code>alt</code> text is short but descriptive, and meant to briefly convey the meaning of the image. You should always include an <code>alt</code> attribute on your image. Per HTML5 specification, this is now considered mandatory.",
        "<hr>",
        "Camper Cat happens to be both a coding ninja and an actual ninja, and is building a website to share his knowledge. The profile picture he wants to use shows his skills, and should be appreciated by all site visitors. Add an <code>alt</code> attribute in the <code>img</code> tag, that explains Camper Cat is doing karate. (The image <code>src</code> doesn't link to an actual file, so you should see the <code>alt</code> text in the display.)"
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> tag should have an <code>alt</code> attribute, and it should not be empty.",
          "testString":
            "assert($('img').attr('alt'), 'Your <code>img</code> tag should have an <code>alt</code> attribute, and it should not be empty.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<img src=\"doingKarateWow.jpeg\">",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Add a Text Alternative to Images for Visually Impaired Accessibility",
      "dashedName":
        "add-a-text-alternative-to-images-for-visually-impaired-accessibility"
    },
    {
      "id": "587d774c367417b2b2512a9d",
      "description": [
        "In the last challenge, you learned that including an <code>alt</code> attribute on img tags is mandatory. However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases <code>alt</code> text may seem redundant or unnecessary.",
        "In situations when an image is already explained with text content, or does not add meaning to a page, the <code>img</code> still needs an <code>alt</code> attribute, but it can be set to an empty string. Here's an example:",
        "<code>&lt;img src=&quot;visualDecoration.jpeg&quot; alt=&quot;&quot;&gt;</code>",
        "Background images usually fall under the 'decorative' label as well. However, they are typically applied with CSS rules, and therefore not part of the markup screen readers process.",
        "<strong>Note</strong><br>For images with a caption, you may still want to include <code>alt</code> text, since it helps search engines catalog the content of the image.",
        "<hr>",
        "Camper Cat has coded a skeleton page for the blog part of his website. He's planning to add a visual break between his two articles with a decorative image of a samurai sword. Add an <code>alt</code> attribute to the <code>img</code> tag and set it to an empty string. (Note that the image <code>src</code> doesn't link to an actual file - don't worry that there are no swords showing in the display.)"
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> tag should have an <code>alt</code> attribute.",
          "testString":
            "assert(!($('img').attr('alt') == undefined), 'Your <code>img</code> tag should have an <code>alt</code> attribute.');"
        },
        {
          "text":
            "The <code>alt</code> attribute should be set to an empty string.",
          "testString":
            "assert($('img').attr('alt') == '', 'The <code>alt</code> attribute should be set to an empty string.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Know When Alt Text Should be Left Blank",
      "dashedName": "know-when-alt-text-should-be-left-blank"
    },
    {
      "id": "587d774d367417b2b2512a9e",
      "description": [
        "Headings (<code>h1</code> through <code>h6</code> elements) are workhorse tags that help provide structure and labeling to your content. Screen readers can be set to read only the headings on a page so the user gets a summary. This means it is important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size values.",
        "<em>Semantic meaning</em> means that the tag you use around content indicates the type of information it contains.",
        "If you were writing a paper with an introduction, a body, and a conclusion, it wouldn't make much sense to put the conclusion as a subsection of the body in your outline. It should be its own section. Similarly, the heading tags in a webpage need to go in order and indicate the hierarchical relationships of your content.",
        "Headings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.",
        "As an example, a page with an <code>h2</code> element followed by several subsections labeled with <code>h4</code> tags would confuse a screen reader user. With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.",
        "One final point, each page should always have one (and only one) <code>h1</code> element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.",
        "<hr>",
        "Camper Cat wants a page on his site dedicated to becoming a ninja. Help him fix the headings so his markup gives semantic meaning to the content, and shows the proper parent-child relationships of his sections. Change all the <code>h5</code> tags to the proper heading level to indicate they are subsections of the <code>h2</code> ones."
      ],
      "tests": [
        {
          "text": "Your code should have six <code>h3</code> tags.",
          "testString":
            "assert($('h3').length === 6, 'Your code should have six <code>h3</code> tags.');"
        },
        {
          "text": "Your code should not have any <code>h5</code> tags.",
          "testString":
            "assert($('h5').length === 0, 'Your code should not have any <code>h5</code> tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h5>How to Hide in Plain Sight</h5>\n  <h5>How to Climb a Wall</h5>\n\n  <h2>Learn the Art of Battle</h2>\n  <h5>How to Strengthen your Body</h5>\n  <h5>How to Fight like a Ninja</h5>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h5>How to Breathe Properly</h5>\n  <h5>How to Simplify your Life</h5>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Headings to Show Hierarchical Relationships of Content",
      "dashedName": "use-headings-to-show-hierarchical-relationships-of-content"
    },
    {
      "id": "587d774e367417b2b2512a9f",
      "description": [
        "HTML5 introduced a number of new elements that give developers more options while also incorporating accessibility features. These tags include <code>main</code>, <code>header</code>, <code>footer</code>, <code>nav</code>, <code>article</code>, and <code>section</code>, among others.",
        "By default, a browser renders these elements similarly to the humble <code>div</code>. However, using them where appropriate gives additional meaning in your markup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content. Assistive technologies can access this information to provide better page summary or navigation options to their users.",
        "The <code>main</code> element is used to wrap (you guessed it) the main content, and there should be only one per page. It's meant to surround the information that's related to the central topic of your page. It's not meant to include items that repeat across pages, like navigation links or banners.",
        "The <code>main</code> tag also has an embedded landmark feature that assistive technology can use to quickly navigate to the main content. If you've ever seen a \"Jump to Main Content\" link at the top of a page, using a main tag automatically gives assistive devices that functionality.",
        "<hr>",
        "Camper Cat has some big ideas for his ninja weapons page. Help him set up his markup by adding opening and closing <code>main</code> tags between the <code>header</code> and <code>footer</code> (covered in other challenges). Keep the <code>main</code> tags empty for now."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>main</code> tag.",
          "testString":
            "assert($('main').length == 1, 'Your code should have one <code>main</code> tag.');"
        },
        {
          "text":
            "The <code>main</code> tags should be between the closing <code>header</code> tag and the opening <code>footer</code> tag.",
          "testString":
            "assert(code.match(/<\\/header>\\s*?<main>\\s*?<\\/main>/gi), 'The <code>main</code> tags should be between the closing <code>header</code> tag and the opening <code>footer</code> tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n\n\n\n<footer></footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Jump Straight to the Content Using the main Element",
      "dashedName": "jump-straight-to-the-content-using-the-main-element"
    },
    {
      "id": "587d774e367417b2b2512aa0",
      "description": [
        "<code>article</code> is another one of the new HTML5 elements that adds semantic meaning to your markup. <code>Article</code> is a sectioning element, and is used to wrap independent, self-contained content. The tag works well with blog entries, forum posts, or news articles.",
        "Determining whether content can stand alone is usually a judgement call, but there are a couple simple tests you can use. Ask yourself if you removed all surrounding context, would that content still make sense? Similarly for text, would the content hold up if it were in an RSS feed?",
        "Remember that folks using assistive technologies rely on organized, semantically meaningful markup to better understand your work.",
        "<strong>Note about <code>section</code> and <code>div</code></strong><br>The <code>section</code> element is also new with HTML5, and has a slightly different semantic meaning than <code>article</code>. An <code>article</code> is for standalone content, and a <code>section</code> is for grouping thematically related content. They can be used within each other, as needed. For example, if a book is the <code>article</code>, then each chapter is a <code>section</code>. When there's no relationship between groups of content, then use a <code>div</code>.",
        "<blockquote>&lt;div&gt; - groups content<br>&lt;section&gt; - groups related content<br>&lt;article&gt; - groups independent, self-contained content<br></blockquote>",
        "<hr>",
        "Camper Cat used <code>article</code> tags to wrap the posts on his blog page, but he forgot to use them around the top one. Change the <code>div</code> tag to use an <code>article</code> tag instead."
      ],
      "tests": [
        {
          "text": "Your code should have three <code>article</code> tags.",
          "testString":
            "assert($('article').length == 3, 'Your code should have three <code>article</code> tags.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <div>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </div>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Wrap Content in the article Element",
      "dashedName": "wrap-content-in-the-article-element"
    },
    {
      "id": "587d7787367417b2b2512aa1",
      "description": [
        "The next HTML5 element that adds semantic meaning and improves accessibility is the <code>header</code> tag. It's used to wrap introductory information or navigation links for its parent tag, and works well around content that's repeated at the top on multiple pages.",
        "<code>header</code> shares the embedded landmark feature you saw with <code>main</code>, allowing assistive technologies to quickly navigate to that content.",
        "<strong>Note</strong><br><code>header</code> is meant for use in the <code>body</code> tag of your HTML document. This is different than the <code>head</code> element, which contains the page's title, meta information, etc.",
        "<hr>",
        "Camper Cat is writing some great articles about ninja training, and wants to add a page for them to his site. Change the top <code>div</code> that currently contains the <code>h1</code> to a <code>header</code> tag instead."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>header</code> tag.",
          "testString":
            "assert($('header').length == 1, 'Your code should have one <code>header</code> tag.');"
        },
        {
          "text":
            "Your <code>header</code> tags should wrap around the <code>h1</code>.",
          "testString":
            "assert($('header').children('h1').length == 1, 'Your <code>header</code> tags should wrap around the <code>h1</code>.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        },
        {
          "text":
            "Make sure your <code>header</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/header>/g) && code.match(/<\\/header>/g).length === code.match(/<header>/g).length, 'Make sure your <code>header</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n\n  <div>\n    <h1>Training with Camper Cat</h1>\n  </div>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Screen Reader Navigation Easier with the header Landmark",
      "dashedName":
        "make-screen-reader-navigation-easier-with-the-header-landmark"
    },
    {
      "id": "587d7788367417b2b2512aa2",
      "description": [
        "The <code>nav</code> element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. This tag is meant to wrap around the main navigation links in your page.",
        "If there are repeated site links at the bottom of the page, it isn't necessary to markup those with a <code>nav</code> tag as well. Using a <code>footer</code> (covered in the next challenge) is sufficient.",
        "<hr>",
        "Camper Cat included navigation links at the top of his training page, but wrapped them in a <code>div</code>. Change the <code>div</code> to a <code>nav</code> tag to improve the accessibility on his page."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>nav</code> tag.",
          "testString":
            "assert($('nav').length == 1, 'Your code should have one <code>nav</code> tag.');"
        },
        {
          "text":
            "Your <code>nav</code> tags should wrap around the <code>ul</code> and its list items.",
          "testString":
            "assert($('nav').children('ul').length == 1, 'Your <code>nav</code> tags should wrap around the <code>ul</code> and its list items.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        },
        {
          "text": "Make sure your <code>nav</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/nav>/g) && code.match(/<\\/nav>/g).length === code.match(/<nav>/g).length, 'Make sure your <code>nav</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <div>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </div>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Screen Reader Navigation Easier with the nav Landmark",
      "dashedName": "make-screen-reader-navigation-easier-with-the-nav-landmark"
    },
    {
      "id": "587d7788367417b2b2512aa3",
      "description": [
        "Similar to <code>header</code> and <code>nav</code>, the <code>footer</code> element has a built-in landmark feature that allows assistive devices to quickly navigate to it. It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.",
        "<hr>",
        "Camper Cat's training page is making good progress. Change the <code>div</code> he used to wrap his copyright information at the bottom of the page to a <code>footer</code> element."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>footer</code> tag.",
          "testString":
            "assert($('footer').length == 1, 'Your code should have one <code>footer</code> tag.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        },
        {
          "text":
            "Your code should have an opening and closing <code>footer</code> tag.",
          "testString":
            "assert(code.match(/<footer>\\s*&copy; 2016 Camper Cat\\s*<\\/footer>/g), 'Your code should have an opening and closing <code>footer</code> tag.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <div>&copy; 2016 Camper Cat</div>\n\n\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Screen Reader Navigation Easier with the footer Landmark",
      "dashedName":
        "make-screen-reader-navigation-easier-with-the-footer-landmark"
    },
    {
      "id": "587d7789367417b2b2512aa4",
      "description": [
        "HTML5's <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to the deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.",
        "The <code>audio</code> tag supports the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, its presence on the tag turns the setting on.",
        "Here's an example:",
        "<blockquote>&lt;audio id=&quot;meowClip&quot; controls&gt;<br>    &lt;source src=&quot;audio/meow.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;<br>    &lt;source src=&quot;audio/meow.ogg&quot; type=&quot;audio/ogg&quot; /&gt;<br>&lt;/audio&gt;<br></blockquote>",
        "<strong>Note</strong><br>Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.",
        "<hr>",
        "Time to take a break from Camper Cat and meet fellow camper Zersiax (@zersiax), a champion of accessibility and a screen reader user. To hear a clip of his screen reader in action, add an <code>audio</code> element after the <code>p</code>. Include the <code>controls</code> attribute. Then place a <code>source</code> tag inside the <code>audio</code> tags with the <code>src</code> attribute set to \"https://s3.amazonaws.com/freecodecamp/screen-reader.mp3\" and <code>type</code> attribute set to \"audio/mpeg\".",
        "<strong>Note</strong><br>The audio clip may sound fast and be difficult to understand, but that is a normal speed for screen reader users."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>audio</code> tag.",
          "testString":
            "assert($('audio').length === 1, 'Your code should have one <code>audio</code> tag.');"
        },
        {
          "text":
            "Make sure your <code>audio</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/audio>/g) && code.match(/<audio controls>/g) && code.match(/<\\/audio>/g).length === code.match(/<audio controls>/g).length, 'Make sure your <code>audio</code> element has a closing tag.');"
        },
        {
          "text":
            "The <code>audio</code> tag should have the <code>controls</code> attribute.",
          "testString":
            "assert($('audio').attr('controls'), 'The <code>audio</code> tag should have the <code>controls</code> attribute.');"
        },
        {
          "text": "Your code should have one <code>source</code> tag.",
          "testString":
            "assert($('source').length === 1, 'Your code should have one <code>source</code> tag.');"
        },
        {
          "text":
            "Your <code>source</code> tag should be inside the <code>audio</code> tags.",
          "testString":
            "assert($('audio').children('source').length === 1, 'Your <code>source</code> tag should be inside the <code>audio</code> tags.');"
        },
        {
          "text":
            "The value for the <code>src</code> attribute on the <code>source</code> tag should match the link in the instructions exactly.",
          "testString":
            "assert($('source').attr('src') === 'https://s3.amazonaws.com/freecodecamp/screen-reader.mp3', 'The value for the <code>src</code> attribute on the <code>source</code> tag should match the link in the instructions exactly.');"
        },
        {
          "text":
            "Your code should include a <code>type</code> attribute on the <code>source</code> tag with a value of audio/mpeg.",
          "testString":
            "assert($('source').attr('type') === 'audio/mpeg', 'Your code should include a <code>type</code> attribute on the <code>source</code> tag with a value of audio/mpeg.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    \n    \n    \n  </main>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Improve Accessibility of Audio Content with the audio Element",
      "dashedName":
        "improve-accessibility-of-audio-content-with-the-audio-element"
    },
    {
      "id": "587d778a367417b2b2512aa5",
      "description": [
        "HTML5 introduced the <code>figure</code> element, along with the related <code>figcaption</code>. Used together, these items wrap a visual representation (like an image, diagram, or chart) along with its caption. This gives a two-fold accessibility boost by both semantically grouping related content, and providing a text alternative that explains the <code>figure</code>.",
        "For data visualizations like charts, the caption can be used to briefly note the trends or conclusions for users with visual impairments. Another challenge covers how to move a table version of the chart's data off-screen (using CSS) for screen reader users.",
        "Here's an example - note that the <code>figcaption</code> goes inside the <code>figure</code> tags and can be combined with other elements:",
        "<blockquote>&lt;figure&gt;<br>  &lt;img src=&quot;roundhouseDestruction.jpeg&quot; alt=&quot;Photo of Camper Cat executing a roundhouse kick&quot;&gt;<br>  &lt;br&gt;<br>  &lt;figcaption&gt;<br>    Master Camper Cat demonstrates proper form of a roundhouse kick.<br>  &lt;/figcaption&gt;<br>&lt;/figure&gt;<br></blockquote>",
        "<hr>",
        "Camper Cat is hard at work creating a stacked bar chart showing the amount of time per week to spend training in stealth, combat, and weapons. Help him structure his page better by changing the <code>div</code> tag he used to a <code>figure</code> tag, and the <code>p</code> tag that surrounds the caption to a <code>figcaption</code> tag."
      ],
      "tests": [
        {
          "text": "Your code should have one <code>figure</code> tag.",
          "testString":
            "assert($('figure').length == 1, 'Your code should have one <code>figure</code> tag.');"
        },
        {
          "text": "Your code should have one <code>figcaption</code> tag.",
          "testString":
            "assert($('figcaption').length == 1, 'Your code should have one <code>figcaption</code> tag.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        },
        {
          "text": "Your code should not have any <code>p</code> tags.",
          "testString":
            "assert($('p').length == 0, 'Your code should not have any <code>p</code> tags.');"
        },
        {
          "text":
            "The <code>figcaption</code> should be a child of the <code>figure</code> tag.",
          "testString":
            "assert($('figure').children('figcaption').length == 1, 'The <code>figcaption</code> should be a child of the <code>figure</code> tag.');"
        },
        {
          "text":
            "Make sure your <code>figure</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/figure>/g) && code.match(/<\\/figure>/g).length === code.match(/<figure>/g).length, 'Make sure your <code>figure</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n      \n      <!-- Add your code below this line -->\n      <div>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <p>Breakdown per week of time to spend training in stealth, combat, and weapons.</p>\n      </div>\n      <!-- Add your code above this line -->\n      \n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Improve Chart Accessibility with the figure Element",
      "dashedName": "improve-chart-accessibility-with-the-figure-element"
    },
    {
      "id": "587d778a367417b2b2512aa6",
      "description": [
        "Improving accessibility with semantic HTML markup applies to using both appropriate tag names as well as attributes. The next several challenges cover some important scenarios using attributes in forms.",
        "The <code>label</code> tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The <code>for</code> attribute on a <code>label</code> tag explicitly associates that <code>label</code> with the form control and is used by screen readers.",
        "You learned about radio buttons and their labels in a lesson in the Basic HTML section. In that lesson, we wrapped the radio button input element inside a <code>label</code> element along with the label text in order to make the text clickable. Another way to achieve this is by using the <code>for</code> attribute as explained in this lesson.",
        "The value of the <code>for</code> attribute must be the same as the value of the <code>id</code> attribute of the form control. Here's an example:",
        "<blockquote>&lt;form&gt;<br>  &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;<br>  &lt;input type=&quottext&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;<br>&lt;/form&gt;<br></blockquote>",
        "<hr>",
        "Camper Cat expects a lot of interest in his thoughtful blog posts, and wants to include an email sign up form. Add a <code>for</code> attribute on the email <code>label</code> that matches the <code>id</code> on its <code>input</code> field."
      ],
      "tests": [
        {
          "text":
            "Your code should have a <code>for</code> attribute on the <code>label</code> tag that is not empty.",
          "testString":
            "assert($('label').attr('for'), 'Your code should have a <code>for</code> attribute on the <code>label</code> tag that is not empty.');"
        },
        {
          "text":
            "Your <code>for</code> attribute value should match the <code>id</code> value on the email <code>input</code>.",
          "testString":
            "assert($('label').attr('for') == 'email', 'Your <code>for</code> attribute value should match the <code>id</code> value on the email <code>input</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      \n      \n      <label>Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n      \n      \n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Improve Form Field Accessibility with the label Element",
      "dashedName": "improve-form-field-accessibility-with-the-label-element"
    },
    {
      "id": "587d778b367417b2b2512aa7",
      "description": [
        "The next form topic covers accessibility of radio buttons. Each choice is given a <code>label</code> with a <code>for</code> attribute tying to the <code>id</code> of the corresponding item as covered in the last challenge. Since radio buttons often come in a group where the user must choose one, there's a way to semantically show the choices are part of a set.",
        "The <code>fieldset</code> tag surrounds the entire grouping of radio buttons to achieve this. It often uses a <code>legend</code> tag to provide a description for the grouping, which is read by screen readers for each choice in the <code>fieldset</code> element.",
        "The <code>fieldset</code> wrapper and <code>legend</code> tag are not necessary when the choices are self-explanatory, like a gender selection. Using a <code>label</code> with the <code>for</code> attribute for each radio button is sufficient.",
        "Here's an example:",
        "<blockquote>&lt;form&gt;<br>  &lt;fieldset&gt;<br>    &lt;legend&gt;Choose one of these three items:&lt;/legend&gt;<br>    &lt;input id=&quot;one&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;one&quot;&gt;<br>    &lt;label for=&quot;one&quot;&gt;Choice One&lt;/label&gt;&lt;br&gt;<br>    &lt;input id=&quot;two&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;two&quot;&gt;<br>    &lt;label for=&quot;two&quot;&gt;Choice Two&lt;/label&gt;&lt;br&gt;<br>    &lt;input id=&quot;three&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;three&quot;&gt;<br>    &lt;label for=&quot;three&quot;&gt;Choice Three&lt;/label&gt;<br>  &lt;/fieldset&gt;<br>&lt;/form&gt;<br></blockquote>",
        "<hr>",
        "Camper Cat wants information about the ninja level of his users when they sign up for his email list. He's added a set of radio buttons, and learned from our last lesson to use label tags with <code>for</code> attributes for each choice. Go Camper Cat! However, his code still needs some help. Change the div tag surrounding the radio buttons to a fieldset tag, and change the p tag inside it to a legend."
      ],
      "tests": [
        {
          "text":
            "Your code should have a <code>fieldset</code> tag around the radio button set.",
          "testString":
            "assert($('fieldset').length == 1, 'Your code should have a <code>fieldset</code> tag around the radio button set.');"
        },
        {
          "text":
            "Make sure your <code>fieldset</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/fieldset>/g) && code.match(/<\\/fieldset>/g).length === code.match(/<fieldset>/g).length, 'Make sure your <code>fieldset</code> element has a closing tag.');"
        },
        {
          "text":
            "Your code should have a <code>legend</code> tag around the text asking what level ninja a user is.",
          "testString":
            "assert($('legend').length == 1, 'Your code should have a <code>legend</code> tag around the text asking what level ninja a user is.');"
        },
        {
          "text": "Your code should not have any <code>div</code> tags.",
          "testString":
            "assert($('div').length == 0, 'Your code should not have any <code>div</code> tags.');"
        },
        {
          "text":
            "Your code should no longer have a <code>p</code> tag around the text asking what level ninja a user is.",
          "testString":
            "assert($('p').length == 4, 'Your code should no longer have a <code>p</code> tag around the text asking what level ninja a user is.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n      \n      \n      <!-- Add your code below this line -->\n      <div>\n        <p>What level ninja are you?</p>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </div>\n      <!-- Add your code above this line -->\n      \n      \n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Wrap Radio Buttons in a fieldset Element for Better Accessibility",
      "dashedName":
        "wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility"
    },
    {
      "id": "587d778b367417b2b2512aa8",
      "description": [
        "Forms often include the <code>input</code> field, which can be used to create several different form controls. The <code>type</code> attribute on this element indicates what kind of input will be created.",
        "You may have noticed the <code>text</code> and <code>submit</code> input types in prior challenges, and HTML5 introduced an option to specify a <code>date</code> field. Depending on browser support, a date picker shows up in the <code>input</code> field when it's in focus, which makes filling in a form easier for all users.",
        "For older browsers, the type will default to <code>text</code>, so it helps to show users the expected date format in the label or as placeholder text just in case.",
        "Here's an example:",
        "<blockquote>&lt;label for=&quot;input1&quot;&gt;Enter a date:&lt;/label&gt;<br>&lt;input type=&quot;date&quot; id=&quot;input1&quot; name=&quot;input1&quot;&gt;<br></blockquote>",
        "<hr>",
        "Camper Cat is setting up a mortal combat tournament and wants to ask his competitors to see what date works best. Add an <code>input</code> tag with a <code>type</code> attribute of \"date\", an <code>id</code> attribute of \"pickdate\", and a <code>name</code> attribute of \"date\"."
      ],
      "tests": [
        {
          "text":
            "Your code should add one <code>input</code> tag for the date selector field.",
          "testString":
            "assert($('input').length == 2, 'Your code should add one <code>input</code> tag for the date selector field.');"
        },
        {
          "text":
            "Your <code>input</code> tag should have a <code>type</code> attribute with a value of date.",
          "testString":
            "assert($('input').attr('type') == 'date', 'Your <code>input</code> tag should have a <code>type</code> attribute with a value of date.');"
        },
        {
          "text":
            "Your <code>input</code> tag should have an <code>id</code> attribute with a value of pickdate.",
          "testString":
            "assert($('input').attr('id') == 'pickdate', 'Your <code>input</code> tag should have an <code>id</code> attribute with a value of pickdate.');"
        },
        {
          "text":
            "Your <code>input</code> tag should have a <code>name</code> attribute with a value of date.",
          "testString":
            "assert($('input').attr('name') == 'date', 'Your <code>input</code> tag should have a <code>name</code> attribute with a value of date.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Combat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n        \n        <!-- Add your code below this line -->\n        \n        \n        \n        <!-- Add your code above this line -->\n        \n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add an Accessible Date Picker",
      "dashedName": "add-an-accessible-date-picker"
    },
    {
      "id": "587d778c367417b2b2512aa9",
      "description": [
        "Continuing with the date theme, HTML5 also introduced the <code>time</code> element along with a <code>datetime</code> attribute to standardize times. This is an inline element that can wrap a date or time on a page. A valid format of that date is held by the <code>datetime</code> attribute. This is the value accessed by assistive devices. It helps avoid confusion by stating a standardized version of a time, even if it's written in an informal or colloquial manner in the text.",
        "Here's an example:",
        "<code>&lt;p&gt;Master Camper Cat officiated the cage match between Goro and Scorpion &lt;time datetime=&quot;2013-02-13&quot;&gt;last Wednesday&lt;/time&gt;, which ended in a draw.&lt;/p&gt;</code>",
        "<hr>",
        "Camper Cat's mortal combat survey results are in! Wrap a <code>time</code> tag around the text \"Thursday, September 15&lt;sup&gt;th&lt;/sup&gt;\" and add a <code>datetime</code> attribute to it set to \"2016-09-15\"."
      ],
      "tests": [
        {
          "text":
            "Your <code>time</code> tags should wrap around the text \"Thursday, September 15&lt;sup&gt;th&lt;/sup&gt;\".",
          "testString":
            "assert($('time').text().match(/Thursday, September 15th/g), 'Your <code>time</code> tags should wrap around the text \"Thursday, September 15&lt;sup&gt;th&lt;/sup&gt;\".');"
        },
        {
          "text":
            "Your <code>time</code> tag should have a <code>datetime</code> attribute that is not empty.",
          "testString":
            "assert($('time').attr('datetime'), 'Your <code>time</code> tag should have a <code>datetime</code> attribute that is not empty.');"
        },
        {
          "text":
            "Your <code>datetime</code> attribute should be set to a value of 2016-09-15.",
          "testString":
            "assert($('time').attr('datetime') === \"2016-09-15\", 'Your <code>datetime</code> attribute should be set to a value of 2016-09-15.');"
        },
        {
          "text": "Make sure your <code>time</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/time>/g) && code.match(/<\\/time>/g).length === 4, 'Make sure your <code>time</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Combat Tournament Survey Results</h2>\n    \n    <!-- Add your code below this line -->\n    \n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Combat tournament is Thursday, September 15<sup>th</sup>. May the best ninja win!</p>\n    \n    <!-- Add your code above this line -->\n    \n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Standardize Times with the HTML5 datetime Attribute",
      "dashedName": "standardize-times-with-the-html5-datetime-attribute"
    },
    {
      "id": "587d778d367417b2b2512aaa",
      "description": [
        "Have you noticed that all of the applied accessibility challenges so far haven't used any CSS? This is to show the importance of a logical document outline, and using semantically meaningful tags around your content before introducing the visual design aspect.",
        "However, CSS's magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window.",
        "Here's an example of the CSS rules that accomplish this:",
        "<blockquote>.sr-only {<br>  position: absolute;<br>  left: -10000px;<br>  width: 1px;<br>  height: 1px;<br>  top: auto;<br>  overflow: hidden;<br>}</blockquote>",
        "<strong>Note</strong><br>The following CSS approaches will NOT do the same thing:",
        "<ul>",
        "<li><code>display: none;</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users</li>",
        "<li>Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> removes that element from the flow of your document, meaning screen readers will ignore it</li>",
        "</ul>",
        "<hr>",
        "Camper Cat created a really cool stacked bar chart for his training page, and put the data into a table for his visually impaired users. The table already has an <code>sr-only</code> class, but the CSS rules aren't filled in yet. Give the <code>position</code> an absolute value, the <code>left</code> a -10000px value, and the <code>width</code> and <code>height</code> both 1px values."
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>position</code> property of the <code>sr-only</code> class to a value of absolute.",
          "testString":
            "assert($('.sr-only').css('position') == 'absolute', 'Your code should set the <code>position</code> property of the <code>sr-only</code> class to a value of absolute.');"
        },
        {
          "text":
            "Your code should set the <code>left</code> property of the <code>sr-only</code> class to a value of -10000px.",
          "testString":
            "assert($('.sr-only').css('left') == '-10000px', 'Your code should set the <code>left</code> property of the <code>sr-only</code> class to a value of -10000px.');"
        },
        {
          "text":
            "Your code should set the <code>width</code> property of the <code>sr-only</code> class to a value of 1 pixel.",
          "testString":
            "assert(code.match(/width:\\s*?1px/gi), 'Your code should set the <code>width</code> property of the <code>sr-only</code> class to a value of 1 pixel.');"
        },
        {
          "text":
            "Your code should set the <code>height</code> property of the <code>sr-only</code> class to a value of 1 pixel.",
          "testString":
            "assert(code.match(/height:\\s*?1px/gi), 'Your code should set the <code>height</code> property of the <code>sr-only</code> class to a value of 1 pixel.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  .sr-only {\n    position: ;\n    left: ;\n    width: ;\n    height: ;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training-->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>                                        \n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Make Elements Only Visible to a Screen Reader by Using Custom CSS",
      "dashedName":
        "make-elements-only-visible-to-a-screen-reader-by-using-custom-css"
    },
    {
      "id": "587d778e367417b2b2512aab",
      "description": [
        "Low contrast between the foreground and background colors can make text difficult to read. Sufficient contrast improves the readability of your content, but what exactly does \"sufficient\" mean?",
        "The Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text. The ratio is calculated by comparing the relative luminance values of two colors. This ranges from 1:1 for the same color, or no contrast, to 21:1 for white against black, the strongest contrast. There are many contrast checking tools available online that calculate this ratio for you.",
        "<hr>",
        "Camper Cat's choice of light gray text on a white background for his recent blog post has a 1.5:1 contrast ratio, making it hard to read. Change the <code>color</code> of the text from the current gray (<code>#D3D3D3</code>) to a darker gray (<code>#636363</code>) to improve the contrast ratio to 6:1."
      ],
      "tests": [
        {
          "text":
            "Your code should change the text <code>color</code> for the <code>body</code> to the darker gray.",
          "testString":
            "assert($('body').css('color') == 'rgb(99, 99, 99)', 'Your code should change the text <code>color</code> for the <code>body</code> to the darker gray.');"
        },
        {
          "text":
            "Your code should not change the <code>background-color</code> for the <code>body</code>.",
          "testString":
            "assert($('body').css('background-color') == 'rgb(255, 255, 255)', 'Your code should not change the <code>background-color</code> for the <code>body</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  body {\n    color: #D3D3D3;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Improve Readability with High Contrast Text",
      "dashedName": "improve-readability-with-high-contrast-text"
    },
    {
      "id": "587d778f367417b2b2512aac",
      "description": [
        "Color is a large part of visual design, but its use introduces two accessibility issues. First, color alone should not be used as the only way to convey important information because screen reader users won't see it. Second, foreground and background colors need sufficient contrast so colorblind users can distinguish them.",
        "Previous challenges covered having text alternatives to address the first issue. The last challenge introduced contrast checking tools to help with the second. The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations.",
        "Colorblind users have trouble distinguishing some colors from others - usually in hue but sometimes lightness as well. You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.",
        "In practice, the 4.5:1 ratio can be reached by darkening the darker color and lightening the lighter one with the aid of a color contrast checker. Darker colors on the color wheel are considered to be blues, violets, magentas, and reds, whereas lighter colors are oranges, yellows, greens, and blue-greens.",
        "<hr>",
        "Camper Cat is experimenting with using color for his blog text and background, but his current combination of a greenish <code>background-color</code> with maroon text <code>color</code> has a 2.5:1 contrast ratio. You can easily adjust the lightness of the colors since he declared them using the CSS <code>hsl()</code> property (which stands for hue, saturation, lightness) by changing the third argument. Increase the <code>background-color</code> lightness value from 35% to 55%, and decrease the <code>color</code> lightness value from 20% to 15%. This improves the contrast to 5.9:1."
      ],
      "tests": [
        {
          "text":
            "Your code should only change the lightness value for the text <code>color</code> property to a value of 15%.",
          "testString":
            "assert(code.match(/color:\\s*?hsl\\(0,\\s*?55%,\\s*?15%\\)/gi), 'Your code should only change the lightness value for the text <code>color</code> property to a value of 15%.');"
        },
        {
          "text":
            "Your code should only change the lightness value for the <code>background-color</code> property to a value of 55%.",
          "testString":
            "assert(code.match(/background-color:\\s*?hsl\\(120,\\s*?25%,\\s*?55%\\)/gi), 'Your code should only change the lightness value for the <code>background-color</code> property to a value of 55%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 20%);\n    background-color: hsl(120, 25%, 35%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Avoid Colorblindness Issues by Using Sufficient Contrast",
      "dashedName": "avoid-colorblindness-issues-by-using-sufficient-contrast"
    },
    {
      "id": "587d778f367417b2b2512aad",
      "description": [
        "There are various forms of colorblindness. These can range from a reduced sensitivity to a certain wavelength of light to the inability to see color at all. The most common form is a reduced sensitivity to detect greens.",
        "For example, if two similar green colors are the foreground and background color of your content, a colorblind user may not be able to distinguish them. Close colors can be thought of as neighbors on the color wheel, and those combinations should be avoided when conveying important information.",
        "<strong>Note</strong><br>Some online color picking tools include visual simulations of how colors appear for different types of colorblindness. These are great resources in addition to online contrast checking calculators.",
        "<hr>",
        "Camper Cat is testing different styles for an important button, but the yellow (<code>#FFFF33</code>) <code>background-color</code> and the green (<code>#33FF33</code>) text <code>color</code> are neighboring hues on the color wheel and virtually indistinguishable for some colorblind users. (Their similar lightness also fails the contrast ratio check). Change the text <code>color</code> to a dark blue (<code>#003366</code>) to solve both problems."
      ],
      "tests": [
        {
          "text":
            "Your code should change the text <code>color</code> for the <code>button</code> to the dark blue.",
          "testString":
            "assert($('button').css('color') == 'rgb(0, 51, 102)', 'Your code should change the text <code>color</code> for the <code>button</code> to the dark blue.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  button {\n    color: #33FF33;\n    background-color: #FFFF33;\n    font-size: 14px;\n    padding: 10px;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Avoid Colorblindness Issues by Carefully Choosing Colors that Convey Information",
      "dashedName":
        "avoid-colorblindness-issues-by-carefully-choosing-colors-that-convey-information"
    },
    {
      "id": "587d778f367417b2b2512aae",
      "description": [
        "Screen reader users have different options for what type of content their device reads. This includes skipping to (or over) landmark elements, jumping to the main content, or getting a page summary from the headings. Another option is to only hear the links available on a page.",
        "Screen readers do this by reading the link text, or what's between the anchor (<code>a</code>) tags. Having a list of \"click here\" or \"read more\" links isn't helpful. Instead, you should use brief but descriptive text within the <code>a</code> tags to provide more meaning for these users.",
        "<hr>",
        "The link text that Camper Cat is using is not very descriptive without the surrounding context. Move the anchor (<code>a</code>) tags so they wrap around the text \"information about batteries\" instead of \"Click here\"."
      ],
      "tests": [
        {
          "text":
            "Your code should move the anchor <code>a</code> tags from around the words \"Click here\" to wrap around the words \"information about batteries\".",
          "testString":
            "assert($('a').text().match(/information about batteries/g), 'Your code should move the anchor <code>a</code> tags from around the words \"Click here\" to wrap around the words \"information about batteries\".');"
        },
        {
          "text": "Make sure your <code>a</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/a>/g) && code.match(/<\\/a>/g).length === code.match(/<a href=\"\">/g).length, 'Make sure your <code>a</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightening speed. But chin up, fellow fighters, our time for victory may soon be near. <a href=\"\">Click here</a> for information about batteries</p>\n  </article>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Give Links Meaning by Using Descriptive Link Text",
      "dashedName": "give-links-meaning-by-using-descriptive-link-text"
    },
    {
      "id": "587d7790367417b2b2512aaf",
      "description": [
        "HTML offers the <code>accesskey</code> attribute to specify a shortcut key to activate or bring focus to an element. This can make navigation more efficient for keyboard-only users.",
        "HTML5 allows this attribute to be used on any element, but it's particularly useful when it's used with interactive ones. This includes links, buttons, and form controls.",
        "Here's an example:",
        "<code>&lt;button accesskey=&quot;b&quot;&gt;Important Button&lt;/button&gt;</code>",
        "<hr>",
        "Camper Cat wants the links around the two blog article titles to have keyboard shortcuts so his site's users can quickly navigate to the full story. Add an <code>accesskey</code> attribute to both links and set the first one to \"g\" (for Garfield) and the second one to \"c\" (for Chuck Norris)."
      ],
      "tests": [
        {
          "text":
            "Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of \"first\".",
          "testString":
            "assert($('#first').attr('accesskey'), 'Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of \"first\".');"
        },
        {
          "text":
            "Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of \"second\".",
          "testString":
            "assert($('#second').attr('accesskey'), 'Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of \"second\".');"
        },
        {
          "text":
            "Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of \"first\" to \"g\". Note that case matters.",
          "testString":
            "assert($('#first').attr('accesskey') == 'g', 'Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of \"first\" to \"g\". Note that case matters.');"
        },
        {
          "text":
            "Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of \"second\" to \"c\". Note that case matters.",
          "testString":
            "assert($('#second').attr('accesskey') == 'c', 'Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of \"second\" to \"c\". Note that case matters.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    \n    \n    <h2><a id=\"first\" href=\"\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n    \n    \n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n    \n    \n    <h2><a id=\"second\" href=\"\">Is Chuck Norris a Cat Person?</a></h2>\n    \n    \n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Links Navigatable with HTML Access Keys",
      "dashedName": "make-links-navigatable-with-html-access-keys"
    },
    {
      "id": "587d7790367417b2b2512ab0",
      "description": [
        "The HTML <code>tabindex</code> attribute has three distinct functions relating to an element's keyboard focus. When it's on a tag, it indicates that element can be focused on. The value (an integer that's positive, negative, or zero) determines the behavior.",
        "Certain elements, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It's in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as <code>div</code>, <code>span</code>, and <code>p</code>, by placing a <code>tabindex=\"0\"</code> attribute on them. Here's an example:",
        "<code>&lt;div tabindex=&quot;0&quot;&gt;I need keyboard focus!&lt;/div&gt;</code>",
        "<strong>Note</strong><br>A negative <code>tabindex</code> value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard. This method is generally used to bring focus to content programmatically (like when a <code>div</code> used for a pop-up window is activated), and is beyond the scope of these challenges.",
        "<hr>",
        "Camper Cat created a new survey to collect information about his users. He knows input fields automatically get keyboard focus, but he wants to make sure his keyboard users pause at the instructions while tabbing through the items. Add a <code>tabindex</code> attribute to the <code>p</code> tag and set its value to \"0\". Bonus - using <code>tabindex</code> also enables the CSS pseudo-class <code>:focus</code> to work on the <code>p</code> tag."
      ],
      "tests": [
        {
          "text":
            "Your code should add a <code>tabindex</code> attribute to the <code>p</code> tag that holds the form instructions.",
          "testString":
            "assert($('p').attr('tabindex'), 'Your code should add a <code>tabindex</code> attribute to the <code>p</code> tag that holds the form instructions.');"
        },
        {
          "text":
            "Your code should set the <code>tabindex</code> attribute on the <code>p</code> tag to a value of 0.",
          "testString":
            "assert($('p').attr('tabindex') == '0', 'Your code should set the <code>tabindex</code> attribute on the <code>p</code> tag to a value of 0.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n      \n      \n      <p>Instructions: Fill in ALL your information then click <b>Submit</b></p>\n      \n      \n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use tabindex to Add Keyboard Focus to an Element",
      "dashedName": "use-tabindex-to-add-keyboard-focus-to-an-element"
    },
    {
      "id": "587d7790367417b2b2512ab1",
      "description": [
        "The <code>tabindex</code> attribute also specifies the exact tab order of elements. This is achieved when the value of the attribute is set to a positive number of 1 or higher.",
        "Setting a tabindex=\"1\" will bring keyboard focus to that element first. Then it cycles through the sequence of specified <code>tabindex</code> values (2, 3, etc.), before moving to default and <code>tabindex=\"0\"</code> items.",
        "It's important to note that when the tab order is set this way, it overrides the default order (which uses the HTML source). This may confuse users who are expecting to start navigation from the top of the page. This technique may be necessary in some circumstances, but in terms of accessibility, take care before applying it.",
        "Here's an example:",
        "<code>&lt;div tabindex=&quot;1&quot;&gt;I get keyboard focus, and I get it first!&lt;/div&gt;</code>",
        "<code>&lt;div tabindex=&quot;2&quot;&gt;I get keyboard focus, and I get it second!&lt;/div&gt;</code>",
        "<hr>",
        "Camper Cat has a search field on his Inspirational Quotes page that he plans to position in the upper right corner with CSS. He wants the search <code>input</code> and submit <code>input</code> form controls to be the first two items in the tab order. Add a <code>tabindex</code> attribute set to \"1\" to the search <code>input</code>, and a <code>tabindex</code> attribute set to \"2\" to the submit <code>input</code>."
      ],
      "tests": [
        {
          "text":
            "Your code should add a <code>tabindex</code> attribute to the search <code>input</code> tag.",
          "testString":
            "assert($('#search').attr('tabindex'), 'Your code should add a <code>tabindex</code> attribute to the search <code>input</code> tag.');"
        },
        {
          "text":
            "Your code should add a <code>tabindex</code> attribute to the submit <code>input</code> tag.",
          "testString":
            "assert($('#submit').attr('tabindex'), 'Your code should add a <code>tabindex</code> attribute to the submit <code>input</code> tag.');"
        },
        {
          "text":
            "Your code should set the <code>tabindex</code> attribute on the search <code>input</code> tag to a value of 1.",
          "testString":
            "assert($('#search').attr('tabindex') == '1', 'Your code should set the <code>tabindex</code> attribute on the search <code>input</code> tag to a value of 1.');"
        },
        {
          "text":
            "Your code should set the <code>tabindex</code> attribute on the submit <code>input</code> tag to a value of 2.",
          "testString":
            "assert($('#submit').attr('tabindex') == '2', 'Your code should set the <code>tabindex</code> attribute on the submit <code>input</code> tag to a value of 2.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n    \n    \n    <input type=\"search\" name=\"search\" id=\"search\">\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n    \n    \n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2016 Camper Cat</footer>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use tabindex to Specify the Order of Keyboard Focus for Several Elements",
      "dashedName":
        "use-tabindex-to-specify-the-order-of-keyboard-focus-for-several-elements"
    },
    {
      "id": "587d7791367417b2b2512ab3",
      "description": [
        "This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.",
        "Text is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property.",
        "<code>text-align: justify;</code> causes all lines of text except the last line to meet the left and right edges of the line box.",
        "<code>text-align: center;</code> centers the text",
        "<code>text-align: right;</code> right-aligns the text",
        "And <code>text-align: left;</code> (the default) left-aligns the text.",
        "<hr>",
        "Align the <code>h4</code> tag's text, which says \"Google\", to the center. Then justify the paragraph tag which contains information about how Google was founded."
      ],
      "tests": [
        {
          "text":
            "Your code should use the text-align property on the <code>h4</code> tag to set it to center.",
          "testString":
            "assert($('h4').css('text-align') == 'center', 'Your code should use the text-align property on the <code>h4</code> tag to set it to center.');"
        },
        {
          "text":
            "Your code should use the text-align property on the <code>p</code> tag to set it to justify.",
          "testString":
            "assert($('p').css('text-align') == 'justify', 'Your code should use the text-align property on the <code>p</code> tag to set it to justify.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    \n  }\n  p {\n    \n  }\n  .links {\n    margin-right: 20px;\n    \n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Visual Balance Using the textalign Property",
      "dashedName": "create-visual-balance-using-the-textalign-property"
    },
    {
      "id": "587d7791367417b2b2512ab4",
      "description": [
        "You can specify the width of an element using the <code>width</code> property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:",
        "<blockquote>img {<br>  width: 220px;<br>}</blockquote>",
        "<hr>",
        "Add a <code>width</code> property to the entire card and set it to an absolute value of 245px. Use the <code>fullCard</code> class to select the element."
      ],
      "tests": [
        {
          "text":
            "Your code should change the <code>width</code> property of the card to 245 pixels by using the <code>fullCard</code> class selector.",
          "testString":
            "assert(code.match(/.fullCard\\s*{[\\s\\S][^}]*\\n*^\\s*width\\s*:\\s*245px\\s*;/gm), 'Your code should change the <code>width</code> property of the card to 245 pixels by using the <code>fullCard</code> class selector.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    \n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Width of an Element Using the width Property",
      "dashedName": "adjust-the-width-of-an-element-using-the-width-property"
    },
    {
      "id": "587d7791367417b2b2512ab5",
      "description": [
        "You can specify the height of an element using the <code>height</code> property in CSS, similar to the <code>width</code> property. Here's an example that changes the height of an image to 20px:",
        "<blockquote>img {<br>  height: 20px;<br>}</blockquote>",
        "<hr>",
        "Add a <code>height</code> property to the <code>h4</code> tag and set it to 25px."
      ],
      "tests": [
        {
          "text":
            "Your code should change the <code>h4</code> <code>height</code> property to a value of 25 pixels.",
          "testString":
            "assert($('h4').css('height') == '25px', 'Your code should change the <code>h4</code> <code>height</code> property to a value of 25 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    \n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Height of an Element Using the height Property",
      "dashedName": "adjust-the-height-of-an-element-using-the-height-property"
    },
    {
      "id": "587d781a367417b2b2512ab7",
      "description": [
        "To make text bold, you can use the <code>strong</code> tag. This is often used to draw attention to text and symbolize that it is important. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element.",
        "<hr>",
        "Wrap a <code>strong</code> tag around \"Stanford University\" inside the <code>p</code> tag."
      ],
      "tests": [
        {
          "text":
            "Your code should add one <code>strong</code> tag to the markup.",
          "testString":
            "assert($('strong').length == 1, 'Your code should add one <code>strong</code> tag to the markup.');"
        },
        {
          "text":
            "The <code>strong</code> tag should be inside the <code>p</code> tag.",
          "testString":
            "assert($('p').children('strong').length == 1, 'The <code>strong</code> tag should be inside the <code>p</code> tag.');"
        },
        {
          "text":
            "The <code>strong</code> tag should wrap around the words \"Stanford University\".",
          "testString":
            "assert($('strong').text().match(/Stanford University/gi), 'The <code>strong</code> tag should wrap around the words \"Stanford University\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the strong Tag to Make Text Bold",
      "dashedName": "use-the-strong-tag-to-make-text-bold"
    },
    {
      "id": "587d781a367417b2b2512ab8",
      "description": [
        "To underline text, you can use the <code>u</code> tag. This is often used to signify that a section of text is important, or something to remember. With the <code>u</code> tag, the browser applies the CSS of <code>text-decoration: underline;</code> to the element.",
        "<hr>",
        "Wrap the <code>u</code> tag around the text \"Ph.D. students\". It should not include the parent <code>div</code> that has the class of <code>cardText</code>.",
        "<strong>Note</strong><br>Try to avoid using the <code>u</code> tag when it could be confused for a link. Anchor tags also have a default underlined formatting."
      ],
      "tests": [
        {
          "text": "Your code should add a <code>u</code> tag to the markup.",
          "testString":
            "assert($('u').length === 1, 'Your code should add a <code>u</code> tag to the markup.');"
        },
        {
          "text":
            "The <code>u</code> tag should wrap around the text \"Ph.D. students\".",
          "testString":
            "assert($('u').text() === 'Ph.D. students', 'The <code>u</code> tag should wrap around the text \"Ph.D. students\".');"
        },
        {
          "text":
            "The <code>u</code> tag should not wrap around the parent <code>div</code> tag.",
          "testString":
            "assert($('u').children('div').length === 0, 'The <code>u</code> tag should not wrap around the parent <code>div</code> tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the u Tag to Underline Text",
      "dashedName": "use-the-u-tag-to-underline-text"
    },
    {
      "id": "587d781a367417b2b2512ab9",
      "description": [
        "To emphasize text, you can use the <code>em</code> tag. This displays text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element.",
        "<hr>",
        "Wrap an <code>em</code> tag around the contents of the paragraph tag to give it emphasis."
      ],
      "tests": [
        {
          "text": "Your code should add an <code>em</code> tag to the markup.",
          "testString":
            "assert($('em').length == 1, 'Your code should add an <code>em</code> tag to the markup.');"
        },
        {
          "text":
            "The <code>em</code> tag should wrap around the contents of the <code>p</code> tag but not the <code>p</code> tag itself.",
          "testString":
            "assert($('p').children().length == 1 && $('em').children().length == 2, 'The <code>em</code> tag should wrap around the contents of the <code>p</code> tag but not the <code>p</code> tag itself.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the em Tag to Italicize Text",
      "dashedName": "use-the-em-tag-to-italicize-text"
    },
    {
      "id": "587d781b367417b2b2512aba",
      "description": [
        "To strikethrough text, which is when a horizontal line cuts across the characters, you can use the <code>del</code> tag. It shows that a section of text is no longer valid. With the <code>del</code> tag, the browser applies the CSS of <code>text-decoration: line-through;</code> to the element.",
        "<hr>",
        "Wrap the <code>del</code> tag around \"Google\" inside the <code>h4</code> tag and then add the word Alphabet beside it, which should not have the strikethrough formatting."
      ],
      "tests": [
        {
          "text":
            "Your code should add one <code>del</code> tag to the markup.",
          "testString":
            "assert($('del').length == 1, 'Your code should add one <code>del</code> tag to the markup.');"
        },
        {
          "text":
            "A <code>del</code> tag should wrap around the Google text in the <code>h4</code> tag. It should not contain the word Alphabet.",
          "testString":
            "assert($('del').text().match(/Google/gi) && !$('del').text().match(/Alphabet/gi), 'A <code>del</code> tag should wrap around the Google text in the <code>h4</code> tag. It should not contain the word Alphabet.');"
        },
        {
          "text":
            "Include the word Alphabet in the <code>h4</code> tag, without strikethrough formatting.",
          "testString":
            "assert($('h4').html().match(/Alphabet/gi), 'Include the word Alphabet in the <code>h4</code> tag, without strikethrough formatting.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the del Tag to Strikethrough Text",
      "dashedName": "use-the-del-tag-to-strikethrough-text"
    },
    {
      "id": "587d781b367417b2b2512abb",
      "description": [
        "You can use the <code>hr</code> tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.",
        "<hr>",
        "Add an <code>hr</code> tag underneath the <code>h4</code> which contains the card title.",
        "<strong>Note</strong><br>In HTML, <code>hr</code> is a self-closing tag, and therefore doesn't need a separate closing tag."
      ],
      "tests": [
        {
          "text": "Your code should add an <code>hr</code> tag to the markup.",
          "testString":
            "assert($('hr').length == 1, 'Your code should add an <code>hr</code> tag to the markup.');"
        },
        {
          "text":
            "The <code>hr</code> tag should come between the title and the paragraph.",
          "testString":
            "assert(code.match(/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<em>/gi), 'The <code>hr</code> tag should come between the title and the paragraph.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><del>Google</del>Alphabet</h4>\n      \n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Horizontal Line Using the hr Element",
      "dashedName": "create-a-horizontal-line-using-the-hr-element"
    },
    {
      "id": "587d781b367417b2b2512abc",
      "description": [
        "Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a <code>background-color</code> to the element holding the text you want to emphasize. This challenge uses <code>rgba()</code> instead of <code>hex</code> codes or normal <code>rgb()</code>.",
        "<blockquote>rgba stands for:<br>  r = red<br>  g = green<br>  b = blue<br>  a = alpha/level of opacity</blockquote>",
        "The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. <code>rgba()</code> is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.",
        "You'll use <code>background-color: rgba(45, 45, 45, 0.1)</code> for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.",
        "<hr>",
        "To make the text stand out more, adjust the <code>background-color</code> of the <code>h4</code> element to the given <code>rgba()</code> value.",
        "Also for the <code>h4</code>, remove the <code>height</code> property and add <code>padding</code> of 10px."
      ],
      "tests": [
        {
          "text":
            "Your code should add a <code>background-color</code> property to the <code>h4</code> element set to <code>rgba(45, 45, 45, 0.1)</code>.",
          "testString":
            "assert(code.match(/background-color:\\s*?rgba\\(\\s*?45\\s*?,\\s*?45\\s*?,\\s*?45\\s*?,\\s*?0?\\.1\\s*?\\)/gi), 'Your code should add a <code>background-color</code> property to the <code>h4</code> element set to <code>rgba(45, 45, 45, 0.1)</code>.');"
        },
        {
          "text":
            "Your code should add a <code>padding</code> property to the <code>h4</code> element and set it to 10 pixels.",
          "testString":
            "assert($('h4').css('padding-top') == '10px' && $('h4').css('padding-right') == '10px' && $('h4').css('padding-bottom') == '10px' && $('h4').css('padding-left') == '10px', 'Your code should add a <code>padding</code> property to the <code>h4</code> element and set it to 10 pixels.');"
        },
        {
          "text":
            "The <code>height</code> property on the <code>h4</code> element should be removed.",
          "testString":
            "assert(!($('h4').css('height') == '25px'), 'The <code>height</code> property on the <code>h4</code> element should be removed.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n    \n    \n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the backgroundcolor Property of Text",
      "dashedName": "adjust-the-backgroundcolor-property-of-text"
    },
    {
      "id": "587d781b367417b2b2512abd",
      "description": [
        "The font size of header tags (<code>h1</code> through <code>h6</code>) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the <code>font-size</code> property to adjust the size of the text in an element.",
        "<hr>",
        "To make the heading significantly larger than the paragraph, change the <code>font-size</code> of the <code>h4</code> tag to 27 pixels."
      ],
      "tests": [
        {
          "text":
            "Your code should add a <code>font-size</code> property to the <code>h4</code> element set to 27 pixels.",
          "testString":
            "assert($('h4').css('font-size') == '27px', 'Your code should add a <code>font-size</code> property to the <code>h4</code> element set to 27 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    \n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Size of a Header Versus a Paragraph Tag",
      "dashedName": "adjust-the-size-of-a-header-versus-a-paragraph-tag"
    },
    {
      "id": "587d781b367417b2b2512abe",
      "description": [
        "The <code>box-shadow</code> property applies one or more shadows to an element.",
        "The <code>box-shadow</code> property takes values for <code>offset-x</code> (how far to push the shadow horizontally from the element), <code>offset-y</code> (how far to push the shadow vertically from the element), <code>blur-radius</code>, <code>spread-radius</code> and a color value, in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.",
        "Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:",
        "<blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote>",
        "<hr>",
        "The element now has an id of <code>thumbnail</code>. With this selector, use the example CSS values above to place a <code>box-shadow</code> on the card."
      ],
      "tests": [
        {
          "text":
            "Your code should add a <code>box-shadow</code> property for the <code>thumbnail</code> id.",
          "testString":
            "assert(code.match(/#thumbnail\\s*?{\\s*?box-shadow/g), 'Your code should add a <code>box-shadow</code> property for the <code>thumbnail</code> id.');"
        },
        {
          "text":
            "You should use the given CSS for the <code>box-shadow</code> value.",
          "testString":
            "assert(code.match(/box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\),\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi), 'You should use the given CSS for the <code>box-shadow</code> value.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  \n  \n  \n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add a boxshadow to a Cardlike Element",
      "dashedName": "add-a-boxshadow-to-a-cardlike-element"
    },
    {
      "id": "587d781c367417b2b2512abf",
      "description": [
        "The <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.",
        "<blockquote>A value of 1 is opaque, which isn't transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote>",
        "The value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.",
        "<hr>",
        "Set the <code>opacity</code> of the anchor tags to 0.7 using <code>links</code> class to select them."
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>opacity</code> property to 0.7 on the anchor tags by selecting the class of <code>links</code>.",
          "testString":
            "assert.approximately(parseFloat($('.links').css('opacity')), 0.7, 0.1, 'Your code should set the <code>opacity</code> property to 0.7 on the anchor tags by selecting the class of <code>links</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    \n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Decrease the Opacity of an Element",
      "dashedName": "decrease-the-opacity-of-an-element"
    },
    {
      "id": "587d781c367417b2b2512ac0",
      "description": [
        "The <code>text-transform</code> property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.",
        "The following table shows how the different <code>text-transform</code>values change the example text \"Transform me\".",
        "<table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>Use the default value<tr><td><code>inherit</code><td>Use the <code>text-transform</code> value from the parent element<tr><td><code>none</code><td><strong>Default:</strong> Use the original text</td></table>",
        "<hr>",
        "Transform the text of the <code>h4</code> to be uppercase using the <code>text-transform</code> property."
      ],
      "tests": [
        {
          "text": "The <code>h4</code> text should be uppercase.",
          "testString":
            "assert($('h4').css('text-transform') === 'uppercase', 'The <code>h4</code> text should be uppercase.');"
        },
        {
          "text": "The original text of the h4 should not be changed.",
          "testString":
            "assert(($('h4').text() !== $('h4').text().toUpperCase()), 'The original text of the h4 should not be changed.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n    \n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <em><p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p></em>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the texttransform Property to Make Text Uppercase",
      "dashedName": "use-the-texttransform-property-to-make-text-uppercase"
    },
    {
      "id": "587d781c367417b2b2512ac2",
      "description": [
        "The <code>font-size</code> property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all <code>h1</code> through <code>h6</code> tags to balance the heading sizes.",
        "<hr>",
        "<ul><li>Set the <code>font-size</code> of the <code>h1</code> tag to 68px.</li><li>Set the <code>font-size</code> of the <code>h2</code> tag to 52px.</li><li>Set the <code>font-size</code> of the <code>h3</code> tag to 40px.</li><li>Set the <code>font-size</code> of the <code>h4</code> tag to 32px.</li><li>Set the <code>font-size</code> of the <code>h5</code> tag to 21px.</li><li>Set the <code>font-size</code> of the <code>h6</code> tag to 14px.</li></ul>"
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h1</code> tag to 68 pixels.",
          "testString":
            "assert($('h1').css('font-size') == '68px', 'Your code should set the <code>font-size</code> property for the <code>h1</code> tag to 68 pixels.');"
        },
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h2</code> tag to 52 pixels.",
          "testString":
            "assert($('h2').css('font-size') == '52px', 'Your code should set the <code>font-size</code> property for the <code>h2</code> tag to 52 pixels.');"
        },
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h3</code> tag to 40 pixels.",
          "testString":
            "assert($('h3').css('font-size') == '40px', 'Your code should set the <code>font-size</code> property for the <code>h3</code> tag to 40 pixels.');"
        },
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h4</code> tag to 32 pixels.",
          "testString":
            "assert($('h4').css('font-size') == '32px', 'Your code should set the <code>font-size</code> property for the <code>h4</code> tag to 32 pixels.');"
        },
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h5</code> tag to 21 pixels.",
          "testString":
            "assert($('h5').css('font-size') == '21px', 'Your code should set the <code>font-size</code> property for the <code>h5</code> tag to 21 pixels.');"
        },
        {
          "text":
            "Your code should set the <code>font-size</code> property for the <code>h6</code> tag to 14 pixels.",
          "testString":
            "assert($('h6').css('font-size') == '14px', 'Your code should set the <code>font-size</code> property for the <code>h6</code> tag to 14 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  \n  \n  \n  \n  \n  \n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the fontsize for Multiple Heading Elements",
      "dashedName": "set-the-fontsize-for-multiple-heading-elements"
    },
    {
      "id": "587d781c367417b2b2512ac3",
      "description": [
        "You set the <code>font-size</code> of each heading tag in the last challenge, here you'll adjust the <code>font-weight</code>.",
        "The <code>font-weight</code> property sets how thick or thin characters are in a section of text.",
        "<hr>",
        "<ul><li>Set the <code>font-weight</code> of the <code>h1</code> tag to 800.</li><li>Set the <code>font-weight</code> of the <code>h2</code> tag to 600.</li><li>Set the <code>font-weight</code> of the <code>h3</code> tag to 500.</li><li>Set the <code>font-weight</code> of the <code>h4</code> tag to 400.</li><li>Set the <code>font-weight</code> of the <code>h5</code> tag to 300.</li><li>Set the <code>font-weight</code> of the <code>h6</code> tag to 200.</li></ul>"
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h1</code> tag to 800.",
          "testString":
            "assert($('h1').css('font-weight') == '800', 'Your code should set the <code>font-weight</code> property for the <code>h1</code> tag to 800.');"
        },
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h2</code> tag to 600.",
          "testString":
            "assert($('h2').css('font-weight') == '600', 'Your code should set the <code>font-weight</code> property for the <code>h2</code> tag to 600.');"
        },
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h3</code> tag to 500.",
          "testString":
            "assert($('h3').css('font-weight') == '500', 'Your code should set the <code>font-weight</code> property for the <code>h3</code> tag to 500.');"
        },
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h4</code> tag to 400.",
          "testString":
            "assert($('h4').css('font-weight') == '400', 'Your code should set the <code>font-weight</code> property for the <code>h4</code> tag to 400.');"
        },
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h5</code> tag to 300.",
          "testString":
            "assert($('h5').css('font-weight') == '300', 'Your code should set the <code>font-weight</code> property for the <code>h5</code> tag to 300.');"
        },
        {
          "text":
            "Your code should set the <code>font-weight</code> property for the <code>h6</code> tag to 200.",
          "testString":
            "assert($('h6').css('font-weight') == '200', 'Your code should set the <code>font-weight</code> property for the <code>h6</code> tag to 200.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h1 {\n    font-size: 68px;\n    \n  }\n  h2 {\n    font-size: 52px;\n    \n  }\n  h3 {\n    font-size: 40px;\n    \n  }\n  h4 {\n    font-size: 32px;\n    \n  }\n  h5 {\n    font-size: 21px;\n    \n  }\n  h6 {\n    font-size: 14px;\n    \n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the fontweight for Multiple Heading Elements",
      "dashedName": "set-the-fontweight-for-multiple-heading-elements"
    },
    {
      "id": "587d781c367417b2b2512ac4",
      "description": [
        "The <code>font-size</code> property in CSS is not limited to headings, it can be applied to any element containing text.",
        "<hr>",
        "Change the value of the <code>font-size</code> property for the paragraph to 16px to make it more visible."
      ],
      "tests": [
        {
          "text":
            "Your <code>p</code> tag should have a <code>font-size</code> of 16 pixels.",
          "testString":
            "assert($('p').css('font-size') == '16px', 'Your <code>p</code> tag should have a <code>font-size</code> of 16 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  p {\n    font-size: 10px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the fontsize of Paragraph Text",
      "dashedName": "set-the-fontsize-of-paragraph-text"
    },
    {
      "id": "587d781d367417b2b2512ac5",
      "description": [
        "CSS offers the <code>line-height</code> property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.",
        "<hr>",
        "Add a <code>line-height</code> property to the <code>p</code> tag and set it to 25px."
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>line-height</code> of the <code>p</code> tag to 25 pixels.",
          "testString":
            "assert($('p').css('line-height') == '25px', 'Your code should set the <code>line-height</code> of the <code>p</code> tag to 25 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  p {\n    font-size: 16px;\n    \n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the lineheight of Paragraphs",
      "dashedName": "set-the-lineheight-of-paragraphs"
    },
    {
      "id": "587d781d367417b2b2512ac8",
      "description": [
        "This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.",
        "For example, the styling of an anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector. Here's the CSS to change the <code>color</code> of the anchor tag to red during its hover state:",
        "<blockquote>a:hover {<br>  color: red;<br>}</blockquote>",
        "<hr>",
        "The code editor has a CSS rule to style all <code>a</code> tags black. Add a rule so that when the user hovers over the <code>a</code> tag, the <code>color</code> is blue."
      ],
      "tests": [
        {
          "text":
            "The anchor tag <code>color</code> should remain black, only add CSS rules for the <code>:hover</code> state.",
          "testString":
            "assert($('a').css('color') == 'rgb(0, 0, 0)', 'The anchor tag <code>color</code> should remain black, only add CSS rules for the <code>:hover</code> state.');"
        },
        {
          "text":
            "The anchor tag should have a <code>color</code> of blue on hover.",
          "testString":
            "assert(code.match(/a:hover\\s*?{\\s*?color:\\s*?blue;\\s*?}/gi), 'The anchor tag should have a <code>color</code> of blue on hover.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  a {\n    color: #000;\n  }\n  \n  \n  \n</style>\n<a href=\"http://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Hover State of an Anchor Tag",
      "dashedName": "adjust-the-hover-state-of-an-anchor-tag"
    },
    {
      "id": "587d781e367417b2b2512ac9",
      "description": [
        "CSS treats each HTML element as its own box, which is usually referred to as the <code>CSS Box Model</code>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <code>normal flow</code> of a document, but CSS offers the position property to override it.",
        "When the position of an element is set to <code>relative</code>, it allows you to specify how CSS should move it <i>relative</i> to its current position in the normal flow of the page. It pairs with the CSS offset properties of <code>left</code> or <code>right</code>, and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or ems to move the item <i>away</i> from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:",
        "<blockquote>p {<br>  position: relative;<br>  bottom: 10px;<br>}</blockquote>",
        "Changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.",
        "<strong>Note</strong><br>Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.",
        "<hr>",
        "Change the <code>position</code> of the <code>h2</code> to <code>relative</code>, and use a CSS offset to move it 15 pixels away from the <code>top</code> of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements."
      ],
      "tests": [
        {
          "text":
            "The <code>h2</code> element should have a <code>position</code> property set to <code>relative</code>.",
          "testString":
            "assert($('h2').css('position') == 'relative', 'The <code>h2</code> element should have a <code>position</code> property set to <code>relative</code>.');"
        },
        {
          "text":
            "Your code should use a CSS offset to relatively position the <code>h2</code> 15px away from the <code>top</code> of where it normally sits.",
          "testString":
            "assert($('h2').css('top') == '15px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 15px away from the <code>top</code> of where it normally sits.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h2 {\n    \n    \n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change an Elements Relative Position",
      "dashedName": "change-an-elements-relative-position"
    },
    {
      "id": "587d781e367417b2b2512aca",
      "description": [
        "The CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the <code>h2</code> downwards. Likewise, using a left offset moves an item to the right.",
        "<img src='https://i.imgur.com/eWWi3gZ.gif' alt='' />",
        "<hr>",
        "Use CSS offsets to move the <code>h2</code> 15 pixels to the right and 10 pixels up."
      ],
      "tests": [
        {
          "text":
            "Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.",
          "testString":
            "assert($('h2').css('bottom') == '10px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.');"
        },
        {
          "text":
            "Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.",
          "testString":
            "assert($('h2').css('left') == '15px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n<style>\n  h2 {\n    position: relative;\n    \n    \n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Move a Relatively Positioned Element with CSS Offsets",
      "dashedName": "move-a-relatively-positioned-element-with-css-offsets"
    },
    {
      "id": "587d781e367417b2b2512acb",
      "description": [
        "The next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.",
        "One nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the body tag.",
        "<hr>",
        "Lock the <code>#searchbar</code> element to the top-right of its <code>section</code> parent by declaring its <code>position</code> as <code>absolute</code>. Give it <code>top</code> and <code>right</code> offsets of 50 pixels each."
      ],
      "tests": [
        {
          "text":
            "The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.",
          "testString":
            "assert($('#searchbar').css('position') == 'absolute', 'The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.');"
        },
        {
          "text":
            "Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString":
            "assert($('#searchbar').css('top') == '50px', 'Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        },
        {
          "text":
            "Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString":
            "assert($('#searchbar').css('right') == '50px', 'Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #searchbar {\n    \n    \n    \n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Lock an Element to its Parent with Absolute Positioning",
      "dashedName": "lock-an-element-to-its-parent-with-absolute-positioning"
    },
    {
      "id": "587d781e367417b2b2512acc",
      "description": [
        "The next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.",
        "One key difference from the <code>absolute</code> position is that the element won't move when the user scrolls.",
        "<hr>",
        "The navigation bar in the code is labeled with an id of <code>navbar</code>. Change its <code>position</code> to <code>fixed</code>, and offset it 0 pixels from the <code>top</code> and 0 pixels from the <code>left</code>. Notice the (lack of) impact to the <code>h1</code> position, it hasn't been pushed down to accommodate the navigation bar and would need to be adjusted separately."
      ],
      "tests": [
        {
          "text":
            "The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.",
          "testString":
            "assert($('#navbar').css('position') == 'fixed', 'The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.');"
        },
        {
          "text":
            "Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString":
            "assert($('#navbar').css('top') == '0px', 'Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        },
        {
          "text":
            "Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString":
            "assert($('#navbar').css('left') == '0px', 'Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #navbar {\n    \n    \n    \n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Lock an Element to the Browser Window with Fixed Positioning",
      "dashedName":
        "lock-an-element-to-the-browser-window-with-fixed-positioning"
    },
    {
      "id": "587d78a3367417b2b2512ace",
      "description": [
        "The next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.",
        "<hr>",
        "The given markup would work well as a two-column layout, with the <code>section</code> and <code>aside</code> elements next to each other. Give the <code>#left</code> item a <code>float</code> of <code>left</code> and the <code>#right</code> item a <code>float</code> of <code>right</code>."
      ],
      "tests": [
        {
          "text":
            "The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.",
          "testString":
            "assert($('#left').css('float') == 'left', 'The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.');"
        },
        {
          "text":
            "The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.",
          "testString":
            "assert($('#right').css('float') == 'right', 'The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<head>\n  <style>\n  #left {\n    \n    width: 50%;\n  }\n  #right {\n    \n    width: 40%;\n  }\n  aside, section {\n    padding: 2px;\n    background-color: #ccc;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Push Elements Left or Right with the float Property",
      "dashedName": "push-elements-left-or-right-with-the-float-property"
    },
    {
      "id": "587d78a3367417b2b2512acf",
      "description": [
        "When elements are positioned to overlap, the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.",
        "<hr>",
        "Add a <code>z-index</code> property to the element with the class name of <code>first</code> (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle)."
      ],
      "tests": [
        {
          "text":
            "The element with class <code>first</code> should have a <code>z-index</code> value of 2.",
          "testString":
            "assert($('.first').css('z-index') == '2', 'The element with class <code>first</code> should have a <code>z-index</code> value of 2.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n  \n  .first {\n    background-color: red;\n    position: absolute;\n    \n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n\n<div class=\"first\"></div>\n<div class=\"second\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Change the Position of Overlapping Elements with the zindex Property",
      "dashedName":
        "change-the-position-of-overlapping-elements-with-the-zindex-property"
    },
    {
      "id": "587d78a3367417b2b2512ad0",
      "description": [
        "Another positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.",
        "This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to block.",
        "<hr>",
        "Center the <code>div</code> on the page by adding a <code>margin</code> property with a value of auto."
      ],
      "tests": [
        {
          "text":
            "The <code>div</code> should have a <code>margin</code> set to auto.",
          "testString":
            "assert(code.match(/margin:\\s*?auto;/g), 'The <code>div</code> should have a <code>margin</code> set to auto.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n    \n  }\n</style>\n<div></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Center an Element Horizontally Using the margin Property",
      "dashedName": "center-an-element-horizontally-using-the-margin-property"
    },
    {
      "id": "587d78a3367417b2b2512ad1",
      "description": [
        "Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.",
        "The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.",
        "Some examples of complementary colors with their hex codes are:",
        "<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>",
        "There are many color picking tools available online that have an option to find the complement of a color.",
        "<strong>Note</strong><br>For all color challenges: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>blue</code> and <code>yellow</code> classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background."
      ],
      "tests": [
        {
          "text":
            "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString":
            "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.",
          "testString":
            "assert($('.yellow').css('background-color') == 'rgb(255, 255, 0)', 'The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: #000000;\n  }\n  .yellow {\n    background-color: #000000;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn about Complementary Colors",
      "dashedName": "learn-about-complementary-colors"
    },
    {
      "id": "587d78a4367417b2b2512ad2",
      "description": [
        "Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.",
        "Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. This adds six more colors to a simple color wheel for a total of twelve.",
        "There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.",
        "Here are three colors created using the split-complement scheme:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>Hex Code</th></tr><thead><tbody><tr><td>orange</td><td>#FF7D00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007D</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>orange</code>, <code>cyan</code>, and <code>raspberry</code> classes to their respective colors. Make sure to use the hex codes as orange and raspberry are not browser-recognized color names."
      ],
      "tests": [
        {
          "text":
            "The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.",
          "testString":
            "assert($('.orange').css('background-color') == 'rgb(255, 125, 0)', 'The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString":
            "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.",
          "testString":
            "assert($('.raspberry').css('background-color') == 'rgb(255, 0, 125)', 'The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  \n  .orange {\n    background-color: #000000;\n  }\n  \n  .cyan {\n    background-color: #000000;\n  }\n  \n  .raspberry {\n    background-color: #000000;\n  }\n  \n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n  \n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn about Tertiary Colors",
      "dashedName": "learn-about-tertiary-colors"
    },
    {
      "id": "587d78a4367417b2b2512ad3",
      "description": [
        "The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.",
        "<hr>",
        "This page will use a shade of teal (<code>#09A7A1</code>) as the dominant color, and its orange (<code>#FF790E</code>) complement to visually highlight the sign-up buttons. Change the <code>background-color</code> of both the <code>header</code> and <code>footer</code> from black to the teal color. Then change the <code>h2</code> text <code>color</code> to teal as well. Finally, change the <code>background-color</code> of the <code>button</code> to the orange color."
      ],
      "tests": [
        {
          "text":
            "The <code>header</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString":
            "assert($('header').css('background-color') == 'rgb(9, 167, 161)', 'The <code>header</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text":
            "The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString":
            "assert($('footer').css('background-color') == 'rgb(9, 167, 161)', 'The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text":
            "The <code>h2</code> element should have a <code>color</code> of #09A7A1.",
          "testString":
            "assert($('h2').css('color') == 'rgb(9, 167, 161)', 'The <code>h2</code> element should have a <code>color</code> of #09A7A1.');"
        },
        {
          "text":
            "The <code>button</code> element should have a <code>background-color</code> of #FF790E.",
          "testString":
            "assert($('button').css('background-color') == 'rgb(255, 121, 14)', 'The <code>button</code> element should have a <code>background-color</code> of #FF790E.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: black;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: black;\n  }  \n  button {\n    background-color: white;\n  }\n  footer {\n    background-color: black;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy;2016 FCC Kitchen</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Color of Various Elements to Complementary Colors",
      "dashedName":
        "adjust-the-color-of-various-elements-to-complementary-colors"
    },
    {
      "id": "587d78a4367417b2b2512ad4",
      "description": [
        "Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating these characteristics.",
        "<b>Hue</b> is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.",
        "<b>Saturation</b> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.",
        "<b>Lightness</b> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.",
        "Here are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> of each <code>div</code> element based on the class names (<code>green</code>, <code>cyan</code>, or <code>blue</code>) using <code>hsl()</code>. All three should have full saturation and normal lightness."
      ],
      "tests": [
        {
          "text":
            "Your code should use the <code>hsl()</code> property to declare the color green.",
          "testString":
            "assert(code.match(/\\.green\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color green.');"
        },
        {
          "text":
            "Your code should use the <code>hsl()</code> property to declare the color cyan.",
          "testString":
            "assert(code.match(/\\.cyan\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color cyan.');"
        },
        {
          "text":
            "Your code should use the <code>hsl()</code> property to declare the color blue.",
          "testString":
            "assert(code.match(/\\.blue\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color blue.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.",
          "testString":
            "assert($('.green').css('background-color') == 'rgb(0, 255, 0)', 'The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString":
            "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text":
            "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString":
            "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  \n  .green {\n    background-color: #000000;\n  }\n  \n  .cyan {\n    background-color: #000000;\n  }\n  \n  .blue {\n    background-color: #000000;\n  }\n  \n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n  \n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Hue of a Color",
      "dashedName": "adjust-the-hue-of-a-color"
    },
    {
      "id": "587d78a4367417b2b2512ad5",
      "description": [
        "The <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.",
        "<hr>",
        "The navigation bar on this site currently inherits its <code>background-color</code> from the <code>header</code> element. Starting with that color as a base, add a <code>background-color</code> to the <code>nav</code> element so it uses the same cyan hue, but has 80% saturation and 25% lightness values to change its tone and shade."
      ],
      "tests": [
        {
          "text":
            "The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.",
          "testString":
            "assert(code.match(/nav\\s*?{\\s*?background-color:\\s*?hsl\\(180,\\s*?80%,\\s*?25%\\)/gi), 'The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n  \n  nav {\n  \n  }\n  \n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n  \n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  \n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  \n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n  \n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"\">Home</a></li>\n      <li><a href=\"\">Classes</a></li>\n      <li><a href=\"\">Contact</a></li>\n    </ul>\n  </nav>\n</header>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Tone of a Color",
      "dashedName": "adjust-the-tone-of-a-color"
    },
    {
      "id": "587d78a5367417b2b2512ad6",
      "description": [
        "Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property's <code>linear-gradient()</code> function. Here is the general syntax:",
        "<code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code>",
        "The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a vertical gradient and 45deg is angled like a backslash. The following arguments specify the order of colors used in the gradient.",
        "Example:",
        "<code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code>",
        "<hr>",
        "Use a <code>linear-gradient()</code> for the <code>div</code> element's <code>background</code>, and set it from a direction of 35 degrees to change the color from <code>#CCFFFF</code> to <code>#FFCCCC</code>.",
        "<strong>Note</strong><br>While there are other ways to specify a color value, like <code>rgb()</code> or <code>hsl()</code>, use hex values for this challenge."
      ],
      "tests": [
        {
          "text":
            "The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.",
          "testString":
            "assert(code.match(/background:\\s*?linear-gradient\\(35deg,\\s*?(#CCFFFF|#CFF),\\s*?(#FFCCCC|#FCC)\\);/gi), 'The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  div{ \n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n    \n  }\n\n</style>\n\n<div></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Gradual CSS Linear Gradient",
      "dashedName": "create-a-gradual-css-linear-gradient"
    },
    {
      "id": "587d78a5367417b2b2512ad7",
      "description": [
        "The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.",
        "The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.",
        "In the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.",
        "For this example, it helps to think about the color stops as pairs where every two colors blend together.",
        "<code>0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code>",
        "If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.",
        "<hr>",
        "Make stripes by changing the <code>repeating-linear-gradient()</code> to use a gradient angle of <code>45deg</code>, then set the first two color stops to <code>yellow</code>, and finally the second two color stops to <code>black</code>."
      ],
      "tests": [
        {
          "text":
            "The angle of the <code>repeating-linear-gradient()</code> should be 45deg.",
          "testString":
            "assert(code.match(/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should be 45deg.');"
        },
        {
          "text":
            "The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg",
          "testString":
            "assert(!code.match(/90deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg');"
        },
        {
          "text": "The color stop at 0 pixels should be <code>yellow</code>.",
          "testString":
            "assert(code.match(/yellow\\s+?0px/gi), 'The color stop at 0 pixels should be <code>yellow</code>.');"
        },
        {
          "text": "One color stop at 40 pixels should be <code>yellow</code>.",
          "testString":
            "assert(code.match(/yellow\\s+?40px/gi), 'One color stop at 40 pixels should be <code>yellow</code>.');"
        },
        {
          "text":
            "The second color stop at 40 pixels should be <code>black</code>.",
          "testString":
            "assert(code.match(/yellow\\s+?40px,\\s*?black\\s+?40px/gi), 'The second color stop at 40 pixels should be <code>black</code>.');"
        },
        {
          "text":
            "The last color stop at 80 pixels should be <code>black</code>.",
          "testString":
            "assert(code.match(/black\\s+?80px/gi), 'The last color stop at 80 pixels should be <code>black</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  div{ \n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      90deg,\n      yellow 0px,\n      blue 40px,\n      green 40px,\n      red 80px\n    );\n  }\n\n</style>\n\n<div></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a CSS Linear Gradient to Create a Striped Element",
      "dashedName": "use-a-css-linear-gradient-to-create-a-striped-element"
    },
    {
      "id": "587d78a5367417b2b2512ad8",
      "description": [
        "One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.",
        "<hr>",
        "Using the url of <code>https://i.imgur.com/MJAkxbh.png</code>, set the <code>background</code> of the whole page with the <code>body</code> selector."
      ],
      "tests": [
        {
          "text":
            "Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.",
          "testString":
            "assert(code.match(/background:\\s*?url\\((\"|')https:\\/\\/i\\.imgur\\.com\\/MJAkxbh\\.png(\"|')\\)/gi), 'Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<style>\n  body {\n    \n  }\n</style>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Texture by Adding a Subtle Pattern as a Background Image",
      "dashedName":
        "create-texture-by-adding-a-subtle-pattern-as-a-background-image"
    },
    {
      "id": "587d78a5367417b2b2512ad9",
      "description": [
        "To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:",
        "<blockquote>p {<br>  transform:scale(2);<br>}</blockquote>",
        "<hr>",
        "Increase the size of the element with the id of <code>ball2</code> to 1.5 times its original size."
      ],
      "tests": [
        {
          "text":
            "Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.",
          "testString":
            "assert(code.match(/#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);/gi), 'Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .ball { \n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left:20%;\n  }\n  #ball2 {\n    left:65%;\n    \n  }\n\n\n</style>\n\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the CSS Transform scale Property to Change the Size of an Element",
      "dashedName":
        "use-the-css-transform-scale-property-to-change-the-size-of-an-element"
    },
    {
      "id": "587d78a5367417b2b2512ada",
      "description": [
        "The <code>transform</code> property has a variety of functions that lets you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.",
        "Here's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:",
        "<blockquote>p:hover {<br>  transform: scale(2.1);<br>}</blockquote>",
        "<hr>",
        "Add a CSS rule for the <code>hover</code> state of the <code>div</code> and use the <code>transform</code> property to scale the <code>div</code> element to 1.1 times its original size when a user hovers over it."
      ],
      "tests": [
        {
          "text":
            "The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.",
          "testString":
            "assert(code.match(/div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi), 'The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div { \n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n  \n  \n  \n</style>\n\n<div></div>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the CSS Transform scale Property to Scale an Element on Hover",
      "dashedName":
        "use-the-css-transform-scale-property-to-scale-an-element-on-hover"
    },
    {
      "id": "587d78a6367417b2b2512adb",
      "description": [
        "The next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.",
        "The following code skews the paragraph element by -32 degrees along the X-axis.",
        "<blockquote>p {<br>  transform: skewX(-32deg);<br>}</blockquote>",
        "<hr>",
        "Skew the element with the id of <code>bottom</code> by 24 degrees along the X-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text":
            "The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.",
          "testString":
            "assert(code.match(/#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g), 'The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div { \n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n    \n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the CSS Transform Property skewX to Skew an Element Along the XAxis",
      "dashedName":
        "use-the-css-transform-property-skewx-to-skew-an-element-along-the-xaxis"
    },
    {
      "id": "587d78a6367417b2b2512adc",
      "description": [
        "Given that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.",
        "<hr>",
        "Skew the element with the id of <code>top</code> -10 degrees along the Y-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text":
            "The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.",
          "testString":
            "assert(code.match(/#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g), 'The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div { \n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n    \n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the CSS Transform Property skewY to Skew an Element Along the YAxis",
      "dashedName":
        "use-the-css-transform-property-skewy-to-skew-an-element-along-the-yaxis"
    },
    {
      "id": "587d78a6367417b2b2512add",
      "description": [
        "By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element's corners.",
        "You will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.",
        "In order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.",
        "You may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a color value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.",
        "<hr>",
        "Manipulate the square element in the editor to create the moon shape. First, change the <code>background-color</code> to transparent, then set the <code>border-radius</code> property to 50% to make the circular shape. Finally, change the <code>box-shadow</code> property to set the <code>offset-x</code> to 25px, the <code>offset-y</code> to 10px, <code>blur-radius</code> to 0, <code>spread-radius</code> to 0, and color to blue."
      ],
      "tests": [
        {
          "text":
            "The value of the <code>background-color</code> property should be set to <code>transparent</code>.",
          "testString":
            "assert(code.match(/background-color:\\s*?transparent;/gi), 'The value of the <code>background-color</code> property should be set to <code>transparent</code>.');"
        },
        {
          "text":
            "The value of the <code>border-radius</code> property should be set to <code>50%</code>.",
          "testString":
            "assert(code.match(/border-radius:\\s*?50%;/gi), 'The value of the <code>border-radius</code> property should be set to <code>50%</code>.');"
        },
        {
          "text":
            "The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.",
          "testString":
            "assert(code.match(/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi), 'The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n.center\n{\n  position: absolute;\n  margin: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100px;\n  height: 100px;\n  \n  background-color: blue;\n  border-radius: 0px;\n  box-shadow: 25px 10px 10px 10px green; \n}\n\n</style>\n<div class=\"center\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Graphic Using CSS",
      "dashedName": "create-a-graphic-using-css"
    },
    {
      "id": "587d78a6367417b2b2512ade",
      "description": [
        "One of the most popular shapes in the world is the heart shape, and this challenge creates it with raw CSS. But first, you need to understand the <code>:before</code> and <code>:after</code> selectors. These selectors are used to add something before or after a selected element. In the following example, a <code>:before</code> selector is used to add a rectangle to an element with the class <code>heart</code>:",
        "<blockquote>.heart:before {<br>  content: \"\";<br>  background-color: yellow;<br>  border-radius: 25%;<br>  position: absolute;<br>  height: 50px;<br>  width: 70px;<br>  top: -50px;<br>  left: 5px;<br>}</blockquote>",
        "For the <code>:before</code> and <code>:after</code> selectors to function properly, they must have a defined <code>content</code> property. It usually has content such as a photo or text. When the <code>:before</code> and <code>:after</code> selectors add shapes, the <code>content</code> property is still required, but it's set to an empty string.",
        "In the above example, the element with the class of <code>heart</code> has a <code>:before</code> selector that produces a yellow rectangle with <code>height</code> and <code>width</code> of 50px and 70px, respectively. This rectangle has round corners due to its 25% border radius and is positioned absolutely at 5px from the <code>left</code> and 50px above the <code>top</code> of the element.",
        "<hr>",
        "Transform the element on the screen to a heart. In the <code>heart:after</code> selector, change the <code>background-color</code> to pink and the <code>border-radius</code> to 50%.",
        "Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees. (<code>rotate()</code> works the same way that <code>skewX()</code> and <code>skewY()</code> do).",
        "Finally, in the <code>heart:before</code> selector, set its <code>content</code> property to an empty string."
      ],
      "tests": [
        {
          "text":
            "The <code>background-color</code> property of the <code>heart:after</code> selector should be pink.",
          "testString":
            "assert(code.match(/\\.heart:after\\s*?{\\s*?background-color:\\s*?pink;/gi), 'The <code>background-color</code> property of the <code>heart:after</code> selector should be pink.');"
        },
        {
          "text":
            "The <code>border-radius</code> of the <code>heart:after</code> selector should be 50%.",
          "testString":
            "assert(code.match(/border-radius:\\s*?50%/gi).length == 2, 'The <code>border-radius</code> of the <code>heart:after</code> selector should be 50%.');"
        },
        {
          "text":
            "The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.",
          "testString":
            "assert(code.match(/transform:\\s*?rotate\\(-45deg\\)/gi), 'The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.');"
        },
        {
          "text":
            "The <code>content</code> of the <code>heart:before</code> selector should be an empty string.",
          "testString":
            "assert(code.match(/\\.heart:before\\s*?{\\s*?content:\\s*?(\"|')\\1;/gi), 'The <code>content</code> of the <code>heart:before</code> selector should be an empty string.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n.heart {\n  position: absolute;\n  margin: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: pink;\n  height: 50px;\n  width: 50px;\n  transform: ;\n}\n.heart:after {\n  background-color: blue;\n  content: \"\";\n  border-radius: 25%;\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  top: 0px;\n  left: 25px;\n}\n.heart:before {\n  content: ;\n  background-color: pink;\n  border-radius: 50%;\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  top: -25px;\n  left: 0px;\n}\n</style>\n<div class = \"heart\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a More Complex Shape Using CSS and HTML",
      "dashedName": "create-a-more-complex-shape-using-css-and-html"
    },
    {
      "id": "587d78a7367417b2b2512adf",
      "description": [
        "To animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:",
        "<code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.",
        "<code>animation-duration</code> sets the length of time for the animation.",
        "<code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of <code>@keyframes</code> and the animation properties:",
        "<blockquote>#anim {<br>  animation-name: colorful;<br>  animation-duration: 3s;<br>}<br>@keyframes colorful {<br>  0% {<br>   background-color: blue;<br>  }<br>  100% {<br>    background-color: yellow;<br>  }<br>}</blockquote>",
        "For the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.",
        "<hr>",
        "Create an animation for the element with the id <code>rect</code>, by setting the <code>animation-name</code> to rainbow and the <code>animation-duration</code> to 4 seconds. Next, declare a <code>@keyframes</code> rule, and set the <code>background-color</code> at the beginning of the animation (<code>0%</code>) to blue, the middle of the animation (<code>50%</code>) to green, and the end of the animation (<code>100%</code>) to yellow."
      ],
      "tests": [
        {
          "text":
            "The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.",
          "testString":
            "assert($('#rect').css('animation-name') == 'rainbow', 'The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.');"
        },
        {
          "text":
            "The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.",
          "testString":
            "assert($('#rect').css('animation-duration') == '4s', 'The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.",
          "testString":
            "assert(code.match(/@keyframes\\s+?rainbow\\s*?{/g), 'The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.",
          "testString":
            "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.",
          "testString":
            "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.",
          "testString":
            "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n    \n    \n  }\n  \n  \n  \n  \n</style>\n<div id=\"rect\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn How the CSS keyframes and animation Properties Work",
      "dashedName": "learn-how-the-css-keyframes-and-animation-properties-work"
    },
    {
      "id": "587d78a7367417b2b2512ae0",
      "description": [
        "You can use CSS <code>@keyframes</code> to change the color of a button in its hover state.",
        "Here's an example of changing the width of an image on hover:",
        "<blockquote>&lt;style&gt;<br>  img:hover {<br>    animation-name: width;<br>    animation-duration: 500ms;<br>  }<br><br>  @keyframes width {<br>    100% {<br>      width: 40px;<br>    }<br>  }<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google's Logo&quot; /&gt;</blockquote>",
        "<hr>",
        "Note that <code>ms</code> stands for milliseconds, where 1000ms is equal to 1s.",
        "Use CSS <code>@keyframes</code> to change the <code>background-color</code> of the <code>button</code> element so it becomes <code>#4791d0</code> when a user hovers over it. The <code>@keyframes</code> rule should only have an entry for <code>100%</code>."
      ],
      "tests": [
        {
          "text":
            "The @keyframes rule should use the <code>animation-name</code> background-color.",
          "testString":
            "assert(code.match(/@keyframes\\s+?background-color\\s*?{/g), 'The @keyframes rule should use the <code>animation-name</code> background-color.');"
        },
        {
          "text":
            "There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.",
          "testString":
            "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi), 'There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  \n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n  \n  \n</style>\n  \n<button>Register</button>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use CSS Animation to Change the Hover State of a Button",
      "dashedName": "use-css-animation-to-change-the-hover-state-of-a-button"
    },
    {
      "id": "58a7a6ebf9a6318348e2d5aa",
      "description": [
        "That's great, but it doesn't work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.",
        "This can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:",
        "<code>animation-fill-mode: forwards;</code>",
        "<hr>",
        "Set the <code>animation-fill-mode</code> property of <code>button:hover</code> to <code>forwards</code> so the button stays highlighted when a user hovers over it."
      ],
      "tests": [
        {
          "text":
            "<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.",
          "testString":
            "assert(code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi), '<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    /* add your code below this line */\n    \n    /* add your code above this line */\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Modify Fill Mode of an Animation",
      "dashedName": "modify-fill-mode-of-an-animation"
    },
    {
      "id": "587d78a7367417b2b2512ae1",
      "description": [
        "When elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.",
        "As shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.",
        "<blockquote>@keyframes rainbow {<br>  0% {<br>    background-color: blue;<br>    top: 0px;<br>  }<br>  50% {<br>    background-color: green;<br>    top: 50px;<br>  }<br>  100% {<br>    background-color: yellow;<br>    top: 0px;<br>  }<br>}</blockquote>",
        "<hr>",
        "Add a horizontal motion to the <code>div</code> animation. Using the <code>left</code> offset property, add to the <code>@keyframes</code> rule so rainbow starts at 0 pixels at <code>0%</code>, moves to 25 pixels at <code>50%</code>, and ends at -25 pixels at <code>100%</code>. Don't replace the <code>top</code> property in the editor - the animation should have both vertical and horizontal motion."
      ],
      "tests": [
        {
          "text":
            "The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.",
          "testString":
            "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?top:\\s*?0px;\\s*?left:\\s*?0px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.",
          "testString":
            "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?top:\\s*?50px;\\s*?left:\\s*?25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.');"
        },
        {
          "text":
            "The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.",
          "testString":
            "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?top:\\s*?0px;\\s*?left:\\s*?-25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n#rect {\n  animation-name: rainbow;\n  animation-duration: 4s;\n}\n\n@keyframes rainbow {\n  0% {\n    background-color: blue;\n    top: 0px;\n    \n  }\n  50% {\n    background-color: green;\n    top: 50px;\n    \n  }\n  100% {\n    background-color: yellow;\n    top: 0px;\n    \n  }\n}\n</style>\n\n<div id=\"rect\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Movement Using CSS Animation",
      "dashedName": "create-movement-using-css-animation"
    },
    {
      "id": "587d78a7367417b2b2512ae2",
      "description": [
        "For this challenge, you'll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.",
        "In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.",
        "<hr>",
        "Target the element with the id of <code>ball</code> and add the <code>opacity</code> property set to 0.1 at <code>50%</code>, so the element fades as it moves to the right."
      ],
      "tests": [
        {
          "text":
            "The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.",
          "testString":
            "assert(code.match(/@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi), 'The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n      \n    }\n  }\n\n</style>\n\n<div id=\"ball\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Visual Direction by Fading an Element from Left to Right",
      "dashedName":
        "create-visual-direction-by-fading-an-element-from-left-to-right"
    },
    {
      "id": "587d78a8367417b2b2512ae3",
      "description": [
        "The previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here's an example:",
        "<code>animation-iteration-count: 3;</code>",
        "In this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to infinite.",
        "<hr>",
        "To keep the ball bouncing on the right on a continuous loop, change the <code>animation-iteration-count</code> property to infinite."
      ],
      "tests": [
        {
          "text":
            "The <code>animation-iteration-count</code> property should have a value of infinite.",
          "testString":
            "assert($('#ball').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property should have a value of infinite.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: 3;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Animate Elements Continually Using an Infinite Animation Count",
      "dashedName":
        "animate-elements-continually-using-an-infinite-animation-count"
    },
    {
      "id": "587d78a8367417b2b2512ae4",
      "description": [
        "Here's one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.",
        "The one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.",
        "<hr>",
        "Keep the heart beating by adding the <code>animation-iteration-count</code> property for both the <code>back</code> class and the <code>heart</code> class and setting the value to infinite. The <code>heart:before</code> and <code>heart:after</code> selectors do not need any animation properties."
      ],
      "tests": [
        {
          "text":
            "The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.",
          "testString":
            "assert($('.heart').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.');"
        },
        {
          "text":
            "The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.",
          "testString":
            "assert($('.back').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s; \n    \n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    \n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make a CSS Heartbeat using an Infinite Animation Count",
      "dashedName": "make-a-css-heartbeat-using-an-infinite-animation-count"
    },
    {
      "id": "587d78a8367417b2b2512ae5",
      "description": [
        "There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.",
        "To illustrate, the animation on the right consists of two \"stars\" that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.",
        "<hr>",
        "Alter the animation rate for the element with the class name of <code>star-1</code> by changing its <code>@keyframes</code> rule to 50%."
      ],
      "tests": [
        {
          "text":
            "The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.",
          "testString":
            "assert(code.match(/twinkle-1\\s*?{\\s*?50%/g), 'The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%; \n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Animate Elements at Variable Rates",
      "dashedName": "animate-elements-at-variable-rates"
    },
    {
      "id": "587d78a8367417b2b2512ae6",
      "description": [
        "In the previous challenge, you changed the animation rate for an animated element by altering its <code>@keyframes</code> rule. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.",
        "In the animation running in the code editor, there are three \"stars\" in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.",
        "<hr>",
        "Set the <code>animation-duration</code> of the elements with the classes <code>star-1</code>, <code>star-2</code>, and <code>star-3</code> to 1s, 0.9s, and 1.1s, respectively."
      ],
      "tests": [
        {
          "text":
            "The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.",
          "testString":
            "assert($('.star-1').css('animation-duration') == '1s', 'The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.');"
        },
        {
          "text":
            "The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.",
          "testString":
            "assert($('.star-2').css('animation-duration') == '0.9s', 'The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.');"
        },
        {
          "text":
            "The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.",
          "testString":
            "assert($('.star-3').css('animation-duration') == '1.1s', 'The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%; \n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Animate Multiple Elements at Variable Rates",
      "dashedName": "animate-multiple-elements-at-variable-rates"
    },
    {
      "id": "587d78a8367417b2b2512ae7",
      "description": [
        "In CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.",
        "There are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.",
        "<hr>",
        "For the elements with id of <code>ball1</code> and <code>ball2</code>, add an <code>animation-timing-function</code> property to each, and set <code>#ball1</code> to <code>linear</code>, and <code>#ball2</code> to <code>ease-out</code>. Notice the difference between how the elements move during the animation but end together, since they share the same <code>animation-duration</code> of 2 seconds."
      ],
      "tests": [
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.",
          "testString":
            "assert($('#ball1').css('animation-timing-function') == 'linear', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.');"
        },
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.",
          "testString":
            "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;  \n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 { \n    left:27%;\n    \n  }\n  #ball2 { \n    left:56%;\n    \n  }\n\n@keyframes bounce {\n  0% {\n    top: 0px;\n  } \n  100% {\n    top: 249px;\n  }\n} \n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change Animation Timing with Keywords",
      "dashedName": "change-animation-timing-with-keywords"
    },
    {
      "id": "587d78a9367417b2b2512ae8",
      "description": [
        "The last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.",
        "In CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.",
        "The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an example of a Bezier curve in CSS code:",
        "<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>",
        "In the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.",
        "<hr>",
        "For the element with the id of <code>ball1</code>, change the value of the <code>animation-timing-function</code> property from <code>linear</code> to its equivalent <code>cubic-bezier</code> function value. Use the point values given in the example above."
      ],
      "tests": [
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.",
          "testString":
            "assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.');"
        },
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.",
          "testString":
            "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;  \n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 { \n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #ball2 { \n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n@keyframes bounce {\n  0% {\n    top: 0px;\n  } \n  100% {\n    top: 249px;\n  }\n} \n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn How Bezier Curves Work",
      "dashedName": "learn-how-bezier-curves-work"
    },
    {
      "id": "587d78a9367417b2b2512ae9",
      "description": [
        "A previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.",
        "In general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style:",
        "<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>",
        "Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) then it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.",
        "<hr>",
        "To see the effect of this Bezier curve in action, change the <code>animation-timing-function</code> of the element with id of <code>red</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1. This will make both elements progress through the animation similarly."
      ],
      "tests": [
        {
          "text":
            "The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .",
          "testString":
            "assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .');"
        },
        {
          "text":
            "The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.",
          "testString":
            "assert($('#red').css('animation-timing-function') !== 'linear', 'The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.');"
        },
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.",
          "testString":
            "assert($('#blue').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a Bezier Curve to Move a Graphic",
      "dashedName": "use-a-bezier-curve-to-move-a-graphic"
    },
    {
      "id": "587d78a9367417b2b2512aea",
      "description": [
        "This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.",
        "The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.",
        "The following cubic Bezier curve simulates a juggling movement:",
        "<code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code>",
        "Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on an 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.",
        "<hr>",
        "Change value of the <code>animation-timing-function</code> of the element with the id of <code>green</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649."
      ],
      "tests": [
        {
          "text":
            "The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.",
          "testString":
            "assert($('#green').css('animation-timing-function') == 'cubic-bezier(0.311, 0.441, 0.444, 1.649)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .balls {\n    border-radius: 50%;\n    top: 249px;\n    position: fixed;  \n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Motion More Natural Using a Bezier Curve",
      "dashedName": "make-motion-more-natural-using-a-bezier-curve"
    },
    {
      "id": "bad87fee1348bd9aedf08803",
      "description": [
        "Now let's change the color of some of our text.",
        "We can do this by changing the <code>style</code> of your <code>h2</code> element.",
        "The property that is responsible for the color of an element's text is the <code>color</code> style property.",
        "Here's how you would set your <code>h2</code> element's text color to blue:",
        "<code>&#60;h2 style=\"color: blue;\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "Note that it is a good practice to end inline <code>style</code> declarations with a <code>;</code> .",
        "<hr>",
        "Change your <code>h2</code> element's style so that its text color is red."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be red.",
          "testString":
            "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your <code>h2</code> element should be red.');"
        },
        {
          "text":
            "Your <code>style</code> declaration should end with a <code>;</code> .",
          "testString":
            "assert(code.match(/<h2\\s+style\\s*=\\s*(\\'|\")\\s*color\\s*:\\s*(?:rgb\\(\\s*255\\s*,\\s*0\\s*,\\s*0\\s*\\)|rgb\\(\\s*100%\\s*,\\s*0%\\s*,\\s*0%\\s*\\)|red|#ff0000|#f00|hsl\\(\\s*0\\s*,\\s*100%\\s*,\\s*50%\\s*\\))\\s*\\;(\\'|\")>\\s*CatPhotoApp\\s*<\\/h2>/),' Your <code>style</code> declaration should end with a <code>;</code> .');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the Color of Text",
      "dashedName": "change-the-color-of-text"
    },
    {
      "id": "bad87fee1348bd9aedf08805",
      "description": [
        "With CSS, there are hundreds of CSS <code>properties</code> that you can use to change the way an element looks on your page.",
        "When you entered <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, you were styling that individual <code>h2</code> element with <code>inline CSS</code>, which stands for <code>Cascading Style Sheets</code>.",
        "That's one way to specify the style of an element, but there's a better way to apply <code>CSS</code>.",
        "At the top of your code, create a <code>style</code> block like this:",
        "<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>",
        "Inside that style block, you can create a <code>CSS selector</code> for all <code>h2</code> elements. For example, if you wanted all <code>h2</code> elements to be red, you would add a style rule that looks like this:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>",
        "Note that it's important to have both opening and closing curly braces (<code>{</code> and <code>}</code>) around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules.",
        "<hr>",
        "Delete your <code>h2</code> element's style attribute, and instead create a CSS <code>style</code> block. Add the necessary CSS to turn all <code>h2</code> elements blue."
      ],
      "tests": [
        {
          "text":
            "Remove the style attribute from your <code>h2</code> element.",
          "testString":
            "assert(!$(\"h2\").attr(\"style\"), 'Remove the style attribute from your <code>h2</code> element.');"
        },
        {
          "text": "Create a <code>style</code> element.",
          "testString":
            "assert($(\"style\") && $(\"style\").length > 1, 'Create a <code>style</code> element.');"
        },
        {
          "text": "Your <code>h2</code> element should be blue.",
          "testString":
            "assert($(\"h2\").css(\"color\") === \"rgb(0, 0, 255)\", 'Your <code>h2</code> element should be blue.');"
        },
        {
          "text":
            "Ensure that your stylesheet <code>h2</code> declaration is valid with a semicolon and closing brace.",
          "testString":
            "assert(code.match(/h2\\s*\\{\\s*color\\s*:.*;\\s*\\}/g), 'Ensure that your stylesheet <code>h2</code> declaration is valid with a semicolon and closing brace.');"
        },
        {
          "text":
            "Make sure all your <code>style</code> elements are valid and have a closing tag.",
          "testString":
            "assert(code.match(/<\\/style>/g) && code.match(/<\\/style>/g).length === (code.match(/<style((\\s)*((type|media|scoped|title|disabled)=\"[^\"]*\")?(\\s)*)*>/g) || []).length, 'Make sure all your <code>style</code> elements are valid and have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2 style=\"color: red\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use CSS Selectors to Style Elements",
      "dashedName": "use-css-selectors-to-style-elements"
    },
    {
      "id": "bad87fee1348bd9aecf08806",
      "description": [
        "Classes are reusable styles that can be added to HTML elements.",
        "Here's an example CSS class declaration:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "You can see that we've created a CSS class called <code>blue-text</code> within the <code>&#60;style&#62;</code> tag.",
        "You can apply a class to an HTML element like this:",
        "<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>",
        "Note that in your CSS <code>style</code> element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.",
        "<hr>",
        "Inside your <code>style</code> element, change the <code>h2</code> selector to <code>.red-text</code> and update the color's value from <code>blue</code> to <code>red</code>.",
        "Give your <code>h2</code> element the <code>class</code> attribute with a value of <code>'red-text'</code>."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be red.",
          "testString":
            "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your <code>h2</code> element should be red.');"
        },
        {
          "text":
            "Your <code>h2</code> element should have the class <code>red-text</code>.",
          "testString":
            "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should have the class <code>red-text</code>.');"
        },
        {
          "text":
            "Your stylesheet should declare a <code>red-text</code> class and have its color set to red.",
          "testString":
            "assert(code.match(/\\.red-text\\s*\\{\\s*color\\s*:\\s*red;\\s*\\}/g), 'Your stylesheet should declare a <code>red-text</code> class and have its color set to red.');"
        },
        {
          "text":
            "Do not use inline style declarations like <code>style=\"color&#58; red\"</code> in your <code>h2</code> element.",
          "testString":
            "assert($(\"h2\").attr(\"style\") === undefined, 'Do not use inline style declarations like <code>style=\"color&#58; red\"</code> in your <code>h2</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  h2 {\n    color: blue;\n  }\n</style>\n\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a CSS Class to Style an Element",
      "dashedName": "use-a-css-class-to-style-an-element"
    },
    {
      "id": "bad87fee1348bd9aefe08806",
      "description": [
        "Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your <code>red-text</code> class to the first <code>p</code> element."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> element should be red.",
          "testString":
            "assert($(\"h2\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your <code>h2</code> element should be red.');"
        },
        {
          "text":
            "Your <code>h2</code> element should have the class <code>red-text</code>.",
          "testString":
            "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should have the class <code>red-text</code>.');"
        },
        {
          "text": "Your first <code>p</code> element should be red.",
          "testString":
            "assert($(\"p:eq(0)\").css(\"color\") === \"rgb(255, 0, 0)\", 'Your first <code>p</code> element should be red.');"
        },
        {
          "text":
            "Your second and third <code>p</code> elements should not be red.",
          "testString":
            "assert(!($(\"p:eq(1)\").css(\"color\") === \"rgb(255, 0, 0)\") && !($(\"p:eq(2)\").css(\"color\") === \"rgb(255, 0, 0)\"), 'Your second and third <code>p</code> elements should not be red.');"
        },
        {
          "text":
            "Your first <code>p</code> element should have the class <code>red-text</code>.",
          "testString":
            "assert($(\"p:eq(0)\").hasClass(\"red-text\"), 'Your first <code>p</code> element should have the class <code>red-text</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Style Multiple Elements with a CSS Class",
      "dashedName": "style-multiple-elements-with-a-css-class"
    },
    {
      "id": "bad87fee1348bd9aedf08806",
      "description": [
        "Font size is controlled by the <code>font-size</code> CSS property, like this:",
        "<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>",
        "<hr>",
        "Inside the same <code>&#60;style&#62;</code> tag that contains your <code>red-text</code> class, create an entry for <code>p</code> elements and set the <code>font-size</code> to 16 pixels (<code>16px</code>)."
      ],
      "tests": [
        {
          "text":
            "Between the <code>style</code> tags, give the <code>p</code> elements <code>font-size</code> of <code>16px</code>. Browser and Text zoom should be at 100%.",
          "testString":
            "assert(code.match(/p\\s*{\\s*font-size\\s*:\\s*16\\s*px\\s*;\\s*}/i), 'Between the <code>style</code> tags, give the <code>p</code> elements <code>font-size</code> of <code>16px</code>. Browser and Text zoom should be at 100%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the Font Size of an Element",
      "dashedName": "change-the-font-size-of-an-element"
    },
    {
      "id": "bad87fee1348bd9aede08807",
      "description": [
        "You can set which font an element should use, by using the <code>font-family</code> property.",
        "For example, if you wanted to set your <code>h2</code> element's font to <code>sans-serif</code>, you would use the following CSS:",
        "<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>",
        "<hr>",
        "Make all of your <code>p</code> elements use the <code>monospace</code> font."
      ],
      "tests": [
        {
          "text":
            "Your <code>p</code> elements should use the font <code>monospace</code>.",
          "testString":
            "assert($(\"p\").not(\".red-text\").css(\"font-family\").match(/monospace/i), 'Your <code>p</code> elements should use the font <code>monospace</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the Font Family of an Element",
      "dashedName": "set-the-font-family-of-an-element"
    },
    {
      "id": "bad87fee1348bd9aedf08807",
      "description": [
        "In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are various sources for web fonts on the internet but, for this example we will focus on the Google Fonts library.",
        "<a href='https://fonts.google.com/' target='_blank'>Google Fonts</a> is a free library of web fonts that you can use in your CSS by referencing the font's URL.",
        "So, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).",
        "To import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the <code>Lobster</code> font. To do this, copy the following code snippet and paste it into the top of your code editor(before the opening <code>style</code> element):",
        "<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>",
        "Now you can use the <code>Lobster</code> font in your CSS by using <code>Lobster</code> as the FAMILY_NAME as in the following example:<br><code>font-family: FAMILY_NAME, GENERIC_NAME;</code>.",
        "The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.",
        "Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the <code>\"Open Sans\"</code> font, but not to use the <code>Lobster</code> font.",
        "<hr>",
        "Create a <code>font-family</code> CSS rule that uses the <code>Lobster</code> font, and ensure that it will be applied to your <code>h2</code> element."
      ],
      "tests": [
        {
          "text": "Import the <code>Lobster</code> font.",
          "testString":
            "assert(new RegExp(\"googleapis\", \"gi\").test(code), 'Import the <code>Lobster</code> font.');"
        },
        {
          "text":
            "Your <code>h2</code> element should use the font <code>Lobster</code>.",
          "testString":
            "assert($(\"h2\").css(\"font-family\").match(/lobster/i), 'Your <code>h2</code> element should use the font <code>Lobster</code>.');"
        },
        {
          "text": "Use an <code>h2</code> CSS selector to change the font.",
          "testString":
            "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?\\s*;\\s*\\}/gi.test(code), 'Use an <code>h2</code> CSS selector to change the font.');"
        },
        {
          "text":
            "Your <code>p</code> element should still use the font <code>monospace</code>.",
          "testString":
            "assert($(\"p\").css(\"font-family\").match(/monospace/i), 'Your <code>p</code> element should still use the font <code>monospace</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Import a Google Font",
      "dashedName": "import-a-google-font"
    },
    {
      "id": "bad87fee1348bd9aedf08808",
      "description": [
        "There are several default fonts that are available in all browsers. These generic font families include <code>monospace</code>, <code>serif</code> and <code>sans-serif</code>",
        "When one font isn't available, you can tell the browser to \"degrade\" to another font.",
        "For example, if you wanted an element to use the <code>Helvetica</code> font, but degrade to the <code>sans-serif</code> font when <code>Helvetica</code> wasn't available, you will specify it as follows:",
        "<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>",
        "Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.",
        "<hr>",
        "To begin with, apply the <code>monospace</code> font to the <code>h2</code> element, so that it now has two fonts - <code>Lobster</code> and <code>monospace</code>.",
        "In the last challenge, you imported the <code>Lobster</code> font using the <code>link</code> tag. Now comment out that import of the <code>Lobster</code> font(using the HTML comments you learned before) from Google Fonts so that it isn't available anymore. Notice how your <code>h2</code> element degrades to the <code>monospace</code> font.",
        "<strong>Note</strong><br>If you have the Lobster font installed on your computer, you won't see the degradation because your browser is able to find the font."
      ],
      "tests": [
        {
          "text": "Your h2 element should use the font <code>Lobster</code>.",
          "testString":
            "assert($(\"h2\").css(\"font-family\").match(/^\"?lobster/i), 'Your h2 element should use the font <code>Lobster</code>.');"
        },
        {
          "text":
            "Your h2 element should degrade to the font <code>monospace</code> when <code>Lobster</code> is not available.",
          "testString":
            "assert(/\\s*h2\\s*\\{\\s*font-family\\:\\s*(\\'|\")?Lobster(\\'|\")?,\\s*monospace\\s*;\\s*\\}/gi.test(code), 'Your h2 element should degrade to the font <code>monospace</code> when <code>Lobster</code> is not available.');"
        },
        {
          "text":
            "Comment out your call to Google for the <code>Lobster</code> font by putting <code>&#60!--</code> in front of it.",
          "testString":
            "assert(new RegExp(\"<!--[^fc]\", \"gi\").test(code), 'Comment out your call to Google for the <code>Lobster</code> font by putting <code>&#60!--</code> in front of it.');"
        },
        {
          "text":
            "Be sure to close your comment by adding <code>--&#62;</code>.",
          "testString":
            "assert(new RegExp(\"[^fc]-->\", \"gi\").test(code), 'Be sure to close your comment by adding <code>--&#62;</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Specify How Fonts Should Degrade",
      "dashedName": "specify-how-fonts-should-degrade"
    },
    {
      "id": "bad87fee1348bd9acdf08812",
      "description": [
        "CSS has a property called <code>width</code> that controls an element's width. Just like with fonts, we'll use <code>px</code> (pixels) to specify the image's width.",
        "For example, if we wanted to create a CSS class called <code>larger-image</code> that gave HTML elements a width of 500 pixels, we'd use:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "Create a class called <code>smaller-image</code> and use it to resize the image so that it's only 100 pixels wide.",
        "<strong>Note</strong><br>Due to browser implementation differences, you may need to be at 100% zoom to pass the tests on this challenge."
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> element should have the class <code>smaller-image</code>.",
          "testString":
            "assert($(\"img[src='https://bit.ly/fcc-relaxing-cat']\").attr('class') === \"smaller-image\", 'Your <code>img</code> element should have the class <code>smaller-image</code>.');"
        },
        {
          "text":
            "Your image should be 100 pixels wide. Browser zoom should be at 100%.",
          "testString":
            "assert($(\"img\").width() === 100, 'Your image should be 100 pixels wide. Browser zoom should be at 100%.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Size Your Images",
      "dashedName": "size-your-images"
    },
    {
      "id": "bad87fee1348bd9bedf08813",
      "description": [
        "CSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code>",
        "For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:",
        "<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>",
        "<hr>",
        "Create a class called <code>thick-green-border</code>. This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.",
        "Remember that you can apply multiple classes to an element using its <code>class</code> attribute, by separating each class name with a space. For example:",
        "<code>&lt;img class=\"class1 class2\"&gt;</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> element should have the class <code>smaller-image</code>.",
          "testString":
            "assert($(\"img\").hasClass(\"smaller-image\"), 'Your <code>img</code> element should have the class <code>smaller-image</code>.');"
        },
        {
          "text":
            "Your <code>img</code> element should have the class <code>thick-green-border</code>.",
          "testString":
            "assert($(\"img\").hasClass(\"thick-green-border\"), 'Your <code>img</code> element should have the class <code>thick-green-border</code>.');"
        },
        {
          "text": "Give your image a border width of <code>10px</code>.",
          "testString":
            "assert($(\"img\").hasClass(\"thick-green-border\") && parseInt($(\"img\").css(\"border-top-width\"), 10) >= 8 && parseInt($(\"img\").css(\"border-top-width\"), 10) <= 12, 'Give your image a border width of <code>10px</code>.');"
        },
        {
          "text": "Give your image a border style of <code>solid</code>.",
          "testString":
            "assert($(\"img\").css(\"border-right-style\") === \"solid\", 'Give your image a border style of <code>solid</code>.');"
        },
        {
          "text":
            "The border around your <code>img</code> element should be green.",
          "testString":
            "assert($(\"img\").css(\"border-left-color\") === \"rgb(0, 128, 0)\", 'The border around your <code>img</code> element should be green.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Borders Around Your Elements",
      "dashedName": "add-borders-around-your-elements"
    },
    {
      "id": "bad87fee1348bd9aedf08814",
      "description": [
        "Your cat photo currently has sharp corners. We can round out those corners with a CSS property called <code>border-radius</code>.",
        "<hr>",
        "You can specify a <code>border-radius</code> with pixels. Give your cat photo a <code>border-radius</code> of <code>10px</code>.",
        "Note: this challenge allows for multiple possible solutions. For example, you may add <code>border-radius</code> to either the <code>.thick-green-border</code> class or the <code>.smaller-image</code> class."
      ],
      "tests": [
        {
          "text":
            "Your image element should have the class \"thick-green-border\".",
          "testString":
            "assert($(\"img\").hasClass(\"thick-green-border\"), 'Your image element should have the class \"thick-green-border\".');"
        },
        {
          "text": "Your image should have a border radius of <code>10px</code>",
          "testString":
            "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 8, 'Your image should have a border radius of <code>10px</code>');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Rounded Corners with borderradius",
      "dashedName": "add-rounded-corners-with-borderradius"
    },
    {
      "id": "bad87fee1348bd9aedf08815",
      "description": [
        "In addition to pixels, you can also specify the <code>border-radius</code> using a percentage.",
        "<hr>",
        "Give your cat photo a <code>border-radius</code> of <code>50%</code>."
      ],
      "tests": [
        {
          "text":
            "Your image should have a border radius of <code>50%</code>, making it perfectly circular.",
          "testString":
            "assert(parseInt($(\"img\").css(\"border-top-left-radius\")) > 48, 'Your image should have a border radius of <code>50%</code>, making it perfectly circular.');"
        },
        {
          "text": "Be sure to use a percentage value of <code>50%</code>.",
          "testString":
            "assert(code.match(/50%/g), 'Be sure to use a percentage value of <code>50%</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Circular Images with a borderradius",
      "dashedName": "make-circular-images-with-a-borderradius"
    },
    {
      "id": "bad87fed1348bd9aede07836",
      "description": [
        "You can set an element's background color with the <code>background-color</code> property.",
        "For example, if you wanted an element's background color to be <code>green</code>, you'd put this within your <code>style</code> element:",
        "<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "<hr>",
        "Create a class called <code>silver-background</code> with the <code>background-color</code> of silver. Assign this class to your <code>div</code> element."
      ],
      "tests": [
        {
          "text":
            "Give your <code>div</code> element the class <code>silver-background</code>.",
          "testString":
            "assert($(\"div\").hasClass(\"silver-background\"), 'Give your <code>div</code> element the class <code>silver-background</code>.');"
        },
        {
          "text":
            "Your <code>div</code> element should have a silver background.",
          "testString":
            "assert($(\"div\").css(\"background-color\") === \"rgb(192, 192, 192)\", 'Your <code>div</code> element should have a silver background.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Give a Background Color to a div Element",
      "dashedName": "give-a-background-color-to-a-div-element"
    },
    {
      "id": "bad87eee1348bd9aede07836",
      "description": [
        "In addition to classes, each HTML element can also have an <code>id</code> attribute.",
        "There are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.",
        "<code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same <code>id</code> attribute.",
        "Here's an example of how you give your <code>h2</code> element the id of <code>cat-photo-app</code>:",
        "<code>&#60;h2 id=\"cat-photo-app\"></code>",
        "<hr>",
        "Give your <code>form</code> element the id <code>cat-photo-form</code>."
      ],
      "tests": [
        {
          "text":
            "Give your <code>form</code> element the id of <code>cat-photo-form</code>.",
          "testString":
            "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", 'Give your <code>form</code> element the id of <code>cat-photo-form</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the id of an Element",
      "dashedName": "set-the-id-of-an-element"
    },
    {
      "id": "bad87dee1348bd9aede07836",
      "description": [
        "One cool thing about <code>id</code> attributes is that, like classes, you can style them using CSS.",
        "However, an <code>id</code> is not reusable and should only be applied to one element. An <code>id</code> also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the <code>id</code> will be applied.",
        "Here's an example of how you can take your element with the <code>id</code> attribute of <code>cat-photo-element</code> and give it the background color of green. In your <code>style</code> element:",
        "<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>",
        "Note that inside your <code>style</code> element, you always reference classes by putting a <code>.</code> in front of their names. You always reference ids by putting a <code>#</code> in front of their names.",
        "<hr>",
        "Try giving your form, which now has the <code>id</code> attribute of <code>cat-photo-form</code>, a green background."
      ],
      "tests": [
        {
          "text":
            "Give your <code>form</code> element the id of <code>cat-photo-form</code>.",
          "testString":
            "assert($(\"form\").attr(\"id\") === \"cat-photo-form\", 'Give your <code>form</code> element the id of <code>cat-photo-form</code>.');"
        },
        {
          "text":
            "Your <code>form</code> element should have the <code>background-color</code> of green.",
          "testString":
            "assert($(\"#cat-photo-form\").css(\"background-color\") === \"rgb(0, 128, 0)\", 'Your <code>form</code> element should have the <code>background-color</code> of green.');"
        },
        {
          "text":
            "Make sure your <code>form</code> element has an <code>id</code> attribute.",
          "testString":
            "assert(code.match(/<form.*cat-photo-form.*>/gi) && code.match(/<form.*cat-photo-form.*>/gi).length > 0, 'Make sure your <code>form</code> element has an <code>id</code> attribute.');"
        },
        {
          "text":
            "Do not give your <code>form</code> any <code>class</code> or <code>style</code> attributes.",
          "testString":
            "assert(!code.match(/<form.*style.*>/gi) && !code.match(/<form.*class.*>/gi), 'Do not give your <code>form</code> any <code>class</code> or <code>style</code> attributes.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use an id Attribute to Style an Element",
      "dashedName": "use-an-id-attribute-to-style-an-element"
    },
    {
      "id": "bad88fee1348bd9aedf08825",
      "description": [
        "Now let's put our Cat Photo App away for a little while and learn more about styling HTML.",
        "You may have already noticed this, but all HTML elements are essentially little rectangles.",
        "Three important properties control the space that surrounds each HTML element: <code>padding</code>, <code>margin</code>, and <code>border</code>.",
        "An element's <code>padding</code> controls the amount of space between the element's content and its <code>border</code>.",
        "Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more <code>padding</code> than the blue box.",
        "When you increase the blue box's <code>padding</code>, it will increase the distance(<code>padding</code>) between the text and the border around it.",
        "<hr>",
        "Change the <code>padding</code> of your blue box to match that of your red box."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give elements <code>20px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-top\") === \"20px\", 'Your <code>blue-box</code> class should give elements <code>20px</code> of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Padding of an Element",
      "dashedName": "adjust-the-padding-of-an-element"
    },
    {
      "id": "bad87fee1348bd9aedf08822",
      "description": [
        "An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.",
        "Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger <code>margin</code> than the blue box, making it appear smaller.",
        "When you increase the blue box's <code>margin</code>, it will increase the distance between its border and surrounding elements.",
        "<hr>",
        "Change the <code>margin</code> of the blue box to match that of the red box."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give elements <code>20px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-top\") === \"20px\", 'Your <code>blue-box</code> class should give elements <code>20px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjust the Margin of an Element",
      "dashedName": "adjust-the-margin-of-an-element"
    },
    {
      "id": "bad87fee1348bd9aedf08823",
      "description": [
        "An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.",
        "If you set an element's <code>margin</code> to a negative value, the element will grow larger.",
        "<hr>",
        "Try to set the <code>margin</code> to a negative value like the one for the red box.",
        "Change the <code>margin</code> of the blue box to <code>-15px</code>, so it fills the entire horizontal width of the yellow box around it."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give elements <code>-15px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-top\") === \"-15px\", 'Your <code>blue-box</code> class should give elements <code>-15px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add a Negative Margin to an Element",
      "dashedName": "add-a-negative-margin-to-an-element"
    },
    {
      "id": "bad87fee1348bd9aedf08824",
      "description": [
        "Sometimes you will want to customize an element so that it has different amounts of <code>padding</code> on each of its sides.",
        "CSS allows you to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.",
        "<hr>",
        "Give the blue box a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give the top of the elements <code>40px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of the elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the right of the elements <code>20px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of the elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the bottom of the elements <code>20px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of the elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the left of the elements <code>40px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of the elements <code>40px</code> of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Different Padding to Each Side of an Element",
      "dashedName": "add-different-padding-to-each-side-of-an-element"
    },
    {
      "id": "bad87fee1248bd9aedf08824",
      "description": [
        "Sometimes you will want to customize an element so that it has a different <code>margin</code> on each of its sides.",
        "CSS allows you to control the <code>margin</code> of all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.",
        "<hr>",
        "Give the blue box a <code>margin</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Different Margins to Each Side of an Element",
      "dashedName": "add-different-margins-to-each-side-of-an-element"
    },
    {
      "id": "bad87fee1348bd9aedf08826",
      "description": [
        "Instead of specifying an element's <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties individually, you can specify them all in one line, like this:",
        "<code>padding: 10px 20px 10px 20px;</code>",
        "These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.",
        "<hr>",
        "Use Clockwise Notation to give the \".blue-box\" class a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>padding</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"padding-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>padding</code>.');"
        },
        {
          "text":
            "You should use the clockwise notation to set the padding of <code>blue-box</code> class.",
          "testString":
            "assert(!/padding-top|padding-right|padding-bottom|padding-left/.test(code), 'You should use the clockwise notation to set the padding of <code>blue-box</code> class.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Clockwise Notation to Specify the Padding of an Element",
      "dashedName":
        "use-clockwise-notation-to-specify-the-padding-of-an-element"
    },
    {
      "id": "bad87fee1348bd9afdf08726",
      "description": [
        "Let's try this again, but with <code>margin</code> this time.",
        "Instead of specifying an element's <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties individually, you can specify them all in one line, like this:",
        "<code>margin: 10px 20px 10px 20px;</code>",
        "These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.",
        "<hr>",
        "Use <code>Clockwise Notation</code> to give the element with the <code>blue-box</code> class a margin of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side."
      ],
      "tests": [
        {
          "text":
            "Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-top\") === \"40px\", 'Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-right\") === \"20px\", 'Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-bottom\") === \"20px\", 'Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.');"
        },
        {
          "text":
            "Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.",
          "testString":
            "assert($(\".blue-box\").css(\"margin-left\") === \"40px\", 'Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n  \n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Clockwise Notation to Specify the Margin of an Element",
      "dashedName": "use-clockwise-notation-to-specify-the-margin-of-an-element"
    },
    {
      "id": "58c383d33e2e3259241f3076",
      "description": [
        "You have been giving <code>id</code> or <code>class</code> attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.",
        "Let's bring out CatPhotoApp again to practice using CSS Selectors.",
        "For this challenge, you will use the <code>[attr=value]</code> attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute <code>type</code> and a corresponding value of <code>radio</code>:",
        "<blockquote>[type='radio'] {<br>  margin: 20px 0px 20px 0px;<br>}</blockquote>",
        "<hr>",
        "Using the <code>type</code> attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px."
      ],
      "tests": [
        {
          "text":
            "The <code>type</code> attribute selector should be used to select the checkboxes.",
          "testString":
            "assert(code.match(/<style>[\\s\\S]*?\\[type=(\"|')checkbox\\1\\]\\s*?{[\\s\\S]*?}[\\s\\S]*?<\\/style>/gi),'The <code>type</code> attribute selector should be used to select the checkboxes.');"
        },
        {
          "text": "The top margins of the checkboxes should be 10px.",
          "testString":
            "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginTop') === '10px') {count++;}});return (count===3)}()),'The top margins of the checkboxes should be 10px.');"
        },
        {
          "text": "The bottom margins of the checkboxes should be 15px.",
          "testString":
            "assert((function() {var count=0; $(\"[type='checkbox']\").each(function() { if($(this).css('marginBottom') === '15px') {count++;}});return (count===3)}()),'The bottom margins of the checkboxes should be 15px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Attribute Selectors to Style Elements",
      "dashedName": "use-attribute-selectors-to-style-elements"
    },
    {
      "id": "bad82fee1322bd9aedf08721",
      "description": [
        "The last several challenges all set an element's margin or padding with pixels (<code>px</code>). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that you can use.",
        "The two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.",
        "Relative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element's font. If you use it to set the <code>font-size</code> property itself, it's relative to the parent's <code>font-size</code>.",
        "<strong>Note</strong><br>There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.",
        "<hr>",
        "Add a <code>padding</code> property to the element with class <code>red-box</code> and set it to <code>1.5em</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>red-box</code> class should have a <code>padding</code> property.",
          "testString":
            "assert($('.red-box').css('padding-top') != '0px' && $('.red-box').css('padding-right') != '0px' && $('.red-box').css('padding-bottom') != '0px' && $('.red-box').css('padding-left') != '0px', 'Your <code>red-box</code> class should have a <code>padding</code> property.');"
        },
        {
          "text":
            "Your <code>red-box</code> class should give elements 1.5em of <code>padding</code>.",
          "testString":
            "assert(code.match(/\\.red-box\\s*?{\\s*?.*?\\s*?.*?\\s*?padding:\\s*?1\\.5em/gi), 'Your <code>red-box</code> class should give elements 1.5em of <code>padding</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n    \n  }\n\n  .green-box {\n    background-color: green;\n    margin: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand Absolute versus Relative Units",
      "dashedName": "understand-absolute-versus-relative-units"
    },
    {
      "id": "bad87fee1348bd9aedf08736",
      "description": [
        "Now let's start fresh and talk about CSS inheritance.",
        "Every HTML page has a <code>body</code> element.",
        "<hr>",
        "We can prove that the <code>body</code> element exists here by giving it a <code>background-color</code> of black.",
        "We can do this by adding the following to our <code>style</code> element:",
        "<blockquote>body {<br>&nbsp;&nbsp;background-color: black;<br>}</blockquote>"
      ],
      "tests": [
        {
          "text":
            "Give your <code>body</code> element the <code>background-color</code> of black.",
          "testString":
            "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Give your <code>body</code> element the <code>background-color</code> of black.');"
        },
        {
          "text":
            "Make sure your CSS rule is properly formatted with both opening and closing curly brackets.",
          "testString":
            "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), 'Make sure your CSS rule is properly formatted with both opening and closing curly brackets.');"
        },
        {
          "text": "Make sure your CSS rule ends with a semi-colon.",
          "testString":
            "assert(code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i), 'Make sure your CSS rule ends with a semi-colon.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<style>\n\n</style>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Style the HTML Body Element",
      "dashedName": "style-the-html-body-element"
    },
    {
      "id": "bad87fee1348bd9aedf08746",
      "description": [
        "Now we've proven that every HTML page has a <code>body</code> element, and that its <code>body</code> element can also be styled with CSS.",
        "Remember, you can style your <code>body</code> element just like any other HTML element, and all your other elements will inherit your <code>body</code> element's styles.",
        "<hr>",
        "First, create a <code>h1</code> element with the text <code>Hello World</code>",
        "Then, let's give all elements on your page the color of <code>green</code> by adding <code>color: green;</code> to your <code>body</code> element's style declaration.",
        "Finally, give your <code>body</code> element the font-family of <code>monospace</code> by adding <code>font-family: monospace;</code> to your <code>body</code> element's style declaration."
      ],
      "tests": [
        {
          "text": "Create an <code>h1</code> element.",
          "testString":
            "assert(($(\"h1\").length > 0), 'Create an <code>h1</code> element.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the text <code>Hello World</code>.",
          "testString":
            "assert(($(\"h1\").length > 0 && $(\"h1\").text().match(/hello world/i)), 'Your <code>h1</code> element should have the text <code>Hello World</code>.');"
        },
        {
          "text": "Make sure your <code>h1</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/h1>/g) && code.match(/<h1/g) && code.match(/<\\/h1>/g).length === code.match(/<h1/g).length, 'Make sure your <code>h1</code> element has a closing tag.');"
        },
        {
          "text":
            "Give your <code>body</code> element the <code>color</code> property of <code>green</code>.",
          "testString":
            "assert(($(\"body\").css(\"color\") === \"rgb(0, 128, 0)\"), 'Give your <code>body</code> element the <code>color</code> property of <code>green</code>.');"
        },
        {
          "text":
            "Give your <code>body</code> element the <code>font-family</code> property of <code>monospace</code>.",
          "testString":
            "assert(($(\"body\").css(\"font-family\").match(/monospace/i)), 'Give your <code>body</code> element the <code>font-family</code> property of <code>monospace</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should inherit the font <code>monospace</code> from your <code>body</code> element.",
          "testString":
            "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"font-family\").match(/monospace/i)), 'Your <code>h1</code> element should inherit the font <code>monospace</code> from your <code>body</code> element.');"
        },
        {
          "text":
            "Your <code>h1</code> element should inherit the color green from your <code>body</code> element.",
          "testString":
            "assert(($(\"h1\").length > 0 && $(\"h1\").css(\"color\") === \"rgb(0, 128, 0)\"), 'Your <code>h1</code> element should inherit the color green from your <code>body</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n  }\n\n</style>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Inherit Styles from the Body Element",
      "dashedName": "inherit-styles-from-the-body-element"
    },
    {
      "id": "bad87fee1348bd9aedf08756",
      "description": [
        "Sometimes your HTML elements will receive multiple styles that conflict with one another.",
        "For example, your <code>h1</code> element can't be both green and pink at the same time.",
        "Let's see what happens when we create a class that makes text pink, then apply it to an element. Will our class <em>override</em> the <code>body</code> element's <code>color: green;</code> CSS property?",
        "<hr>",
        "Create a CSS class called <code>pink-text</code> that gives an element the color pink.",
        "Give your <code>h1</code> element the class of <code>pink-text</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text":
            "Your <code>&#60;style&#62;</code> should have a <code>pink-text</code> CSS class that changes the <code>color</code>.",
          "testString":
            "assert(code.match(/\\.pink-text\\s*\\{\\s*color\\s*:\\s*.+\\s*;\\s*\\}/g), 'Your <code>&#60;style&#62;</code> should have a <code>pink-text</code> CSS class that changes the <code>color</code>.');"
        },
        {
          "text": "Your <code>h1</code> element should be pink.",
          "testString":
            "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", 'Your <code>h1</code> element should be pink.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n</style>\n<h1>Hello World!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Prioritize One Style Over Another",
      "dashedName": "prioritize-one-style-over-another"
    },
    {
      "id": "bad87fee1348bd9aedf04756",
      "description": [
        "Our \"pink-text\" class overrode our <code>body</code> element's CSS declaration!",
        "We just proved that our classes will override the <code>body</code> element's CSS. So the next logical question is, what can we do to override our <code>pink-text</code> class?",
        "<hr>",
        "Create an additional CSS class called <code>blue-text</code> that gives an element the color blue. Make sure it's below your <code>pink-text</code> class declaration.",
        "Apply the <code>blue-text</code> class to your <code>h1</code> element in addition to your <code>pink-text</code> class, and let's see which one wins.",
        "Applying multiple class attributes to a HTML element is done with a space between them like this:",
        "<code>class=\"class1 class2\"</code>",
        "Note: It doesn't matter which order the classes are listed in the HTML element.",
        "However, the order of the <code>class</code> declarations in the <code>&#60;style&#62;</code> section are what is important. The second declaration will always take precedence over the first. Because <code>.blue-text</code> is declared second, it overrides the attributes of <code>.pink-text</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text":
            "Both <code>blue-text</code> and <code>pink-text</code> should belong to the same <code>h1</code> element.",
          "testString":
            "assert($(\".pink-text\").hasClass(\"blue-text\"), 'Both <code>blue-text</code> and <code>pink-text</code> should belong to the same <code>h1</code> element.');"
        },
        {
          "text": "Your <code>h1</code> element should be blue.",
          "testString":
            "assert($(\"h1\").css(\"color\") === \"rgb(0, 0, 255)\", 'Your <code>h1</code> element should be blue.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Override Styles in Subsequent CSS",
      "dashedName": "override-styles-in-subsequent-css"
    },
    {
      "id": "bad87fee1348bd8aedf06756",
      "description": [
        "We just proved that browsers read CSS from top to bottom. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last.",
        "But we're not done yet. There are other ways that you can override CSS. Do you remember id attributes?",
        "Let's override your <code>pink-text</code> and <code>blue-text</code> classes, and make your <code>h1</code> element orange, by giving the <code>h1</code> element an id and then styling that id.",
        "<hr>",
        "Give your <code>h1</code> element the <code>id</code> attribute of <code>orange-text</code>. Remember, id styles look like this:",
        "<code>&#60;h1 id=\"orange-text\"&#62;</code>",
        "Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.",
        "Create a CSS declaration for your <code>orange-text</code> id in your <code>style</code> element. Here's an example of what this looks like:",
        "<blockquote>#brown-text {<br>&nbsp;&nbsp;color: brown;<br>}</blockquote>",
        "Note: It doesn't matter whether you declare this CSS above or below pink-text class, since id attribute will always take precedence."
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element the id of <code>orange-text</code>.",
          "testString":
            "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Give your <code>h1</code> element the id of <code>orange-text</code>.');"
        },
        {
          "text": "There should be only one <code>h1</code> element.",
          "testString":
            "assert(($(\"h1\").length === 1), 'There should be only one <code>h1</code> element.');"
        },
        {
          "text":
            "Create a CSS declaration for your <code>orange-text</code> id",
          "testString":
            "assert(code.match(/#orange-text\\s*{/gi), 'Create a CSS declaration for your <code>orange-text</code> id');"
        },
        {
          "text":
            "Do not give your <code>h1</code> any <code>style</code> attributes.",
          "testString":
            "assert(!code.match(/<h1.*style.*>/gi), 'Do not give your <code>h1</code> any <code>style</code> attributes.');"
        },
        {
          "text": "Your <code>h1</code> element should be orange.",
          "testString":
            "assert($(\"h1\").css(\"color\") === \"rgb(255, 165, 0)\", 'Your <code>h1</code> element should be orange.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Override Class Declarations by Styling ID Attributes",
      "dashedName": "override-class-declarations-by-styling-id-attributes"
    },
    {
      "id": "bad87fee1348bd9aedf06756",
      "description": [
        "So we've proven that id declarations override class declarations, regardless of where they are declared in your <code>style</code> element CSS.",
        "There are other ways that you can override CSS. Do you remember inline styles?",
        "<hr>",
        "Use an <code>inline style</code> to try to make our <code>h1</code> element white. Remember, in line styles look like this:",
        "<code>&#60;h1 style=\"color: green\"&#62;</code>",
        "Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element."
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the id of <code>orange-text</code>.",
          "testString":
            "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Your <code>h1</code> element should have the id of <code>orange-text</code>.');"
        },
        {
          "text": "Give your <code>h1</code> element an inline style.",
          "testString":
            "assert(document.querySelector('h1[style]'), 'Give your <code>h1</code> element an inline style.');"
        },
        {
          "text": "Your <code>h1</code> element should be white.",
          "testString":
            "assert($(\"h1\").css(\"color\") === \"rgb(255, 255, 255)\", 'Your <code>h1</code> element should be white.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Override Class Declarations with Inline Styles",
      "dashedName": "override-class-declarations-with-inline-styles"
    },
    {
      "id": "bad87fee1348bd9aedf07756",
      "description": [
        "Yay! We just proved that inline styles will override all the CSS declarations in your <code>style</code> element.",
        "But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.",
        "In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use <code>!important</code>",
        "Let's go all the way back to our <code>pink-text</code> class declaration. Remember that our <code>pink-text</code> class was overridden by subsequent class declarations, id declarations, and inline styles.",
        "<hr>",
        "Let's add the keyword <code>!important</code> to your pink-text element's color declaration to make 100% sure that your <code>h1</code> element will be pink.",
        "An example of how to do this is:",
        "<code>color: red !important;</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the class <code>pink-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"pink-text\"), 'Your <code>h1</code> element should have the class <code>pink-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the class <code>blue-text</code>.",
          "testString":
            "assert($(\"h1\").hasClass(\"blue-text\"), 'Your <code>h1</code> element should have the class <code>blue-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the id of <code>orange-text</code>.",
          "testString":
            "assert($(\"h1\").attr(\"id\") === \"orange-text\", 'Your <code>h1</code> element should have the id of <code>orange-text</code>.');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the inline style of <code>color&#58; white</code>.",
          "testString":
            "assert(code.match(/<h1.*style/gi) && code.match(/<h1.*style.*color\\s*?:/gi), 'Your <code>h1</code> element should have the inline style of <code>color&#58; white</code>.');"
        },
        {
          "text":
            "Your <code>pink-text</code> class declaration should have the <code>!important</code> keyword to override all other declarations.",
          "testString":
            "assert(code.match(/\\.pink-text\\s*?\\{[\\s\\S]*?color:.*pink.*!important\\s*;?[^\\.]*\\}/g), 'Your <code>pink-text</code> class declaration should have the <code>!important</code> keyword to override all other declarations.');"
        },
        {
          "text": "Your <code>h1</code> element should be pink.",
          "testString":
            "assert($(\"h1\").css(\"color\") === \"rgb(255, 192, 203)\", 'Your <code>h1</code> element should be pink.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Override All Other Styles by using Important",
      "dashedName": "override-all-other-styles-by-using-important"
    },
    {
      "id": "bad87fee1348bd9aedf08726",
      "description": [
        "Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or <code>hex code</code> for short.",
        "We usually use <code>decimals</code>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <code>Hexadecimals</code> (or <code>hex</code>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in <code>hexadecimal</code>, giving us 16 total possible values. You can find more information about <a target='_blank' href='https://en.wikipedia.org/wiki/Hexadecimal'>hexadecimal numbers here</a>.",
        "In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, <code>#000000</code> is black and is also the lowest possible value. You can find more information about the <a target='_blank' href='https://en.wikipedia.org/wiki/RGB_color_model'>RGB color system here</a>.",
        "<blockquote>body {<br>  color: #000000;<br>}</blockquote>",
        "<hr>",
        "Replace the word <code>black</code> in our <code>body</code> element's background-color with its <code>hex code</code> representation, <code>#000000</code>."
      ],
      "tests": [
        {
          "text":
            "Give your <code>body</code> element the background-color of black.",
          "testString":
            "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Give your <code>body</code> element the background-color of black.');"
        },
        {
          "text":
            "Use the <code>hex code</code> for the color black instead of the word <code>black</code>.",
          "testString":
            "assert(code.match(/body\\s*{(([\\s\\S]*;\\s*?)|\\s*?)background.*\\s*:\\s*?#000(000)?((\\s*})|(;[\\s\\S]*?}))/gi), 'Use the <code>hex code</code> for the color black instead of the word <code>black</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: black;\n  }\n</style>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Hex Code for Specific Colors",
      "dashedName": "use-hex-code-for-specific-colors"
    },
    {
      "id": "bad87fee1348bd9aedf08721",
      "description": [
        "To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.",
        "From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!",
        "For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being <code>#FFA500</code>.",
        "The digit <code>0</code> is the lowest number in hex code, and represents a complete absence of color.",
        "The digit <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.",
        "<hr>",
        "Replace the color words in our <code>style</code> element with their correct hex codes.",
        "<table class='table table-striped'><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></table>"
      ],
      "tests": [
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString":
            "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text":
            "Use the <code>hex code</code> for the color red instead of the word <code>red</code>.",
          "testString":
            "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#FF0000\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color red instead of the word <code>red</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.",
          "testString":
            "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', 'Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.');"
        },
        {
          "text":
            "Use the <code>hex code</code> for the color green instead of the word <code>green</code>.",
          "testString":
            "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#00FF00\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color green instead of the word <code>green</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am dodger blue!</code> the <code>color</code> dodger blue.",
          "testString":
            "assert($('.dodger-blue-text').css('color') === 'rgb(30, 144, 255)', 'Give your <code>h1</code> element with the text <code>I am dodger blue!</code> the <code>color</code> dodger blue.');"
        },
        {
          "text":
            "Use the <code>hex code</code> for the color dodger blue instead of the word <code>dodgerblue</code>.",
          "testString":
            "assert(code.match(/\\.dodger-blue-text\\s*?{\\s*?color:\\s*?#1E90FF\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color dodger blue instead of the word <code>dodgerblue</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am orange!</code> the <code>color</code> orange.",
          "testString":
            "assert($('.orange-text').css('color') === 'rgb(255, 165, 0)', 'Give your <code>h1</code> element with the text <code>I am orange!</code> the <code>color</code> orange.');"
        },
        {
          "text":
            "Use the <code>hex code</code> for the color orange instead of the word <code>orange</code>.",
          "testString":
            "assert(code.match(/\\.orange-text\\s*?{\\s*?color:\\s*?#FFA500\\s*?;\\s*?}/gi), 'Use the <code>hex code</code> for the color orange instead of the word <code>orange</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: black;\n  }\n  .green-text {\n    color: black;\n  }\n  .dodger-blue-text {\n    color: black;\n  }\n  .orange-text {\n    color: black;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Hex Code to Mix Colors",
      "dashedName": "use-hex-code-to-mix-colors"
    },
    {
      "id": "bad87fee1348bd9aedf08719",
      "description": [
        "Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.",
        "For example, red's hex code <code>#FF0000</code> can be shortened to <code>#F00</code>. This shortened form gives one digit for red, one digit for green, and one digit for blue.",
        "This reduces the total number of possible colors to around 4,000. But browsers will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color.",
        "<hr>",
        "Go ahead, try using the abbreviated hex codes to color the correct elements.",
        "<table class='table table-striped'><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></table>"
      ],
      "tests": [
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString":
            "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text":
            "Use the abbreviate <code>hex code</code> for the color red instead of the hex code <code>#FF0000</code>.",
          "testString":
            "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?#F00\\s*?;\\s*?}/gi), 'Use the abbreviate <code>hex code</code> for the color red instead of the hex code <code>#FF0000</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.",
          "testString":
            "assert($('.green-text').css('color') === 'rgb(0, 255, 0)', 'Give your <code>h1</code> element with the text <code>I am green!</code> the <code>color</code> green.');"
        },
        {
          "text":
            "Use the abbreviated <code>hex code</code> for the color green instead of the hex code <code>#00FF00</code>.",
          "testString":
            "assert(code.match(/\\.green-text\\s*?{\\s*?color:\\s*?#0F0\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color green instead of the hex code <code>#00FF00</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am cyan!</code> the <code>color</code> cyan.",
          "testString":
            "assert($('.cyan-text').css('color') === 'rgb(0, 255, 255)', 'Give your <code>h1</code> element with the text <code>I am cyan!</code> the <code>color</code> cyan.');"
        },
        {
          "text":
            "Use the abbreviated <code>hex code</code> for the color cyan instead of the hex code <code>#00FFFF</code>.",
          "testString":
            "assert(code.match(/\\.cyan-text\\s*?{\\s*?color:\\s*?#0FF\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color cyan instead of the hex code <code>#00FFFF</code>.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am fuchsia!</code> the <code>color</code> fuchsia.",
          "testString":
            "assert($('.fuchsia-text').css('color') === 'rgb(255, 0, 255)', 'Give your <code>h1</code> element with the text <code>I am fuchsia!</code> the <code>color</code> fuchsia.');"
        },
        {
          "text":
            "Use the abbreviated <code>hex code</code> for the color fuchsia instead of the hex code <code>#FF00FF</code>.",
          "testString":
            "assert(code.match(/\\.fuchsia-text\\s*?{\\s*?color:\\s*?#F0F\\s*?;\\s*?}/gi), 'Use the abbreviated <code>hex code</code> for the color fuchsia instead of the hex code <code>#FF00FF</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: #000000;\n  }\n  .fuchsia-text {\n    color: #000000;\n  }\n  .cyan-text {\n    color: #000000;\n  }\n  .green-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Abbreviated Hex Code",
      "dashedName": "use-abbreviated-hex-code"
    },
    {
      "id": "bad87fee1348bd9aede08718",
      "description": [
        "Another way you can represent colors in CSS is by using <code>RGB</code> values.",
        "The RGB value for black looks like this:",
        "<code>rgb(0, 0, 0)</code>",
        "The RGB value for white looks like this:",
        "<code>rgb(255, 255, 255)</code>",
        "Instead of using six hexadecimal digits like you do with hex code, with <code>RGB</code> you specify the brightness of each color with a number between 0 and 255.",
        "If you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So <code>RGB</code>, which starts counting from zero, has the exact same number of possible values as hex code.",
        "Here's an example of how you'd change the body background to orange using its RGB code.",
        "<blockquote>body {<br>  background-color: rgb(255, 165, 0);<br>}</blockquote>",
        "<hr>",
        "Let's replace the hex code in our <code>body</code> element's background color with the RGB value for black: <code>rgb(0, 0, 0)</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>body</code> element should have a black background.",
          "testString":
            "assert($(\"body\").css(\"background-color\") === \"rgb(0, 0, 0)\", 'Your <code>body</code> element should have a black background.');"
        },
        {
          "text":
            "Use <code>rgb</code> to give your <code>body</code> element a color of black.",
          "testString":
            "assert(code.match(/rgb\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*0\\s*\\)/ig), 'Use <code>rgb</code> to give your <code>body</code> element a color of black.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    background-color: #F00;\n  }\n</style>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use RGB values to Color Elements",
      "dashedName": "use-rgb-values-to-color-elements"
    },
    {
      "id": "bad82fee1348bd9aedf08721",
      "description": [
        "Just like with hex code, you can mix colors in RGB by using combinations of different values.",
        "<hr>",
        "Replace the hex codes in our <code>style</code> element with their correct RGB values.",
        "<table class='table table-striped'><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></table>"
      ],
      "tests": [
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.",
          "testString":
            "assert($('.red-text').css('color') === 'rgb(255, 0, 0)', 'Give your <code>h1</code> element with the text <code>I am red!</code> the <code>color</code> red.');"
        },
        {
          "text": "Use <code>rgb</code> for the color red.",
          "testString":
            "assert(code.match(/\\.red-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?255\\s*?,\\s*?0\\s*?,\\s*?0\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color red.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am orchid!</code> the <code>color</code> orchid.",
          "testString":
            "assert($('.orchid-text').css('color') === 'rgb(218, 112, 214)', 'Give your <code>h1</code> element with the text <code>I am orchid!</code> the <code>color</code> orchid.');"
        },
        {
          "text": "Use <code>rgb</code> for the color orchid.",
          "testString":
            "assert(code.match(/\\.orchid-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?218\\s*?,\\s*?112\\s*?,\\s*?214\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color orchid.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am blue!</code> the <code>color</code> blue.",
          "testString":
            "assert($('.blue-text').css('color') === 'rgb(0, 0, 255)', 'Give your <code>h1</code> element with the text <code>I am blue!</code> the <code>color</code> blue.');"
        },
        {
          "text": "Use <code>rgb</code> for the color blue.",
          "testString":
            "assert(code.match(/\\.blue-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color blue.');"
        },
        {
          "text":
            "Give your <code>h1</code> element with the text <code>I am sienna!</code> the <code>color</code> sienna.",
          "testString":
            "assert($('.sienna-text').css('color') === 'rgb(160, 82, 45)', 'Give your <code>h1</code> element with the text <code>I am sienna!</code> the <code>color</code> sienna.');"
        },
        {
          "text": "Use <code>rgb</code> for the color sienna.",
          "testString":
            "assert(code.match(/\\.sienna-text\\s*?{\\s*?color:\\s*?rgb\\(\\s*?160\\s*?,\\s*?82\\s*?,\\s*?45\\s*?\\)\\s*?;\\s*?}/gi), 'Use <code>rgb</code> for the color sienna.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .red-text {\n    color: #000000;\n  }\n  .orchid-text {\n    color: #000000;\n  }\n  .sienna-text {\n    color: #000000;\n  }\n  .blue-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use RGB to Mix Colors",
      "dashedName": "use-rgb-to-mix-colors"
    },
    {
      "id": "5a9d725e424fe3d0e10cad10",
      "description": [
        "<dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.",
        "Follow the instructions below to see how changing just three values can change the styling of many elements.",
        "<hr>",
        "In the <code>penguin</code> class, change the <code>black</code> value to <code>gray</code>, the <code>gray</code> value to <code>white</code>, and the <code>yellow</code> value to <code>orange</code>."
      ],
      "tests": [
        {
          "text":
            "<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.",
          "testString":
            "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.');"
        },
        {
          "text":
            "<code>penguin</code> class should declare the <code>--penguin-belly</code> variable and assign it to <code>white</code>.",
          "testString":
            "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-belly</code> variable and assign it to <code>white</code>.');"
        },
        {
          "text":
            "<code>penguin</code> class should declare the <code>--penguin-beak</code> variable and assign it to <code>orange</code>.",
          "testString":
            "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-beak\\s*?:\\s*?orange\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-beak</code> variable and assign it to <code>orange</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .penguin {\n    \n    /* change code below */\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    /* change code above */\n    \n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;  \n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;  \n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%; \n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;  \n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;  \n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  body {\n    background:#c6faf1;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use CSS Variables to change several elements at once",
      "dashedName": "use-css-variables-to-change-several-elements-at-once"
    },
    {
      "id": "5a9d726c424fe3d0e10cad11",
      "description": [
        "To create a CSS Variable, you just need to give it a <code>name</code> with <code>two dashes</code> in front of it and assign it a <code>value</code> like this:",
        "<blockquote>--penguin-skin: gray;</blockquote>",
        "This will create a variable named <code>--penguin-skin</code> and assign it the value of <code>gray</code>.",
        "Now you can use that variable elsewhere in your CSS to change the value of other elements to gray.",
        "<hr>",
        "In the <code>penguin</code> class, create a variable name <code>--penguin-skin</code> and give it a value of <code>gray</code>"
      ],
      "tests": [
        {
          "text":
            "<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.",
          "testString":
            "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi), '<code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .penguin {\n    \n    /* add code below */\n    \n    /* add code above */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: black;\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: black;\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;  \n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;  \n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%; \n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;  \n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;  \n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;  \n  }\n  \n  body {\n    background:#c6faf1;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a custom CSS Variable",
      "dashedName": "create-a-custom-css-variable"
    },
    {
      "id": "5a9d727a424fe3d0e10cad12",
      "description": [
        "After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.",
        "<blockquote>background: var(--penguin-skin);</blockquote>",
        "This will change the background of whatever element you are targeting to gray because that is the value of the <code>--penguin-skin</code> variable.",
        "Note that styles will not be applied unless the variable names are an exact match.",
        "<hr>",
        "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code>, <code>penguin-bottom</code>, <code>right-hand</code> and <code>left-hand</code> classes."
      ],
      "tests": [
        {
          "text":
            "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>pengiun-top</code> class.",
          "testString":
            "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>pengiun-top</code> class.');"
        },
        {
          "text":
            "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>pengiun-bottom</code> class.",
          "testString":
            "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.right-hand\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>pengiun-bottom</code> class.');"
        },
        {
          "text":
            "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>right-hand</code> class.",
          "testString":
            "assert(code.match(/.right-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.left-hand\\s{/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>right-hand</code> class.');"
        },
        {
          "text":
            "Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>left-hand</code> class.",
          "testString":
            "assert(code.match(/.left-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}/gi), 'Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>left-hand</code> class.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .penguin {\n    --penguin-skin: gray;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    \n    /* change code below */\n    background: black;\n    /* change code above */\n    \n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    \n    /* change code below */\n    background: black;\n    /* change code above */\n    \n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    \n    /* change code below */\n    background: black;\n    /* change code above */\n    \n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    \n    /* change code below */\n    background: black;\n    /* change code above */\n    \n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;  \n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;  \n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%; \n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  body {\n    background:#c6faf1;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a custom CSS Variable",
      "dashedName": "use-a-custom-css-variable"
    },
    {
      "id": "5a9d7286424fe3d0e10cad13",
      "description": [
        "When using your variable as a CSS property value, you can attach a fallback value that your page will revert to if for some reason it can't get your variable to work.",
        "It could be that someone is using an older browser that hasn't yet adopted CSS Variables, or perhaps their device doesn't support the value you gave the variable. Here's how you do it:",
        "<blockquote>background: var(--penguin-skin, black);</blockquote>",
        "This will set background to black if there is a problem with your variable.",
        "Note that this can be useful for debugging.",
        "<hr>",
        "Add a fallback value of <code>black</code> to the <code>background</code> property of <code>penguin-top</code> and <code>penguin-bottom</code> classes. This style will be applied because of a typo in the variable name."
      ],
      "tests": [
        {
          "text":
            "Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-top</code> class.",
          "testString":
            "assert(code.match(/.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi), 'Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-top</code> class.');"
        },
        {
          "text":
            "Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-bottom</code> class.",
          "testString":
            "assert(code.match(/.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}/gi), 'Apply the fallback value of <code>black</code> to the <code>background</code> property of the <code>penguin-bottom</code> class.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .penguin {\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n  \n    /* change code below */\n    background: var(--pengiun-skin);\n    /* change code above */\n  \n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n  \n    /* change code below */\n    background: var(--pengiun-skin);\n    /* change code above */\n  \n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  body {\n    background:#c6faf1;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Attach a Fallback value to a CSS Variable",
      "dashedName": "attach-a-fallback-value-to-a-css-variable"
    },
    {
      "id": "5a9d7295424fe3d0e10cad14",
      "description": [
        "When you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as <dfn>cascading</dfn>.",
        "Because of cascading, CSS variables are often defined in the <dfn>:root</dfn> element.",
        "You can think of the <code>:root</code> element as a container for your entire HTML document, in the same way that an <code>html</code> element is a container for the <code>body</code> element.",
        "By creating your variables in <code>:root</code>, they will be available throughout the whole web page.",
        "<hr>",
        "Define a variable named <code>--penguin-belly</code> in the <code>:root</code> selector and give it the value of <code>pink</code>. You can then see how the value will cascade down to change the value to pink, anywhere that variable is used."
      ],
      "tests": [
        {
          "text":
            "declare the <code>--penguin-belly</code> variable in the <code>:root</code> and assign it to <code>pink</code>.",
          "testString":
            "assert(code.match(/:root\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?pink\\s*?;[\\s\\S]*}/gi), 'declare the <code>--penguin-belly</code> variable in the <code>:root</code> and assign it to <code>pink</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  :root {\n    \n    /* add code below */\n    \n    /* add code above */\n  }\n  \n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n  \n  .penguin {\n    --penguin-skin: gray;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Cascading CSS variables",
      "dashedName": "cascading-css-variables"
    },
    {
      "id": "5a9d72a1424fe3d0e10cad15",
      "description": [
        "When you create your variables in <code>:root</code> they will set the value of that variable for the whole page.",
        "You can then over-write these variables by setting them again within a specific element.",
        "<hr>",
        "Change the value of <code>--penguin-belly</code> to <code>white</code> in the <code>penguin</code> class."
      ],
      "tests": [
        {
          "text":
            "The <code>penguin</code> class should reassign the <code>--penguin-belly</code> variable to <code>white</code>.",
          "testString":
            "assert(code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi), 'The <code>penguin</code> class should reassign the <code>--penguin-belly</code> variable to <code>white</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  :root {\n    --penguin-skin: gray;\n    --penguin-belly: pink;\n    --penguin-beak: orange;\n  }\n  \n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n  \n  .penguin {\n    \n    /* add code below */\n    \n    /* add code above */\n    \n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, pink);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change a variable for a specific area",
      "dashedName": "change-a-variable-for-a-specific-area"
    },
    {
      "id": "5a9d72ad424fe3d0e10cad16",
      "description": [
        "CSS Variables can simplify the way you use media queries.",
        "For instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.",
        "<hr>",
        "In the <code>:root</code> selector of the <code>media query</code>, change it so <code>--penguin-size</code> is redefined and given a value of <code>200px</code>. Also, redefine <code>--penguin-skin</code> and give it a value of <code>black</code>. Then resize the preview to see this change in action."
      ],
      "tests": [
        {
          "text":
            "<code>:root</code> should reassign the <code>--penguin-size</code> variable to <code>200px</code>.",
          "testString":
            "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-size\\s*?:\\s*?200px\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code> should reassign the <code>--penguin-size</code> variable to <code>200px</code>.');"
        },
        {
          "text":
            "<code>:root</code> should reassign the <code>--penguin-skin</code> variable to <code>black</code>.",
          "testString":
            "assert(code.match(/media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?black\\s*?;[\\s\\S]*}[\\s\\S]*}/gi), '<code>:root</code> should reassign the <code>--penguin-skin</code> variable to <code>black</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  :root {\n    --penguin-size: 300px;\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n  }\n  \n  @media (max-width: 350px) {\n    :root {\n      \n      /* add code below */\n      \n      /* add code above */\n      \n    }\n  }\n  \n  .penguin {\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: var(--penguin-size, 300px);\n    height: var(--penguin-size, 300px);\n  }\n  \n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  \n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  \n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  \n  .right-hand {\n    top: 5%;\n    left: 25%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(130deg);\n    z-index: -1;\n    animation-duration: 3s;\n    animation-name: wave;\n    animation-iteration-count: infinite;\n    transform-origin:0% 0%;\n    animation-timing-function: linear;\n  }\n  \n  @keyframes wave {\n      10% {\n        transform: rotate(110deg);\n      }\n      20% {\n        transform: rotate(130deg);\n      }\n      30% {\n        transform: rotate(110deg);\n      } \n      40% {\n        transform: rotate(130deg);\n      }  \n    }\n  \n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  \n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  \n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  \n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  \n  .sparkle {\n    top: 25%;\n    left:-23%;\n    background: white;\n    width: 150%;\n    height: 100%;\n    border-radius: 50%;\n  }\n  \n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  \n  body {\n    background:#c6faf1;\n  }\n  \n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a media query to change a variable",
      "dashedName": "use-a-media-query-to-change-a-variable"
    },
    {
      "id": "bd7123c8c441eddfaeb5bdef",
      "description": [
        "Welcome to freeCodeCamp's HTML coding challenges. These will walk you through web development step-by-step.",
        "First, you'll start by building a simple web page using HTML. You can edit <code>code</code> in your <code>code editor</code>, which is embedded into this web page.",
        "Do you see the code in your code editor that says <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? That's an HTML <code>element</code>.",
        "Most HTML elements have an <code>opening tag</code> and a <code>closing tag</code>.",
        "Opening tags look like this:",
        "<code>&#60;h1&#62;</code>",
        "Closing tags look like this:",
        "<code>&#60;/h1&#62;</code>",
        "The only difference between opening and closing tags is the forward slash after the opening bracket of a closing tag.",
        "Each challenge has tests you can run at any time by clicking the \"Run tests\" button. When you pass all tests, you'll be prompted to submit your solution and go to the next coding challenge.",
        "<hr>",
        "To pass the test on this challenge, change your <code>h1</code> element's text to say \"Hello World\"."
      ],
      "tests": [
        {
          "text":
            "Your <code>h1</code> element should have the text \"Hello World\".",
          "testString":
            "assert.isTrue((/hello(\\s)+world/gi).test($('h1').text()), 'Your <code>h1</code> element should have the text \"Hello World\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<h1>Hello</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Say Hello to HTML Elements",
      "dashedName": "say-hello-to-html-elements"
    },
    {
      "id": "bad87fee1348bd9aedf0887a",
      "description": [
        "Over the next few lessons, we'll build an HTML5 cat photo web app piece-by-piece.",
        "The <code>h2</code> element you will be adding in this step will add a level two heading to the web page.",
        "This element tells the browser about the structure of your website. <code>h1</code> elements are often used for main headings, while <code>h2</code> elements are generally used for subheadings. There are also <code>h3</code>, <code>h4</code>, <code>h5</code> and <code>h6</code> elements to indicate different levels of subheadings.",
        "<hr>",
        "Add an <code>h2</code> tag that says \"CatPhotoApp\" to create a second HTML <code>element</code> below your \"Hello World\" <code>h1</code> element."
      ],
      "tests": [
        {
          "text": "Create an <code>h2</code> element.",
          "testString":
            "assert(($(\"h2\").length > 0), 'Create an <code>h2</code> element.');"
        },
        {
          "text": "Make sure your <code>h2</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/h2>/g) && code.match(/<\\/h2>/g).length === code.match(/<h2>/g).length, 'Make sure your <code>h2</code> element has a closing tag.');"
        },
        {
          "text":
            "Your <code>h2</code> element should have the text \"CatPhotoApp\".",
          "testString":
            "assert.isTrue((/cat(\\s)?photo(\\s)?app/gi).test($(\"h2\").text()), 'Your <code>h2</code> element should have the text \"CatPhotoApp\".');"
        },
        {
          "text":
            "Your <code>h1</code> element should have the text \"Hello World\".",
          "testString":
            "assert.isTrue((/hello(\\s)+world/gi).test($(\"h1\").text()), 'Your <code>h1</code> element should have the text \"Hello World\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<h1>Hello World</h1>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Headline with the h2 Element",
      "dashedName": "headline-with-the-h2-element"
    },
    {
      "id": "bad87fee1348bd9aedf08801",
      "description": [
        "<code>p</code> elements are the preferred element for paragraph text on websites. <code>p</code> is short for \"paragraph\".",
        "You can create a paragraph element like this:",
        "<code>&#60;p&#62;I'm a p tag!&#60;/p&#62;</code>",
        "<hr>",
        "Create a <code>p</code> element below your <code>h2</code> element, and give it the text \"Hello Paragraph\"."
      ],
      "tests": [
        {
          "text": "Create a <code>p</code> element.",
          "testString":
            "assert(($(\"p\").length > 0), 'Create a <code>p</code> element.');"
        },
        {
          "text":
            "Your <code>p</code> element should have the text \"Hello Paragraph\".",
          "testString":
            "assert.isTrue((/hello(\\s)+paragraph/gi).test($(\"p\").text()), 'Your <code>p</code> element should have the text \"Hello Paragraph\".');"
        },
        {
          "text": "Make sure your <code>p</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/p>/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure your <code>p</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Inform with the Paragraph Element",
      "dashedName": "inform-with-the-paragraph-element"
    },
    {
      "id": "bad87fee1348bd9aedf08833",
      "description": [
        "Web developers traditionally use <code>lorem ipsum text</code> as placeholder text. The 'lorem ipsum' text is randomly scraped from a famous passage by Cicero of Ancient Rome.",
        "Lorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.",
        "Well, 5 centuries is long enough. Since we're building a CatPhotoApp, let's use something called <code>kitty ipsum text</code>.",
        "<hr>",
        "Replace the text inside your <code>p</code> element with the first few words of this kitty ipsum text: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>p</code> element should contain the first few words of the provided <code>kitty ipsum text</code>.",
          "testString":
            "assert.isTrue((/Kitty(\\s)+ipsum/gi).test($(\"p\").text()), 'Your <code>p</code> element should contain the first few words of the provided <code>kitty ipsum text</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Hello Paragraph</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Fill in the Blank with Placeholder Text",
      "dashedName": "fill-in-the-blank-with-placeholder-text"
    },
    {
      "id": "bad87fee1348bd9aedf08802",
      "description": [
        "Commenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed the end user.",
        "Commenting is also a convenient way to make code inactive without having to delete it entirely.",
        "Comments in HTML starts with <code>&#60;!--</code>, and ends with a <code>--&#62;</code>",
        "<hr>",
        "Uncomment your <code>h1</code>, <code>h2</code> and <code>p</code> elements."
      ],
      "tests": [
        {
          "text":
            "Make your <code>h1</code> element visible on your page by uncommenting it.",
          "testString":
            "assert($(\"h1\").length > 0, 'Make your <code>h1</code> element visible on your page by uncommenting it.');"
        },
        {
          "text":
            "Make your <code>h2</code> element visible on your page by uncommenting it.",
          "testString":
            "assert($(\"h2\").length > 0, 'Make your <code>h2</code> element visible on your page by uncommenting it.');"
        },
        {
          "text":
            "Make your <code>p</code> element visible on your page by uncommenting it.",
          "testString":
            "assert($(\"p\").length > 0, 'Make your <code>p</code> element visible on your page by uncommenting it.');"
        },
        {
          "text":
            "Be sure to delete all trailing comment tags&#44; i.e. <code>--&#62;</code>.",
          "testString":
            "assert(!/[^fc]-->/gi.test(code.replace(/ *<!--[^fc]*\\n/g,'')), 'Be sure to delete all trailing comment tags&#44; i.e. <code>--&#62;</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->",
          "head": "",
          "tail": ""
        }
      },
      "name": "Uncomment HTML",
      "dashedName": "uncomment-html"
    },
    {
      "id": "bad87fee1348bd9aedf08804",
      "description": [
        "Remember that in order to start a comment, you need to use <code>&#60;!--</code> and to end a comment, you need to use <code>--&#62;</code>",
        "Here you'll need to end the comment before your <code>h2</code> element begins.",
        "<hr>",
        "Comment out your <code>h1</code> element and your <code>p</code> element, but not your <code>h2</code> element."
      ],
      "tests": [
        {
          "text":
            "Comment out your <code>h1</code> element so that it is not visible on your page.",
          "testString":
            "assert(($(\"h1\").length === 0), 'Comment out your <code>h1</code> element so that it is not visible on your page.');"
        },
        {
          "text":
            "Leave your <code>h2</code> element uncommented so that it is visible on your page.",
          "testString":
            "assert(($(\"h2\").length > 0), 'Leave your <code>h2</code> element uncommented so that it is visible on your page.');"
        },
        {
          "text":
            "Comment out your <code>p</code> element so that it is not visible on your page.",
          "testString":
            "assert(($(\"p\").length === 0), 'Comment out your <code>p</code> element so that it is not visible on your page.');"
        },
        {
          "text":
            "Be sure to close each of your comments with <code>--&#62;</code>.",
          "testString":
            "assert(code.match(/[^fc]-->/g).length > 1, 'Be sure to close each of your comments with <code>--&#62;</code>.');"
        },
        {
          "text":
            "Do not change the order of the <code>h1</code> <code>h2</code> or <code>p</code> in the code.",
          "testString":
            "assert((code.match(/<([a-z0-9]){1,2}>/g)[0]===\"<h1>\" && code.match(/<([a-z0-9]){1,2}>/g)[1]===\"<h2>\" && code.match(/<([a-z0-9]){1,2}>/g)[2]===\"<p>\") , 'Do not change the order of the <code>h1</code> <code>h2</code> or <code>p</code> in the code.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comment out HTML",
      "dashedName": "comment-out-html"
    },
    {
      "id": "bad87fed1348bd9aedf08833",
      "description": [
        "Our phone doesn't have much vertical space.",
        "Let's remove the unnecessary elements so we can start building our CatPhotoApp.",
        "<hr>",
        "Delete your <code>h1</code> element so we can simplify our view."
      ],
      "tests": [
        {
          "text": "Delete your <code>h1</code> element.",
          "testString":
            "assert(($(\"h1\").length == 0), 'Delete your <code>h1</code> element.');"
        },
        {
          "text": "Leave your <code>h2</code> element on the page.",
          "testString":
            "assert(($(\"h2\").length > 0), 'Leave your <code>h2</code> element on the page.');"
        },
        {
          "text": "Leave your <code>p</code> element on the page.",
          "testString":
            "assert(($(\"p\").length > 0), 'Leave your <code>p</code> element on the page.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Delete HTML Elements",
      "dashedName": "delete-html-elements"
    },
    {
      "id": "bad87fee1348bd9aecf08801",
      "description": [
        "HTML5 introduces more descriptive HTML tags. These include <code>header</code>, <code>footer</code>, <code>nav</code>, <code>video</code>, <code>article</code>, <code>section</code> and others.",
        "These tags make your HTML easier to read, and also help with Search Engine Optimization (SEO) and accessibility.",
        "The <code>main</code> HTML5 tag helps search engines and other developers find the main content of your page.",
        "<strong>Note</strong><br>Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.",
        "<hr>",
        "Create a second <code>p</code> element after the existing <code>p</code> element with the following kitty ipsum text: <code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code>",
        "Wrap the paragraphs with an opening and closing <code>main</code> tag."
      ],
      "tests": [
        {
          "text": "You need 2 <code>p</code> elements with Kitty Ipsum text.",
          "testString":
            "assert($(\"p\").length > 1, 'You need 2 <code>p</code> elements with Kitty Ipsum text.');"
        },
        {
          "text":
            "Make sure each of your <code>p</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/p>/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure each of your <code>p</code> elements has a closing tag.');"
        },
        {
          "text":
            "Your <code>p</code> element should contain the first few words of the provided additional <code>kitty ipsum text</code>.",
          "testString":
            "assert.isTrue((/Purr\\s+jump\\s+eat/gi).test($(\"p\").text()), 'Your <code>p</code> element should contain the first few words of the provided additional <code>kitty ipsum text</code>.');"
        },
        {
          "text": "Your code should have one <code>main</code> element.",
          "testString":
            "assert($('main').length === 1, 'Your code should have one <code>main</code> element.');"
        },
        {
          "text":
            "The <code>main</code> element should have two paragraph elements as children.",
          "testString":
            "assert($(\"main\").children(\"p\").length === 2, 'The <code>main</code> element should have two paragraph elements as children.');"
        },
        {
          "text":
            "The opening <code>main</code> tag should come before the first paragraph tag.",
          "testString":
            "assert(code.match(/<main>\\s*?<p>/g), 'The opening <code>main</code> tag should come before the first paragraph tag.');"
        },
        {
          "text":
            "The closing <code>main</code> tag should come after the second closing paragraph tag.",
          "testString":
            "assert(code.match(/<\\/p>\\s*?<\\/main>/g), 'The closing <code>main</code> tag should come after the second closing paragraph tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Introduction to HTML5 Elements",
      "dashedName": "introduction-to-html5-elements"
    },
    {
      "id": "bad87fee1348bd9aedf08812",
      "description": [
        "You can add images to your website by using the <code>img</code> element, and point to a specific image's URL using the <code>src</code> attribute.",
        "An example of this would be:",
        "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code>",
        "Note that <code>img</code> elements are self-closing.",
        "All <code>img</code> elements <strong>must</strong> have an <code>alt</code> attribute. The text inside an <code>alt</code> attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.",
        "Note: If the image is purely decorative, using an empty <code>alt</code> attribute is a best practice.",
        "Ideally the <code>alt</code> attribute should not contain special characters unless needed.",
        "Let's add an <code>alt</code> attribute to our <code>img</code> example above:",
        "<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\" alt=\"Author standing on a beach with two thumbs up.\"&#62</code>",
        "<hr>",
        "Let's try to add an image to our website:",
        "Insert an <code>img</code> tag, before the <code>h2</code> element.",
        "Now set the <code>src</code> attribute so that it points to this url:",
        "<code>https://bit.ly/fcc-relaxing-cat</code>",
        "Finally don't forget to give your image an <code>alt</code> text."
      ],
      "tests": [
        {
          "text": "Your page should have an image element.",
          "testString":
            "assert($(\"img\").length > 0, 'Your page should have an image element.');"
        },
        {
          "text":
            "Your image should have a <code>src</code> attribute that points to the kitten image.",
          "testString":
            "assert(new RegExp(\"\\/\\/bit.ly\\/fcc-relaxing-cat|\\/\\/s3.amazonaws.com\\/freecodecamp\\/relaxing-cat.jpg\", \"gi\").test($(\"img\").attr(\"src\")), 'Your image should have a <code>src</code> attribute that points to the kitten image.');"
        },
        {
          "text":
            "Your image element <strong>must</strong> have an <code>alt</code> attribute.",
          "testString":
            "assert(code.match(/alt\\s*?=\\s*?(\\\"|\\').*(\\\"|\\')/), 'Your image element <strong>must</strong> have an <code>alt</code> attribute.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  \n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Images to Your Website",
      "dashedName": "add-images-to-your-website"
    },
    {
      "id": "bad87fee1348bd9aedf08816",
      "description": [
        "You can use <code>anchor</code> elements to link to content outside of your web page.",
        "<code>anchor</code> elements need a destination web address called an <code>href</code> attribute. They also need anchor text. Here's an example:",
        "<code>&#60;a href=\"https://freecodecamp.org\">this links to freecodecamp.org&#60;/a&#62;</code>",
        "Then your browser will display the text <strong>\"this links to freecodecamp.org\"</strong> as a link you can click. And that link will take you to the web address <strong>https://www.freecodecamp.org</strong>.",
        "<hr>",
        "Create an <code>a</code> element that links to <code>http://freecatphotoapp.com</code> and has \"cat photos\" as its <code>anchor text</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>a</code> element should have the <code>anchor text</code> of \"cat photos\".",
          "testString":
            "assert((/cat photos/gi).test($(\"a\").text()), 'Your <code>a</code> element should have the <code>anchor text</code> of \"cat photos\".');"
        },
        {
          "text":
            "You need an <code>a</code> element that links to <code>http&#58;//freecatphotoapp<wbr>.com</code>",
          "testString":
            "assert(/http:\\/\\/(www\\.)?freecatphotoapp\\.com/gi.test($(\"a\").attr(\"href\")), 'You need an <code>a</code> element that links to <code>http&#58;//freecatphotoapp<wbr>.com</code>');"
        },
        {
          "text": "Make sure your <code>a</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/a>/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure your <code>a</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  \n  \n  \n  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Link to External Pages with Anchor Elements",
      "dashedName": "link-to-external-pages-with-anchor-elements"
    },
    {
      "id": "bad88fee1348bd9aedf08816",
      "description": [
        "Anchor elements can also be used to create internal links to jump to different sections within a webpage.",
        "To create an internal link, you assign a link's <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the <code>id</code> attribute for the element that you want to internally link to, usually further down the page. You then need to add the same <code>id</code> attribute to the element you are linking to. An <code>id</code> is an attribute that uniquely describes an element.",
        "Below is an example of an internal anchor link and its target element:",
        "<blockquote>&lt;a href=\"#contacts-header\"&gt;Contacts&lt;/a&gt;<br>...<br>&lt;h2 id=\"contacts-header\"&gt;Contacts&lt;/h2&gt;</blockquote>",
        "When users click the Contacts link, they'll be taken to the section of the webpage with the <b>Contacts</b> header element.",
        "<hr>",
        "Change your external link to an internal link by changing the <code>href</code> attribute to \"#footer\" and the text from \"cat photos\" to \"Jump to Bottom\".",
        "Remove the <code>target=\"_blank\"</code> attribute from the anchor tag since this causes the linked document to open in a new window tab.",
        "Then add an <code>id</code> attribute with a value of \"footer\" to the <code>&lt;footer&gt;</code> element at the bottom of the page."
      ],
      "tests": [
        {
          "text": "There should be only one anchor tag on your page.",
          "testString":
            "assert($('a').length == 1, 'There should be only one anchor tag on your page.');"
        },
        {
          "text":
            "There should be only one <code>footer</code> tag on your page.",
          "testString":
            "assert($('footer').length == 1, 'There should be only one <code>footer</code> tag on your page.');"
        },
        {
          "text":
            "The <code>a</code> tag should have an <code>href</code> attribute set to \"#footer\".",
          "testString":
            "assert($('a').eq(0).attr('href') == \"#footer\", 'The <code>a</code> tag should have an <code>href</code> attribute set to \"#footer\".');"
        },
        {
          "text":
            "The <code>a</code> tag should not have a <code>target</code> attribute",
          "testString":
            "assert(typeof $('a').eq(0).attr('target') == typeof undefined || $('a').eq(0).attr('target') == true, 'The <code>a</code> tag should not have a <code>target</code> attribute');"
        },
        {
          "text": "The <code>a</code> text should be \"Jump to Bottom\".",
          "testString":
            "assert($('a').eq(0).text().match(/Jump to Bottom/gi), 'The <code>a</code> text should be \"Jump to Bottom\".');"
        },
        {
          "text":
            "The <code>footer</code> tag should have an <code>id</code> attribute set to \"footer\".",
          "testString":
            "assert($('footer').eq(0).attr('id') == \"footer\", 'The <code>footer</code> tag should have an <code>id</code> attribute set to \"footer\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  \n  <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n  \n  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n  \n</main>\n  \n<footer>Copyright Cat Photo App</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Link to Internal Sections of a Page with Anchor Elements",
      "dashedName": "link-to-internal-sections-of-a-page-with-anchor-elements"
    },
    {
      "id": "bad87fee1348bd9aede08817",
      "description": [
        "You can nest links within other text elements.",
        "<blockquote>&#60;p&#62;<br> Here's a &#60;a href=\"http://freecodecamp.org\"&#62; link to freecodecamp.org&#60;/a&#62; for you to follow.<br>&#60;/p&#62;</blockquote>",
        "Let's break down the example:",
        "Normal text is wrapped in the <code>p</code> element:<br> <code>&#60;p&#62; Here's a ... for you to follow. &#60;/p&#62;</code>",
        "Next is the <code>anchor</code> element <code>&#60;a&#62;</code> (which requires a closing tag <code>&#60;/a&#62;</code>):<br>  <code>&#60;a&#62; ... &#60;/a&#62;</code>",
        "<code>href</code> is an anchor tag attribute that contains the URL address of the link:<br>  <code>&#60;a href=\"http://freecodecamp.org\"> ... &#60;/a&#62;</code>",
        "The text, <strong>\"link to freecodecamp.org\"</strong>, within the anchor element called <code>anchor text</code>, will display a link to click:<br>  <code>&#60;a href=\" ... \"&#62;link to freecodecamp.org&#60;/a&#62;</code>",
        "The final output of the example will look like this:<br><p>Here's a <a href=\"http://freecodecamp.org\"> link to freecodecamp.org</a> for you to follow.</p>",
        "<hr>",
        "Now nest your existing <code>a</code> element within a new <code>p</code> element (just after the existing <code>main</code> element). The new paragraph should have text that says \"View more cat photos\", where \"cat photos\" is a link, and the rest of the text is plain text."
      ],
      "tests": [
        {
          "text":
            "You need an <code>a</code> element that links to \"http://freecatphotoapp.com\".",
          "testString":
            "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").length > 0 || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").length > 0), 'You need an <code>a</code> element that links to \"http://freecatphotoapp.com\".');"
        },
        {
          "text":
            "Your <code>a</code> element should have the anchor text of \"cat photos\"",
          "testString":
            "assert($(\"a\").text().match(/cat\\sphotos/gi), 'Your <code>a</code> element should have the anchor text of \"cat photos\"');"
        },
        {
          "text":
            "Create a new <code>p</code> element around your <code>a</code> element. There should be at least 3 total <code>p</code> tags in your HTML code.",
          "testString":
            "assert($(\"p\") && $(\"p\").length > 2, 'Create a new <code>p</code> element around your <code>a</code> element. There should be at least 3 total <code>p</code> tags in your HTML code.');"
        },
        {
          "text":
            "Your <code>a</code> element should be nested within your new <code>p</code> element.",
          "testString":
            "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").parent().is(\"p\") || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").parent().is(\"p\")), 'Your <code>a</code> element should be nested within your new <code>p</code> element.');"
        },
        {
          "text":
            "Your <code>p</code> element should have the text \"View more \" (with a space after it).",
          "testString":
            "assert(($(\"a[href=\\\"http://freecatphotoapp.com\\\"]\").parent().text().match(/View\\smore\\s/gi) || $(\"a[href=\\\"http://www.freecatphotoapp.com\\\"]\").parent().text().match(/View\\smore\\s/gi)), 'Your <code>p</code> element should have the text \"View more \" (with a space after it).');"
        },
        {
          "text":
            "Your <code>a</code> element should <em>not</em> have the text \"View more\".",
          "testString":
            "assert(!$(\"a\").text().match(/View\\smore/gi), 'Your <code>a</code> element should <em>not</em> have the text \"View more\".');"
        },
        {
          "text":
            "Make sure each of your <code>p</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/p>/g) && code.match(/<p/g) && code.match(/<\\/p>/g).length === code.match(/<p/g).length, 'Make sure each of your <code>p</code> elements has a closing tag.');"
        },
        {
          "text":
            "Make sure each of your <code>a</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/a>/g) && code.match(/<a/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure each of your <code>a</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  \n  <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n  \n  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Nest an Anchor Element within a Paragraph",
      "dashedName": "nest-an-anchor-element-within-a-paragraph"
    },
    {
      "id": "bad87fee1348bd9aedf08817",
      "description": [
        "Sometimes you want to add <code>a</code> elements to your website before you know where they will link.",
        "This is also handy when you're changing the behavior of a link using <code>JavaScript</code>, which we'll learn about later.",
        "<hr>",
        "The current value of the <code>href</code> attribute is a link that points to \"http://freecatphotoapp.com\". Replace the <code>href</code> attribute value with a <code>#</code>, also known as a hash symbol, to create a dead link.",
        "For example: <code>href=\"#\"</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>a</code> element should be a dead link with the value of the <code>href</code> attribute set to \"#\".",
          "testString":
            "assert($(\"a\").attr(\"href\") === \"#\", 'Your <code>a</code> element should be a dead link with the value of the <code>href</code> attribute set to \"#\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"http://freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>\n  \n  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Dead Links Using the Hash Symbol",
      "dashedName": "make-dead-links-using-the-hash-symbol"
    },
    {
      "id": "bad87fee1348bd9aedf08820",
      "description": [
        "You can make elements into links by nesting them within an <code>a</code> element.",
        "Nest your image within an <code>a</code> element. Here's an example:",
        "<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\" alt=\"Three kittens running towards the camera.\"&#62;&#60;/a&#62;</code>",
        "Remember to use <code>#</code> as your <code>a</code> element's <code>href</code> property in order to turn it into a dead link.",
        "<hr>",
        "Place the existing image element within an anchor element.",
        "Once you've done this, hover over your image with your cursor. Your cursor's normal pointer should become the link clicking pointer. The photo is now a link."
      ],
      "tests": [
        {
          "text":
            "Nest the existing <code>img</code> element within an <code>a</code> element.",
          "testString":
            "assert($(\"a\").children(\"img\").length > 0, 'Nest the existing <code>img</code> element within an <code>a</code> element.');"
        },
        {
          "text":
            "Your <code>a</code> element should be a dead link with a <code>href</code> attribute set to <code>#</code>.",
          "testString":
            "assert(new RegExp(\"#\").test($(\"a\").children(\"img\").parent().attr(\"href\")), 'Your <code>a</code> element should be a dead link with a <code>href</code> attribute set to <code>#</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>a</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/a>/g) && code.match(/<a/g) && code.match(/<\\/a>/g).length === code.match(/<a/g).length, 'Make sure each of your <code>a</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Turn an Image into a Link",
      "dashedName": "turn-an-image-into-a-link"
    },
    {
      "id": "bad87fee1348bd9aedf08827",
      "description": [
        "HTML has a special element for creating <code>unordered lists</code>, or bullet point style lists.",
        "Unordered lists start with an opening <code>&#60;ul&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, unordered lists close with a <code>&#60;/ul&#62;</code>",
        "For example: ",
        "<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;milk&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;cheese&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>",
        "would create a bullet point style list of \"milk\" and \"cheese\".",
        "<hr>",
        "Remove the last two <code>p</code> elements and create an unordered list of three things that cats love at the bottom of the page."
      ],
      "tests": [
        {
          "text": "Create a <code>ul</code> element.",
          "testString":
            "assert($(\"ul\").length > 0, 'Create a <code>ul</code> element.');"
        },
        {
          "text":
            "You should have three <code>li</code> elements within your <code>ul</code> element.",
          "testString":
            "assert($(\"ul li\").length > 2, 'You should have three <code>li</code> elements within your <code>ul</code> element.');"
        },
        {
          "text": "Make sure your <code>ul</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/ul>/gi) && code.match(/<ul/gi) && code.match(/<\\/ul>/gi).length === code.match(/<ul/gi).length, 'Make sure your <code>ul</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>li</code> elements have closing tags.",
          "testString":
            "assert(code.match(/<\\/li>/gi) && code.match(/<li[\\s>]/gi) && code.match(/<\\/li>/gi).length === code.match(/<li[\\s>]/gi).length, 'Make sure your <code>li</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Bulleted Unordered List",
      "dashedName": "create-a-bulleted-unordered-list"
    },
    {
      "id": "bad87fee1348bd9aedf08828",
      "description": [
        "HTML has another special element for creating <code>ordered lists</code>, or numbered lists.",
        "Ordered lists start with an opening <code>&#60;ol&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, ordered lists close with a <code>&#60;/ol&#62;</code>",
        "For example:",
        "<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>",
        "would create a numbered list of \"Garfield\" and \"Sylvester\".",
        "<hr>",
        "Create an ordered list of the top 3 things cats hate the most."
      ],
      "tests": [
        {
          "text":
            "You should have an ordered list for \"Top 3 things cats hate:\"",
          "testString":
            "assert((/Top 3 things cats hate:/i).test($(\"ol\").prev().text()), 'You should have an ordered list for \"Top 3 things cats hate:\"');"
        },
        {
          "text": "You should have an unordered list for \"Things cats love:\"",
          "testString":
            "assert((/Things cats love:/i).test($(\"ul\").prev().text()), 'You should have an unordered list for \"Things cats love:\"');"
        },
        {
          "text": "You should have only one <code>ul</code> element.",
          "testString":
            "assert.equal($(\"ul\").length, 1, 'You should have only one <code>ul</code> element.');"
        },
        {
          "text": "You should have only one <code>ol</code> element.",
          "testString":
            "assert.equal($(\"ol\").length, 1, 'You should have only one <code>ol</code> element.');"
        },
        {
          "text":
            "You should have three <code>li</code> elements within your <code>ul</code> element.",
          "testString":
            "assert.equal($(\"ul li\").length, 3, 'You should have three <code>li</code> elements within your <code>ul</code> element.');"
        },
        {
          "text":
            "You should have three <code>li</code> elements within your <code>ol</code> element.",
          "testString":
            "assert.equal($(\"ol li\").length, 3, 'You should have three <code>li</code> elements within your <code>ol</code> element.');"
        },
        {
          "text": "Make sure your <code>ul</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/ul>/g) && code.match(/<\\/ul>/g).length === code.match(/<ul>/g).length, 'Make sure your <code>ul</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>ol</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/ol>/g) && code.match(/<\\/ol>/g).length === code.match(/<ol>/g).length, 'Make sure your <code>ol</code> element has a closing tag.');"
        },
        {
          "text": "Make sure your <code>li</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/li>/g) && code.match(/<li>/g) && code.match(/<\\/li>/g).length === code.match(/<li>/g).length, 'Make sure your <code>li</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  \n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create an Ordered List",
      "dashedName": "create-an-ordered-list"
    },
    {
      "id": "bad87fee1348bd9aedf08829",
      "description": [
        "Now let's create a web form.",
        "Input elements are a convenient way to get input from your user.",
        "You can create a text input like this:",
        "<code>&#60;input type=\"text\"&#62;</code>",
        "Note that <code>input</code> elements are self-closing.",
        "<hr>",
        "Create an <code>input</code> element of type <code>text</code> below your lists."
      ],
      "tests": [
        {
          "text":
            "Your app should have an <code>input</code> element of type <code>text</code>.",
          "testString":
            "assert($(\"input[type=text]\").length > 0, 'Your app should have an <code>input</code> element of type <code>text</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  \n  \n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Text Field",
      "dashedName": "create-a-text-field"
    },
    {
      "id": "bad87fee1348bd9aedf08830",
      "description": [
        "Placeholder text is what is displayed in your <code>input</code> element before your user has inputted anything.",
        "You can create placeholder text like so:",
        "<code>&#60;input type=\"text\" placeholder=\"this is placeholder text\"&#62;</code>",
        "<hr>",
        "Set the <code>placeholder</code> value of your text <code>input</code> to \"cat photo URL\"."
      ],
      "tests": [
        {
          "text":
            "Add a <code>placeholder</code> attribute to the existing text <code>input</code> element.",
          "testString":
            "assert($(\"input[placeholder]\").length > 0, 'Add a <code>placeholder</code> attribute to the existing text <code>input</code> element.');"
        },
        {
          "text":
            "Set the value of your placeholder attribute to \"cat photo URL\".",
          "testString":
            "assert($(\"input\") && $(\"input\").attr(\"placeholder\") && $(\"input\").attr(\"placeholder\").match(/cat\\s+photo\\s+URL/gi), 'Set the value of your placeholder attribute to \"cat photo URL\".');"
        },
        {
          "text":
            "The finished <code>input</code> element should have valid syntax.",
          "testString":
            "assert($(\"input[type=text]\").length > 0 && code.match(/<input((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[\\^'\">\\s]+))?)+\\s*|\\s*)\\/?>/gi), 'The finished <code>input</code> element should have valid syntax.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\">\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Placeholder Text to a Text Field",
      "dashedName": "add-placeholder-text-to-a-text-field"
    },
    {
      "id": "bad87fee1348bd9aede08830",
      "description": [
        "You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your <code>form</code> element.",
        "For example:",
        "<code>&#60;form action=\"/url-where-you-want-to-submit-form-data\"&#62;&#60;/form&#62;</code>",
        "<hr>",
        "Nest your text field inside a <code>form</code> element, and add the <code>action=\"/submit-cat-photo\"</code> attribute to the form element."
      ],
      "tests": [
        {
          "text":
            "Nest your text input element within a <code>form</code> element.",
          "testString":
            "assert($(\"form\") && $(\"form\").children(\"input\") && $(\"form\").children(\"input\").length > 0, 'Nest your text input element within a <code>form</code> element.');"
        },
        {
          "text":
            "Make sure your <code>form</code> has an <code>action</code> attribute which is set to <code>/submit-cat-photo</code>",
          "testString":
            "assert($(\"form\").attr(\"action\") === \"/submit-cat-photo\", 'Make sure your <code>form</code> has an <code>action</code> attribute which is set to <code>/submit-cat-photo</code>');"
        },
        {
          "text":
            "Make sure your <code>form</code> element has well-formed open and close tags.",
          "testString":
            "assert(code.match(/<\\/form>/g) && code.match(/<form [^<]*>/g) && code.match(/<\\/form>/g).length === code.match(/<form [^<]*>/g).length, 'Make sure your <code>form</code> element has well-formed open and close tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n<main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Form Element",
      "dashedName": "create-a-form-element"
    },
    {
      "id": "bad87fee1348bd9aedd08830",
      "description": [
        "Let's add a <code>submit</code> button to your form. Clicking this button will send the data from your form to the URL you specified with your form's <code>action</code> attribute.",
        "Here's an example submit button:",
        "<code>&#60;button type=\"submit\"&#62;this button submits the form&#60;/button&#62;</code>",
        "<hr>",
        "Add a button as the last element of your <code>form</code> element with a type of <code>submit</code>, and \"Submit\" as its text."
      ],
      "tests": [
        {
          "text": "Your form should have a button inside it.",
          "testString":
            "assert($(\"form\").children(\"button\").length > 0, 'Your form should have a button inside it.');"
        },
        {
          "text":
            "Your submit button should have the attribute <code>type</code> set to <code>submit</code>.",
          "testString":
            "assert($(\"button\").attr(\"type\") === \"submit\", 'Your submit button should have the attribute <code>type</code> set to <code>submit</code>.');"
        },
        {
          "text": "Your submit button should only have the text \"Submit\".",
          "testString":
            "assert($(\"button\").text().match(/^\\s*submit\\s*$/gi), 'Your submit button should only have the text \"Submit\".');"
        },
        {
          "text":
            "Make sure your <code>button</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure your <code>button</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add a Submit Button to a Form",
      "dashedName": "add-a-submit-button-to-a-form"
    },
    {
      "id": "bad87fee1348bd9aedc08830",
      "description": [
        "You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.",
        "For example, if you wanted to make a text input field required, you can just add the attribute <code>required</code> within your <code>input</code> element, like this: <code>&#60;input type=\"text\" required&#62;</code>",
        "<hr>",
        "Make your text <code>input</code> a <code>required</code> field, so that your user can't submit the form without completing this field.",
        "Then try to submit the form without inputting any text. See how your HTML5 form notifies you that the field is required?"
      ],
      "tests": [
        {
          "text":
            "Your text <code>input</code> element should have the <code>required</code> attribute.",
          "testString":
            "assert($(\"input\").prop(\"required\"), 'Your text <code>input</code> element should have the <code>required</code> attribute.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use HTML5 to Require a Field",
      "dashedName": "use-html5-to-require-a-field"
    },
    {
      "id": "bad87fee1348bd9aedf08834",
      "description": [
        "You can use <code>radio buttons</code> for questions where you want the user to only give you one answer out of multiple options.",
        "Radio buttons are a type of <code>input</code>.",
        "Each of your radio buttons should be nested within its own <code>label</code> element. Wrapping an <code>input</code> element inside of a <code>label</code> element makes the label text clickable.",
        "All related radio buttons should have the same <code>name</code> attribute.",
        "Here's an example of a radio button:",
        "<blockquote>&#60;label&#62; <br> &#60;input type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>",
        "It is considered best practice to set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the <code>id</code> attribute of the <code>input</code> element. This allows assistive technologies to create a linked relationship between the label and the child <code>input</code> element. For example:",
        "<blockquote>&#60;label for=\"indoor\"&#62; <br> &#60;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>",
        "<hr>",
        "Add a pair of radio buttons to your form. One should have the option of <code>indoor</code> and the other should have the option of <code>outdoor</code>. Both should share the <code>name</code> attribute of <code>indoor-outdoor</code>."
      ],
      "tests": [
        {
          "text": "Your page should have two radio button elements.",
          "testString":
            "assert($('input[type=\"radio\"]').length > 1, 'Your page should have two radio button elements.');"
        },
        {
          "text":
            "Give your radio buttons the <code>name</code> attribute of <code>indoor-outdoor</code>.",
          "testString":
            "assert($('label > input[type=\"radio\"]').filter(\"[name='indoor-outdoor']\").length > 1, 'Give your radio buttons the <code>name</code> attribute of <code>indoor-outdoor</code>.');"
        },
        {
          "text":
            "Each of your two radio button elements should be nested in its own <code>label</code> element.",
          "testString":
            "assert($('label > input[type=\"radio\"]:only-child').length > 1, 'Each of your two radio button elements should be nested in its own <code>label</code> element.');"
        },
        {
          "text":
            "Make sure each of your <code>label</code> elements has a closing tag.",
          "testString":
            "assert((code.match(/<\\/label>/g) && code.match(/<label/g) && code.match(/<\\/label>/g).length === code.match(/<label/g).length), 'Make sure each of your <code>label</code> elements has a closing tag.');"
        },
        {
          "text":
            "One of your radio buttons should have the label <code>indoor</code>.",
          "testString":
            "assert($(\"label\").text().match(/indoor/gi), 'One of your radio buttons should have the label <code>indoor</code>.');"
        },
        {
          "text":
            "One of your radio buttons should have the label <code>outdoor</code>.",
          "testString":
            "assert($(\"label\").text().match(/outdoor/gi), 'One of your radio buttons should have the label <code>outdoor</code>.');"
        },
        {
          "text":
            "Each of your radio button elements should be added within the <code>form</code> tag.",
          "testString":
            "assert($(\"label\").parent().get(0).tagName.match('FORM'), 'Each of your radio button elements should be added within the <code>form</code> tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Set of Radio Buttons",
      "dashedName": "create-a-set-of-radio-buttons"
    },
    {
      "id": "bad87fee1348bd9aedf08835",
      "description": [
        "Forms commonly use <code>checkboxes</code> for questions that may have more than one answer.",
        "Checkboxes are a type of <code>input</code>",
        "Each of your checkboxes should be nested within its own <code>label</code> element.",
        "All related checkbox inputs should have the same <code>name</code> attribute.",
        "Here's an example of a checkbox:",
        "<code>&#60;label for=\"loving\"&#62;&#60;input id=\"loving\" type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code>",
        "<hr>",
        "Add to your form a set of three checkboxes. Each checkbox should be nested within its own <code>label</code> element. All three should share the <code>name</code> attribute of <code>personality</code>."
      ],
      "tests": [
        {
          "text": "Your page should have three checkbox elements.",
          "testString":
            "assert($('input[type=\"checkbox\"]').length > 2, 'Your page should have three checkbox elements.');"
        },
        {
          "text":
            "Each of your three checkbox elements should be nested in its own <code>label</code> element.",
          "testString":
            "assert($('label > input[type=\"checkbox\"]:only-child').length > 2, 'Each of your three checkbox elements should be nested in its own <code>label</code> element.');"
        },
        {
          "text":
            "Make sure each of your <code>label</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/label>/g) && code.match(/<label/g) && code.match(/<\\/label>/g).length === code.match(/<label/g).length, 'Make sure each of your <code>label</code> elements has a closing tag.');"
        },
        {
          "text":
            "Give your checkboxes the <code>name</code> attribute of <code>personality</code>.",
          "testString":
            "assert($('label > input[type=\"checkbox\"]').filter(\"[name='personality']\").length > 2, 'Give your checkboxes the <code>name</code> attribute of <code>personality</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Set of Checkboxes",
      "dashedName": "create-a-set-of-checkboxes"
    },
    {
      "id": "bad87fee1348bd9aedd08835",
      "description": [
        "You can set a checkbox or radio button to be checked by default using the <code>checked</code> attribute.",
        "To do this, just add the word \"checked\" to the inside of an input element. For example:",
        "<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>",
        "<hr>",
        "Set the first of your <code>radio buttons</code> and the first of your <code>checkboxes</code> to both be checked by default."
      ],
      "tests": [
        {
          "text":
            "Your first radio button on your form should be checked by default.",
          "testString":
            "assert($('input[type=\"radio\"]').prop(\"checked\"), 'Your first radio button on your form should be checked by default.');"
        },
        {
          "text":
            "Your first checkbox on your form should be checked by default.",
          "testString":
            "assert($('input[type=\"checkbox\"]').prop(\"checked\"), 'Your first checkbox on your form should be checked by default.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Check Radio Buttons and Checkboxes by Default",
      "dashedName": "check-radio-buttons-and-checkboxes-by-default"
    },
    {
      "id": "bad87fee1348bd9aede08835",
      "description": [
        "The <code>div</code> element, also known as a division element, is a general purpose container for other elements.",
        "The <code>div</code> element is probably the most commonly used HTML element of all.",
        "Just like any other non-self-closing element, you can open a <code>div</code> element with <code>&#60;div&#62;</code> and close it on another line with <code>&#60;/div&#62;</code>.",
        "<hr>",
        "Nest your \"Things cats love\" and \"Things cats hate\" lists all within a single <code>div</code> element.",
        "Hint: Try putting your opening <code>div</code> tag above your \"Things cats love\" <code>p</code> element and your closing <code>div</code> tag after your closing <code>ol</code> tag so that both of your lists are within one <code>div</code>."
      ],
      "tests": [
        {
          "text":
            "Nest your <code>p</code> elements inside your <code>div</code> element.",
          "testString":
            "assert($(\"div\").children(\"p\").length > 1, 'Nest your <code>p</code> elements inside your <code>div</code> element.');"
        },
        {
          "text":
            "Nest your <code>ul</code> element inside your <code>div</code> element.",
          "testString":
            "assert($(\"div\").children(\"ul\").length > 0, 'Nest your <code>ul</code> element inside your <code>div</code> element.');"
        },
        {
          "text":
            "Nest your <code>ol</code> element inside your <code>div</code> element.",
          "testString":
            "assert($(\"div\").children(\"ol\").length > 0, 'Nest your <code>ol</code> element inside your <code>div</code> element.');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<\\/div>/g).length === code.match(/<div>/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  \n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Nest Many Elements within a Single div Element",
      "dashedName": "nest-many-elements-within-a-single-div-element"
    },
    {
      "id": "587d78aa367417b2b2512aed",
      "description": [
        "The challenges so far have covered specific HTML tags and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.",
        "At the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.",
        "You tell the browser this information by adding the <code>&lt;!DOCTYPE ...&gt;</code> tag on the first line, where the \"<code>...</code>\" part is the version of HTML. For HTML5, you use <code>&lt;!DOCTYPE html&gt;</code>.",
        "The <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browsers. The <code>html</code> is not case sensitive.",
        "Next, the rest of your HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&lt;html&gt;</code> goes directly below the <code>&lt;!DOCTYPE html&gt;</code> line, and the closing <code>&lt;/html&gt;</code> goes at the end of the page.",
        "Here's an example of the page structure:",
        "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;!-- Your HTML code goes here --&gt;<br>&lt;/html&gt;</blockquote>",
        "<hr>",
        "Add a <code>DOCTYPE</code> tag for HTML5 to the top of the blank HTML document in the code editor. Under it, add opening and closing <code>html</code> tags, which wrap around an <code>h1</code> element. The heading can include any text."
      ],
      "tests": [
        {
          "text":
            "Your code should include a <code>&lt;!DOCTYPE html&gt;</code> tag.",
          "testString":
            "assert(code.match(/<!DOCTYPE\\s+?html\\s*?>/gi), 'Your code should include a <code>&lt;!DOCTYPE html&gt;</code> tag.');"
        },
        {
          "text": "There should be one <code>html</code> element.",
          "testString":
            "assert($('html').length == 1, 'There should be one <code>html</code> element.');"
        },
        {
          "text":
            "The <code>html</code> tags should wrap around one <code>h1</code> element.",
          "testString":
            "assert(code.match(/<html>\\s*?<h1>\\s*?.*?\\s*?<\\/h1>\\s*?<\\/html>/gi), 'The <code>html</code> tags should wrap around one <code>h1</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "",
          "head": "",
          "tail": ""
        }
      },
      "name": "Declare the Doctype of an HTML Document",
      "dashedName": "declare-the-doctype-of-an-html-document"
    },
    {
      "id": "587d78aa367417b2b2512aec",
      "description": [
        "You can add another level of organization in your HTML document within the <code>html</code> tags with the <code>head</code> and <code>body</code> elements. Any markup with information about your page would go into the <code>head</code> tag. Then any markup with the content of the page (what displays for a user) would go into the <code>body</code> tag.",
        "Metadata elements, such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code>, typically go inside the <code>head</code> element.",
        "Here's an example of a page's layout:",
        "<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;!-- metadata elements --&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;!-- page contents --&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</blockquote>",
        "<hr>",
        "Edit the markup so there's a <code>head</code> and a <code>body</code>. The <code>head</code> element should only include the <code>title</code>, and the <code>body</code> element should only include the <code>h1</code> and <code>p</code>."
      ],
      "tests": [
        {
          "text":
            "There should be only one <code>head</code> element on the page.",
          "testString":
            "assert($('head').length == 1, 'There should be only one <code>head</code> element on the page.');"
        },
        {
          "text":
            "There should be only one <code>body</code> element on the page.",
          "testString":
            "assert($('body').length == 1, 'There should be only one <code>body</code> element on the page.');"
        },
        {
          "text":
            "The <code>head</code> element should be a child of the <code>html</code> element.",
          "testString":
            "assert($('html').children('head').length == 1, 'The <code>head</code> element should be a child of the <code>html</code> element.');"
        },
        {
          "text":
            "The <code>body</code> element should be a child of the <code>html</code> element.",
          "testString":
            "assert($('html').children('body').length == 1, 'The <code>body</code> element should be a child of the <code>html</code> element.');"
        },
        {
          "text":
            "The <code>head</code> element should wrap around the <code>title</code> element.",
          "testString":
            "assert(code.match(/<head>\\s*?<title>\\s*?.*?\\s*?<\\/title>\\s*?<\\/head>/gi), 'The <code>head</code> element should wrap around the <code>title</code> element.');"
        },
        {
          "text":
            "The <code>body</code> element should wrap around both the <code>h1</code> and <code>p</code> elements.",
          "testString":
            "assert($('body').children('h1').length == 1 && $('body').children('p').length == 1, 'The <code>body</code> element should wrap around both the <code>h1</code> and <code>p</code> elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<!DOCTYPE html>\n<html>\n  <title>The best page ever</title>\n  \n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  \n</html>  ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Define the Head and Body of an HTML Document",
      "dashedName": "define-the-head-and-body-of-an-html-document"
    },
    {
      "id": "587d78ab367417b2b2512af0",
      "description": [
        "This section uses alternating challenge styles to show how to use CSS to position elements in a flexible way. First, a challenge will explain theory, then a practical challenge using a simple tweet component will apply the flexbox concept.",
        "Placing the CSS property <code>display: flex;</code> on an element allows you to use other flex properties to build a responsive page.",
        "<hr>",
        "Add the CSS property <code>display</code> to <code>#box-container</code> and set its value to flex."
      ],
      "tests": [
        {
          "text":
            "<code>#box-container</code> should have the <code>display</code> property set to a value of flex.",
          "testString":
            "assert($('#box-container').css('display') == 'flex', '<code>#box-container</code> should have the <code>display</code> property set to a value of flex.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    height: 500px;\n    \n  }\n  \n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n    \n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n    \n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use display flex to Position Two Boxes",
      "dashedName": "use-display-flex-to-position-two-boxes"
    },
    {
      "id": "587d78ab367417b2b2512af1",
      "description": [
        "To the right is the tweet embed that will be used as the practical example. Some of the elements would look better with a different layout. The last challenge demonstrated <code>display: flex</code>. Here you'll add it to several components in the tweet embed to start adjusting their positioning.",
        "<hr>",
        "Add the CSS property <code>display: flex</code> to all of the following items - note that the selectors are already set up in the CSS:",
        "<code>header</code>, the header's <code>.profile-name</code>, the header's <code>.follow-btn</code>, the header's <code>h3</code> and <code>h4</code>, the <code>footer</code>, and the footer's <code>.stats</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>header</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('header').css('display') == 'flex', 'Your <code>header</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>footer</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('footer').css('display') == 'flex', 'Your <code>footer</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>h3</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('h3').css('display') == 'flex', 'Your <code>h3</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>h4</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('h4').css('display') == 'flex', 'Your <code>h4</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>.profile-name</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('.profile-name').css('display') == 'flex', 'Your <code>.profile-name</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>.follow-btn</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('.follow-btn').css('display') == 'flex', 'Your <code>.follow-btn</code> should have a <code>display</code> property set to flex.');"
        },
        {
          "text":
            "Your <code>.stats</code> should have a <code>display</code> property set to flex.",
          "testString":
            "assert($('.stats').css('display') == 'flex', 'Your <code>.stats</code> should have a <code>display</code> property set to flex.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    \n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    \n    margin-left: 10px;\n  }\n  header .follow-btn {\n    \n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    \n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    \n  }\n  footer .stats {\n    \n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://pbs.twimg.com/profile_images/378800000147359764/54dc9a5c34e912f34db8662d53d16a39_400x400.png\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Flex Superpowers to the Tweet Embed",
      "dashedName": "add-flex-superpowers-to-the-tweet-embed"
    },
    {
      "id": "587d78ab367417b2b2512af2",
      "description": [
        "Adding <code>display: flex</code> to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the <code>flex-direction</code> property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically.",
        "Other options for <code>flex-direction</code> are row-reverse and column-reverse.",
        "<strong>Note</strong><br>The default value for the <code>flex-direction</code> property is row.",
        "<hr>",
        "Add the CSS property <code>flex-direction</code> to the <code>#box-container</code> element, and give it a value of row-reverse."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-container</code> element should have a <code>flex-direction</code> property set to row-reverse.",
          "testString":
            "assert($('#box-container').css('flex-direction') == 'row-reverse', 'The <code>#box-container</code> element should have a <code>flex-direction</code> property set to row-reverse.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    \n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexdirection Property to Make a Row",
      "dashedName": "use-the-flexdirection-property-to-make-a-row"
    },
    {
      "id": "587d78ab367417b2b2512af3",
      "description": [
        "The <code>header</code> and <code>footer</code> in the tweet embed example have child items that could be arranged as rows using the <code>flex-direction</code> property. This tells CSS to align the children horizontally.",
        "<hr>",
        "Add the CSS property <code>flex-direction</code> to both the <code>header</code> and <code>footer</code> and set the value to row."
      ],
      "tests": [
        {
          "text":
            "The <code>header</code> should have a <code>flex-direction</code> property set to row.",
          "testString":
            "assert(code.match(/header\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-direction:\\s*?row;/g), 'The <code>header</code> should have a <code>flex-direction</code> property set to row.');"
        },
        {
          "text":
            "The <code>footer</code> should have a <code>flex-direction</code> property set to row.",
          "testString":
            "assert(code.match(/footer\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-direction:\\s*?row;/g), 'The <code>footer</code> should have a <code>flex-direction</code> property set to row.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n    \n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n    \n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://pbs.twimg.com/profile_images/378800000147359764/54dc9a5c34e912f34db8662d53d16a39_400x400.png\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Apply the flexdirection Property to Create Rows in the Tweet Embed",
      "dashedName":
        "apply-the-flexdirection-property-to-create-rows-in-the-tweet-embed"
    },
    {
      "id": "587d78ac367417b2b2512af4",
      "description": [
        "The last two challenges used the <code>flex-direction</code> property set to row. This property can also create a column by vertically stacking the children of a flex container.",
        "<hr>",
        "Add the CSS property <code>flex-direction</code> to the <code>#box-container</code> element, and give it a value of column."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-container</code> element should have a <code>flex-direction</code> property set to column.",
          "testString":
            "assert($('#box-container').css('flex-direction') == 'column', 'The <code>#box-container</code> element should have a <code>flex-direction</code> property set to column.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    \n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexdirection Property to Make a Column",
      "dashedName": "use-the-flexdirection-property-to-make-a-column"
    },
    {
      "id": "587d78ac367417b2b2512af5",
      "description": [
        "The tweet embed <code>header</code> and <code>footer</code> used the <code>flex-direction</code> property earlier with a row value. Similarly, the items inside the <code>.profile-name</code> element would work well stacked as a column.",
        "<hr>",
        "Add the CSS property <code>flex-direction</code> to the header's <code>.profile-name</code> element and set the value to column."
      ],
      "tests": [
        {
          "text":
            "The <code>.profile-name</code> element should have a <code>flex-direction</code> property set to column.",
          "testString":
            "assert($('.profile-name').css('flex-direction') == 'column', 'The <code>.profile-name</code> element should have a <code>flex-direction</code> property set to column.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    \n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://pbs.twimg.com/profile_images/378800000147359764/54dc9a5c34e912f34db8662d53d16a39_400x400.png\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Apply the flexdirection Property to Create a Column in the Tweet Embed",
      "dashedName":
        "apply-the-flexdirection-property-to-create-a-column-in-the-tweet-embed"
    },
    {
      "id": "587d78ac367417b2b2512af6",
      "description": [
        "Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way. Fortunately, the <code>justify-content</code> property has several options to do this. But first, there is some important terminology to understand before reviewing those options.",
        "<a href=\"https://www.w3.org/TR/css-flexbox-1/images/flex-direction-terms.svg\" target=\"_blank\">Here is a useful image showing a row to illustrate the concepts below.</a>",
        "Recall that setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the <strong>main axis</strong>. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.",
        "There are several options for how to space the flex items along the line that is the main axis. One of the most commonly used is <code>justify-content: center;</code>, which aligns all the flex items to the center inside the flex container. Others options include:",
        "<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.</li><li><code>space-between</code>: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the other items between them are spaced evenly.</li><li><code>space-around</code>: similar to <code>space-between</code> but the first and last items are not locked to the edges of the container, the space is distributed around all the items</li></ul>",
        "<hr>",
        "An example helps show this property in action. Add the CSS property <code>justify-content</code> to the <code>#box-container</code> element, and give it a value of center.",
        "<strong>Bonus</strong><br>Try the other options for the <code>justify-content</code> property in the code editor to see their differences. But note that a value of center is the only one that will pass this challenge."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-container</code> element should have a <code>justify-content</code> property set to a value of center.",
          "testString":
            "assert($('#box-container').css('justify-content') == 'center', 'The <code>#box-container</code> element should have a <code>justify-content</code> property set to a value of center.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    \n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align Elements Using the justifycontent Property",
      "dashedName": "align-elements-using-the-justifycontent-property"
    },
    {
      "id": "587d78ac367417b2b2512af7",
      "description": [
        "The last challenge showed an example of the <code>justify-content</code> property. For the tweet embed, this property can be applied to align the items in the <code>.profile-name</code> element.",
        "<hr>",
        "Add the CSS property <code>justify-content</code> to the header's <code>.profile-name</code> element and set the value to any of the options from the last challenge."
      ],
      "tests": [
        {
          "text":
            "The <code>.profile-name</code> element should have the <code>justify-content</code> property set to any of these values: center, flex-start, flex-end, space-between, or space-around.",
          "testString":
            "assert(code.match(/header\\s.profile-name\\s*{\\s*?.*?\\s*?.*?\\s*?\\s*?.*?\\s*?justify-content\\s*:\\s*(center|flex-start|flex-end|space-between|space-around)\\s*;/g), 'The <code>.profile-name</code> element should have the <code>justify-content</code> property set to any of these values: center, flex-start, flex-end, space-between, or space-around.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    \n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://pbs.twimg.com/profile_images/378800000147359764/54dc9a5c34e912f34db8662d53d16a39_400x400.png\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the justifycontent Property in the Tweet Embed",
      "dashedName": "use-the-justifycontent-property-in-the-tweet-embed"
    },
    {
      "id": "587d78ad367417b2b2512af8",
      "description": [
        "The <code>align-items</code> property is similar to <code>justify-content</code>. Recall that the <code>justify-content</code> property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns it is a vertical line.",
        "Flex containers also have a <strong>cross axis</strong> which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.",
        "CSS offers the <code>align-items</code> property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.",
        "The different values available for <code>align-items</code> include:",
        "<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.</li><li><code>center</code>: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).</li><li><code>stretch</code>: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom.</li><li><code>baseline</code>: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.</li></ul>",
        "<hr>",
        "An example helps show this property in action. Add the CSS property <code>align-items</code> to the <code>#box-container</code> element, and give it a value of center.",
        "<strong>Bonus</strong><br>Try the other options for the <code>align-items</code> property in the code editor to see their differences. But note that a value of center is the only one that will pass this challenge."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-container</code> element should have an <code>align-items</code> property set to a value of center.",
          "testString":
            "assert($('#box-container').css('align-items') == 'center', 'The <code>#box-container</code> element should have an <code>align-items</code> property set to a value of center.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    \n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align Elements Using the alignitems Property",
      "dashedName": "align-elements-using-the-alignitems-property"
    },
    {
      "id": "587d78ad367417b2b2512af9",
      "description": [
        "The last challenge introduced the <code>align-items</code> property and gave an example. This property can be applied to a few tweet embed elements to align the flex items inside them.",
        "<hr>",
        "Add the CSS property <code>align-items</code> to the header's <code>.follow-btn</code> element, the header's <code>h3</code>, and the header's <code>h4</code>. Set the value to center."
      ],
      "tests": [
        {
          "text":
            "The <code>.follow-btn</code> element should have the <code>align-items</code> property set to a value of center.",
          "testString":
            "assert($('.follow-btn').css('align-items') == 'center', 'The <code>.follow-btn</code> element should have the <code>align-items</code> property set to a value of center.');"
        },
        {
          "text":
            "The <code>h3</code> element should have the <code>align-items</code> property set to a value of center.",
          "testString":
            "assert($('h3').css('align-items') == 'center', 'The <code>h3</code> element should have the <code>align-items</code> property set to a value of center.');"
        },
        {
          "text":
            "The <code>h4</code> element should have the <code>align-items</code> property set to a value of center.",
          "testString":
            "assert($('h4').css('align-items') == 'center', 'The <code>h4</code> element should have the <code>align-items</code> property set to a value of center.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    \n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    \n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://pbs.twimg.com/profile_images/378800000147359764/54dc9a5c34e912f34db8662d53d16a39_400x400.png\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the alignitems Property in the Tweet Embed",
      "dashedName": "use-the-alignitems-property-in-the-tweet-embed"
    },
    {
      "id": "587d78ad367417b2b2512afa",
      "description": [
        "CSS flexbox has a feature to split a flex item into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.",
        "However, using the <code>flex-wrap</code> property, it tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.",
        "CSS also has options for the direction of the wrap:",
        "<ul><li><code>nowrap</code>: this is the default setting, and does not wrap items.</li><li><code>wrap</code>: wraps items from left-to-right if they are in a row, or top-to-bottom if they are in a column.</li><li><code>wrap-reverse</code>: wraps items from right-to-left if they are in a row, or bottom-to-top if they are in a column.</li></ul>",
        "<hr>",
        "The current layout has too many boxes for one row. Add the CSS property <code>flex-wrap</code> to the <code>#box-container</code> element, and give it a value of wrap."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-container</code> element should have the <code>flex-wrap</code> property set to a value of wrap.",
          "testString":
            "assert($('#box-container').css('flex-wrap') == 'wrap', 'The <code>#box-container</code> element should have the <code>flex-wrap</code> property set to a value of wrap.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n      \n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexwrap Property to Wrap a Row or Column",
      "dashedName": "use-the-flexwrap-property-to-wrap-a-row-or-column"
    },
    {
      "id": "587d78ad367417b2b2512afb",
      "description": [
        "So far, all the properties in the challenges apply to the flex container (the parent of the flex items). However, there are several useful properties for the flex items.",
        "The first is the <code>flex-shrink</code> property. When it's used, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.",
        "The <code>flex-shrink</code> property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a <code>flex-shrink</code> value of 1 and the other has a <code>flex-shrink</code> value of 3, the one with the value of 3 will shrink three times as much as the other.",
        "<hr>",
        "Add the CSS property <code>flex-shrink</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of 1 and <code>#box-2</code> a value of 2."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have the <code>flex-shrink</code> property set to a value of 1.",
          "testString":
            "assert($('#box-1').css('flex-shrink') == '1', 'The <code>#box-1</code> element should have the <code>flex-shrink</code> property set to a value of 1.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>flex-shrink</code> property set to a value of 2.",
          "testString":
            "assert($('#box-2').css('flex-shrink') == '2', 'The <code>#box-2</code> element should have the <code>flex-shrink</code> property set to a value of 2.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n    \n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n    \n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexshrink Property to Shrink Items",
      "dashedName": "use-the-flexshrink-property-to-shrink-items"
    },
    {
      "id": "587d78ae367417b2b2512afc",
      "description": [
        "The opposite of <code>flex-shrink</code> is the <code>flex-grow</code> property. Recall that <code>flex-shrink</code> controls the size of the items when the container shrinks. The <code>flex-grow</code> property controls the size of items when the parent container expands.",
        "Using a similar example from the last challenge, if one item has a <code>flex-grow</code> value of 1 and the other has a <code>flex-grow</code> value of 3, the one with the value of 3 will grow three times as much as the other.",
        "<hr>",
        "Add the CSS property <code>flex-grow</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of 1 and <code>#box-2</code> a value of 2."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have the <code>flex-grow</code> property set to a value of 1.",
          "testString":
            "assert($('#box-1').css('flex-grow') == '1', 'The <code>#box-1</code> element should have the <code>flex-grow</code> property set to a value of 1.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>flex-grow</code> property set to a value of 2.",
          "testString":
            "assert($('#box-2').css('flex-grow') == '2', 'The <code>#box-2</code> element should have the <code>flex-grow</code> property set to a value of 2.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  \n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    \n  }\n  \n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    \n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexgrow Property to Expand Items",
      "dashedName": "use-the-flexgrow-property-to-expand-items"
    },
    {
      "id": "587d78ae367417b2b2512afd",
      "description": [
        "The <code>flex-basis</code> property specifies the initial size of the item before CSS makes adjustments with <code>flex-shrink</code> or <code>flex-grow</code>.",
        "The units used by the <code>flex-basis</code> property are the same as other size properties (<code>px</code>, <code>em</code>, <code>%</code>, etc.). The value <code>auto</code> sizes items based on the content.",
        "<hr>",
        "Set the initial size of the boxes using <code>flex-basis</code>. Add the CSS property <code>flex-basis</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>10em</code> and <code>#box-2</code> a value of <code>20em</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have a <code>flex-basis</code> property.",
          "testString":
            "assert($('#box-1').css('flex-basis') != 'auto', 'The <code>#box-1</code> element should have a <code>flex-basis</code> property.');"
        },
        {
          "text":
            "The <code>#box-1</code> element should have a <code>flex-basis</code> value of <code>10em</code>.",
          "testString":
            "assert(code.match(/#box-1\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?10em;/g), 'The <code>#box-1</code> element should have a <code>flex-basis</code> value of <code>10em</code>.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>flex-basis</code> property.",
          "testString":
            "assert($('#box-2').css('flex-basis') != 'auto', 'The <code>#box-2</code> element should have the <code>flex-basis</code> property.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have a <code>flex-basis</code> value of <code>20em</code>.",
          "testString":
            "assert(code.match(/#box-2\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?20em;/g), 'The <code>#box-2</code> element should have a <code>flex-basis</code> value of <code>20em</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  \n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    \n  }\n  \n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    \n  }\n</style>\n  \n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flexbasis Property to Set the Initial Size of an Item",
      "dashedName":
        "use-the-flexbasis-property-to-set-the-initial-size-of-an-item"
    },
    {
      "id": "587d78ae367417b2b2512afe",
      "description": [
        "There is a shortcut available to set several flex properties at once. The <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties can all be set together by using the <code>flex</code> property.",
        "For example, <code>flex: 1 0 10px;</code> will set the item to <code>flex-grow: 1;</code>, <code>flex-shrink: 0;</code>, and <code>flex-basis: 10px;</code>.",
        "The default property settings are <code>flex: 0 1 auto;</code>.",
        "<hr>",
        "Add the CSS property <code>flex</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> the values so its <code>flex-grow</code> is 2, its <code>flex-shrink</code> is 2, and its <code>flex-basis</code> is 150px. Give <code>#box-2</code> the values so its <code>flex-grow</code> is 1, its <code>flex-shrink</code> is 1, and its <code>flex-basis</code> is 150px.",
        "These values will cause <code>#box-1</code> to grow to fill the extra space at twice the rate of <code>#box-2</code> when the container is greater than 300px and shrink at twice the rate of <code>#box-2</code> when the container is less than 300px. 300px is the combined size of the <code>flex-basis</code> values of the two boxes."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have the <code>flex</code> property set to a value of 2 2 150px.",
          "testString":
            "assert($('#box-1').css('flex-grow') == '2' && $('#box-1').css('flex-shrink') == '2' && $('#box-1').css('flex-basis') == '150px', 'The <code>#box-1</code> element should have the <code>flex</code> property set to a value of 2 2 150px.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>flex</code> property set to a value of 1 1 150px.",
          "testString":
            "assert($('#box-2').css('flex-grow') == '1' && $('#box-2').css('flex-shrink') == '1' && $('#box-2').css('flex-basis') == '150px', 'The <code>#box-2</code> element should have the <code>flex</code> property set to a value of 1 1 150px.');"
        },
        {
          "text":
            "Your code should use the <code>flex</code> property for <code>#box-1</code> and <code>#box-2</code>.",
          "testString":
            "assert(code.match(/flex:\\s*?\\d\\s+?\\d\\s+?150px;/g).length == 2, 'Your code should use the <code>flex</code> property for <code>#box-1</code> and <code>#box-2</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    \n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    \n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the flex Shorthand Property",
      "dashedName": "use-the-flex-shorthand-property"
    },
    {
      "id": "587d78ae367417b2b2512aff",
      "description": [
        "The <code>order</code> property is used to tell CSS the order of how flex items appear in the flex container. By default, items will appear in the same order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.",
        "<hr>",
        "Add the CSS property <code>order</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of 2 and give <code>#box-2</code> a value of 1."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have the <code>order</code> property set to a value of 2.",
          "testString":
            "assert($('#box-1').css('order') == '2', 'The <code>#box-1</code> element should have the <code>order</code> property set to a value of 2.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>order</code> property set to a value of 1.",
          "testString":
            "assert($('#box-2').css('order') == '1', 'The <code>#box-2</code> element should have the <code>order</code> property set to a value of 1.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    \n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    \n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the order Property to Rearrange Items",
      "dashedName": "use-the-order-property-to-rearrange-items"
    },
    {
      "id": "587d78af367417b2b2512b00",
      "description": [
        "The final property for flex items is <code>align-self</code>. This property allows you to adjust each item's alignment individually, instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties <code>float</code>, <code>clear</code>, and <code>vertical-align</code> do not work on flex items.",
        "<code>align-self</code> accepts the same values as <code>align-items</code> and will override any value set by the <code>align-items</code> property.",
        "<hr>",
        "Add the CSS property <code>align-self</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of center and give <code>#box-2</code> a value of flex-end."
      ],
      "tests": [
        {
          "text":
            "The <code>#box-1</code> element should have the <code>align-self</code> property set to a value of center.",
          "testString":
            "assert($('#box-1').css('align-self') == 'center', 'The <code>#box-1</code> element should have the <code>align-self</code> property set to a value of center.');"
        },
        {
          "text":
            "The <code>#box-2</code> element should have the <code>align-self</code> property set to a value of flex-end.",
          "testString":
            "assert($('#box-2').css('align-self') == 'flex-end', 'The <code>#box-2</code> element should have the <code>align-self</code> property set to a value of flex-end.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    \n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    \n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the alignself Property",
      "dashedName": "use-the-alignself-property"
    },
    {
      "id": "5a858944d96184f06fd60d61",
      "description": [
        "Turn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This gives you the ability to use all the other properties associated with CSS Grid.",
        "<strong>Note</strong><br>In CSS Grid, the parent element is referred to as the <dfn>container</dfn> and its children are called <dfn>items</dfn>.",
        "<hr>",
        "Change the display of the div with the <code>container</code> class to <code>grid</code>."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>display</code> property with a value of <code>grid</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>display</code> property with a value of <code>grid</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Your First CSS Grid",
      "dashedName": "create-your-first-css-grid"
    },
    {
      "id": "5a9036d038fddaf9a66b5d32",
      "description": [
        "Simply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container as demonstrated below:",
        "<blockquote>.container {<br>display: grid;<br>grid-template-columns: 50px 50px;<br>}</blockquote>",
        "This will give your grid two columns that are 50px wide each.",
        "The number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.",
        "<hr>",
        "Give the grid container three columns that are <code>100px</code> wide each."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-columns</code> property with three units of <code>100px</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?100px\\s*?100px\\s*?100px\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-columns</code> property with three units of <code>100px</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Columns with gridtemplatecolumns",
      "dashedName": "add-columns-with-gridtemplatecolumns"
    },
    {
      "id": "5a9036e138fddaf9a66b5d33",
      "description": [
        "The grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way you used <code>grid-template-columns</code> in previous challenge.",
        "<hr>",
        "Add two rows to the grid that are <code>50px</code> tall each."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-rows</code> property with two units of <code>50px</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-rows\\s*?:\\s*?50px\\s*?50px\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-rows</code> property with two units of <code>50px</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Rows with gridtemplaterows",
      "dashedName": "add-rows-with-gridtemplaterows"
    },
    {
      "id": "5a9036ee38fddaf9a66b5d34",
      "description": [
        "You can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. You can use these as well:",
        "<code>fr</code>: sets the column or row to a fraction of the available space,",
        "<code>auto</code>: sets the column or row to the width or height of its content automatically,",
        "<code>%</code>: adjusts the column or row to the percent width of its container.",
        "Here's the code that generates the output in the preview:",
        "<blockquote>grid-template-columns: auto 50px 10% 2fr 1fr;</blockquote>",
        "This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.",
        "<hr>",
        "Make a grid with three columns whose widths are as follows: 1fr, 100px, and 2fr."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-columns</code> property that has three columns with the following widths: <code>1fr, 100px, and 2fr</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?1fr\\s*?100px\\s*?2fr\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-columns</code> property that has three columns with the following widths: <code>1fr, 100px, and 2fr</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* modify the code below this line */\n    \n    grid-template-columns: auto 50px 10% 2fr 1fr;\n    \n    /* modify the code above this line */\n    grid-template-rows: 50px 50px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use CSS Grid units to Change the Size of Columns and Rows",
      "dashedName": "use-css-grid-units-to-change-the-size-of-columns-and-rows"
    },
    {
      "id": "5a9036ee38fddaf9a66b5d35",
      "description": [
        "So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the <code>grid-column-gap</code> property like this:",
        "<blockquote>grid-column-gap: 10px;</blockquote>",
        "This creates 10px of empty space between all of our columns.",
        "<hr>",
        "Give the columns in the grid a <code>20px</code> gap."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-column-gap</code> property that has the value of <code>20px</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-column-gap\\s*?:\\s*?20px\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-column-gap</code> property that has the value of <code>20px</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Column Gap Using gridcolumngap",
      "dashedName": "create-a-column-gap-using-gridcolumngap"
    },
    {
      "id": "5a9036ee38fddaf9a66b5d36",
      "description": [
        "You can add a gap in between the rows of a grid using <code>grid-row-gap</code> in the same way that you added a gap in between columns in the previous challenge.",
        "<hr>",
        "Create a gap for the rows that is <code>5px</code> tall."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-row-gap</code> property that has the value of <code>5px</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-row-gap\\s*?:\\s*?5px\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-row-gap</code> property that has the value of <code>5px</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Row Gap using gridrowgap",
      "dashedName": "create-a-row-gap-using-gridrowgap"
    },
    {
      "id": "5a9036ee38fddaf9a66b5d37",
      "description": [
        "<code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code> from the previous two challenges that's more convenient to use. If <code>grid-gap</code> has one value, it will a create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.",
        "<hr>",
        "Use <code>grid-gap</code> to introduce a <code>10px</code> gap between the rows and <code>20px</code> gap between the columns."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-gap</code> property that introduces <code>10px</code> gap between the rows and <code>20px</code> gap between the columns.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-gap\\s*?:\\s*?10px\\s*?20px\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-gap</code> property that introduces <code>10px</code> gap between the rows and <code>20px</code> gap between the columns.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Gaps Faster with gridgap",
      "dashedName": "add-gaps-faster-with-gridgap"
    },
    {
      "id": "5a90372638fddaf9a66b5d38",
      "description": [
        "Up to this point, all the properties that have been discussed are for grid containers. The <code>grid-column</code> property is the first one for use on the grid items themselves.",
        "The hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.",
        "This is what the lines look like for  a 3x3 grid:",
        "<div style=\"position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;\"><p style=\"left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;\">column lines</p><p style=\"left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">1</p><p style=\"left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">2</p><p style=\"left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">3</p><p style=\"left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">4</p><p style=\"left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;\">row lines</p><p style=\"left:-10%;top:-10%;font-size:130%;position:absolute;\">1</p><p style=\"left:-10%;top:21%;font-size:130%;position:absolute;\">2</p><p style=\"left:-10%;top:53%;font-size:130%;position:absolute;\">3</p><p style=\"left:-10%;top:85%;font-size:130%;position:absolute;\">4</p><div style=\"left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;\"></div></div>",
        "To control the amount of columns an item will consume, you can use the <code>grid-column</code> property in conjunction with the line numbers you want the item to start and stop at.",
        "Here's an example:",
        "<blockquote>grid-column: 1 / 3;</blockquote>",
        "This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.",
        "<hr>",
        "Make the item with the class <code>item5</code> consume the last two columns of the grid."
      ],
      "tests": [
        {
          "text":
            "<code>item5</code> class should have a <code>grid-column</code> property that has the value of <code>2 / 4</code>.",
          "testString":
            "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-column\\s*?:\\s*?2\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code> class should have a <code>grid-column</code> property that has the value of <code>2 / 4</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  \n  .item5 {\n    background: PaleGreen;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use gridcolumn to Control Spacing",
      "dashedName": "use-gridcolumn-to-control-spacing"
    },
    {
      "id": "5a90373638fddaf9a66b5d39",
      "description": [
        "Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the <code>grid-row</code> property on a grid item.",
        "<hr>",
        "Make the element with the <code>item5</code> class consume the last two rows."
      ],
      "tests": [
        {
          "text":
            "<code>item5</code> class should have a <code>grid-row</code> property that has the value of <code>2 / 4</code>.",
          "testString":
            "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-row\\s*?:\\s*?2\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code> class should have a <code>grid-row</code> property that has the value of <code>2 / 4</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  \n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use gridrow to Control Spacing",
      "dashedName": "use-gridrow-to-control-spacing"
    },
    {
      "id": "5a90374338fddaf9a66b5d3a",
      "description": [
        "In CSS Grid, the content of each item is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stretch</code>, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:",
        "<code>start</code>: aligns the content at the left of the cell,",
        "<code>center</code>: aligns the content in the center of the cell,",
        "<code>end</code>: aligns the content at the right of the cell.",
        "<hr>",
        "Use the <code>justify-self</code> property to center the item with the class <code>item2</code>."
      ],
      "tests": [
        {
          "text":
            "<code>item2</code> class should have a <code>justify-self</code> property that has the value of <code>center</code>.",
          "testString":
            "assert(code.match(/.item2\\s*?{[\\s\\S]*justify-self\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi), '<code>item2</code> class should have a <code>justify-self</code> property that has the value of <code>center</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background: LightSkyBlue;}\n  \n  .item2 {\n    background: LightSalmon;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align an Item Horizontally using justifyself",
      "dashedName": "align-an-item-horizontally-using-justifyself"
    },
    {
      "id": "5a90375238fddaf9a66b5d3b",
      "description": [
        "Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the <code>align-self</code> property on an item. This property accepts all of the same values as <code>justify-self</code> from the last challenge.",
        "<hr>",
        "Align the item with the class <code>item3</code> vertically at the <code>end</code>."
      ],
      "tests": [
        {
          "text":
            "<code>item3</code> class should have a <code>align-self</code> property that has the value of <code>end</code>.",
          "testString":
            "assert(code.match(/.item3\\s*?{[\\s\\S]*align-self\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi), '<code>item3</code> class should have a <code>align-self</code> property that has the value of <code>end</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  \n  .item3 {\n    background: PaleTurquoise;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align an Item Vertically using alignself",
      "dashedName": "align-an-item-vertically-using-alignself"
    },
    {
      "id": "5a90376038fddaf9a66b5d3c",
      "description": [
        "Sometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using <code>justify-items</code> on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move <b>all</b> the items in our grid to the desired alignment.",
        "<hr>",
        "Use this property to center all our items horizontally."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>justify-items</code> property that has the value of <code>center</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*justify-items\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>justify-items</code> property that has the value of <code>center</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align All Items Horizontally using justifyitems",
      "dashedName": "align-all-items-horizontally-using-justifyitems"
    },
    {
      "id": "5a94fdf869fb03452672e45b",
      "description": [
        "Using the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.",
        "<hr>",
        "Use it now to move all the items to the end of each cell."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>align-items</code> property that has the value of <code>end</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*align-items\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>align-items</code> property that has the value of <code>end</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Align All Items Vertically using alignitems",
      "dashedName": "align-all-items-vertically-using-alignitems"
    },
    {
      "id": "5a94fe0569fb03452672e45c",
      "description": [
        "You can group cells of your grid together into an <dfn>area</dfn> and give the area a custom name. Do this by using <code>grid-template-areas</code> on the container like this:",
        "<blockquote>grid-template-areas:<br>\"header header header\"<br>\"advert content content\"<br>\"footer footer footer\";</blockquote>",
        "The code above merges the top three cells together into an area named <code>header</code>, the bottom three cells into a <code>footer</code> area, and it makes two areas in the middle row; <code>advert</code> and <code>content</code>.",
        "<strong>Note</strong><br>Every word in the code represents a cell and every pair of quotation marks represent a row.",
        "In addition to custom labels, you can use a period (<code>.</code>) to designate an empty cell in the grid.",
        "<hr>",
        "Place the area template so that the cell labeled <code>advert</code> becomes an empty cell."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-areas</code> propertiy similar to the preview but has <code>.</code> instead of the <code>advert</code> area.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?.\\s*?content\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-areas</code> propertiy similar to the preview but has <code>.</code> instead of the <code>advert</code> area.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* change code below this line */\n    \n    grid-template-areas:\n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n    /* change code above this line */\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Divide the Grid Into an Area Template",
      "dashedName": "divide-the-grid-into-an-area-template"
    },
    {
      "id": "5a94fe1369fb03452672e45d",
      "description": [
        "After creating an areas template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the <code>grid-area</code> property on an item like this:",
        "<blockquote>.item1 { grid-area: header; }</blockquote>",
        "This lets the grid know that you want the <code>item1</code> class to go in the area named <code>header</code>. In this case, the item will use the entire top row because that whole row is named as the header area.",
        "<hr>",
        "Place an element with the <code>item5</code> class in the <code>footer</code> area using the <code>grid-area</code> property."
      ],
      "tests": [
        {
          "text":
            "<code>item5</code> class should have a <code>grid-area</code> property that has the value of <code>footer</code>.",
          "testString":
            "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?footer\\s*?;[\\s\\S]*}/gi), '<code>item5</code> class should have a <code>grid-area</code> property that has the value of <code>footer</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  \n  .item5 {\n    background: PaleGreen;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas: \n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Place Items in Grid Areas Using the gridarea Property",
      "dashedName": "place-items-in-grid-areas-using-the-gridarea-property"
    },
    {
      "id": "5a94fe2669fb03452672e45e",
      "description": [
        "The <code>grid-area</code> property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:",
        "<blockquote>item1 { grid-area: 1/1/2/4; }</blockquote>",
        "This is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:",
        "<blockquote>grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;</blockquote>",
        "So the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.",
        "<hr>",
        "Using the <code>grid-area</code> property, place the element with <code>item5</code> class between the third and fourth horizontal lines and between the first and fourth vertical lines."
      ],
      "tests": [
        {
          "text":
            "<code>item5</code> class should have a <code>grid-area</code> property that has the value of <code>3/1/4/4</code>.",
          "testString":
            "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?3\\s*?\\/\\s*?1\\s*?\\/\\s*?4\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code> class should have a <code>grid-area</code> property that has the value of <code>3/1/4/4</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  \n  .item5 {\n    background: PaleGreen;\n    /* add your code below this line */\n    \n    \n    /* add your code above this line */\n  }\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use gridarea Without Creating an Areas Template",
      "dashedName": "use-gridarea-without-creating-an-areas-template"
    },
    {
      "id": "5a94fe3669fb03452672e45f",
      "description": [
        "When you used <code>grid-template-columns</code> and <code>grid-template-rows</code> to define the structure of a grid, you entered a value for each row or column you created.",
        "Lets say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually. Fortunately, there's a better way - by using the <code>repeat</code> function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.",
        "Here's an example that would create the 100 row grid, each row at 50px tall.",
        "<blockquote>grid-template-rows: repeat(100, 50px);</blockquote>",
        "You can also repeat multiple values with the repeat function, and insert the function amongst other values when defining a grid structure. Here's what I mean:",
        "<blockquote>grid-template-columns: repeat(2, 1fr 50px) 20px;</blockquote>",
        "This translates to:",
        "<blockquote>grid-template-columns: 1fr 50px 1fr 50px 20px;</blockquote>",
        "<strong>Note</strong><br><code>1fr 50px</code> is repeated twice followed by 20px.",
        "<hr>",
        "Use <code>repeat</code> to remove repetition from the <code>grid-template-columns</code> property."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the width of <code>1fr</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?1fr\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the width of <code>1fr</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* change the code below this line */\n    \n    grid-template-columns: 1fr 1fr 1fr;\n    \n    /* change the code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Reduce Repetition Using the repeat Function",
      "dashedName": "reduce-repetition-using-the-repeat-function"
    },
    {
      "id": "5a94fe4469fb03452672e460",
      "description": [
        "There's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:",
        "<blockquote>grid-template-columns: 100px minmax(50px, 200px);</blockquote>",
        "In the code above, <code>grid-template-columns</code> is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.",
        "<hr>",
        "Using the <code>minmax</code> function, replace the <code>1fr</code> in the <code>repeat</code> function with a column size that has the minimum width of <code>90px</code> and the maximum width of <code>1fr</code>, and resize the preview panel to see the effect."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the minimum width of <code>90px</code> and maximum width of <code>1fr</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?minmax\\s*?\\(\\s*?90px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the minimum width of <code>90px</code> and maximum width of <code>1fr</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* change the code below this line */\n    \n    grid-template-columns: repeat(3, 1fr);\n    \n    /* change the code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Limit Item Size Using the minmax Function",
      "dashedName": "limit-item-size-using-the-minmax-function"
    },
    {
      "id": "5a94fe5469fb03452672e461",
      "description": [
        "The repeat function comes with a option called <dfn>auto-fill</dfn>. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>.",
        "In the preview, <code>grid-template-columns</code> is set to",
        "<blockquote>repeat(auto-fill, minmax(60px, 1fr));</blockquote>",
        "When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one.",
        "<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.",
        "<hr>",
        "In the first grid, use <code>auto-fill</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see auto-fill in action."
      ],
      "tests": [
        {
          "text":
            "<code>container</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fill</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fill\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fill</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* change the code below this line */\n    \n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    \n    /* change the code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n  \n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Flexible Layouts Using autofill",
      "dashedName": "create-flexible-layouts-using-autofill"
    },
    {
      "id": "5a94fe6269fb03452672e462",
      "description": [
        "<code>auto-fit</code> works almost identical to <code>auto-fill</code>. The only difference is that when the container's size exceeds the size of all the items combined, <code>auto-fill</code> keeps inserting empty rows or columns and pushes your items to the side, while <code>auto-fit</code> collapses those empty rows or columns and stretches your items to fit the size of the container.",
        "<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.",
        "<hr>",
        "In the second grid, use <code>auto-fit</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see the difference."
      ],
      "tests": [
        {
          "text":
            "<code>container2</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fit</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>.",
          "testString":
            "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fit\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container2</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fit</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: repeat( auto-fill, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n  \n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    /* change the code below this line */\n    \n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    \n    /* change the code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Flexible Layouts Using autofit",
      "dashedName": "create-flexible-layouts-using-autofit"
    },
    {
      "id": "5a94fe7769fb03452672e463",
      "description": [
        "CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.",
        "In the preview, when the viewport width is 300px or more, the number of columns changes from 1 to 2. The advertisement area then occupies the left column completely.",
        "<hr>",
        "When the viewport width is <code>400px</code> or more, make the header area occupy the top row completely and the footer area occupy the bottom row completely."
      ],
      "tests": [
        {
          "text":
            "When the viewport is <code>400px</code> or more, <code>container</code> class should have a <code>grid-template-columns</code> property in which the footer and header areas occupy the top and bottom rows respectively and advert and content occupy the left and right columns of the middle row.",
          "testString":
            "assert(code.match(/@media\\s*?\\(\\s*?min-width\\s*?:\\s*?400px\\s*?\\)[\\s\\S]*.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?advert\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi), 'When the viewport is <code>400px</code> or more, <code>container</code> class should have a <code>grid-template-columns</code> property in which the footer and header areas occupy the top and bottom rows respectively and advert and content occupy the left and right columns of the middle row.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n  \n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n  \n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n  \n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n  \n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header\"\n      \"advert\"\n      \"content\"\n      \"footer\";\n  }\n  \n  @media (min-width: 300px){\n    .container{\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n  }\n  \n  @media (min-width: 400px){\n    .container{\n      /* change the code below this line */\n    \n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    \n    /* change the code above this line */\n    }\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Media Queries to Create Responsive Layouts",
      "dashedName": "use-media-queries-to-create-responsive-layouts"
    },
    {
      "id": "5a94fe8569fb03452672e464",
      "description": [
        "Turning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you  have a grid within a grid.",
        "For example, by setting the <code>display</code> and <code>grid-template-columns</code> properties of the element with the <code>item3</code> class, you create a grid within your grid.",
        "<hr>",
        "Turn the element with the <code>item3</code> class into a grid with two columns with a width of <code>auto</code> and <code>1fr</code> using <code>display</code> and <code>grid-template-columns</code>."
      ],
      "tests": [
        {
          "text":
            "<code>item3</code> class should have a <code>grid-template-columns</code> property with <code>auto</code> and <code>1fr</code> as values.",
          "testString":
            "assert(code.match(/.item3\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?auto\\s*?1fr\\s*?;[\\s\\S]*}/gi), '<code>item3</code> class should have a <code>grid-template-columns</code> property with <code>auto</code> and <code>1fr</code> as values.');"
        },
        {
          "text":
            "<code>item3</code> class should have a <code>display</code> property with the value of <code>grid</code>.",
          "testString":
            "assert(code.match(/.item3\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi), '<code>item3</code> class should have a <code>display</code> property with the value of <code>grid</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n  \n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n  \n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n    /* enter your code below this line */\n    \n    \n    /* enter your code above this line */\n  }\n  \n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n  \n  .itemOne {\n    background: PaleGreen;\n  }\n  \n  .itemTwo {\n    background: BlanchedAlmond;\n  }\n  \n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"advert header\"\n      \"advert content\"\n      \"advert footer\";\n  }\n</style>\n  \n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">\n    <div class=\"itemOne\">paragraph1</div>\n    <div class=\"itemTwo\">paragraph2</div>\n  </div>\n  <div class=\"item4\">footer</div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Grids within Grids",
      "dashedName": "create-grids-within-grids"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd18",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/zNqgVx' target='_blank'>https://codepen.io/freeCodeCamp/full/zNqgVx</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> My tribute page should have an element with a corresponding <code>id=\"main\"</code>, which contains all other elements.",
        "<strong>User Story #2:</strong> I should see an element with a corresponding <code>id=\"title\"</code>, which contains a string (i.e. text) that describes the subject of the tribute page (e.g. \"Dr. Norman Borlaug\").",
        "<strong>User Story #3:</strong> I should see a <code>div</code> element with a corresponding <code>id=\"img-div\"</code>.",
        "<strong>User Story #4:</strong> Within the <code>img-div</code> element, I should see an <code>img</code> element with a corresponding <code>id=\"image\"</code>.",
        "<strong>User Story #5:</strong> Within the <code>img-div</code> element, I should see an element with a corresponding <code>id=\"img-caption\"</code> that contains textual content describing the image shown in <code>img-div</code>.",
        "<strong>User Story #6:</strong> I should see an element with a corresponding <code>id=\"tribute-info\"</code>, which contains textual content describing the subject of the tribute page.",
        "<strong>User Story #7:</strong> I  should see an <code>a</code> element with a corresponding <code>id=\"tribute-link\"</code>, which links to an outside site that contains additional information about the subject of the tribute page. HINT: You must give your element an attribute of <code>target</code> and set it to <code>_blank</code> in order for your link to open in a new tab (i.e. <code>target=\"_blank\"</code>).",
        "<strong>User Story #8:</strong> The <code>img</code> element should responsively resize, relative to the width of its parent element, without exceeding its original size.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>.",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Tribute Page",
      "dashedName": "build-a-tribute-page"
    },
    {
      "id": "587d78af367417b2b2512b03",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/VPaoNP' target='_blank'>https://codepen.io/freeCodeCamp/full/VPaoNP</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I can see a title with <code>id=\"title\"</code> in H1 sized text.",
        "<strong>User Story #2:</strong> I can see a short explanation with <code>id=\"description\"</code> in P sized text.",
        "<strong>User Story #3:</strong> I can see a <code>form</code> with <code>id=\"survey-form\"</code>.",
        "<strong>User Story #4:</strong> Inside the form element, I am required to enter my name in a field with <code>id=\"name\"</code>.",
        "<strong>User Story #5:</strong> Inside the form element, I am required to enter an email in a field with <code>id=\"email\"</code>.",
        "<strong>User Story #6:</strong> If I enter an email that is not formatted correctly, I will see an HTML5 validation error.",
        "<strong>User Story #7:</strong> Inside the form, I can enter a number in a field with <code>id=\"number\"</code>.",
        "<strong>User Story #8:</strong> If I enter non-numbers in the number input, I will see an HTML5 validation error.",
        "<strong>User Story #9:</strong> If I enter numbers outside the range of the number input, I will see an HTML5 validation error.",
        "<strong>User Story #10:</strong> For the name, email, and number input fields inside the form I can see corresponding labels that describe the purpose of each field with the following ids: <code>id=\"name-label\"</code>, <code>id=\"email-label\"</code>, and <code>id=\"number-label\"</code>.",
        "<strong>User Story #11:</strong> For the name, email, and number input fields, I can see placeholder text that gives me a description or instructions for each field.",
        "<strong>User Story #12:</strong> Inside the form element, I can select an option from a dropdown that has a corresponding <code>id=\"dropdown\"</code>.",
        "<strong>User Story #13:</strong> Inside the form element, I can select a field from one or more groups of radio buttons. Each group should be grouped using the <code>name</code> attribute.",
        "<strong>User Story #14:</strong> Inside the form element, I can select several fields from a series of checkboxes, each of which must have a <code>value</code> attribute.",
        "<strong>User Story #15:</strong> Inside the form element, I am presented with a <code>textarea</code> at the end for additional comments.",
        "<strong>User Story #16:</strong> Inside the form element, I am presented with a button with <code>id=\"submit\"</code> to submit all my inputs.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Survey Form",
      "dashedName": "build-a-survey-form"
    },
    {
      "id": "587d78af367417b2b2512b04",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/RKRbwL' target='_blank'>https://codepen.io/freeCodeCamp/full/RKRbwL</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> My product landing page should have a <code>header</code> element with a corresponding <code>id=\"header\"</code>.",
        "<strong>User Story #2:</strong> I can see an image within the <code>header</code> element with a corresponding <code>id=\"header-img\"</code>. A company logo would make a good image here.",
        "<strong>User Story #3:</strong> Within the <code>#header</code> element I can see a <code>nav</code> element with a corresponding <code>id=\"nav-bar\"</code>.",
        "<strong>User Story #4:</strong> I can see at least three clickable elements inside the <code>nav</code> element, each with the class <code>nav-link</code>.",
        "<strong>User Story #5:</strong> When I click a <code>.nav-link</code> button in the <code>nav</code> element, I am taken to the corresponding section of the landing page.",
        "<strong>User Story #6:</strong> I can watch an embedded product video with <code>id=\"video\"</code>.",
        "<strong>User Story #7:</strong> My landing page has a <code>form</code> element with a corresponding <code>id=\"form\"</code>.",
        "<strong>User Story #8:</strong> Within the form, there is an <code>input</code> field with <code>id=\"email\"</code> where I can enter an email address.",
        "<strong>User Story #9:</strong> The <code>#email</code> input field should have placeholder text to let the user know what the field is for.",
        "<strong>User Story #10:</strong> The <code>#email</code> input field uses HTML5 validation to confirm that the entered text is an email address.",
        "<strong>User Story #11:</strong> Within the form, there is a submit <code>input</code> with a corresponding <code>id=\"submit\"</code>.",
        "<strong>User Story #12:</strong> When I click the <code>#submit</code> element, the email is submitted to a static page (use this mock URL: <a href='https://www.freecodecamp.com/email-submit' target='_blank'>https://www.freecodecamp.com/email-submit</a>) that confirms the email address was entered and that it posted successfully.",
        "<strong>User Story #13:</strong> The navbar should always be at the top of the viewport.",
        "<strong>User Story #14:</strong> My product landing page should have at least one media query.",
        "<strong>User Story #15:</strong> My product landing page should utilize CSS flexbox at least once.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/full/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Product Landing Page",
      "dashedName": "build-a-product-landing-page"
    },
    {
      "id": "587d78b0367417b2b2512b05",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/NdrKKL' target='_blank'>https://codepen.io/freeCodeCamp/full/NdrKKL</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I can see a <code>main</code> element with a corresponding <code>id=\"main-doc\"</code>, which contains the page's main content (technical documentation).",
        "<strong>User Story #2:</strong> Within the <code>#main-doc</code> element, I can see several <code>section</code> elements, each with a class of <code>main-section</code>. There should be a minimum of 5.",
        "<strong>User Story #3:</strong> The first element within each <code>.main-section</code> should be a <code>header</code> element which contains text that describes the topic of that section.",
        "<strong>User Story #4:</strong> Each <code>section</code> element with the class of <code>main-section</code> should also have an id that corresponds with the text of each <code>header</code> contained within it. Any spaces should be replaced with underscores (e.g. The <code>section</code> that contains the header \"Javascript and Java\" should have a corresponding <code>id=\"Javascript_and_Java\"</code>).",
        "<strong>User Story #5:</strong> The <code>.main-section</code> elements should contain at least 10 <code>p</code> elements total (not each).",
        "<strong>User Story #6:</strong> The <code>.main-section</code> elements should contain at least 5 <code>code</code> elements total (not each).",
        "<strong>User Story #7:</strong> The <code>.main-section</code> elements should contain at least 5 <code>li</code> items total (not each).",
        "<strong>User Story #8:</strong> I can see a <code>nav</code> element with a corresponding <code>id=\"navbar\"</code>.",
        "<strong>User Story #9:</strong> The navbar element should contain one <code>header</code> element which contains text that describes the topic of the technical documentation.",
        "<strong>User Story #10:</strong> Additionally, the navbar should contain link (<code>a</code>) elements with the class of <code>nav-link</code>. There should be one for every element with the class <code>main-section</code>.",
        "<strong>User Story #11:</strong> The <code>header</code> element in the navbar must come before any link (<code>a</code>) elements in the navbar.",
        "<strong>User Story #12:</strong> Each element with the class of <code>nav-link</code> should contain text that corresponds to the <code>header</code> text within each <code>section</code> (e.g. if you have a \"Hello world\" section/header, your navbar should have an element which contains the text \"Hello world\").",
        "<strong>User Story #13:</strong> When I click on a navbar element, the page should navigate to the corresponding section of the <code>main-doc</code> element (e.g. If I click on a <code>nav-link</code> element that contains the text \"Hello world\", the page navigates to a <code>section</code> element that has that id and contains the corresponding <code>header</code>.",
        "<strong>User Story #14:</strong> On regular sized devices (laptops, desktops), the element with <code>id=\"navbar\"</code> should be shown on the left side of the screen and should always be visible to the user.",
        "<strong>User Story #15:</strong> My Technical Documentation page should use at least one media query.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Technical Documentation Page",
      "dashedName": "build-a-technical-documentation-page"
    },
    {
      "id": "bd7158d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/zNBOYG' target='_blank'>https://codepen.io/freeCodeCamp/full/zNBOYG</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> My portfolio should have a welcome section with an id of <code>welcome-section</code>.",
        "<strong>User Story #2:</strong> The welcome section should have an <code>h1</code> element that contains text.",
        "<strong>User Story #3:</strong> My portfolio should have a projects section with an id of <code>projects</code>.",
        "<strong>User Story #4:</strong> The projects section should contain at least one element with a class of <code>project-tile</code> to hold a project.",
        "<strong>User Story #5:</strong> The projects section should contain at least one link to a project.",
        "<strong>User Story #6:</strong> My portfolio should have a navbar with an id of <code>navbar</code>.",
        "<strong>User Story #7:</strong> The navbar should contain at least one link that I can click on to navigate to different sections of the page.",
        "<strong>User Story #8:</strong> My portfolio should have a link with an id of <code>profile-link</code>, which opens my GitHub or FCC profile in a new tab.",
        "<strong>User Story #9:</strong> My portfolio should have at least one media query.",
        "<strong>User Story #10:</strong> The height of the welcome section should be equal to the height of the viewport.",
        "<strong>User Story #11:</strong> The navbar should always be at the top of the viewport.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Personal Portfolio Webpage",
      "dashedName": "build-a-personal-portfolio-webpage"
    },
    {
      "id": "587d78b0367417b2b2512b08",
      "description": [
        "Media Queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user's visible area of a web page, and is different depending on the device used to access the site.",
        "Media Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside your media query as you want.",
        "Here's an example of a media query that returns the content when the device's width is less than or equal to 100px:",
        "<code>@media (max-width: 100px) { /* CSS Rules */ }</code>",
        "and the following media query returns the content when the device's height is more than or equal to 350px:",
        "<code>@media (min-height: 350px) { /* CSS Rules */ }</code>",
        "Remember, the CSS inside the media query is applied only if the media type matches that of the device being used.",
        "<hr>",
        "Add a media query, so that the <code>p</code> tag has a <code>font-size</code> of 10px when the device's height is less than or equal to 800px."
      ],
      "tests": [
        {
          "text":
            "Your <code>p</code> element should have the <code>font-size</code> of 10px when the device <code>height</code> is less than or equal to 800px.",
          "testString":
            "assert($('p').css('font-size') == '10px', 'Your <code>p</code> element should have the <code>font-size</code> of 10px when the device <code>height</code> is less than or equal to 800px.');"
        },
        {
          "text":
            "Declare a <code>@media</code> query for devices with a <code>height</code> less than or equal to 800px.",
          "testString":
            "assert(code.match(/@media\\s?\\(max-height:\\s*?800px\\)/g), 'Declare a <code>@media</code> query for devices with a <code>height</code> less than or equal to 800px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  p {\n    font-size: 20px;\n  }\n  \n  /* Add media query below */\n  \n</style>\n  \n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Media Query",
      "dashedName": "create-a-media-query"
    },
    {
      "id": "587d78b1367417b2b2512b09",
      "description": [
        "Making images responsive with CSS is actually very simple. Instead of applying an absolute width to an element:",
        "<code>img { width: 720px; }</code>",
        "You can use:",
        "<blockquote>img {<br>  max-width: 100%;<br>  display: block;<br>  height: auto;<br>}</blockquote>",
        "The <code>max-width</code> property of 100% scales the image to fit the width of its container, but the image won't stretch wider than its original width. Setting the <code>display</code> property to block changes the image from an inline element (its default), to a block element on its own line. The <code>height</code> property of auto keeps the original aspect ratio of the image.",
        "<hr>",
        "Add style rules for the <code>img</code> tag to make it responsive to the size of its container. It should display as a block-level element, it should fit the full width of its container without stretching, and it should keep its original aspect ratio."
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> tag should have a <code>max-width</code> set to 100%.",
          "testString":
            "assert(code.match(/max-width:\\s*?100%;/g), 'Your <code>img</code> tag should have a <code>max-width</code> set to 100%.');"
        },
        {
          "text":
            "Your <code>img</code> tag should have a <code>display</code> set to block.",
          "testString":
            "assert($('img').css('display') == 'block', 'Your <code>img</code> tag should have a <code>display</code> set to block.');"
        },
        {
          "text":
            "Your <code>img</code> tag should have a <code>height</code> set to auto.",
          "testString":
            "assert(code.match(/height:\\s*?auto;/g), 'Your <code>img</code> tag should have a <code>height</code> set to auto.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  \n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make an Image Responsive",
      "dashedName": "make-an-image-responsive"
    },
    {
      "id": "587d78b1367417b2b2512b0a",
      "description": [
        "The simplest way to make your images appear \"retina\" (and optimize them for retina displays) is to define their <code>width</code> and <code>height</code> values as only half of what the original file is.",
        "Here is an example of an image that is only using half of the original height and width:",
        "<blockquote>&lt;style&gt;<br>  img { height: 250px; width: 250px; }<br>&lt;/style&gt;<br>&lt;img src=&quot;coolPic500x500&quot; alt=&quot;A most excellent picture&quot;&gt;</blockquote>",
        "<hr>",
        "Set the <code>width</code> and <code>height</code> of the <code>img</code> tag to half of their original values. In this case, both the original <code>height</code> and the original <code>width</code> are 200px."
      ],
      "tests": [
        {
          "text":
            "Your <code>img</code> tag should have a <code>width</code> of 100 pixels.",
          "testString":
            "assert($('img').css('width') == '100px', 'Your <code>img</code> tag should have a <code>width</code> of 100 pixels.');"
        },
        {
          "text":
            "Your <code>img</code> tag should have a <code>height</code> of 100 pixels.",
          "testString":
            "assert($('img').css('height') == '100px', 'Your <code>img</code> tag should have a <code>height</code> of 100 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  \n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a Retina Image for Higher Resolution Displays",
      "dashedName": "use-a-retina-image-for-higher-resolution-displays"
    },
    {
      "id": "587d78b1367417b2b2512b0c",
      "description": [
        "Instead of using <code>em</code> or <code>px</code> to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.",
        "The four different viewport units are:",
        "<ul><li><code>vw: 10vw</code> would be 10% of the viewport's width.</li><li><code>vh: 3vh</code> would be 3% of the viewport's height.</li><li><code>vmin: 70vmin</code> would be 70% of the viewport's smaller dimension (height vs. width).</li><li><code>vmax: 100vmax</code> would be 100% of the viewport's bigger dimension (height vs. width).</li></ul>",
        "<hr>",
        "Set the <code>width</code> of the <code>h2</code> tag to 80% of the viewport's width and the <code>width</code> of the paragraph as 75% of the viewport's smaller dimension."
      ],
      "tests": [
        {
          "text":
            "Your <code>h2</code> tag should have a <code>width</code> of 80vw.",
          "testString":
            "assert(code.match(/h2\\s*?{\\s*?width:\\s*?80vw;\\s*?}/g), 'Your <code>h2</code> tag should have a <code>width</code> of 80vw.');"
        },
        {
          "text":
            "Your <code>p</code> tag should have a <code>width</code> of 75vmin.",
          "testString":
            "assert(code.match(/p\\s*?{\\s*?width:\\s*?75vmin;\\s*?}/g), 'Your <code>p</code> tag should have a <code>width</code> of 75vmin.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  \n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Typography Responsive",
      "dashedName": "make-typography-responsive"
    },
    {
      "id": "56533eb9ac21ba0edf2244b3",
      "description": [
        "The algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times <code>9/5</code>, plus <code>32</code>.",
        "You are given a variable <code>celsius</code> representing a temperature in Celsius. Use the variable <code>fahrenheit</code> already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the algorithm mentioned above to help convert the Celsius temperature to Fahrenheit.",
        "Don't worry too much about the function and return statements as they will be covered in future challenges. For now, only use operators that you have already learned."
      ],
      "tests": [
        {
          "text": "<code>convertToF(0)</code> should return a number",
          "testString":
            "assert(typeof convertToF(0) === 'number', '<code>convertToF(0)</code> should return a number');"
        },
        {
          "text":
            "<code>convertToF(-30)</code> should return a value of <code>-22</code>",
          "testString":
            "assert(convertToF(-30) === -22, '<code>convertToF(-30)</code> should return a value of <code>-22</code>');"
        },
        {
          "text":
            "<code>convertToF(-10)</code> should return a value of <code>14</code>",
          "testString":
            "assert(convertToF(-10) === 14, '<code>convertToF(-10)</code> should return a value of <code>14</code>');"
        },
        {
          "text":
            "<code>convertToF(0)</code> should return a value of <code>32</code>",
          "testString":
            "assert(convertToF(0) === 32, '<code>convertToF(0)</code> should return a value of <code>32</code>');"
        },
        {
          "text":
            "<code>convertToF(20)</code> should return a value of <code>68</code>",
          "testString":
            "assert(convertToF(20) === 68, '<code>convertToF(20)</code> should return a value of <code>68</code>');"
        },
        {
          "text":
            "<code>convertToF(30)</code> should return a value of <code>86</code>",
          "testString":
            "assert(convertToF(30) === 86, '<code>convertToF(30)</code> should return a value of <code>86</code>');"
        }
      ],
      "challengeType": 1,
      "isRequired": true,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertToF(celsius) {\n  let fahrenheit;\n  return fahrenheit;\n}\n\nconvertToF(30);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Convert Celsius to Fahrenheit",
      "dashedName": "convert-celsius-to-fahrenheit"
    },
    {
      "id": "a202eed8fc186c8434cb6d61",
      "description": [
        "Reverse the provided string.",
        "You may need to turn the string into an array before you can reverse it.",
        "Your result must be a string.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>reverseString(\"hello\")</code> should return a string.",
          "testString":
            "assert(typeof reverseString(\"hello\") === \"string\", '<code>reverseString(\"hello\")</code> should return a string.');"
        },
        {
          "text":
            "<code>reverseString(\"hello\")</code> should become <code>\"olleh\"</code>.",
          "testString":
            "assert(reverseString(\"hello\") === \"olleh\", '<code>reverseString(\"hello\")</code> should become <code>\"olleh\"</code>.');"
        },
        {
          "text":
            "<code>reverseString(\"Howdy\")</code> should become <code>\"ydwoH\"</code>.",
          "testString":
            "assert(reverseString(\"Howdy\") === \"ydwoH\", '<code>reverseString(\"Howdy\")</code> should become <code>\"ydwoH\"</code>.');"
        },
        {
          "text":
            "<code>reverseString(\"Greetings from Earth\")</code> should return <code>\"htraE morf sgniteerG\"</code>.",
          "testString":
            "assert(reverseString(\"Greetings from Earth\") === \"htraE morf sgniteerG\", '<code>reverseString(\"Greetings from Earth\")</code> should return <code>\"htraE morf sgniteerG\"</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function reverseString(str) {\n  return str;\n}\n\nreverseString(\"hello\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Reverse a String",
      "dashedName": "reverse-a-string"
    },
    {
      "id": "a302f7aae1aa3152a5b413bc",
      "description": [
        "Return the factorial of the provided integer.",
        "If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.",
        "Factorials are often represented with the shorthand notation <code>n!</code>",
        "For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>",
        "Only integers greater than or equal to zero will be supplied to the function.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>factorialize(5)</code> should return a number.",
          "testString":
            "assert(typeof factorialize(5) === 'number', '<code>factorialize(5)</code> should return a number.');"
        },
        {
          "text": "<code>factorialize(5)</code> should return 120.",
          "testString":
            "assert(factorialize(5) === 120, '<code>factorialize(5)</code> should return 120.');"
        },
        {
          "text": "<code>factorialize(10)</code> should return 3628800.",
          "testString":
            "assert(factorialize(10) === 3628800, '<code>factorialize(10)</code> should return 3628800.');"
        },
        {
          "text":
            "<code>factorialize(20)</code> should return 2432902008176640000.",
          "testString":
            "assert(factorialize(20) === 2432902008176640000, '<code>factorialize(20)</code> should return 2432902008176640000.');"
        },
        {
          "text": "<code>factorialize(0)</code> should return 1.",
          "testString":
            "assert(factorialize(0) === 1, '<code>factorialize(0)</code> should return 1.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Factorialize a Number",
      "dashedName": "factorialize-a-number"
    },
    {
      "id": "a26cbbe9ad8655a977e1ceb5",
      "description": [
        "Return the length of the longest word in the provided sentence.",
        "Your response should be a number.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return a number.",
          "testString":
            "assert(typeof findLongestWordLength(\"The quick brown fox jumped over the lazy dog\") === \"number\", '<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return a number.');"
        },
        {
          "text":
            "<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return 6.",
          "testString":
            "assert(findLongestWordLength(\"The quick brown fox jumped over the lazy dog\") === 6, '<code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return 6.');"
        },
        {
          "text":
            "<code>findLongestWordLength(\"May the force be with you\")</code> should return 5.",
          "testString":
            "assert(findLongestWordLength(\"May the force be with you\") === 5, '<code>findLongestWordLength(\"May the force be with you\")</code> should return 5.');"
        },
        {
          "text":
            "<code>findLongestWordLength(\"Google do a barrel roll\")</code> should return 6.",
          "testString":
            "assert(findLongestWordLength(\"Google do a barrel roll\") === 6, '<code>findLongestWordLength(\"Google do a barrel roll\")</code> should return 6.');"
        },
        {
          "text":
            "<code>findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")</code> should return 8.",
          "testString":
            "assert(findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\") === 8, '<code>findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")</code> should return 8.');"
        },
        {
          "text":
            "<code>findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")</code> should return 19.",
          "testString":
            "assert(findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\") === 19, '<code>findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")</code> should return 19.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function findLongestWordLength(str) {\n  return str.length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Find the Longest Word in a String",
      "dashedName": "find-the-longest-word-in-a-string"
    },
    {
      "id": "a789b3483989747d63b0e427",
      "description": [
        "Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.",
        "Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.",
          "testString":
            "assert(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]).constructor === Array, '<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.');"
        },
        {
          "text":
            "<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.",
          "testString":
            "assert.deepEqual(largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]), [27, 5, 39, 1001], '<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.');"
        },
        {
          "text":
            "<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.",
          "testString":
            "assert.deepEqual(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]), [9, 35, 97, 1000000], '<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.');"
        },
        {
          "text":
            "<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.",
          "testString":
            "assert.deepEqual(largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]), [25, 48, 21, -3], '<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largestOfFour(arr) {\n  // You can do this!\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Return Largest Numbers in Arrays",
      "dashedName": "return-largest-numbers-in-arrays"
    },
    {
      "id": "acda2fb1324d9b0fa741e6b5",
      "description": [
        "Check if a string (first argument, <code>str</code>) ends with the given target string (second argument, <code>target</code>).",
        "This challenge <em>can</em> be solved with the <code>.endsWith()</code> method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>confirmEnding(\"Bastian\", \"n\")</code> should return true.",
          "testString":
            "assert(confirmEnding(\"Bastian\", \"n\") === true, '<code>confirmEnding(\"Bastian\", \"n\")</code> should return true.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Congratulation\", \"on\")</code> should return true.",
          "testString":
            "assert(confirmEnding(\"Congratulation\", \"on\") === true, '<code>confirmEnding(\"Congratulation\", \"on\")</code> should return true.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Connor\", \"n\")</code> should return false.",
          "testString":
            "assert(confirmEnding(\"Connor\", \"n\") === false, '<code>confirmEnding(\"Connor\", \"n\")</code> should return false.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\"&#44; \"specification\"&#41;</code> should return false.",
          "testString":
            "assert(confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\") === false, '<code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\"&#44; \"specification\"&#41;</code> should return false.');"
        },
        {
          "text":
            "<code>confirmEnding(\"He has to give me a new name\", \"name\")</code> should return true.",
          "testString":
            "assert(confirmEnding(\"He has to give me a new name\", \"name\") === true, '<code>confirmEnding(\"He has to give me a new name\", \"name\")</code> should return true.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Open sesame\", \"same\")</code> should return true.",
          "testString":
            "assert(confirmEnding(\"Open sesame\", \"same\") === true, '<code>confirmEnding(\"Open sesame\", \"same\")</code> should return true.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Open sesame\", \"pen\")</code> should return false.",
          "testString":
            "assert(confirmEnding(\"Open sesame\", \"pen\") === false, '<code>confirmEnding(\"Open sesame\", \"pen\")</code> should return false.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Open sesame\", \"game\")</code> should return false.",
          "testString":
            "assert(confirmEnding(\"Open sesame\", \"game\") === false, '<code>confirmEnding(\"Open sesame\", \"game\")</code> should return false.');"
        },
        {
          "text":
            "<code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> should return false.",
          "testString":
            "assert(confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\") === false, '<code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> should return false.');"
        },
        {
          "text":
            "<code>confirmEnding(\"Abstraction\", \"action\")</code> should return true.",
          "testString":
            "assert(confirmEnding(\"Abstraction\", \"action\") === true, '<code>confirmEnding(\"Abstraction\", \"action\")</code> should return true.');"
        },
        {
          "text":
            "Do not use the built-in method <code>.endsWith()</code> to solve the challenge.",
          "testString":
            "assert(!(/\\.endsWith\\(.*?\\)\\s*?;?/.test(code)) && !(/\\['endsWith'\\]/.test(code)), 'Do not use the built-in method <code>.endsWith()</code> to solve the challenge.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function confirmEnding(str, target) {\n  // \"Never give up and good luck will find you.\"\n  // -- Falcor\n  return str;\n}\n\nconfirmEnding(\"Bastian\", \"n\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Confirm the Ending",
      "dashedName": "confirm-the-ending"
    },
    {
      "id": "afcc8d540bea9ea2669306b6",
      "description": [
        "Repeat a given string <code>str</code> (first argument) for <code>num</code> times (second argument). Return an empty string if <code>num</code> is not a positive number.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>repeatStringNumTimes(\"*\", 3)</code> should return <code>\"***\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"*\", 3) === \"***\", '<code>repeatStringNumTimes(\"*\", 3)</code> should return <code>\"***\"</code>.');"
        },
        {
          "text":
            "<code>repeatStringNumTimes(\"abc\", 3)</code> should return <code>\"abcabcabc\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"abc\", 3) === \"abcabcabc\", '<code>repeatStringNumTimes(\"abc\", 3)</code> should return <code>\"abcabcabc\"</code>.');"
        },
        {
          "text":
            "<code>repeatStringNumTimes(\"abc\", 4)</code> should return <code>\"abcabcabcabc\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"abc\", 4) === \"abcabcabcabc\", '<code>repeatStringNumTimes(\"abc\", 4)</code> should return <code>\"abcabcabcabc\"</code>.');"
        },
        {
          "text":
            "<code>repeatStringNumTimes(\"abc\", 1)</code> should return <code>\"abc\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"abc\", 1) === \"abc\", '<code>repeatStringNumTimes(\"abc\", 1)</code> should return <code>\"abc\"</code>.');"
        },
        {
          "text":
            "<code>repeatStringNumTimes(\"*\", 8)</code> should return <code>\"********\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"*\", 8) === \"********\", '<code>repeatStringNumTimes(\"*\", 8)</code> should return <code>\"********\"</code>.');"
        },
        {
          "text":
            "<code>repeatStringNumTimes(\"abc\", -2)</code> should return <code>\"\"</code>.",
          "testString":
            "assert(repeatStringNumTimes(\"abc\", -2) === \"\", '<code>repeatStringNumTimes(\"abc\", -2)</code> should return <code>\"\"</code>.');"
        },
        {
          "text":
            "The built-in <code>repeat()</code>-method should not be used",
          "testString":
            "assert(!/\\.repeat/g.test(code), 'The built-in <code>repeat()</code>-method should not be used');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function repeatStringNumTimes(str, num) {\n  // repeat after me\n  return str;\n}\n\nrepeatStringNumTimes(\"abc\", 3);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Repeat a String Repeat a String",
      "dashedName": "repeat-a-string-repeat-a-string"
    },
    {
      "id": "ac6993d51946422351508a41",
      "description": [
        "Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a <code>...</code> ending.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)</code> should return \"A-tisket...\".",
          "testString":
            "assert(truncateString(\"A-tisket a-tasket A green and yellow basket\", 8) === \"A-tisket...\", '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)</code> should return \"A-tisket...\".');"
        },
        {
          "text":
            "<code>truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)</code> should return \"Peter Piper...\".",
          "testString":
            "assert(truncateString(\"Peter Piper picked a peck of pickled peppers\", 11) === \"Peter Piper...\", '<code>truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)</code> should return \"Peter Piper...\".');"
        },
        {
          "text":
            "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> should return \"A-tisket a-tasket A green and yellow basket\".",
          "testString":
            "assert(truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length) === \"A-tisket a-tasket A green and yellow basket\", '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> should return \"A-tisket a-tasket A green and yellow basket\".');"
        },
        {
          "text":
            "<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> should return \"A-tisket a-tasket A green and yellow basket\".",
          "testString":
            "assert(truncateString('A-tisket a-tasket A green and yellow basket', 'A-tisket a-tasket A green and yellow basket'.length + 2) === 'A-tisket a-tasket A green and yellow basket', '<code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> should return \"A-tisket a-tasket A green and yellow basket\".');"
        },
        {
          "text":
            "<code>truncateString(\"A-\", 1)</code> should return \"A...\".",
          "testString":
            "assert(truncateString(\"A-\", 1) === \"A...\", '<code>truncateString(\"A-\", 1)</code> should return \"A...\".');"
        },
        {
          "text":
            "<code>truncateString(\"Absolutely Longer\", 2)</code> should return \"Ab...\".",
          "testString":
            "assert(truncateString(\"Absolutely Longer\", 2) === \"Ab...\", '<code>truncateString(\"Absolutely Longer\", 2)</code> should return \"Ab...\".');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function truncateString(str, num) {\n  // Clear out that junk in your trunk\n  return str;\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Truncate a String",
      "dashedName": "truncate-a-string"
    },
    {
      "id": "a6e40f1041b06c996f7b2406",
      "description": [
        "Create a function that looks through an array (first argument) and returns the first element in the array that passes a truth test (second argument). If no element passes the test, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return 8.",
          "testString":
            "assert.strictEqual(findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; }), 8, '<code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return 8.');"
        },
        {
          "text":
            "<code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return undefined.",
          "testString":
            "assert.strictEqual(findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; }), undefined, '<code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return undefined.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function findElement(arr, func) {\n  let num = 0;\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Finders Keepers",
      "dashedName": "finders-keepers"
    },
    {
      "id": "a77dbc43c33f39daa4429b4f",
      "description": [
        "Check if a value is classified as a boolean primitive. Return true or false.",
        "Boolean primitives are true and false.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>booWho(true)</code> should return true.",
          "testString":
            "assert.strictEqual(booWho(true), true, '<code>booWho(true)</code> should return true.');"
        },
        {
          "text": "<code>booWho(false)</code> should return true.",
          "testString":
            "assert.strictEqual(booWho(false), true, '<code>booWho(false)</code> should return true.');"
        },
        {
          "text": "<code>booWho([1, 2, 3])</code> should return false.",
          "testString":
            "assert.strictEqual(booWho([1, 2, 3]), false, '<code>booWho([1, 2, 3])</code> should return false.');"
        },
        {
          "text": "<code>booWho([].slice)</code> should return false.",
          "testString":
            "assert.strictEqual(booWho([].slice), false, '<code>booWho([].slice)</code> should return false.');"
        },
        {
          "text": "<code>booWho({ \"a\": 1 })</code> should return false.",
          "testString":
            "assert.strictEqual(booWho({ \"a\": 1 }), false, '<code>booWho({ \"a\": 1 })</code> should return false.');"
        },
        {
          "text": "<code>booWho(1)</code> should return false.",
          "testString":
            "assert.strictEqual(booWho(1), false, '<code>booWho(1)</code> should return false.');"
        },
        {
          "text": "<code>booWho(NaN)</code> should return false.",
          "testString":
            "assert.strictEqual(booWho(NaN), false, '<code>booWho(NaN)</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"a\")</code> should return false.",
          "testString":
            "assert.strictEqual(booWho(\"a\"), false, '<code>booWho(\"a\")</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"true\")</code> should return false.",
          "testString":
            "assert.strictEqual(booWho(\"true\"), false, '<code>booWho(\"true\")</code> should return false.');"
        },
        {
          "text": "<code>booWho(\"false\")</code> should return false.",
          "testString":
            "assert.strictEqual(booWho(\"false\"), false, '<code>booWho(\"false\")</code> should return false.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function booWho(bool) {\n  // What is the new fad diet for ghost developers? The Boolean.\n  return bool;\n}\n\nbooWho(null);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Boo who",
      "dashedName": "boo-who"
    },
    {
      "id": "ab6137d4e35944e21037b769",
      "description": [
        "Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.",
        "For the purpose of this exercise, you should also capitalize connecting words like \"the\" and \"of\".",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>titleCase(\"I&#39;m a little tea pot\")</code> should return a string.",
          "testString":
            "assert(typeof titleCase(\"I'm a little tea pot\") === \"string\", '<code>titleCase(\"I&#39;m a little tea pot\")</code> should return a string.');"
        },
        {
          "text":
            "<code>titleCase(\"I&#39;m a little tea pot\")</code> should return <code>I&#39;m A Little Tea Pot</code>.",
          "testString":
            "assert(titleCase(\"I'm a little tea pot\") === \"I'm A Little Tea Pot\", '<code>titleCase(\"I&#39;m a little tea pot\")</code> should return <code>I&#39;m A Little Tea Pot</code>.');"
        },
        {
          "text":
            "<code>titleCase(\"sHoRt AnD sToUt\")</code> should return <code>Short And Stout</code>.",
          "testString":
            "assert(titleCase(\"sHoRt AnD sToUt\") === \"Short And Stout\", '<code>titleCase(\"sHoRt AnD sToUt\")</code> should return <code>Short And Stout</code>.');"
        },
        {
          "text":
            "<code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> should return <code>Here Is My Handle Here Is My Spout</code>.",
          "testString":
            "assert(titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\") === \"Here Is My Handle Here Is My Spout\", '<code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> should return <code>Here Is My Handle Here Is My Spout</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function titleCase(str) {\n  return str;\n}\n\ntitleCase(\"I'm a little tea pot\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Title Case a Sentence",
      "dashedName": "title-case-a-sentence"
    },
    {
      "id": "579e2a2c335b9d72dd32e05c",
      "description": [
        "You are given two arrays and an index.",
        "Use the array methods <code>slice</code> and <code>splice</code> to copy each element of the first array into the second array, in order.",
        "Begin inserting elements at index <code>n</code> of the second array.",
        "Return the resulting array. The input arrays should remain the same after the function runs.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> should return <code>[4, 1, 2, 3, 5]</code>.",
          "testString":
            "assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5], '<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> should return <code>[4, 1, 2, 3, 5]</code>.');"
        },
        {
          "text":
            "<code>frankenSplice([1, 2], [\"a\", \"b\"], 1)</code> should return <code>[\"a\", 1, 2, \"b\"]</code>.",
          "testString":
            "assert.deepEqual(frankenSplice(testArr1, testArr2, 1), [\"a\", 1, 2, \"b\"], '<code>frankenSplice([1, 2], [\"a\", \"b\"], 1)</code> should return <code>[\"a\", 1, 2, \"b\"]</code>.');"
        },
        {
          "text":
            "<code>frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)</code> should return <code>[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]</code>.",
          "testString":
            "assert.deepEqual(frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2), [\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"], '<code>frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)</code> should return <code>[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]</code>.');"
        },
        {
          "text":
            "All elements from the first array should be added to the second array in their original order.",
          "testString":
            "assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4], 'All elements from the first array should be added to the second array in their original order.');"
        },
        {
          "text":
            "The first array should remain the same after the function runs.",
          "testString":
            "assert(testArr1[0] === 1 && testArr1[1] === 2, 'The first array should remain the same after the function runs.');"
        },
        {
          "text":
            "The second array should remain the same after the function runs.",
          "testString":
            "assert(testArr2[0] === \"a\" && testArr2[1] === \"b\", 'The second array should remain the same after the function runs.');"
        }
      ],
      "isRequired": true,
      "isBeta": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function frankenSplice(arr1, arr2, n) {\n  // It's alive. It's alive!\n  return arr2;\n}\n\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);",
          "head": "",
          "tail": "let testArr1 = [1, 2];\nlet testArr2 = [\"a\", \"b\"];"
        }
      },
      "name": "Slice and Splice",
      "dashedName": "slice-and-splice"
    },
    {
      "id": "adf08ec01beb4f99fc7a68f2",
      "description": [
        "Remove all falsy values from an array.",
        "Falsy values in JavaScript are <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, and <code>NaN</code>.",
        "Hint: Try converting each value to a Boolean.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>bouncer([7, \"ate\", \"\", false, 9])</code> should return <code>[7, \"ate\", 9]</code>.",
          "testString":
            "assert.deepEqual(bouncer([7, \"ate\", \"\", false, 9]), [7, \"ate\", 9], '<code>bouncer([7, \"ate\", \"\", false, 9])</code> should return <code>[7, \"ate\", 9]</code>.');"
        },
        {
          "text":
            "<code>bouncer([\"a\", \"b\", \"c\"])</code> should return <code>[\"a\", \"b\", \"c\"]</code>.",
          "testString":
            "assert.deepEqual(bouncer([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"], '<code>bouncer([\"a\", \"b\", \"c\"])</code> should return <code>[\"a\", \"b\", \"c\"]</code>.');"
        },
        {
          "text":
            "<code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> should return <code>[]</code>.",
          "testString":
            "assert.deepEqual(bouncer([false, null, 0, NaN, undefined, \"\"]), [], '<code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> should return <code>[]</code>.');"
        },
        {
          "text":
            "<code>bouncer([1, null, NaN, 2, undefined])</code> should return <code>[1, 2]</code>.",
          "testString":
            "assert.deepEqual(bouncer([1, null, NaN, 2, undefined]), [1, 2], '<code>bouncer([1, null, NaN, 2, undefined])</code> should return <code>[1, 2]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function bouncer(arr) {\n  // Don't show a false ID to this bouncer.\n  return arr;\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Falsy Bouncer",
      "dashedName": "falsy-bouncer"
    },
    {
      "id": "a24c1a4622e3c05097f71d67",
      "description": [
        "Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.",
        "For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).",
        "Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.",
          "testString":
            "assert(getIndexToIns([10, 20, 30, 40, 50], 35) === 3, '<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([10, 20, 30, 40, 50], 35)) === \"number\", '<code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.",
          "testString":
            "assert(getIndexToIns([10, 20, 30, 40, 50], 30) === 2, '<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([10, 20, 30, 40, 50], 30)) === \"number\", '<code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.",
          "testString":
            "assert(getIndexToIns([40, 60], 50) === 1, '<code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([40, 60], 50)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([40, 60], 50)) === \"number\", '<code>getIndexToIns([40, 60], 50)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.",
          "testString":
            "assert(getIndexToIns([3, 10, 5], 3) === 0, '<code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([3, 10, 5], 3)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([3, 10, 5], 3)) === \"number\", '<code>getIndexToIns([3, 10, 5], 3)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.",
          "testString":
            "assert(getIndexToIns([5, 3, 20, 3], 5) === 2, '<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([5, 3, 20, 3], 5)) === \"number\", '<code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.",
          "testString":
            "assert(getIndexToIns([2, 20, 10], 19) === 2, '<code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([2, 20, 10], 19)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([2, 20, 10], 19)) === \"number\", '<code>getIndexToIns([2, 20, 10], 19)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.",
          "testString":
            "assert(getIndexToIns([2, 5, 10], 15) === 3, '<code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.');"
        },
        {
          "text":
            "<code>getIndexToIns([2, 5, 10], 15)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([2, 5, 10], 15)) === \"number\", '<code>getIndexToIns([2, 5, 10], 15)</code> should return a number.');"
        },
        {
          "text":
            "<code>getIndexToIns([], 1)</code> should return <code>0</code>.",
          "testString":
            "assert(getIndexToIns([], 1) === 0, '<code>getIndexToIns([], 1)</code> should return <code>0</code>.');"
        },
        {
          "text": "<code>getIndexToIns([], 1)</code> should return a number.",
          "testString":
            "assert(typeof(getIndexToIns([], 1)) === \"number\", '<code>getIndexToIns([], 1)</code> should return a number.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getIndexToIns(arr, num) {\n  // Find my place in this sorted array.\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Where do I Belong",
      "dashedName": "where-do-i-belong"
    },
    {
      "id": "af2170cad53daa0770fabdea",
      "description": [
        "Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.",
        "For example, <code>[\"hello\", \"Hello\"]</code>, should return true because all of the letters in the second string are present in the first, ignoring case.",
        "The arguments <code>[\"hello\", \"hey\"]</code> should return false because the string \"hello\" does not contain a \"y\".",
        "Lastly, <code>[\"Alien\", \"line\"]</code>, should return true because all of the letters in \"line\" are present in \"Alien\".",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>mutation([\"hello\", \"hey\"])</code> should return false.",
          "testString":
            "assert(mutation([\"hello\", \"hey\"]) === false, '<code>mutation([\"hello\", \"hey\"])</code> should return false.');"
        },
        {
          "text":
            "<code>mutation([\"hello\", \"Hello\"])</code> should return true.",
          "testString":
            "assert(mutation([\"hello\", \"Hello\"]) === true, '<code>mutation([\"hello\", \"Hello\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> should return true.",
          "testString":
            "assert(mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) === true, '<code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"Mary\", \"Army\"])</code> should return true.",
          "testString":
            "assert(mutation([\"Mary\", \"Army\"]) === true, '<code>mutation([\"Mary\", \"Army\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"Mary\", \"Aarmy\"])</code> should return true.",
          "testString":
            "assert(mutation([\"Mary\", \"Aarmy\"]) === true, '<code>mutation([\"Mary\", \"Aarmy\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"Alien\", \"line\"])</code> should return true.",
          "testString":
            "assert(mutation([\"Alien\", \"line\"]) === true, '<code>mutation([\"Alien\", \"line\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"floor\", \"for\"])</code> should return true.",
          "testString":
            "assert(mutation([\"floor\", \"for\"]) === true, '<code>mutation([\"floor\", \"for\"])</code> should return true.');"
        },
        {
          "text":
            "<code>mutation([\"hello\", \"neo\"])</code> should return false.",
          "testString":
            "assert(mutation([\"hello\", \"neo\"]) === false, '<code>mutation([\"hello\", \"neo\"])</code> should return false.');"
        },
        {
          "text":
            "<code>mutation([\"voodoo\", \"no\"])</code> should return false.",
          "testString":
            "assert(mutation([\"voodoo\", \"no\"]) === false, '<code>mutation([\"voodoo\", \"no\"])</code> should return false.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function mutation(arr) {\n  return arr;\n}\n\nmutation([\"hello\", \"hey\"]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Mutations",
      "dashedName": "mutations"
    },
    {
      "id": "a9bd25c716030ec90084d8a1",
      "description": [
        "Write a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2), [[\"a\", \"b\"], [\"c\", \"d\"]], '<code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [[0, 1, 2], [3, 4, 5], [6]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [[0, 1, 2, 3], [4, 5, 6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.');"
        },
        {
          "text":
            "<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.",
          "testString":
            "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [[0, 1], [2, 3], [4, 5], [6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function chunkArrayInGroups(arr, size) {\n  // Break it up.\n  return arr;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Chunky Monkey",
      "dashedName": "chunky-monkey"
    },
    {
      "id": "587d7b7e367417b2b2512b20",
      "description": [
        "The below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:",
        "<blockquote>let simpleArray = ['one', 2, 'three’, true, false, undefined, null];<br>console.log(simpleArray.length);<br>// logs 7</blockquote>",
        "All array's have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>.",
        "A more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.",
        "<blockquote>let complexArray = [<br>  [<br>    {<br>      one: 1,<br>      two: 2<br>    },<br>    {<br>      three: 3,<br>      four: 4<br>    }<br>  ],<br>  [<br>    {<br>      a: \"a\",<br>      b: \"b\"<br>    },<br>    {<br>      c: \"c\",<br>      d: “d”<br>    }<br>  ]<br>];</blockquote>",
        "<hr>",
        "We have defined a variable called <code>yourArray</code>. Complete the statement by assigning an array of at least 5 elements in length to the <code>yourArray</code> variable. Your array should contain at least one <dfn>string</dfn>, one <dfn>number</dfn>, and one <dfn>boolean</dfn>."
      ],
      "tests": [
        {
          "text": "yourArray is an array",
          "testString":
            "assert.strictEqual(Array.isArray(yourArray), true, 'yourArray is an array');"
        },
        {
          "text": "<code>yourArray</code> is at least 5 elements long",
          "testString":
            "assert.isAtLeast(yourArray.length, 5, '<code>yourArray</code> is at least 5 elements long');"
        },
        {
          "text":
            "<code>yourArray</code> contains at least one <code>boolean</code>",
          "testString":
            "assert(yourArray.filter( el => typeof el === 'boolean').length >= 1, '<code>yourArray</code> contains at least one <code>boolean</code>');"
        },
        {
          "text":
            "<code>yourArray</code> contains at least one <code>number</code>",
          "testString":
            "assert(yourArray.filter( el => typeof el === 'number').length >= 1, '<code>yourArray</code> contains at least one <code>number</code>');"
        },
        {
          "text":
            "<code>yourArray</code> contains at least one <code>string</code>",
          "testString":
            "assert(yourArray.filter( el => typeof el === 'string').length >= 1, '<code>yourArray</code> contains at least one <code>string</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "let yourArray; // change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use an Array to Store a Collection of Data",
      "dashedName": "use-an-array-to-store-a-collection-of-data"
    },
    {
      "id": "5a661e0f1068aca922b3ef17",
      "description": [
        "The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.",
        "When we define a simple array as seen below, there are 3 items in it:",
        "<blockquote>let ourArray = [\"a\", \"b\", \"c\"];</blockquote>",
        "In an array, each array item has an <dfn>index</dfn>.  This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the <em><strong>zeroth</strong></em> position, not the first.",
        "In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>.",
        "For example, if we want to retrieve the <code>\"a\"</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:",
        "<blockquote>let ourVariable = ourArray[0];<br>// ourVariable equals \"a\"</blockquote>",
        "In addition to accessing the value associated with an index, you can also <em>set</em> an index to a value using the same notation:",
        "<blockquote>ourArray[1] = \"not b anymore\";<br>// ourArray now equals [\"a\", \"not b anymore\", \"c\"];</blockquote>",
        "Using bracket notation, we have now reset the item at index 1 from <code>\"b\"</code>, to <code>\"not b anymore\"</code>.",
        "<hr>",
        "In order to complete this challenge, set the 2nd position (index <code>1</code>) of <code>myArray</code> to anything you want, besides <code>\"b\"</code>."
      ],
      "tests": [
        {
          "text": "<code>myArray[0]</code> is equal to <code>\"a\"</code>",
          "testString":
            "assert.strictEqual(myArray[0], \"a\", '<code>myArray[0]</code> is equal to <code>\"a\"</code>');"
        },
        {
          "text":
            "<code>myArray[1]</code> is no longer set to <code>\"b\"</code>",
          "testString":
            "assert.notStrictEqual(myArray[1], \"b\", '<code>myArray[1]</code> is no longer set to <code>\"b\"</code>');"
        },
        {
          "text": "<code>myArray[2]</code> is equal to <code>\"c\"</code>",
          "testString":
            "assert.strictEqual(myArray[2], \"c\", '<code>myArray[2]</code> is equal to <code>\"c\"</code>');"
        },
        {
          "text": "<code>myArray[3]</code> is equal to <code>\"d\"</code>",
          "testString":
            "assert.strictEqual(myArray[3], \"d\", '<code>myArray[3]</code> is equal to <code>\"d\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let myArray = [\"a\", \"b\", \"c\", \"d\"];\n// change code below this line\n\n//change code above this line\nconsole.log(myArray);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Access an Arrays Contents Using Bracket Notation",
      "dashedName": "access-an-arrays-contents-using-bracket-notation"
    },
    {
      "id": "587d78b2367417b2b2512b0e",
      "description": [
        "An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>. ",
        "Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:",
        "<blockquote>let twentyThree = 'XXIII';<br>let romanNumerals = ['XXI', 'XXII'];<br><br>romanNumerals.unshift('XIX', 'XX');<br>// now equals ['XIX', 'XX', 'XXI', 'XXII']<br><br>romanNumerals.push(twentyThree);<br>// now equals ['XIX', 'XX', 'XXI', 'XXII', 'XXIII']",
        "Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.",
        "<hr>",
        "We have defined a function, <code>mixedNumbers</code>, which we are passing an array as an argument. Modify the function by using <code>push()</code> and <code>unshift()</code> to add <code>'I', 2, 'three'</code> to the beginning of the array and <code>7, 'VIII', 9</code> to the end so that the returned array contains representations of the numbers 1-9 in order."
      ],
      "tests": [
        {
          "text":
            "<code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code>",
          "testString":
            "assert.deepEqual(mixedNumbers(['IV', 5, 'six']), ['I', 2, 'three', 'IV', 5, 'six', 7, 'VIII', 9], '<code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code>');"
        },
        {
          "text":
            "The <code>mixedNumbers</code> function should utilize the <code>push()</code> method",
          "testString":
            "assert.notStrictEqual(mixedNumbers.toString().search(/\\.push\\(/), -1, 'The <code>mixedNumbers</code> function should utilize the <code>push()</code> method');"
        },
        {
          "text":
            "The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method",
          "testString":
            "assert.notStrictEqual(mixedNumbers.toString().search(/\\.unshift\\(/), -1, 'The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function mixedNumbers(arr) {\n  // change code below this line\n\n  // change code above this line\n  return arr;\n}\n\n// do not change code below this line\nconsole.log(mixedNumbers(['IV', 5, 'six']));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Items to an Array with push and unshift",
      "dashedName": "add-items-to-an-array-with-push-and-unshift"
    },
    {
      "id": "587d78b2367417b2b2512b0f",
      "description": [
        "Both <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> <em>removes</em> an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.",
        "Let's take a look:",
        "<blockquote>let greetings = ['whats up?', 'hello', 'see ya!'];<br><br>greetings.pop();<br>// now equals ['whats up?', 'hello']<br><br>greetings.shift();<br>// now equals ['hello']</blockquote>",
        "We can also return the value of the removed element with either method like this:",
        "<blockquote>let popped = greetings.pop();<br>// returns 'hello'<br>// greetings now equals []</blockquote>",
        "<hr>",
        "We have defined a function, <code>popShift</code>, which takes an array as an argument and returns a new array. Modify the function, using <code>pop()</code> and <code>shift()</code>, to remove the first and last elements of the argument array, and assign the removed elements to their corresponding variables, so that the returned array contains their values."
      ],
      "tests": [
        {
          "text":
            "<code>popShift([\"challenge\", \"is\", \"not\", \"complete\"])</code> should return <code>[\"challenge\", \"complete\"]</code>",
          "testString":
            "assert.deepEqual(popShift(['challenge', 'is', 'not', 'complete']), [\"challenge\", \"complete\"], '<code>popShift([\"challenge\", \"is\", \"not\", \"complete\"])</code> should return <code>[\"challenge\", \"complete\"]</code>');"
        },
        {
          "text":
            "The <code>popShift</code> function should utilize the <code>pop()</code> method",
          "testString":
            "assert.notStrictEqual(popShift.toString().search(/\\.pop\\(/), -1, 'The <code>popShift</code> function should utilize the <code>pop()</code> method');"
        },
        {
          "text":
            "The <code>popShift</code> function should utilize the <code>shift()</code> method",
          "testString":
            "assert.notStrictEqual(popShift.toString().search(/\\.shift\\(/), -1, 'The <code>popShift</code> function should utilize the <code>shift()</code> method');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function popShift(arr) {\n  let popped; // change this line\n  let shifted; // change this line\n  return [shifted, popped];\n}\n\n// do not change code below this line\nconsole.log(popShift(['challenge', 'is', 'not', 'complete']));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Items from an Array with pop and shift",
      "dashedName": "remove-items-from-an-array-with-pop-and-shift"
    },
    {
      "id": "587d78b2367417b2b2512b10",
      "description": [
        "Ok, so we've learned how to remove elements from the beginning and end of arrays using <code>shift()</code> and <code>pop()</code>, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that's where <code>splice()</code> comes in. <code>splice()</code> allows us to do just that: <strong>remove any number of consecutive elements</strong> from anywhere in an array.",
        "<code>splice()</code> can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of <code>splice()</code> are integers which represent indexes, or positions, of the array that <code>splice()</code> is being called upon. And remember, arrays are <em>zero-indexed</em>, so to indicate the first element of an array, we would use <code>0</code>. <code>splice()</code>'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:",
        "<blockquote>let array = ['today', 'was', 'not', 'so', 'great'];<br><br>array.splice(2, 2);<br>// remove 2 elements beginning with the 3rd element<br>// array now equals ['today', 'was', 'great']</blockquote>",
        "<code>splice()</code> not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:",
        "<blockquote>let array = ['I', 'am', 'feeling', 'really', 'happy'];<br><br>let newArray = array.splice(3, 2);<br>// newArray equals ['really', 'happy']</blockquote>",
        "<hr>",
        "We've defined a function, <code>sumOfTen</code>, which takes an array as an argument and returns the sum of that array's elements. Modify the function, using <code>splice()</code>, so that it returns a value of <code>10</code>."
      ],
      "tests": [
        {
          "text": "<code>sumOfTen</code> should return 10",
          "testString":
            "assert.strictEqual(sumOfTen([2, 5, 1, 5, 2, 1]), 10, '<code>sumOfTen</code> should return 10');"
        },
        {
          "text":
            "The <code>sumOfTen</code> function should utilize the <code>splice()</code> method",
          "testString":
            "assert.notStrictEqual(sumOfTen.toString().search(/\\.splice\\(/), -1, 'The <code>sumOfTen</code> function should utilize the <code>splice()</code> method');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumOfTen(arr) {\n  // change code below this line\n  \n  // change code above this line\n  return arr.reduce((a, b) => a + b);\n}\n\n// do not change code below this line\nconsole.log(sumOfTen([2, 5, 1, 5, 2, 1]));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Items Using splice",
      "dashedName": "remove-items-using-splice"
    },
    {
      "id": "587d78b3367417b2b2512b11",
      "description": [
        "Remember in the last challenge we mentioned that <code>splice()</code> can take up to three parameters? Well, we can go one step further with <code>splice()</code> &mdash; in addition to removing elements, we can use that third parameter, which represents one or more elements, to <em>add</em> them as well. This can be incredibly useful for quickly switching out an element, or a set of elements, for another. For instance, let's say you're storing a color scheme for a set of DOM elements in an array, and want to dynamically change a color based on some action:",
        "<blockquote>function colorChange(arr, index, newColor) {<br>&nbsp;&nbsp;arr.splice(index, 1, newColor);<br>&nbsp;&nbsp;return arr;<br>}<br><br>let colorScheme = ['#878787', '#a08794', '#bb7e8c', '#c9b6be', '#d1becf'];<br><br>colorScheme = colorChange(colorScheme, 2, '#332327');<br>// we have removed '#bb7e8c' and added '#332327' in its place<br>// colorScheme now equals ['#878787', '#a08794', '#332327', '#c9b6be', '#d1becf']</blockquote>",
        "This function takes an array of hex values, an index at which to remove an element, and the new color to replace the removed element with. The return value is an array containing a newly modified color scheme! While this example is a bit oversimplified, we can see the value that utilizing <code>splice()</code> to its maximum potential can have.",
        "<hr>",
        "We have defined a function, <code>htmlColorNames</code>, which takes an array of HTML colors as an argument. Modify the function using <code>splice()</code> to remove the first two elements of the array and add <code>'DarkSalmon'</code> and <code>'BlanchedAlmond'</code> in their respective places."
      ],
      "tests": [
        {
          "text":
            "<code>htmlColorNames</code> should return <code>[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurqoise\", \"FireBrick\"]</code>",
          "testString":
            "assert.deepEqual(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']), ['DarkSalmon', 'BlanchedAlmond', 'LavenderBlush', 'PaleTurqoise', 'FireBrick'], '<code>htmlColorNames</code> should return <code>[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurqoise\", \"FireBrick\"]</code>');"
        },
        {
          "text":
            "The <code>htmlColorNames</code> function should utilize the <code>splice()</code> method",
          "testString":
            "assert(/.splice/.test(code), 'The <code>htmlColorNames</code> function should utilize the <code>splice()</code> method');"
        },
        {
          "text":
            "You should not use <code>shift()</code> or <code>unshift()</code>.",
          "testString":
            "assert(!/shift|unshift/.test(code), 'You should not use <code>shift()</code> or <code>unshift()</code>.');"
        },
        {
          "text": "You should not use array bracket notation.",
          "testString":
            "assert(!/\\[\\d\\]\\s*=/.test(code), 'You should not use array bracket notation.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function htmlColorNames(arr) {\n  // change code below this line\n  \n  // change code above this line\n  return arr;\n} \n \n// do not change code below this line\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Items Using splice",
      "dashedName": "add-items-using-splice"
    },
    {
      "id": "587d7b7a367417b2b2512b12",
      "description": [
        "The next method we will cover is <code>slice()</code>. <code>slice()</code>, rather than modifying an array, copies, or <em>extracts</em>, a given number of elements to a new array, leaving the array it is called upon untouched. <code>slice()</code> takes only 2 parameters &mdash; the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:",
        "<blockquote>let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];<br><br>let todaysWeather = weatherConditions.slice(1, 3);<br>// todaysWeather equals ['snow', 'sleet'];<br>// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']<br></blockquote>",
        "In effect, we have created a new array by extracting elements from an existing array.",
        "<hr>",
        "We have defined a function, <code>forecast</code>, that takes an array as an argument. Modify the function using <code>slice()</code> to extract information from the argument array and return a new array that contains the elements <code>'warm'</code> and <code>'sunny'</code>."
      ],
      "tests": [
        {
          "text":
            "<code>forecast</code> should return <code>[\"warm\", \"sunny\"]",
          "testString":
            "assert.deepEqual(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']), ['warm', 'sunny'], '<code>forecast</code> should return <code>[\"warm\", \"sunny\"]');"
        },
        {
          "text":
            "The <code>forecast</code> function should utilize the <code>slice()</code> method",
          "testString":
            "assert(/\\.slice\\(/.test(code), 'The <code>forecast</code> function should utilize the <code>slice()</code> method');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function forecast(arr) {\n  // change code below this line\n  \n  return arr;\n}\n\n// do not change code below this line\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Copy Array Items Using slice",
      "dashedName": "copy-array-items-using-slice"
    },
    {
      "id": "587d7b7b367417b2b2512b13",
      "description": [
        "While <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new <dfn>spread operator</dfn> allows us to easily copy <em>all</em> of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code>",
        "In practice, we can use the spread operator to copy an array like so:",
        "<blockquote>let thisArray = [true, true, undefined, false, null];<br>let thatArray = [...thisArray];<br>// thatArray equals [true, true, undefined, false, null]<br>// thisArray remains unchanged, and is identical to thatArray</blockquote>",
        "<hr>",
        "We have defined a function, <code>copyMachine</code> which takes <code>arr</code> (an array) and <code>num</code> (a number) as arguments. The function is supposed to return a new array made up of <code>num</code> copies of <code>arr</code>. We have done most of the work for you, but it doesn't work quite right yet. Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!)."
      ],
      "tests": [
        {
          "text":
            "<code>copyMachine([true, false, true], 2)</code> should return <code>[[true, false, true], [true, false, true]]</code>",
          "testString":
            "assert.deepEqual(copyMachine([true, false, true], 2), [[true, false, true], [true, false, true]], '<code>copyMachine([true, false, true], 2)</code> should return <code>[[true, false, true], [true, false, true]]</code>');"
        },
        {
          "text":
            "<code>copyMachine([1, 2, 3], 5)</code> should return <code>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]</code>",
          "testString":
            "assert.deepEqual(copyMachine([1, 2, 3], 5), [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], '<code>copyMachine([1, 2, 3], 5)</code> should return <code>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]</code>');"
        },
        {
          "text":
            "<code>copyMachine([true, true, null], 1)</code> should return <code>[[true, true, null]]</code>",
          "testString":
            "assert.deepEqual(copyMachine([true, true, null], 1), [[true, true, null]], '<code>copyMachine([true, true, null], 1)</code> should return <code>[[true, true, null]]</code>');"
        },
        {
          "text":
            "<code>copyMachine([\"it works\"], 3)</code> should return <code>[[\"it works\"], [\"it works\"], [\"it works\"]]</code>",
          "testString":
            "assert.deepEqual(copyMachine(['it works'], 3), [['it works'], ['it works'], ['it works']], '<code>copyMachine([\"it works\"], 3)</code> should return <code>[[\"it works\"], [\"it works\"], [\"it works\"]]</code>');"
        },
        {
          "text":
            "The <code>copyMachine</code> function should utilize the <code>spread operator</code> with array <code>arr</code>",
          "testString":
            "assert.notStrictEqual(copyMachine.toString().indexOf('.concat(_toConsumableArray(arr))'), -1, 'The <code>copyMachine</code> function should utilize the <code>spread operator</code> with array <code>arr</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    // change code below this line\n\n    // change code above this line\n    num--;\n  }\n  return newArr;\n}\n\n// change code here to test different cases:\nconsole.log(copyMachine([true, false, true], 2));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Copy an Array with the Spread Operator",
      "dashedName": "copy-an-array-with-the-spread-operator"
    },
    {
      "id": "587d7b7b367417b2b2512b17",
      "description": [
        "Another huge advantage of the <dfn>spread</dfn> operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:",
        "<blockquote>let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];<br><br>let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];<br>// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</blockquote>",
        "Using spread syntax, we have just achieved an operation that would have been more more complex and more verbose had we used traditional methods.",
        "<hr>",
        "We have defined a function <code>spreadOut</code> that returns the variable <code>sentence</code>, modify the function using the <dfn>spread</dfn> operator so that it returns the array <code>['learning', 'to', 'code', 'is', 'fun']</code>."
      ],
      "tests": [
        {
          "text":
            "<code>spreadOut</code> should return <code>[\"learning\", \"to\", \"code\", \"is\", \"fun\"]</code>",
          "testString":
            "assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun'], '<code>spreadOut</code> should return <code>[\"learning\", \"to\", \"code\", \"is\", \"fun\"]</code>');"
        },
        {
          "text":
            "The <code>spreadOut</code> function should utilize spread syntax",
          "testString":
            "assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1, 'The <code>spreadOut</code> function should utilize spread syntax');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence; // change this line\n  return sentence;\n}\n\n// do not change code below this line\nconsole.log(spreadOut());",
          "head": "",
          "tail": ""
        }
      },
      "name": "Combine Arrays with the Spread Operator",
      "dashedName": "combine-arrays-with-the-spread-operator"
    },
    {
      "id": "587d7b7b367417b2b2512b14",
      "description": [
        "Since arrays can be changed, or <em>mutated</em>, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.",
        "For example:",
        "<blockquote>let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];<br><br>fruits.indexOf('dates') // returns -1<br>fruits.indexOf('oranges') // returns 2<br>fruits.indexOf('pears') // returns 1, the first index at which the element exists</blockquote>",
        "<hr>",
        "<code>indexOf()</code> can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, <code>quickCheck</code>, that takes an array and an element as arguments. Modify the function using <code>indexOf()</code> so that it returns <code>true</code> if the passed element exists on the array, and <code>false</code> if it does not."
      ],
      "tests": [
        {
          "text":
            "<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code>",
          "testString":
            "assert.strictEqual(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'), false, '<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code>');"
        },
        {
          "text":
            "<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"onions\")</code> should return <code>true</code>",
          "testString":
            "assert.strictEqual(quickCheck(['squash', 'onions', 'shallots'], 'onions'), true, '<code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"onions\")</code> should return <code>true</code>');"
        },
        {
          "text":
            "<code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code>",
          "testString":
            "assert.strictEqual(quickCheck([3, 5, 9, 125, 45, 2], 125), true, '<code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code>');"
        },
        {
          "text":
            "<code>quickCheck([true, false, false], undefined)</code> should return <code>false</code>",
          "testString":
            "assert.strictEqual(quickCheck([true, false, false], undefined), false, '<code>quickCheck([true, false, false], undefined)</code> should return <code>false</code>');"
        },
        {
          "text":
            "The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method",
          "testString":
            "assert.notStrictEqual(quickCheck.toString().search(/\\.indexOf\\(/), -1, 'The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function quickCheck(arr, elem) {\n  // change code below this line\n\n  // change code above this line\n}\n\n// change code here to test different cases:\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Check For The Presence of an Element With indexOf",
      "dashedName": "check-for-the-presence-of-an-element-with-indexof"
    },
    {
      "id": "587d7b7b367417b2b2512b15",
      "description": [
        "Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple <code>for</code> loop.",
        "Consider the following:",
        "<blockquote>function greaterThanTen(arr) {<br>&nbsp;&nbsp;let newArr = [];<br>&nbsp;&nbsp;for (let i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i] > 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr.push(arr[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return newArr;<br>}<br><br>greaterThanTen([2, 12, 8, 14, 80, 0, 1]);<br>// returns [12, 14, 80]</blockquote>",
        "Using a <code>for</code> loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than <code>10</code>, and returned a new array containing those items.",
        "<hr>",
        "We have defined a function, <code>filteredArray</code>, which takes <code>arr</code>, a nested array, and <code>elem</code> as arguments, and returns a new array. <code>elem</code> represents an element that may or may not be present on one or more of the arrays nested within <code>arr</code>. Modify the function, using a <code>for</code> loop, to return a filtered version of the passed array such that any array nested within <code>arr</code> containing <code>elem</code> has been removed."
      ],
      "tests": [
        {
          "text":
            "<code>filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)</code> should return <code>[ [10, 8, 3], [14, 6, 23] ]</code>",
          "testString":
            "assert.deepEqual(filteredArray([ [10, 8, 3], [14, 6, 23], [3, 18, 6] ], 18), [[10, 8, 3], [14, 6, 23]], '<code>filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)</code> should return <code>[ [10, 8, 3], [14, 6, 23] ]</code>');"
        },
        {
          "text":
            "<code>filteredArray([ [\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2] ], 2)</code> should return <code>[ [\"flutes\", 4] ]</code>",
          "testString":
            "assert.deepEqual(filteredArray([ ['trumpets', 2], ['flutes', 4], ['saxophones', 2] ], 2), [['flutes', 4]], '<code>filteredArray([ [\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2] ], 2)</code> should return <code>[ [\"flutes\", 4] ]</code>');"
        },
        {
          "text":
            "<code>filteredArray([ [\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"] ], \"peter\")</code> should return <code>[ [\"amy\", \"beth\", \"sam\"] ]</code>",
          "testString":
            "assert.deepEqual(filteredArray([['amy', 'beth', 'sam'], ['dave', 'sean', 'peter']], 'peter'), [['amy', 'beth', 'sam']], '<code>filteredArray([ [\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"] ], \"peter\")</code> should return <code>[ [\"amy\", \"beth\", \"sam\"] ]</code>');"
        },
        {
          "text":
            "<code>filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)</code> should return <code>[ ]</code>",
          "testString":
            "assert.deepEqual(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3), [], '<code>filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)</code> should return <code>[ ]</code>');"
        },
        {
          "text":
            "The <code>filteredArray</code> function should utilize a <code>for</code> loop",
          "testString":
            "assert.notStrictEqual(filteredArray.toString().search(/for/), -1, 'The <code>filteredArray</code> function should utilize a <code>for</code> loop');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function filteredArray(arr, elem) {\n  let newArr = [];\n  // change code below this line\n\n  // change code above this line\n  return newArr;\n}\n\n// change code here to test different cases:\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Iterate Through All an Arrays Items Using For Loops",
      "dashedName": "iterate-through-all-an-arrays-items-using-for-loops"
    },
    {
      "id": "587d7b7b367417b2b2512b16",
      "description": [
        "Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, lets take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.",
        "One of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:",
        "<blockquote>let nestedArray = [ // top, or first level - the outer most array<br>&nbsp;&nbsp;['deep'], // an array within an array, 2 levels of depth<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;['deeper'], ['deeper'] // 2 arrays nested 3 levels deep<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest'], ['deepest'] // 2 arrays nested 4 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest-est?'] // an array nested 5 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;]<br>];</blockquote>",
        "While this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data.",
        "However, we can still very easily access the deepest levels of an array this complex with bracket notation:",
        "<blockquote>console.log(nestedArray[2][1][0][0][0]);<br>// logs: deepest-est?</blockquote>",
        "And now that we know where that piece of data is, we can reset it if we need to:",
        "<blockquote>nestedArray[2][1][0][0][0] = 'deeper still';<br><br>console.log(nestedArray[2][1][0][0][0]);<br>// now logs: deeper still</blockquote>",
        "<hr>",
        "We have defined a variable, <code>myNestedArray</code>, set equal to an array. Modify <code>myNestedArray</code>, using any combination of <dfn>strings</dfn>, <dfn>numbers</dfn>, and <dfn>booleans</dfn> for data elements, so that it has exactly five levels of depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string <code>'deep'</code>, on the fourth level, include the string <code>'deeper'</code>, and on the fifth level, include the string <code>'deepest'</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myNestedArray</code> should contain only numbers, booleans, and strings as data elements",
          "testString":
            "assert.strictEqual((function(arr) { let flattened = (function flatten(arr) { const flat = [].concat(...arr); return flat.some (Array.isArray) ? flatten(flat) : flat; })(arr); for (let i = 0; i < flattened.length; i++) { if ( typeof flattened[i] !== 'number' && typeof flattened[i] !== 'string' && typeof flattened[i] !== 'boolean') { return false } } return true })(myNestedArray), true, '<code>myNestedArray</code> should contain only numbers, booleans, and strings as data elements');"
        },
        {
          "text":
            "<code>myNestedArray</code> should have exactly 5 levels of depth",
          "testString":
            "assert.strictEqual((function(arr) {let depth = 0;function arrayDepth(array, i, d) { if (Array.isArray(array[i])) {  arrayDepth(array[i], 0, d + 1);} else {  depth = (d > depth) ? d : depth;}if (i < array.length) {  arrayDepth(array, i + 1, d);}  }arrayDepth(arr, 0, 0);return depth;})(myNestedArray), 4, '<code>myNestedArray</code> should have exactly 5 levels of depth');"
        },
        {
          "text":
            "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deep\"</code> on an array nested 3 levels deep",
          "testString":
            "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deep').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deep')[0] === 2, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deep\"</code> on an array nested 3 levels deep');"
        },
        {
          "text":
            "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deeper\"</code> on an array nested 4 levels deep",
          "testString":
            "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deeper').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deeper')[0] === 3, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deeper\"</code> on an array nested 4 levels deep');"
        },
        {
          "text":
            "<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deepest\"</code> on an array nested 5 levels deep",
          "testString":
            "assert((function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deepest').length === 1 && (function howDeep(array, target, depth = 0) {return array.reduce((combined, current) => {if (Array.isArray(current)) {  return combined.concat(howDeep(current, target, depth + 1));} else if (current === target) {  return combined.concat(depth);} else {  return combined;}}, []);})(myNestedArray, 'deepest')[0] === 4, '<code>myNestedArray</code> should contain exactly one occurrence of the string <code>\"deepest\"</code> on an array nested 5 levels deep');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let myNestedArray = [\n  // change code below this line\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n  // change code above this line\n];",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create complex multidimensional arrays",
      "dashedName": "create-complex-multidimensional-arrays"
    },
    {
      "id": "587d7b7c367417b2b2512b18",
      "description": [
        "At their most basic, objects are just collections of <dfn>key-value pairs</dfn>, or in other words, pieces of data mapped to unique identifiers that we call <dfn>properties</dfn> or <dfn>keys</dfn>. Let's take a look at a very simple example:",
        "<blockquote>let FCC_User = {<br>  username: 'awesome_coder',<br>  followers: 572,<br>  points: 1741,<br>  completedProjects: 15<br>};</blockquote>",
        "The above code defines an object called <code>FCC_User</code> that has four <dfn>properties</dfn>, each of which map to a specific value. If we wanted to know the number of <code>followers</code> <code>FCC_User</code> has, we can access that property by writing:",
        "<blockquote>let userData = FCC_User.followers;<br>// userData equals 572</blockquote>",
        "This is called <dfn>dot notation</dfn>. Alternatively, we can also access the property with brackets, like so:",
        "<blockquote>let userData = FCC_User['followers']<br>// userData equals 572</blockquote>",
        "Notice that with <dfn>bracket notation</dfn>, we enclosed <code>followers</code> in quotes. This is because the brackets actually allow us to pass a variable in to be evaluated as a property name (hint: keep this in mind for later!). Had we passed <code>followers</code> in without the quotes, the JavaScript engine would have attempted to evaluate it as a variable, and a <code>ReferenceError: followers is not defined</code> would have been thrown.",
        "<hr>",
        "Using the same syntax, we can also <em><strong>add new</strong></em> key-value pairs to objects. We've created a <code>foods</code> object with three entries. Add three more entries: <code>bananas</code> with a value of <code>13</code>, <code>grapes</code> with a value of <code>35</code>, and <code>strawberries</code> with a value of <code>27</code>."
      ],
      "tests": [
        {
          "text": "<code>foods</code> is an object",
          "testString":
            "assert(typeof foods === 'object', '<code>foods</code> is an object');"
        },
        {
          "text":
            "The <code>foods</code> object has a key <code>\"bananas\"</code> with a value of <code>13</code>",
          "testString":
            "assert(foods.bananas === 13, 'The <code>foods</code> object has a key <code>\"bananas\"</code> with a value of <code>13</code>');"
        },
        {
          "text":
            "The <code>foods</code> object has a key <code>\"grapes\"</code> with a value of <code>35</code>",
          "testString":
            "assert(foods.grapes === 35, 'The <code>foods</code> object has a key <code>\"grapes\"</code> with a value of <code>35</code>');"
        },
        {
          "text":
            "The <code>foods</code> object has a key <code>\"strawberries\"</code> with a value of <code>27</code>",
          "testString":
            "assert(foods.strawberries === 27, 'The <code>foods</code> object has a key <code>\"strawberries\"</code> with a value of <code>27</code>');"
        },
        {
          "text":
            "The key-value pairs should be set using dot or bracket notation",
          "testString":
            "assert(code.search(/bananas:/) === -1 && code.search(/grapes:/) === -1 && code.search(/strawberries:/) === -1, 'The key-value pairs should be set using dot or bracket notation');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\n// change code below this line\n\n// change code above this line\n\nconsole.log(foods);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add KeyValue Pairs to JavaScript Objects",
      "dashedName": "add-keyvalue-pairs-to-javascript-objects"
    },
    {
      "id": "587d7b7c367417b2b2512b19",
      "description": [
        "Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:",
        "<blockquote>let nestedObject = {<br>  id: 28802695164,<br>  date: 'December 31, 2016',<br>  data: {<br>    totalUsers: 99,<br>    online: 80,<br>    onlineStatus: {<br>      active: 67,<br>      away: 13<br>    }<br>  }<br>};</blockquote>",
        "<code>nestedObject</code> has three unique keys: <code>id</code>, whose value is a number, <code>date</code> whose value is a string, and <code>data</code>, whose value is an object which has yet another object nested within it. While structures can quickly become complex, we can still use the same notations to access the information we need.",
        "<hr>",
        "Here we've defined an object, <code>userActivity</code>, which includes another object nested within it. You can modify properties on this nested object in the same way you modified properties in the last challenge. Set the value of the <code>online</code> key to <code>45</code>."
      ],
      "tests": [
        {
          "text":
            "<code>userActivity</code> has <code>id</code>, <code>date</code> and <code>data</code> properties",
          "testString":
            "assert('id' in userActivity && 'date' in userActivity && 'data' in userActivity, '<code>userActivity</code> has <code>id</code>, <code>date</code> and <code>data</code> properties');"
        },
        {
          "text":
            "<code>userActivity</code> has a <code>data</code> key set to an object with keys <code>totalUsers</code> and <code>online</code>",
          "testString":
            "assert('totalUsers' in userActivity.data && 'online' in userActivity.data, '<code>userActivity</code> has a <code>data</code> key set to an object with keys <code>totalUsers</code> and <code>online</code>');"
        },
        {
          "text":
            "The <code>online</code> property nested in the <code>data</code> key of <code>userActivity</code> should be set to <code>45</code>",
          "testString":
            "assert(userActivity.data.online === 45, 'The <code>online</code> property nested in the <code>data</code> key of <code>userActivity</code> should be set to <code>45</code>');"
        },
        {
          "text":
            "The <code>online</code> property is set using dot or bracket notation",
          "testString":
            "assert.strictEqual(code.search(/online: 45/), -1, 'The <code>online</code> property is set using dot or bracket notation');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\n// change code below this line\n\n// change code above this line\n\nconsole.log(userActivity);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Modify an Object Nested Within an Object",
      "dashedName": "modify-an-object-nested-within-an-object"
    },
    {
      "id": "587d7b7c367417b2b2512b1a",
      "description": [
        "In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:",
        "<blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote>",
        "This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.",
        "<hr>",
        "We've defined a function, <code>checkInventory</code>, which receives a scanned item as an argument. Return the current value of the <code>scannedItem</code> key in the <code>foods</code> object. You can assume that only valid keys will be provided as an argument to <code>checkInventory</code>."
      ],
      "tests": [
        {
          "text": "<code>checkInventory</code> is a function",
          "testString":
            "assert.strictEqual(typeof checkInventory, 'function', '<code>checkInventory</code> is a function');"
        },
        {
          "text":
            "The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>",
          "testString":
            "assert.deepEqual(foods, {apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27}, 'The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>');"
        },
        {
          "text":
            "<code>checkInventory(\"apples\")</code> should return <code>25</code>",
          "testString":
            "assert.strictEqual(checkInventory('apples'), 25, '<code>checkInventory(\"apples\")</code> should return <code>25</code>');"
        },
        {
          "text":
            "<code>checkInventory(\"bananas\")</code> should return <code>13</code>",
          "testString":
            "assert.strictEqual(checkInventory('bananas'), 13, '<code>checkInventory(\"bananas\")</code> should return <code>13</code>');"
        },
        {
          "text":
            "<code>checkInventory(\"strawberries\")</code> should return <code>27</code>",
          "testString":
            "assert.strictEqual(checkInventory('strawberries'), 27, '<code>checkInventory(\"strawberries\")</code> should return <code>27</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n// do not change code above this line\n\nfunction checkInventory(scannedItem) {\n  // change code below this line\n\n}\n\n// change code below this line to test different cases:\nconsole.log(checkInventory(\"apples\"));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Access Property Names with Bracket Notation",
      "dashedName": "access-property-names-with-bracket-notation"
    },
    {
      "id": "587d7b7c367417b2b2512b1b",
      "description": [
        "Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, <strong><em>and</em></strong>, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.",
        "In earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can <em>remove</em> a key-value pair from an object.",
        "Let's revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code> key, we can remove it by using the <code>delete</code> keyword like this:",
        "<blockquote>delete foods.apples;</blockquote>",
        "<hr>",
        "Use the delete keyword to remove the <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys from the <code>foods</code> object."
      ],
      "tests": [
        {
          "text":
            "The <code>foods</code> object only has three keys: <code>apples</code>, <code>grapes</code>, and <code>bananas</code>",
          "testString":
            "assert(!foods.hasOwnProperty('oranges') && !foods.hasOwnProperty('plums') && !foods.hasOwnProperty('strawberries') && Object.keys(foods).length === 3, 'The <code>foods</code> object only has three keys: <code>apples</code>, <code>grapes</code>, and <code>bananas</code>');"
        },
        {
          "text":
            "The <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys are removed using <code>delete</code>",
          "testString":
            "assert(code.search(/oranges:/) !== -1 && code.search(/plums:/) !== -1 && code.search(/strawberries:/) !== -1, 'The <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys are removed using <code>delete</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\n// change code below this line\n\n// change code above this line\n\nconsole.log(foods);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the delete Keyword to Remove Object Properties",
      "dashedName": "use-the-delete-keyword-to-remove-object-properties"
    },
    {
      "id": "587d7b7d367417b2b2512b1c",
      "description": [
        "Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:",
        "<blockquote>users.hasOwnProperty('Alan');<br>'Alan' in users;<br>// both return true</blockquote>",
        "<hr>",
        "We've created an object, <code>users</code>, with some users in it and a function <code>isEveryoneHere</code>, which we pass the <code>users</code> object to as an argument. Finish writing this function so that it returns <code>true</code> only if the <code>users</code> object contains all four names, <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>, as keys, and <code>false</code> otherwise."
      ],
      "tests": [
        {
          "text":
            "The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>",
          "testString":
            "assert('Alan' in users && 'Jeff' in users && 'Sarah' in users && 'Ryan' in users && Object.keys(users).length === 4, 'The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>');"
        },
        {
          "text":
            "The function <code>isEveryoneHere</code> returns <code>true</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are properties on the <code>users</code> object",
          "testString":
            "assert(isEveryoneHere(users) === true, 'The function <code>isEveryoneHere</code> returns <code>true</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are properties on the <code>users</code> object');"
        },
        {
          "text":
            "The function <code>isEveryoneHere</code> returns <code>false</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are not properties on the <code>users</code> object",
          "testString":
            "assert((function() { delete users.Alan; delete users.Jeff; delete users.Sarah; delete users.Ryan; return isEveryoneHere(users) })() === false, 'The function <code>isEveryoneHere</code> returns <code>false</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are not properties on the <code>users</code> object');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(obj) {\n  // change code below this line\n\n  // change code above this line\n}\n\nconsole.log(isEveryoneHere(users));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Check if an Object has a Property",
      "dashedName": "check-if-an-object-has-a-property"
    },
    {
      "id": "587d7b7d367417b2b2512b1d",
      "description": [
        "Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a <dfn>for...in</dfn> statement. For our <code>users</code> object, this could look like:",
        "<blockquote>for (let user in users) {<br>  console.log(user);<br>};<br><br>// logs:<br>Alan<br>Jeff<br>Sarah<br>Ryan</blockquote>",
        "In this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object's keys as the statement looped through the object, resulting in each user's name being printed to the console.",
        "<strong>NOTE:</strong><br>Objects do not maintain an ordering to stored keys like arrays do; thus a keys position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.",
        "<hr>",
        "We've defined a function, <code>countOnline</code>; use a <dfn>for...in</dfn> statement within this function to loop through the users in the <code>users</code> object and return the number of users whose <code>online</code> property is set to <code>true</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>users</code> object contains users <code>Jeff</code> and <code>Ryan</code> with <code>online</code> set to <code>true</code> and users <code>Alan</code> and <code>Sarah</code> with <code>online</code> set to <code>false</code>",
          "testString":
            "assert(users.Alan.online === false && users.Jeff.online === true &&  users.Sarah.online === false &&  users.Ryan.online === true, 'The <code>users</code> object contains users <code>Jeff</code> and <code>Ryan</code> with <code>online</code> set to <code>true</code> and users <code>Alan</code> and <code>Sarah</code> with <code>online</code> set to <code>false</code>');"
        },
        {
          "text":
            "The function <code>countOnline</code> returns the number of users with the <code>online</code> property set to <code>true</code>",
          "testString":
            "assert((function() { users.Harry = {online: true}; users.Sam = {online: true}; users.Carl = {online: true}; return countOnline(users) })() === 5, 'The function <code>countOnline</code> returns the number of users with the <code>online</code> property set to <code>true</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction countOnline(obj) {\n  // change code below this line\n\n  // change code above this line\n}\n\nconsole.log(countOnline(users));",
          "head": "",
          "tail": ""
        }
      },
      "name": " Iterate Through the Keys of an Object with a forin Statement",
      "dashedName":
        "-iterate-through-the-keys-of-an-object-with-a-forin-statement"
    },
    {
      "id": "587d7b7d367417b2b2512b1e",
      "description": [
        "We can also generate an array which contains all the keys stored in an object using the <code>Object.keys()</code> method and passing in an object as the argument. This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.",
        "<hr>",
        "Finish writing the <code>getArrayOfUsers</code> function so that it returns an array containing all the properties in the object it receives as an argument."
      ],
      "tests": [
        {
          "text":
            "The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>",
          "testString":
            "assert('Alan' in users && 'Jeff' in users && 'Sarah' in users && 'Ryan' in users && Object.keys(users).length === 4, 'The <code>users</code> object only contains the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code>');"
        },
        {
          "text":
            "The <code>getArrayOfUsers</code> function returns an array which contains all the keys in the <code>users</code> object",
          "testString":
            "assert((function() { users.Sam = {}; users.Lewis = {}; let R = getArrayOfUsers(users); return (R.indexOf('Alan') !== -1 && R.indexOf('Jeff') !== -1 && R.indexOf('Sarah') !== -1 && R.indexOf('Ryan') !== -1 && R.indexOf('Sam') !== -1 && R.indexOf('Lewis') !== -1); })() === true, 'The <code>getArrayOfUsers</code> function returns an array which contains all the keys in the <code>users</code> object');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  // change code below this line\n\n  // change code above this line\n}\n\nconsole.log(getArrayOfUsers(users));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Generate an Array of All Object Keys with Objectkeys",
      "dashedName": "generate-an-array-of-all-object-keys-with-objectkeys"
    },
    {
      "id": "587d7b7d367417b2b2512b1f",
      "description": [
        "Now you've seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the optional Advanced Data Structures lessons later in the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin tackling more complex problems using JavaScript!",
        "<hr>",
        "Take a look at the object we've provided in the code editor. The <code>user</code> object contains three keys. The <code>data</code> key contains five keys, one of which contains an array of <code>friends</code>. From this, you can see how flexible objects are as data structures. We've started writing a function <code>addFriend</code>. Finish writing it so that it takes a <code>user</code> object and adds the name of the <code>friend</code> argument to the array stored in <code>user.data.friends</code> and returns that array."
      ],
      "tests": [
        {
          "text":
            "The <code>user</code> object has <code>name</code>, <code>age</code>, and <code>data</code> keys",
          "testString":
            "assert('name' in user && 'age' in user && 'data' in user, 'The <code>user</code> object has <code>name</code>, <code>age</code>, and <code>data</code> keys');"
        },
        {
          "text":
            "The <code>addFriend</code> function accepts a <code>user</code> object and a <code>friend</code> string as arguments and adds the friend to the array of <code>friends</code> in the <code>user</code> object",
          "testString":
            "assert((function() { let L1 = user.data.friends.length; addFriend(user, 'Sean'); let L2 = user.data.friends.length; return (L2 === L1 + 1); })(), 'The <code>addFriend</code> function accepts a <code>user</code> object and a <code>friend</code> string as arguments and adds the friend to the array of <code>friends</code> in the <code>user</code> object');"
        },
        {
          "text":
            "<code>addFriend(user, \"Pete\")</code> should return <code>[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]</code>",
          "testString":
            "assert.deepEqual((function() { delete user.data.friends; user.data.friends = ['Sam', 'Kira', 'Tomo']; return addFriend(user, 'Pete') })(), ['Sam', 'Kira', 'Tomo', 'Pete'], '<code>addFriend(user, \"Pete\")</code> should return <code>[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  // change code below this line  \n\n  // change code above this line\n}\n\nconsole.log(addFriend(user, 'Pete'));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Modify an Array Stored in an Object",
      "dashedName": "modify-an-array-stored-in-an-object"
    },
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "description": [
        "Comments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.",
        "There are two ways to write comments in JavaScript:",
        "Using <code>//</code> will tell JavaScript to ignore the remainder of the text on the current line:",
        "<blockquote>// This is an in-line comment.</blockquote>",
        "You can make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>:",
        "<blockquote>/* This is a <br>   multi-line comment */</blockquote>",
        "<strong>Best Practice</strong><br>As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code&mdash;both for others <em>and</em> for your future self.",
        "<hr>",
        "Try creating one of each type of comment."
      ],
      "tests": [
        {
          "text":
            "Create a <code>//</code> style comment that contains at least five letters.",
          "testString":
            "assert(code.match(/(\\/\\/)...../g), 'Create a <code>//</code> style comment that contains at least five letters.');"
        },
        {
          "text":
            "Create a <code>/* */</code> style comment that contains at least five letters.",
          "testString":
            "assert(code.match(/(\\/\\*)([^\\*\\/]{5,})(?=\\*\\/)/gm), 'Create a <code>/* */</code> style comment that contains at least five letters.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comment Your JavaScript Code",
      "dashedName": "comment-your-javascript-code"
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "description": [
        "In computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides seven different <dfn>data types</dfn> which are <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>number</code>, and <code>object</code>.",
        "For example, computers distinguish between numbers, such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.",
        "<dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the seven data types may be stored in a variable.",
        "<code>Variables</code> are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer <code>variables</code> differ from mathematical variables in that they can store different values at different times.",
        "We tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword <code>var</code> in front of it, like so:",
        "<blockquote>var ourName;</blockquote>",
        "creates a <code>variable</code> called <code>ourName</code>. In JavaScript we end statements with semicolons.",
        "<code>Variable</code> names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.",
        "<hr>",
        "Use the <code>var</code> keyword to create a variable called <code>myName</code>.",
        "<strong>Hint</strong><br>Look at the <code>ourName</code> example if you get stuck."
      ],
      "tests": [
        {
          "text":
            "You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon",
          "testString":
            "assert(/var\\s+myName\\s*;/.test(code), 'You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourName;\n\n// Declare myName below this line\n",
          "head": "",
          "tail":
            "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
        }
      },
      "name": "Declare JavaScript Variables",
      "dashedName": "declare-javascript-variables"
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "description": [
        "In JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator.",
        "<code>myVariable = 5;</code>",
        "This assigns the <code>Number</code> value <code>5</code> to <code>myVariable</code>.",
        "Assignment always goes from right to left. Everything to the right of the <code>=</code> operator is resolved before the value is assigned to the variable to the left of the operator.",
        "<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>",
        "This assigns <code>5</code> to <code>myVar</code> and then resolves <code>myVar</code> to <code>5</code>  again and assigns it to <code>myNum</code>.",
        "<hr>",
        "Assign the value <code>7</code> to variable <code>a</code>.",
        "Assign the contents of <code>a</code> to variable <code>b</code>."
      ],
      "tests": [
        {
          "text": "Do not change code above the line",
          "testString":
            "assert(/var a;/.test(code) && /var b = 2;/.test(code), 'Do not change code above the line');"
        },
        {
          "text": "<code>a</code> should have a value of 7",
          "testString":
            "assert(typeof a === 'number' && a === 7, '<code>a</code> should have a value of 7');"
        },
        {
          "text": "<code>b</code> should have a value of 7",
          "testString":
            "assert(typeof b === 'number' && b === 7, '<code>b</code> should have a value of 7');"
        },
        {
          "text":
            "<code>a</code> should be assigned to <code>b</code> with <code>=</code>",
          "testString":
            "assert(/b\\s*=\\s*a\\s*;/g.test(code), '<code>a</code> should be assigned to <code>b</code> with <code>=</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar a;\nvar b = 2;\n\n// Only change code below this line\n",
          "head":
            "if (typeof a != 'undefined') {\n  a = undefined;\n}\nif (typeof b != 'undefined') {\n  b = undefined;\n}",
          "tail": "(function(a,b){return \"a = \" + a + \", b = \" + b;})(a,b);"
        }
      },
      "name": "Storing Values with the Assignment Operator",
      "dashedName": "storing-values-with-the-assignment-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "description": [
        "It is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.",
        "<code>var myVar = 0;</code>",
        "Creates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.",
        "<hr>",
        "Define a variable <code>a</code> with <code>var</code> and initialize it to a value of <code>9</code>."
      ],
      "tests": [
        {
          "text": "Initialize <code>a</code> to a value of <code>9</code>",
          "testString":
            "assert(/var\\s+a\\s*=\\s*9\\s*/.test(code), 'Initialize <code>a</code> to a value of <code>9</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourVar = 19;\n\n// Only change code below this line\n",
          "head": "",
          "tail":
            "if(typeof a !== 'undefined') {(function(a){return \"a = \" + a;})(a);} else { (function() {return 'a is undefined';})(); }"
        }
      },
      "name": "Initializing Variables with the Assignment Operator",
      "dashedName": "initializing-variables-with-the-assignment-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "description": [
        "When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a literal <dfn>string</dfn> of <code>\"undefined\"</code>.",
        "<hr>",
        "Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>\"I am a\"</code> respectively so that they will not be <code>undefined</code>."
      ],
      "tests": [
        {
          "text":
            "<code>a</code> should be defined and evaluated to have the value of <code>6</code>",
          "testString":
            "assert(typeof a === 'number' && a === 6, '<code>a</code> should be defined and evaluated to have the value of <code>6</code>');"
        },
        {
          "text":
            "<code>b</code> should be defined and evaluated to have the value of <code>15</code>",
          "testString":
            "assert(typeof b === 'number' && b === 15, '<code>b</code> should be defined and evaluated to have the value of <code>15</code>');"
        },
        {
          "text":
            "<code>c</code> should not contain <code>undefined</code> and should have a value of \"I am a String!\"",
          "testString":
            "assert(!/undefined/.test(c) && c === \"I am a String!\", '<code>c</code> should not contain <code>undefined</code> and should have a value of \"I am a String!\"');"
        },
        {
          "text": "Do not change code below the line",
          "testString":
            "assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), 'Do not change code below the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Initialize these three variables\nvar a;\nvar b;\nvar c;\n\n// Do not change code below this line\n\na = a + 1;\nb = b + 5;\nc = c + \" String!\";\n",
          "head": "",
          "tail":
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
        }
      },
      "name": "Understanding Uninitialized Variables",
      "dashedName": "understanding-uninitialized-variables"
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "description": [
        "In JavaScript all variables and function names are case sensitive. This means that capitalization matters.",
        "<code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you <em>do not</em> use this language feature.",
        "<h4>Best Practice</h4>",
        "Write variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.",
        "<strong>Examples:</strong>",
        "<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsSoLong;</blockquote>",
        "<hr>",
        "Modify the existing declarations and assignments so their names use <dfn>camelCase</dfn>.<br>Do not create any new variables."
      ],
      "tests": [
        {
          "text":
            "<code>studlyCapVar</code> is defined and has a value of <code>10</code>",
          "testString":
            "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10, '<code>studlyCapVar</code> is defined and has a value of <code>10</code>');"
        },
        {
          "text":
            "<code>properCamelCase</code> is defined and has a value of <code>\"A String\"</code>",
          "testString":
            "assert(typeof properCamelCase !== 'undefined' && properCamelCase === \"A String\", '<code>properCamelCase</code> is defined and has a value of <code>\"A String\"</code>');"
        },
        {
          "text":
            "<code>titleCaseOver</code> is defined and has a value of <code>9000</code>",
          "testString":
            "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000, '<code>titleCaseOver</code> is defined and has a value of <code>9000</code>');"
        },
        {
          "text":
            "<code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.",
          "testString":
            "assert(code.match(/studlyCapVar/g).length === 2, '<code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.');"
        },
        {
          "text":
            "<code>properCamelCase</code> should use camelCase in both declaration and assignment sections.",
          "testString":
            "assert(code.match(/properCamelCase/g).length === 2, '<code>properCamelCase</code> should use camelCase in both declaration and assignment sections.');"
        },
        {
          "text":
            "<code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.",
          "testString":
            "assert(code.match(/titleCaseOver/g).length === 2, '<code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Declarations\nvar StUdLyCapVaR;\nvar properCamelCase;\nvar TitleCaseOver;\n\n// Assignments\nSTUDLYCAPVAR = 10;\nPRoperCAmelCAse = \"A String\";\ntITLEcASEoVER = 9000;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understanding Case Sensitivity in Variables",
      "dashedName": "understanding-case-sensitivity-in-variables"
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "description": [
        "<code>Number</code> is a data type in JavaScript which represents numeric data.",
        "Now let's try to add two numbers using JavaScript.",
        "JavaScript uses the <code>+</code> symbol as addition operation when placed between two numbers.",
        "<strong>Example</strong>",
        "<blockquote>myVar = 5 + 10; // assigned 15</blockquote>",
        "<hr>",
        "Change the <code>0</code> so that sum will equal <code>20</code>."
      ],
      "tests": [
        {
          "text": "<code>sum</code> should equal <code>20</code>",
          "testString":
            "assert(sum === 20, '<code>sum</code> should equal <code>20</code>');"
        },
        {
          "text": "Use the <code>+</code> operator",
          "testString":
            "assert(/\\+/.test(code), 'Use the <code>+</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var sum = 10 + 0;\n",
          "head": "",
          "tail": "(function(z){return 'sum = '+z;})(sum);"
        }
      },
      "name": "Add Two Numbers with JavaScript",
      "dashedName": "add-two-numbers-with-javascript"
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "description": [
        "We can also subtract one number from another.",
        "JavaScript uses the <code>-</code> symbol for subtraction.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 12 - 6; // assigned 6</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so the difference is <code>12</code>."
      ],
      "tests": [
        {
          "text": "Make the variable <code>difference</code> equal 12.",
          "testString":
            "assert(difference === 12, 'Make the variable <code>difference</code> equal 12.');"
        },
        {
          "text": "Only subtract one number from 45.",
          "testString":
            "assert(/var\\s*difference\\s*=\\s*45\\s*-\\s*[0-9]*;(?!\\s*[a-zA-Z0-9]+)/.test(code),'Only subtract one number from 45.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var difference = 45 - 0;\n\n",
          "head": "",
          "tail": "(function(z){return 'difference = '+z;})(difference);"
        }
      },
      "name": "Subtract One Number from Another with JavaScript",
      "dashedName": "subtract-one-number-from-another-with-javascript"
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "description": [
        "We can also multiply one number by another.",
        "JavaScript uses the <code>*</code> symbol for multiplication of two numbers.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 13 * 13; // assigned 169</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so that product will equal <code>80</code>."
      ],
      "tests": [
        {
          "text": "Make the variable <code>product</code> equal 80",
          "testString":
            "assert(product === 80,'Make the variable <code>product</code> equal 80');"
        },
        {
          "text": "Use the <code>*</code> operator",
          "testString":
            "assert(/\\*/.test(code), 'Use the <code>*</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var product = 8 * 0;\n\n",
          "head": "",
          "tail": "(function(z){return 'product = '+z;})(product);"
        }
      },
      "name": "Multiply Two Numbers with JavaScript",
      "dashedName": "multiply-two-numbers-with-javascript"
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "description": [
        "We can also divide one number by another.",
        "JavaScript uses the <code>/</code> symbol for division.",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 16 / 2; // assigned 8</blockquote>",
        "",
        "<hr>",
        "Change the <code>0</code> so that the <code>quotient</code> is equal to <code>2</code>."
      ],
      "tests": [
        {
          "text": "Make the variable <code>quotient</code> equal to 2.",
          "testString":
            "assert(quotient === 2, 'Make the variable <code>quotient</code> equal to 2.');"
        },
        {
          "text": "Use the <code>/</code> operator",
          "testString":
            "assert(/\\d+\\s*\\/\\s*\\d+/.test(code), 'Use the <code>/</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var quotient = 66 / 0;\n\n",
          "head": "",
          "tail": "(function(z){return 'quotient = '+z;})(quotient);"
        }
      },
      "name": "Divide One Number by Another with JavaScript",
      "dashedName": "divide-one-number-by-another-with-javascript"
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "description": [
        "You can easily <dfn>increment</dfn> or add one to a variable with the <code>++</code> operator.",
        "<code>i++;</code>",
        "is the equivalent of",
        "<code>i = i + 1;</code>",
        "<strong>Note</strong><br>The entire line becomes <code>i++;</code>, eliminating the need for the equal sign.",
        "<hr>",
        "Change the code to use the <code>++</code> operator on <code>myVar</code>.",
        "<strong>Hint</strong><br>Learn more about <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment_()\" target=\"_blank\">Arithmetic operators - Increment (++)</a>."
      ],
      "tests": [
        {
          "text": "<code>myVar</code> should equal <code>88</code>",
          "testString":
            "assert(myVar === 88, '<code>myVar</code> should equal <code>88</code>');"
        },
        {
          "text": "<code>myVar = myVar + 1;</code> should be changed",
          "testString":
            "assert(/var\\s*myVar\\s*=\\s*87;\\s*\\/*.*\\s*myVar\\+\\+;/.test(code), '<code>myVar = myVar + 1;</code> should be changed');"
        },
        {
          "text": "Use the <code>++</code> operator",
          "testString":
            "assert(/[+]{2}\\s*myVar|myVar\\s*[+]{2}/.test(code), 'Use the <code>++</code> operator');"
        },
        {
          "text": "Do not change code above the line",
          "testString":
            "assert(/var myVar = 87;/.test(code), 'Do not change code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var myVar = 87;\n\n// Only change code below this line\nmyVar = myVar + 1;\n",
          "head": "",
          "tail": "(function(z){return 'myVar = ' + z;})(myVar);"
        }
      },
      "name": "Increment a Number with JavaScript",
      "dashedName": "increment-a-number-with-javascript"
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "description": [
        "You can easily <dfn>decrement</dfn> or decrease a variable by one with the <code>--</code> operator.",
        "<code>i--;</code>",
        "is the equivalent of",
        "<code>i = i - 1;</code>",
        "<strong>Note</strong><br>The entire line becomes <code>i--;</code>, eliminating the need for the equal sign.",
        "<hr>",
        "Change the code to use the <code>--</code> operator on <code>myVar</code>."
      ],
      "tests": [
        {
          "text": "<code>myVar</code> should equal <code>10</code>",
          "testString":
            "assert(myVar === 10, '<code>myVar</code> should equal <code>10</code>');"
        },
        {
          "text": "<code>myVar = myVar - 1;</code> should be changed",
          "testString":
            "assert(/var\\s*myVar\\s*=\\s*11;\\s*\\/*.*\\s*myVar--;/.test(code), '<code>myVar = myVar - 1;</code> should be changed');"
        },
        {
          "text": "Use the <code>--</code> operator on <code>myVar</code>",
          "testString":
            "assert(/[-]{2}\\s*myVar|myVar\\s*[-]{2}/.test(code), 'Use the <code>--</code> operator on <code>myVar</code>');"
        },
        {
          "text": "Do not change code above the line",
          "testString":
            "assert(/var myVar = 11;/.test(code), 'Do not change code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var myVar = 11;\n\n// Only change code below this line\nmyVar = myVar - 1;\n",
          "head": "",
          "tail": "(function(z){return 'myVar = ' + z;})(myVar);"
        }
      },
      "name": "Decrement a Number with JavaScript",
      "dashedName": "decrement-a-number-with-javascript"
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "description": [
        "We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.",
        "<strong>Note</strong><br>Not all real numbers can accurately be represented in <dfn>floating point</dfn>. This can lead to rounding errors. <a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">Details Here</a>.",
        "<hr>",
        "Create a variable <code>myDecimal</code> and give it a decimal value with a fractional part (e.g. <code>5.7</code>)."
      ],
      "tests": [
        {
          "text": "<code>myDecimal</code> should be a number.",
          "testString":
            "assert(typeof myDecimal === \"number\", '<code>myDecimal</code> should be a number.');"
        },
        {
          "text": "<code>myDecimal</code> should have a decimal point",
          "testString":
            "assert(myDecimal % 1 != 0, '<code>myDecimal</code> should have a decimal point'); "
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var ourDecimal = 5.7;\n\n// Only change code below this line\n\n",
          "head": "",
          "tail":
            "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
        }
      },
      "name": "Create Decimal Numbers with JavaScript",
      "dashedName": "create-decimal-numbers-with-javascript"
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "description": [
        "In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.",
        "Let's multiply two decimals together to get their product.",
        "<hr>",
        "Change the <code>0.0</code> so that product will equal <code>5.0</code>."
      ],
      "tests": [
        {
          "text":
            "The variable <code>product</code> should equal <code>5.0</code>.",
          "testString":
            "assert(product === 5.0, 'The variable <code>product</code> should equal <code>5.0</code>.');"
        },
        {
          "text": "You should use the <code>*</code> operator",
          "testString":
            "assert(/\\*/.test(code), 'You should use the <code>*</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var product = 2.0 * 0.0;\n\n",
          "head": "",
          "tail": "(function(y){return 'product = '+y;})(product);"
        }
      },
      "name": "Multiply Two Decimals with JavaScript",
      "dashedName": "multiply-two-decimals-with-javascript"
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "description": [
        "Now let's divide one decimal by another.",
        "<hr>",
        "Change the <code>0.0</code> so that <code>quotient</code> will equal to <code>2.2</code>."
      ],
      "tests": [
        {
          "text":
            "The variable <code>quotient</code> should equal <code>2.2</code>",
          "testString":
            "assert(quotient === 2.2, 'The variable <code>quotient</code> should equal <code>2.2</code>');"
        },
        {
          "text":
            "You should use the <code>/</code> operator to divide 4.4 by 2",
          "testString":
            "assert(/4\\.40*\\s*\\/\\s*2\\.*0*/.test(code), 'You should use the <code>/</code> operator to divide 4.4 by 2');"
        },
        {
          "text": "The quotient variable should only be assigned once",
          "testString":
            "assert(code.match(/quotient/g).length === 1, 'The quotient variable should only be assigned once');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var quotient = 0.0 / 2.0; // Fix this line\n\n",
          "head": "",
          "tail": "(function(y){return 'quotient = '+y;})(quotient);"
        }
      },
      "name": "Divide One Decimal by Another with JavaScript",
      "dashedName": "divide-one-decimal-by-another-with-javascript"
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "description": [
        "The <dfn>remainder</dfn> operator <code>%</code> gives the remainder of the division of two numbers.",
        "<strong>Example</strong>",
        "<blockquote>5 % 2 = 1 because<br>Math.floor(5 / 2) = 2 (Quotient)<br>2 * 2 = 4<br>5 - 4 = 1 (Remainder)</blockquote>",
        "<strong>Usage</strong><br>In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.",
        "<blockquote>17 % 2 = 1 (17 is Odd)<br>48 % 2 = 0 (48 is Even)</blockquote>",
        "<strong>Note</strong><br>The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as  the \"modulus\" operator. It is very similar to modulus, but does not work properly with negative numbers.",
        "<hr>",
        "Set <code>remainder</code> equal to the remainder of <code>11</code> divided by <code>3</code> using the <dfn>remainder</dfn> (<code>%</code>) operator."
      ],
      "tests": [
        {
          "text": "The variable <code>remainder</code> should be initialized",
          "testString":
            "assert(/var\\s+?remainder/.test(code), 'The variable <code>remainder</code> should be initialized');"
        },
        {
          "text":
            "The value of <code>remainder</code> should be <code>2</code>",
          "testString":
            "assert(remainder === 2, 'The value of <code>remainder</code> should be <code>2</code>');"
        },
        {
          "text": "You should use the <code>%</code> operator",
          "testString":
            "assert(/\\s+?remainder\\s*?=\\s*?.*%.*;/.test(code), 'You should use the <code>%</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "// Only change code below this line\n\nvar remainder;\n",
          "head": "",
          "tail": "(function(y){return 'remainder = '+y;})(remainder);"
        }
      },
      "name": "Finding a Remainder in JavaScript",
      "dashedName": "finding-a-remainder-in-javascript"
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "description": [
        "In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:",
        "<code>myVar = myVar + 5;</code>",
        "to add <code>5</code> to <code>myVar</code>. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.",
        "One such operator is the <code>+=</code> operator.",
        "<blockquote>var myVar = 1;<br>myVar += 5;<br>console.log(myVar); // Returns 6</blockquote>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>+=</code> operator."
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>15</code>",
          "testString":
            "assert(a === 15, '<code>a</code> should equal <code>15</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>26</code>",
          "testString":
            "assert(b === 26, '<code>b</code> should equal <code>26</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>19</code>",
          "testString":
            "assert(c === 19, '<code>c</code> should equal <code>19</code>');"
        },
        {
          "text":
            "You should use the <code>+=</code> operator for each variable",
          "testString":
            "assert(code.match(/\\+=/g).length === 3, 'You should use the <code>+=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString":
            "assert(/var a = 3;/.test(code) && /var b = 17;/.test(code) && /var c = 12;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var a = 3;\nvar b = 17;\nvar c = 12;\n\n// Only modify code below this line\n\na = a + 12;\nb = 9 + b;\nc = c + 7;\n",
          "head": "",
          "tail":
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
        }
      },
      "name": "Compound Assignment With Augmented Addition",
      "dashedName": "compound-assignment-with-augmented-addition"
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "description": [
        "Like the <code>+=</code> operator, <code>-=</code> subtracts a number from a variable.",
        "<code>myVar = myVar - 5;</code>",
        "will subtract <code>5</code> from <code>myVar</code>. This can be rewritten as: ",
        "<code>myVar -= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>-=</code> operator."
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>5</code>",
          "testString":
            "assert(a === 5, '<code>a</code> should equal <code>5</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>-6</code>",
          "testString":
            "assert(b === -6, '<code>b</code> should equal <code>-6</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>2</code>",
          "testString":
            "assert(c === 2, '<code>c</code> should equal <code>2</code>');"
        },
        {
          "text":
            "You should use the <code>-=</code> operator for each variable",
          "testString":
            "assert(code.match(/-=/g).length === 3, 'You should use the <code>-=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString":
            "assert(/var a = 11;/.test(code) && /var b = 9;/.test(code) && /var c = 3;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var a = 11;\nvar b = 9;\nvar c = 3;\n\n// Only modify code below this line\n\na = a - 6;\nb = b - 15;\nc = c - 1;\n\n",
          "head": "",
          "tail":
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
        }
      },
      "name": "Compound Assignment With Augmented Subtraction",
      "dashedName": "compound-assignment-with-augmented-subtraction"
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "description": [
        "The <code>*=</code> operator multiplies a variable by a number.",
        "<code>myVar = myVar * 5;</code>",
        "will multiply <code>myVar</code> by <code>5</code>. This can be rewritten as: ",
        "<code>myVar *= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>*=</code> operator."
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>25</code>",
          "testString":
            "assert(a === 25, '<code>a</code> should equal <code>25</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>36</code>",
          "testString":
            "assert(b === 36, '<code>b</code> should equal <code>36</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>46</code>",
          "testString":
            "assert(c === 46, '<code>c</code> should equal <code>46</code>');"
        },
        {
          "text":
            "You should use the <code>*=</code> operator for each variable",
          "testString":
            "assert(code.match(/\\*=/g).length === 3, 'You should use the <code>*=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString":
            "assert(/var a = 5;/.test(code) && /var b = 12;/.test(code) && /var c = 4\\.6;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var a = 5;\nvar b = 12;\nvar c = 4.6;\n\n// Only modify code below this line\n\na = a * 5;\nb = 3 * b;\nc = c * 10;\n\n",
          "head": "",
          "tail":
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
        }
      },
      "name": "Compound Assignment With Augmented Multiplication",
      "dashedName": "compound-assignment-with-augmented-multiplication"
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "description": [
        "The <code>/=</code> operator divides a variable by another number.",
        "<code>myVar = myVar / 5;</code>",
        "Will divide <code>myVar</code> by <code>5</code>. This can be rewritten as: ",
        "<code>myVar /= 5;</code>",
        "<hr>",
        "Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>/=</code> operator."
      ],
      "tests": [
        {
          "text": "<code>a</code> should equal <code>4</code>",
          "testString":
            "assert(a === 4, '<code>a</code> should equal <code>4</code>');"
        },
        {
          "text": "<code>b</code> should equal <code>27</code>",
          "testString":
            "assert(b === 27, '<code>b</code> should equal <code>27</code>');"
        },
        {
          "text": "<code>c</code> should equal <code>3</code>",
          "testString":
            "assert(c === 3, '<code>c</code> should equal <code>3</code>');"
        },
        {
          "text":
            "You should use the <code>/=</code> operator for each variable",
          "testString":
            "assert(code.match(/\\/=/g).length === 3, 'You should use the <code>/=</code> operator for each variable');"
        },
        {
          "text": "Do not modify the code above the line",
          "testString":
            "assert(/var a = 48;/.test(code) && /var b = 108;/.test(code) && /var c = 33;/.test(code), 'Do not modify the code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var a = 48;\nvar b = 108;\nvar c = 33;\n\n// Only modify code below this line\n\na = a / 12;\nb = b / 4;\nc = c / 11;\n",
          "head": "",
          "tail":
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
        }
      },
      "name": "Compound Assignment With Augmented Division",
      "dashedName": "compound-assignment-with-augmented-division"
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "description": [
        "Previously we have used the code",
        "<code>var myName = \"your name\";</code>",
        "<code>\"your name\"</code> is called a <dfn>string</dfn> <dfn>literal</dfn>. It is a string because it is a series of zero or more characters enclosed in single or double quotes.",
        "<hr>",
        "Create two new <code>string</code> variables: <code>myFirstName</code> and <code>myLastName</code> and assign them the values of your first and last name, respectively."
      ],
      "tests": [
        {
          "text":
            "<code>myFirstName</code> should be a string with at least one character in it.",
          "testString":
            "assert((function(){if(typeof myFirstName !== \"undefined\" && typeof myFirstName === \"string\" && myFirstName.length > 0){return true;}else{return false;}})(), '<code>myFirstName</code> should be a string with at least one character in it.');"
        },
        {
          "text":
            "<code>myLastName</code> should be a string with at least one character in it.",
          "testString":
            "assert((function(){if(typeof myLastName !== \"undefined\" && typeof myLastName === \"string\" && myLastName.length > 0){return true;}else{return false;}})(), '<code>myLastName</code> should be a string with at least one character in it.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstName = \"Alan\";\nvar lastName = \"Turing\";\n\n// Only change code below this line\n\n",
          "head": "",
          "tail":
            "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
        }
      },
      "name": "Declare String Variables",
      "dashedName": "declare-string-variables"
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "description": [
        "When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: <code>\"</code> or <code>'</code> inside of your string?",
        "In JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (<code>\\</code>) in front of the quote.",
        "<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>",
        "This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:",
        "<code>Alan said, \"Peter is learning JavaScript\".</code>",
        "<hr>",
        "Use <dfn>backslashes</dfn> to assign a string to the <code>myStr</code> variable so that if you were to print it to the console, you would see:",
        "<code>I am a \"double quoted\" string inside \"double quotes\".</code>"
      ],
      "tests": [
        {
          "text":
            "You should use two double quotes (<code>&quot;</code>) and four escaped double quotes (<code>&#92;&quot;</code>).",
          "testString":
            "assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2, 'You should use two double quotes (<code>&quot;</code>) and four escaped double quotes (<code>&#92;&quot;</code>).');"
        },
        {
          "text":
            "Variable myStr should contain the string: <code>I am a \"double quoted\" string inside \"double quotes\".</code>",
          "testString":
            "assert(myStr === \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\", 'Variable myStr should contain the string: <code>I am a \"double quoted\" string inside \"double quotes\".</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var myStr = \"\"; // Change this line\n\n",
          "head": "",
          "tail":
            "(function(){\n  if(typeof myStr === 'string') {\n    console.log(\"myStr = \\\"\" + myStr + \"\\\"\");\n  } else {\n    console.log(\"myStr is undefined\");\n  }\n})();"
        }
      },
      "name": "Escaping Literal Quotes in Strings",
      "dashedName": "escaping-literal-quotes-in-strings"
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "description": [
        "<dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.",
        "<blockquote>doubleQuoteStr = \"This is a string\"; <br/>singleQuoteStr = 'This is also a string';</blockquote>",
        "The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&#60;a&#62;</code> tag with various attributes in quotes, all within a string.",
        "<blockquote>conversation = 'Finn exclaims to Jake, \"Algebraic!\"';</blockquote>",
        "However, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.",
        "<blockquote>goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; <br/>badStr = 'Finn responds, \"Let's go!\"'; // Throws an error</blockquote>",
        "In the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash <code>\\</code> as an escape character.",
        "<strong>Note</strong><br/>The backslash <code>\\</code> should not be be confused with the forward slash <code>/</code>. They do not do the same thing.",
        "<hr>",
        "Change the provided string to a string with single quotes at the beginning and end and no escape characters.",
        "Right now, the <code>&#60;a&#62;</code> tag in the string uses double quotes everywhere. You will need to change the outer quotes to single quotes so you can remove the escape characters."
      ],
      "tests": [
        {
          "text": "Remove all the <code>backslashes</code> (<code>\\</code>)",
          "testString":
            "assert(!/\\\\/g.test(code) && myStr.match('\\\\s*<a href\\\\s*=\\\\s*\"http://www.example.com\"\\\\s*target\\\\s*=\\\\s*\"_blank\">\\\\s*Link\\\\s*</a>\\\\s*'), 'Remove all the <code>backslashes</code> (<code>\\</code>)');"
        },
        {
          "text":
            "You should have two single quotes <code>&#39;</code> and four double quotes <code>&quot;</code>",
          "testString":
            "assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2, 'You should have two single quotes <code>&#39;</code> and four double quotes <code>&quot;</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";\n\n",
          "head": "",
          "tail": "(function() { return \"myStr = \" + myStr; })();"
        }
      },
      "name": "Quoting Strings with Single Quotes",
      "dashedName": "quoting-strings-with-single-quotes"
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "description": [
        "Quotes are not the only characters that can be <dfn>escaped</dfn> inside a string. There are two reasons to use escaping characters: First is to allow you to use characters you might not otherwise be able to type out, such as a backspace. Second is to allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean. We learned this in the previous challenge.",
        "<table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table>",
        "<em>Note that the backslash itself must be escaped in order to display as a backslash.</em>",
        "<hr>",
        "Assign the following three lines of text into the single variable <code>myStr</code> using escape sequences.",
        "<blockquote>FirstLine<br/>&nbsp;&nbsp;&nbsp;&nbsp;\\SecondLine<br/>ThirdLine</blockquote>",
        "You will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.",
        "Here is the text with the escape sequences written out.",
        "<q>FirstLine<code>newline</code><code>tab</code><code>backslash</code>SecondLine<code>newline</code>ThirdLine</q>"
      ],
      "tests": [
        {
          "text": "<code>myStr</code> should not contain any spaces",
          "testString":
            "assert(!/ /.test(myStr), '<code>myStr</code> should not contain any spaces');"
        },
        {
          "text":
            "<code>myStr</code> should contain the strings <code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> (remember case sensitivity)",
          "testString":
            "assert(/FirstLine/.test(myStr) && /SecondLine/.test(myStr) && /ThirdLine/.test(myStr), '<code>myStr</code> should contain the strings <code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> (remember case sensitivity)');"
        },
        {
          "text":
            "<code>FirstLine</code> should be followed by the newline character <code>\\n</code>",
          "testString":
            "assert(/FirstLine\\n/.test(myStr), '<code>FirstLine</code> should be followed by the newline character <code>\\n</code>');"
        },
        {
          "text":
            "<code>myStr</code> should contain a tab character <code>\\t</code> which follows a newline character",
          "testString":
            "assert(/\\n\\t/.test(myStr), '<code>myStr</code> should contain a tab character <code>\\t</code> which follows a newline character');"
        },
        {
          "text":
            "<code>SecondLine</code> should be preceded by the backslash character <code>\\\\</code>",
          "testString":
            "assert(/\\SecondLine/.test(myStr), '<code>SecondLine</code> should be preceded by the backslash character <code>\\\\</code>');"
        },
        {
          "text":
            "There should be a newline character between <code>SecondLine</code> and <code>ThirdLine</code>",
          "testString":
            "assert(/SecondLine\\nThirdLine/.test(myStr), 'There should be a newline character between <code>SecondLine</code> and <code>ThirdLine</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var myStr; // Change this line\n\n",
          "head": "",
          "tail":
            "(function(){\nif (myStr !== undefined){\nconsole.log('myStr:\\n' + myStr);}})();"
        }
      },
      "name": "Escape Sequences in Strings",
      "dashedName": "escape-sequences-in-strings"
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "description": [
        "In JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.",
        "<strong>Example</strong>",
        "<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>",
        "<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.",
        "<hr>",
        "Build <code>myStr</code> from the strings <code>\"This is the start. \"</code> and <code>\"This is the end.\"</code> using the <code>+</code> operator."
      ],
      "tests": [
        {
          "text":
            "<code>myStr</code> should have a value of <code>This is the start. This is the end.</code>",
          "testString":
            "assert(myStr === \"This is the start. This is the end.\", '<code>myStr</code> should have a value of <code>This is the start. This is the end.</code>');"
        },
        {
          "text": "Use the <code>+</code> operator to build <code>myStr</code>",
          "testString":
            "assert(code.match(/([\"']).*([\"'])\\s*\\+\\s*([\"']).*([\"'])/g).length > 1, 'Use the <code>+</code> operator to build <code>myStr</code>');"
        },
        {
          "text":
            "<code>myStr</code> should be created using the <code>var</code> keyword.",
          "testString":
            "assert(/var\\s+myStr/.test(code), '<code>myStr</code> should be created using the <code>var</code> keyword.');"
        },
        {
          "text":
            "Make sure to assign the result to the <code>myStr</code> variable.",
          "testString":
            "assert(/myStr\\s*=/.test(code), 'Make sure to assign the result to the <code>myStr</code> variable.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourStr = \"I come first. \" + \"I come second.\";\n\n// Only change code below this line\n\nvar myStr;\n\n",
          "head": "",
          "tail":
            "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();"
        }
      },
      "name": "Concatenating Strings with Plus Operator",
      "dashedName": "concatenating-strings-with-plus-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "description": [
        "We can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.",
        "<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.",
        "<hr>",
        "Build <code>myStr</code> over several lines by concatenating these two strings: <code>\"This is the first sentence. \"</code> and <code>\"This is the second sentence.\"</code> using the <code>+=</code> operator. Use the <code>+=</code> operator similar to how it is shown in the editor. Start by assigning the first string to <code>myStr</code>, then add on the second string."
      ],
      "tests": [
        {
          "text":
            "<code>myStr</code> should have a value of <code>This is the first sentence. This is the second sentence.</code>",
          "testString":
            "assert(myStr === \"This is the first sentence. This is the second sentence.\", '<code>myStr</code> should have a value of <code>This is the first sentence. This is the second sentence.</code>');"
        },
        {
          "text":
            "Use the <code>+=</code> operator to build <code>myStr</code>",
          "testString":
            "assert(code.match(/\\w\\s*\\+=\\s*[\"']/g).length > 1 && code.match(/\\w\\s*\\=\\s*[\"']/g).length > 1, 'Use the <code>+=</code> operator to build <code>myStr</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourStr = \"I come first. \";\nourStr += \"I come second.\";\n\n// Only change code below this line\n\nvar myStr;\n\n",
          "head": "",
          "tail":
            "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();"
        }
      },
      "name": "Concatenating Strings with the Plus Equals Operator",
      "dashedName": "concatenating-strings-with-the-plus-equals-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "description": [
        "Sometimes you will need to build a string, <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a> style. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string you're building.",
        "<hr>",
        "Set <code>myName</code> to a string equal to your name and build <code>myStr</code> with <code>myName</code> between the strings <code>\"My name is \"</code> and <code>\" and I am well!\"</code>"
      ],
      "tests": [
        {
          "text":
            "<code>myName</code> should be set to a string at least 3 characters long",
          "testString":
            "assert(typeof myName !== 'undefined' && myName.length > 2, '<code>myName</code> should be set to a string at least 3 characters long');"
        },
        {
          "text":
            "Use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it",
          "testString":
            "assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0, 'Use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourName = \"freeCodeCamp\";\nvar ourStr = \"Hello, our name is \" + ourName + \", how are you?\";\n\n// Only change code below this line\nvar myName;\nvar myStr;\n\n",
          "head": "",
          "tail":
            "(function(){\n  var output = [];\n  if(typeof myName === 'string') {\n    output.push('myName = \"' + myName + '\"');\n  } else {\n    output.push('myName is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();"
        }
      },
      "name": "Constructing Strings with Variables",
      "dashedName": "constructing-strings-with-variables"
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "description": [
        "Just as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (<code>+=</code>) operator.",
        "<hr>",
        "Set <code>someAdjective</code> and append it to <code>myStr</code> using the <code>+=</code> operator."
      ],
      "tests": [
        {
          "text":
            "<code>someAdjective</code> should be set to a string at least 3 characters long",
          "testString":
            "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2, '<code>someAdjective</code> should be set to a string at least 3 characters long');"
        },
        {
          "text":
            "Append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator",
          "testString":
            "assert(code.match(/myStr\\s*\\+=\\s*someAdjective\\s*/).length > 0, 'Append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar anAdjective = \"awesome!\";\nvar ourStr = \"freeCodeCamp is \";\nourStr += anAdjective;\n\n// Only change code below this line\n\nvar someAdjective;\nvar myStr = \"Learning to code is \";\n",
          "head": "",
          "tail":
            "(function(){\n  var output = [];\n  if(typeof someAdjective === 'string') {\n    output.push('someAdjective = \"' + someAdjective + '\"');\n  } else {\n    output.push('someAdjective is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();"
        }
      },
      "name": "Appending Variables to Strings",
      "dashedName": "appending-variables-to-strings"
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "description": [
        "You can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.",
        "<code>\"Alan Peter\".length; // 10</code>",
        "For example, if we created a variable <code>var firstName = \"Charles\"</code>, we could find out how long the string <code>\"Charles\"</code> is by using the <code>firstName.length</code> property.",
        "<hr>",
        "Use the <code>.length</code> property to count the number of characters in the <code>lastName</code> variable and assign it to <code>lastNameLength</code>."
      ],
      "tests": [
        {
          "text": "<code>lastNameLength</code> should be equal to eight.",
          "testString":
            "assert((function(){if(typeof lastNameLength !== \"undefined\" && typeof lastNameLength === \"number\" && lastNameLength === 8){return true;}else{return false;}})(), '<code>lastNameLength</code> should be equal to eight.');"
        },
        {
          "text":
            "You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.",
          "testString":
            "assert((function(){if(code.match(/\\.length/gi) && code.match(/\\.length/gi).length >= 2 && code.match(/var lastNameLength \\= 0;/gi) && code.match(/var lastNameLength \\= 0;/gi).length >= 1){return true;}else{return false;}})(), 'You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstNameLength = 0;\nvar firstName = \"Ada\";\n\nfirstNameLength = firstName.length;\n\n// Setup\nvar lastNameLength = 0;\nvar lastName = \"Lovelace\";\n\n// Only change code below this line.\n\nlastNameLength = lastName;\n\n",
          "head": "",
          "tail":
            "if(typeof lastNameLength !== \"undefined\"){(function(){return lastNameLength;})();}"
        }
      },
      "name": "Find the Length of a String",
      "dashedName": "find-the-length-of-a-string"
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "description": [
        "<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.",
        "Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.",
        "For example, the character at index 0 in the word \"Charles\" is \"C\". So if <code>var firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the first character in the <code>lastName</code> variable and assign it to <code>firstLetterOfLastName</code>.",
        "<strong>Hint</strong><br>Try looking at the <code>firstLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        {
          "text":
            "The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.",
          "testString":
            "assert(firstLetterOfLastName === 'L', 'The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.');"
        },
        {
          "text": "You should use bracket notation.",
          "testString":
            "assert(code.match(/firstLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), 'You should use bracket notation.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstLetterOfFirstName = \"\";\nvar firstName = \"Ada\";\n\nfirstLetterOfFirstName = firstName[0];\n\n// Setup\nvar firstLetterOfLastName = \"\";\nvar lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName;\n\n",
          "head": "",
          "tail": "(function(v){return v;})(firstLetterOfLastName);"
        }
      },
      "name": "Use Bracket Notation to Find the First Character in a String",
      "dashedName":
        "use-bracket-notation-to-find-the-first-character-in-a-string"
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "description": [
        "In JavaScript, <code>String</code> values are <dfn>immutable</dfn>, which means that they cannot be altered once created.",
        "For example, the following code:",
        "<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>",
        "cannot change the value of <code>myStr</code> to \"Job\", because the contents of <code>myStr</code> cannot be altered. Note that this does <em>not</em> mean that <code>myStr</code> cannot be changed, just that the individual characters of a <dfn>string literal</dfn> cannot be changed. The only way to change <code>myStr</code> would be to assign it with a new string, like this:",
        "<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>",
        "<hr>",
        "Correct the assignment to <code>myStr</code> so it contains the string value of <code>Hello World</code> using the approach shown in the example above."
      ],
      "tests": [
        {
          "text":
            "<code>myStr</code> should have a value of <code>Hello World</code>",
          "testString":
            "assert(myStr === \"Hello World\", '<code>myStr</code> should have a value of <code>Hello World</code>');"
        },
        {
          "text": "Do not change the code above the line",
          "testString":
            "assert(/myStr = \"Jello World\"/.test(code), 'Do not change the code above the line');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myStr = \"Jello World\";\n\n// Only change code below this line\n\nmyStr[0] = \"H\"; // Fix Me\n\n",
          "head": "",
          "tail": "(function(v){return \"myStr = \" + v;})(myStr);"
        }
      },
      "name": "Understand String Immutability",
      "dashedName": "understand-string-immutability"
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "description": [
        "You can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.",
        "Remember that computers start counting at <code>0</code>, so the first character is actually the zeroth character.",
        "<hr>",
        "Let's try to set <code>thirdLetterOfLastName</code> to equal the third letter of the <code>lastName</code> variable using bracket notation.",
        "<strong>Hint</strong><br>Try looking at the <code>secondLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        {
          "text":
            "The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.",
          "testString":
            "assert(thirdLetterOfLastName === 'v', 'The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.');"
        },
        {
          "text": "You should use bracket notation.",
          "testString":
            "assert(code.match(/thirdLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), 'You should use bracket notation.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstName = \"Ada\";\nvar secondLetterOfFirstName = firstName[1];\n\n// Setup\nvar lastName = \"Lovelace\";\n\n// Only change code below this line.\nvar thirdLetterOfLastName = lastName;\n\n",
          "head": "",
          "tail": "(function(v){return v;})(thirdLetterOfLastName);"
        }
      },
      "name": "Use Bracket Notation to Find the Nth Character in a String",
      "dashedName": "use-bracket-notation-to-find-the-nth-character-in-a-string"
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "description": [
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Charles\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the last character in the <code>lastName</code> variable.",
        "<strong>Hint</strong><br>Try looking at the <code>lastLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        {
          "text": "<code>lastLetterOfLastName</code> should be \"e\".",
          "testString":
            "assert(lastLetterOfLastName === \"e\", '<code>lastLetterOfLastName</code> should be \"e\".');"
        },
        {
          "text":
            "You have to use <code>.length</code> to get the last letter.",
          "testString":
            "assert(code.match(/\\.length/g).length === 2, 'You have to use <code>.length</code> to get the last letter.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstName = \"Ada\";\nvar lastLetterOfFirstName = firstName[firstName.length - 1];\n\n// Setup\nvar lastName = \"Lovelace\";\n\n// Only change code below this line.\nvar lastLetterOfLastName = lastName;\n\n",
          "head": "",
          "tail": "(function(v){return v;})(lastLetterOfLastName);"
        }
      },
      "name": "Use Bracket Notation to Find the Last Character in a String",
      "dashedName":
        "use-bracket-notation-to-find-the-last-character-in-a-string"
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "description": [
        "You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.",
        "For example, you can get the value of the third-to-last letter of the <code>var firstName = \"Charles\"</code> string by using <code>firstName[firstName.length - 3]</code>",
        "<hr>",
        "Use <dfn>bracket notation</dfn> to find the second-to-last character in the <code>lastName</code> string.",
        "<strong>Hint</strong><br>Try looking at the <code>thirdToLastLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        {
          "text": "<code>secondToLastLetterOfLastName</code> should be \"c\".",
          "testString":
            "assert(secondToLastLetterOfLastName === 'c', '<code>secondToLastLetterOfLastName</code> should be \"c\".');"
        },
        {
          "text":
            "You have to use <code>.length</code> to get the second last letter.",
          "testString":
            "assert(code.match(/\\.length/g).length === 2, 'You have to use <code>.length</code> to get the second last letter.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar firstName = \"Ada\";\nvar thirdToLastLetterOfFirstName = firstName[firstName.length - 3];\n\n// Setup\nvar lastName = \"Lovelace\";\n\n// Only change code below this line\nvar secondToLastLetterOfLastName = lastName;\n\n",
          "head": "",
          "tail": "(function(v){return v;})(secondToLastLetterOfLastName);"
        }
      },
      "name":
        "Use Bracket Notation to Find the NthtoLast Character in a String",
      "dashedName":
        "use-bracket-notation-to-find-the-nthtolast-character-in-a-string"
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "description": [
        "We will now use our knowledge of strings to build a \"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>Mad Libs</a>\" style word game we're calling \"Word Blanks\". You will create an (optionally humorous) \"Fill in the Blanks\" style sentence. Here's an example of an incomplete sentence.",
        "In a \"Mad Libs\" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.",
        "Consider this sentence - \"It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>\". This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:",
        "<blockquote>var sentence = \"It was really\" + \"hot\" + \", and we\" + \"laughed\" + \"ourselves\" + \"silly.\";</blockquote>",
        "<hr>",
        "In this challenge, we provide you with a noun, a verb, an adjective and an adverb. You need to form a complete sentence using words of your choice, along with the words we provide.",
        "You will need to use the string concatenation operator <code>+</code> to build a new string, using the provided variables: <code>myNoun</code>, <code>myAdjective</code>, <code>myVerb</code>, and <code>myAdverb</code>. You will then assign the formed string to the <code>result</code> variable.",
        "You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence."
      ],
      "tests": [
        {
          "text":
            "<code>wordBlanks(\"\",\"\",\"\",\"\")</code> should return a string.",
          "testString":
            "assert(typeof wordBlanks(\"\",\"\",\"\",\"\") === 'string', '<code>wordBlanks(\"\",\"\",\"\",\"\")</code> should return a string.');"
        },
        {
          "text":
            "<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).",
          "testString":
            "assert(/\\bdog\\b/.test(test1) && /\\bbig\\b/.test(test1) && /\\bran\\b/.test(test1) && /\\bquickly\\b/.test(test1),'<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).');"
        },
        {
          "text":
            "<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).",
          "testString":
            "assert(/\\bcat\\b/.test(test2) && /\\blittle\\b/.test(test2) && /\\bhit\\b/.test(test2) && /\\bslowly\\b/.test(test2),'<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> should contain all of the passed in words separated by non-word characters (and any additional words in your madlib).');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n  // Your code below this line\n  var result = \"\";\n\n  // Your code above this line\n  return result;\n}\n\n// Change the words here to test your function\nwordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");",
          "head": "",
          "tail":
            "var test1 = wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");\nvar test2 = wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\");"
        }
      },
      "name": "Word Blanks",
      "dashedName": "word-blanks"
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "description": [
        "With JavaScript <code>array</code> variables, we can store several pieces of data in one place.",
        "You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this: ",
        "<code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>.",
        "<hr>",
        "Modify the new array <code>myArray</code> so that it contains both a <code>string</code> and a <code>number</code> (in that order).",
        "<strong>Hint</strong><br>Refer to the example code in the text editor if you get stuck."
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should be an <code>array</code>.",
          "testString":
            "assert(typeof myArray == 'object', '<code>myArray</code> should be an <code>array</code>.');"
        },
        {
          "text":
            "The first item in <code>myArray</code> should be a <code>string</code>.",
          "testString":
            "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string', 'The first item in <code>myArray</code> should be a <code>string</code>.');"
        },
        {
          "text":
            "The second item in <code>myArray</code> should be a <code>number</code>.",
          "testString":
            "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number', 'The second item in <code>myArray</code> should be a <code>number</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [\"John\", 23];\n\n// Only change code below this line.\nvar myArray = [];\n",
          "head": "",
          "tail": "(function(z){return z;})(myArray);"
        }
      },
      "name": "Store Multiple Values in one Variable using JavaScript Arrays",
      "dashedName":
        "store-multiple-values-in-one-variable-using-javascript-arrays"
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "description": [
        "You can also nest arrays within other arrays, like this: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>. This is also called a <dfn>Multi-dimensional Array<dfn>.",
        "<hr>",
        "Create a nested array called <code>myArray</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myArray</code> should have at least one array nested within another array.",
          "testString":
            "assert(Array.isArray(myArray) && myArray.some(Array.isArray), '<code>myArray</code> should have at least one array nested within another array.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [[\"the universe\", 42], [\"everything\", 101010]];\n\n// Only change code below this line.\nvar myArray = [];\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Nest one Array within Another Array",
      "dashedName": "nest-one-array-within-another-array"
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "description": [
        "We can access the data inside arrays using <code>indexes</code>.",
        "Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array is element <code>0</code>.",
        "<strong>Example</strong>",
        "<blockquote>var array = [50,60,70];<br>array[0]; // equals 50<br>var data = array[1];  // equals 60</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Create a variable called <code>myData</code> and set it to equal the first value of <code>myArray</code> using bracket notation."
      ],
      "tests": [
        {
          "text":
            "The variable <code>myData</code> should equal the first value of <code>myArray</code>.",
          "testString":
            "assert((function(){if(typeof myArray !== 'undefined' && typeof myData !== 'undefined' && myArray[0] === myData){return true;}else{return false;}})(), 'The variable <code>myData</code> should equal the first value of <code>myArray</code>.');"
        },
        {
          "text":
            "The data in variable <code>myArray</code> should be accessed using bracket notation.",
          "testString":
            "assert((function(){if(code.match(/\\s*=\\s*myArray\\[0\\]/g)){return true;}else{return false;}})(), 'The data in variable <code>myArray</code> should be accessed using bracket notation.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [50,60,70];\nvar ourData = ourArray[0]; // equals 50\n\n// Setup\nvar myArray = [50,60,70];\n\n// Only change code below this line.\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
        }
      },
      "name": "Access Array Data with Indexes",
      "dashedName": "access-array-data-with-indexes"
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "description": [
        "Unlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely.",
        "<strong>Example</strong>",
        "<blockquote>var ourArray = [50,40,30];<br>ourArray[0] = 15; // equals [15,40,30]</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Modify the data stored at index <code>0</code> of <code>myArray</code> to a value of <code>45</code>."
      ],
      "tests": [
        {
          "text": "<code>myArray</code> should now be [45,64,99].",
          "testString":
            "assert((function(){if(typeof myArray != 'undefined' && myArray[0] == 45 && myArray[1] == 64 && myArray[2] == 99){return true;}else{return false;}})(), '<code>myArray</code> should now be [45,64,99].');"
        },
        {
          "text":
            "You should be using correct index to modify the value in <code>myArray</code>.",
          "testString":
            "assert((function(){if(code.match(/myArray\\[0\\]\\s*=\\s*/g)){return true;}else{return false;}})(), 'You should be using correct index to modify the value in <code>myArray</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [18,64,99];\nourArray[1] = 45; // ourArray now equals [18,45,99].\n\n// Setup\nvar myArray = [18,64,99];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Modify Array Data With Indexes",
      "dashedName": "modify-array-data-with-indexes"
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "description": [
        "One way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.",
        "<strong>Example</strong>",
        "<blockquote>var arr = [<br>    [1,2,3],<br>    [4,5,6],<br>    [7,8,9],<br>    [[10,11,12], 13, 14]<br>];<br>arr[3]; // equals [[10,11,12], 13, 14]<br>arr[3][0]; // equals [10,11,12]<br>arr[3][0][1]; // equals 11</blockquote>",
        "<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0][0]</code> and even this <code>array [0] [0]</code> is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
        "<hr>",
        "Using bracket notation select an element from <code>myArray</code> such that <code>myData</code> is equal to <code>8</code>."
      ],
      "tests": [
        {
          "text": "<code>myData</code> should be equal to <code>8</code>.",
          "testString":
            "assert(myData === 8, '<code>myData</code> should be equal to <code>8</code>.');"
        },
        {
          "text":
            "You should be using bracket notation to read the correct value from <code>myArray</code>.",
          "testString":
            "assert(/myArray\\[2\\]\\[1\\]/g.test(code) && !/myData\\s*=\\s*(?:.*[-+*/%]|\\d)/g.test(code), 'You should be using bracket notation to read the correct value from <code>myArray</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];\n\n// Only change code below this line.\nvar myData = myArray[0][0];\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
        }
      },
      "name": "Access MultiDimensional Arrays With Indexes",
      "dashedName": "access-multidimensional-arrays-with-indexes"
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "description": [
        "An easy way to append data to the end of an array is via the <code>push()</code> function.",
        "<code>.push()</code> takes one or more <dfn>parameters</dfn> and \"pushes\" them onto the end of the array.",
        "<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// arr is now [1,2,3,4]</blockquote>",
        "<hr>",
        "Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable."
      ],
      "tests": [
        {
          "text":
            "<code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.",
          "testString":
            "assert((function(d){if(d[2] != undefined && d[0][0] == 'John' && d[0][1] === 23 && d[2][0] == 'dog' && d[2][1] === 3 && d[2].length == 2){return true;}else{return false;}})(myArray), '<code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [\"Stimpson\", \"J\", \"cat\"];\nourArray.push([\"happy\", \"joy\"]); \n// ourArray now equals [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]\n\n// Setup\nvar myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
        }
      },
      "name": "Manipulate Arrays With push",
      "dashedName": "manipulate-arrays-with-push"
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "description": [
        "Another way to change the data in an array is with the <code>.pop()</code> function.",
        "<code>.pop()</code> is used to \"pop\" a value off of the end of an array. We can store this \"popped off\" value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.",
        "Any type of entry can be \"popped\" off of an array - numbers, strings, even nested arrays.",
        "<blockquote><code>var threeArr = [1, 4, 6];<br> var oneDown = threeArr.pop();<br> console.log(oneDown); // Returns 6<br> console.log(threeArr); // Returns [1, 4]</code></blockquote>",
        "<hr>",
        "Use the <code>.pop()</code> function to remove the last item from <code>myArray</code>, assigning the \"popped off\" value to <code>removedFromMyArray</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.",
          "testString":
            "assert((function(d){if(d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.');"
        },
        {
          "text": "Use <code>pop()</code> on <code>myArray</code>",
          "testString":
            "assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(code), 'Use <code>pop()</code> on <code>myArray</code>');"
        },
        {
          "text":
            "<code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.",
          "testString":
            "assert((function(d){if(d[0] == 'cat' && d[1] === 2 && d[2] == undefined){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [1,2,3];\nvar removedFromOurArray = ourArray.pop(); \n// removedFromOurArray now equals 3, and ourArray now equals [1,2]\n\n// Setup\nvar myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line.\nvar removedFromMyArray;\n\n",
          "head": "",
          "tail":
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
        }
      },
      "name": "Manipulate Arrays With pop",
      "dashedName": "manipulate-arrays-with-pop"
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "description": [
        "<code>pop()</code> always removes the last element of an array. What if you want to remove the first?",
        "That's where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.",
        "<hr>",
        "Use the <code>.shift()</code> function to remove the first item from <code>myArray</code>, assigning the \"shifted off\" value to <code>removedFromMyArray</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.",
          "testString":
            "assert((function(d){if(d[0][0] == 'dog' && d[0][1] === 3 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.');"
        },
        {
          "text":
            "<code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.",
          "testString":
            "assert((function(d){if(d[0] == 'John' && d[1] === 23 && typeof removedFromMyArray === 'object'){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [\"Stimpson\", \"J\", [\"cat\"]];\nvar removedFromOurArray = ourArray.shift();\n// removedFromOurArray now equals \"Stimpson\" and ourArray now equals [\"J\", [\"cat\"]].\n\n// Setup\nvar myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line.\nvar removedFromMyArray;\n\n",
          "head": "",
          "tail":
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
        }
      },
      "name": "Manipulate Arrays With shift",
      "dashedName": "manipulate-arrays-with-shift"
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "description": [
        "Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.",
        "<code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.",
        "<hr>",
        "Add <code>[\"Paul\",35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myArray</code> should now have [[\"Paul\", 35], [\"dog\", 3]].",
          "testString":
            "assert((function(d){if(typeof d[0] === \"object\" && d[0][0] == 'Paul' && d[0][1] === 35 && d[1][0] != undefined && d[1][0] == 'dog' && d[1][1] != undefined && d[1][1] == 3){return true;}else{return false;}})(myArray), '<code>myArray</code> should now have [[\"Paul\", 35], [\"dog\", 3]].');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [\"Stimpson\", \"J\", \"cat\"];\nourArray.shift(); // ourArray now equals [\"J\", \"cat\"]\nourArray.unshift(\"Happy\"); \n// ourArray now equals [\"Happy\", \"J\", \"cat\"]\n\n// Setup\nvar myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
        }
      },
      "name": "Manipulate Arrays With unshift",
      "dashedName": "manipulate-arrays-with-unshift"
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "description": [
        "Create a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.",
        "The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.",
        "<code>[\"Chocolate Bar\", 15]</code>",
        "There should be at least 5 sub-arrays in the list."
      ],
      "tests": [
        {
          "text": "<code>myList</code> should be an array",
          "testString":
            "assert(isArray, '<code>myList</code> should be an array');"
        },
        {
          "text":
            "The first elements in each of your sub-arrays must all be strings",
          "testString":
            "assert(hasString, 'The first elements in each of your sub-arrays must all be strings');"
        },
        {
          "text":
            "The second elements in each of your sub-arrays must all be numbers",
          "testString":
            "assert(hasNumber, 'The second elements in each of your sub-arrays must all be numbers');"
        },
        {
          "text": "You must have at least 5 items in your list",
          "testString":
            "assert(count > 4, 'You must have at least 5 items in your list');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var myList = [];\n\n",
          "head": "",
          "tail":
            "var count = 0;\nvar isArray = false;\nvar hasString = false;\nvar hasNumber = false;\n(function(list){\n  if(Array.isArray(myList)) {\n    isArray = true;\n    if(myList.length > 0) {\n      hasString = true;\n      hasNumber = true;\n      myList.forEach(function(elem) {\n        if(typeof elem[0] !== 'string') {\n          hasString = false;\n        }\n        if(typeof elem[1] !== 'number') {\n          hasNumber = false;\n        }\n      });\n    }\n    count = myList.length;\n    return JSON.stringify(myList);\n  } else {\n    return \"myList is not an array\";\n  }\n\n})(myList);"
        }
      },
      "name": "Shopping List",
      "dashedName": "shopping-list"
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "description": [
        "In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.",
        "Here's an example of a function:",
        "<blockquote>function functionName() {<br>  console.log(\"Hello World\");<br>}</blockquote>",
        "You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this:",
        "<code>functionName();</code>",
        "Each time the function is called it will print out the message <code>\"Hello World\"</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.",
        "<hr>",
        "<ol><li>Create a function called <code>reusableFunction</code> which prints <code>\"Hi World\"</code> to the dev console.</li><li>Call the function.</li></ol>"
      ],
      "tests": [
        {
          "text": "<code>reusableFunction</code> should be a function",
          "testString":
            "assert(typeof reusableFunction === 'function', '<code>reusableFunction</code> should be a function');"
        },
        {
          "text":
            "<code>reusableFunction</code> should output \"Hi World\" to the dev console",
          "testString":
            "assert(\"Hi World\" === logOutput, '<code>reusableFunction</code> should output \"Hi World\" to the dev console');"
        },
        {
          "text": "Call <code>reusableFunction</code> after you define it",
          "testString":
            "assert(/^\\s*reusableFunction\\(\\)\\s*;/m.test(code), 'Call <code>reusableFunction</code> after you define it');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nfunction ourReusableFunction() {\n  console.log(\"Heyya, World\");\n}\n\nourReusableFunction();\n\n// Only change code below this line\n",
          "head":
            "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message && message.trim) logOutput = message.trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",
          "tail":
            "uncapture();\n\nif (typeof reusableFunction !== \"function\") { \n  (function() { return \"reusableFunction is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}"
        }
      },
      "name": "Write Reusable JavaScript with Functions",
      "dashedName": "write-reusable-javascript-with-functions"
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "description": [
        "<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.",
        "Here is a function with two parameters, <code>param1</code> and <code>param2</code>:",
        "<blockquote>function testFun(param1, param2) {<br>  console.log(param1, param2);<br>}</blockquote>",
        "Then we can call <code>testFun</code>:",
        "<code>testFun(\"Hello\", \"World\");</code>",
        "We have passed two arguments, <code>\"Hello\"</code> and <code>\"World\"</code>. Inside the function, <code>param1</code> will equal \"Hello\" and <code>param2</code> will equal \"World\". Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.",
        "<hr>",
        "<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>"
      ],
      "tests": [
        {
          "text": "<code>functionWithArgs</code> should be a function",
          "testString":
            "assert(typeof functionWithArgs === 'function', '<code>functionWithArgs</code> should be a function');"
        },
        {
          "text":
            "<code>functionWithArgs(1,2)</code> should output <code>3</code>",
          "testString":
            "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(1,2); uncapture(); } assert(logOutput == 3, '<code>functionWithArgs(1,2)</code> should output <code>3</code>');"
        },
        {
          "text":
            "<code>functionWithArgs(7,9)</code> should output <code>16</code>",
          "testString":
            "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(7,9); uncapture(); } assert(logOutput == 16, '<code>functionWithArgs(7,9)</code> should output <code>16</code>');"
        },
        {
          "text":
            "Call <code>functionWithArgs</code> with two numbers after you define it.",
          "testString":
            "assert(/^\\s*functionWithArgs\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*\\)\\s*;/m.test(code), 'Call <code>functionWithArgs</code> with two numbers after you define it.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nfunction ourFunctionWithArgs(a, b) {\n  console.log(a - b);\n}\nourFunctionWithArgs(10, 5); // Outputs 5\n\n// Only change code below this line.\n\n",
          "head":
            "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",
          "tail":
            "uncapture();\n\nif (typeof functionWithArgs !== \"function\") { \n  (function() { return \"functionWithArgs is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}"
        }
      },
      "name": "Passing Values to Functions with Arguments",
      "dashedName": "passing-values-to-functions-with-arguments"
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "description": [
        "In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.",
        "Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.",
        "<hr>",
        "Using <code>var</code>, declare a <code>global</code> variable <code>myGlobal</code> outside of any function. Initialize it with a value of <code>10</code>.",
        "Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <strong><em>without</em></strong> using the <code>var</code> keyword."
      ],
      "tests": [
        {
          "text": "<code>myGlobal</code> should be defined",
          "testString":
            "assert(typeof myGlobal != \"undefined\", '<code>myGlobal</code> should be defined');"
        },
        {
          "text":
            "<code>myGlobal</code> should have a value of <code>10</code>",
          "testString":
            "assert(myGlobal === 10, '<code>myGlobal</code> should have a value of <code>10</code>');"
        },
        {
          "text":
            "<code>myGlobal</code> should be declared using the <code>var</code> keyword",
          "testString":
            "assert(/var\\s+myGlobal/.test(code), '<code>myGlobal</code> should be declared using the <code>var</code> keyword');"
        },
        {
          "text":
            "<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>",
          "testString":
            "assert(typeof oopsGlobal != \"undefined\" && oopsGlobal === 5, '<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Declare your variable here\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal Here\n  \n}\n\n// Only change code above this line\nfunction fun2() {\n  var output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}",
          "head":
            "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\nvar oopsGlobal;\ncapture();",
          "tail":
            "fun1();\nfun2();\nuncapture();\n(function() { return logOutput || \"console.log never called\"; })();"
        }
      },
      "name": "Global Scope and Functions",
      "dashedName": "global-scope-and-functions"
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "description": [
        "Variables which are declared within a function, as well as the function parameters have <dfn>local</dfn> scope. That means, they are only visible within that function.",
        "Here is a function <code>myTest</code> with a local variable called <code>loc</code>.",
        "<blockquote>function myTest() {<br>  var loc = \"foo\";<br>  console.log(loc);<br>}<br>myTest(); // logs \"foo\"<br>console.log(loc); // loc is not defined</blockquote>",
        "<code>loc</code> is not defined outside of the function.",
        "<hr>",
        "Declare a local variable <code>myVar</code> inside <code>myLocalScope</code>. Run the tests and then follow the instructions commented out in the editor.",
        "<strong>Hint</strong><br>Refreshing the page may help if you get stuck."
      ],
      "tests": [
        {
          "text": "No global <code>myVar</code> variable",
          "testString":
            "assert(typeof myVar === 'undefined', 'No global <code>myVar</code> variable');"
        },
        {
          "text": "Add a local <code>myVar</code> variable",
          "testString":
            "assert(/var\\s+myVar/.test(code), 'Add a local <code>myVar</code> variable');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function myLocalScope() {\n  'use strict'; // you shouldn't need to edit this line\n  \n  console.log(myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log(myVar);\n\n// Now remove the console log line to pass the test\n",
          "head":
            "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n  var nativeLog = console.log;\n  console.log = function (message) {\n    logOutput = message;\n    if(nativeLog.apply) {\n      nativeLog.apply(originalConsole, arguments);\n    } else {\n      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n      nativeLog(nativeMsg);\n    }\n  };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n",
          "tail":
            "typeof myLocalScope === 'function' && (capture(), myLocalScope(), uncapture());\n(function() { return logOutput || \"console.log never called\"; })();"
        }
      },
      "name": "Local Scope and Functions",
      "dashedName": "local-scope-and-functions"
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "description": [
        "It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the <code>local</code> variable takes precedence over the <code>global</code> variable.",
        "In this example:",
        "<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>  var someVar = \"Head\";<br>  return someVar;<br>}</blockquote>",
        "The function <code>myFun</code> will return <code>\"Head\"</code> because the <code>local</code> version of the variable is present.",
        "<hr>",
        "Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with <code>\"sweater\"</code>."
      ],
      "tests": [
        {
          "text":
            "Do not change the value of the global <code>outerWear</code>",
          "testString":
            "assert(outerWear === \"T-Shirt\", 'Do not change the value of the global <code>outerWear</code>');"
        },
        {
          "text":
            "<code>myOutfit</code> should return <code>\"sweater\"</code>",
          "testString":
            "assert(myOutfit() === \"sweater\", '<code>myOutfit</code> should return <code>\"sweater\"</code>');"
        },
        {
          "text": "Do not change the return statement",
          "testString":
            "assert(/return outerWear/.test(code), 'Do not change the return statement');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n  \n  \n  \n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Global vs Local Scope in Functions",
      "dashedName": "global-vs-local-scope-in-functions"
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "description": [
        "We can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.",
        "<strong>Example</strong>",
        "<blockquote>function plusThree(num) {<br>  return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>",
        "<code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.",
        "<hr>",
        "Create a function <code>timesFive</code> that accepts one argument, multiplies it by <code>5</code>, and returns the new value. See the last line in the editor for an example of how you can test your <code>timesFive</code> function."
      ],
      "tests": [
        {
          "text": "<code>timesFive</code> should be a function",
          "testString":
            "assert(typeof timesFive === 'function', '<code>timesFive</code> should be a function');"
        },
        {
          "text":
            "function <code>timesFive</code> should be called with a number",
          "testString":
            "assert(code.match(/timesFive\\(\\s*\\d+\\s*\\)/g), 'function <code>timesFive</code> should be called with a number');"
        },
        {
          "text": "<code>timesFive(5)</code> should return <code>25</code>",
          "testString":
            "assert(timesFive(5) === 25, '<code>timesFive(5)</code> should return <code>25</code>');"
        },
        {
          "text": "<code>timesFive(2)</code> should return <code>10</code>",
          "testString":
            "assert(timesFive(2) === 10, '<code>timesFive(2)</code> should return <code>10</code>');"
        },
        {
          "text": "<code>timesFive(0)</code> should return <code>0</code>",
          "testString":
            "assert(timesFive(0) === 0, '<code>timesFive(0)</code> should return <code>0</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nfunction minusSeven(num) {\n  return num - 7;\n}\n\n// Only change code below this line\n\n\n\nconsole.log(minusSeven(10));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Return a Value from a Function with Return",
      "dashedName": "return-a-value-from-a-function-with-return"
    },
    {
      "id": "598e8944f009e646fc236146",
      "description": [
        "A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.",
        "<strong>Example</strong>",
        "<blockquote>var sum = 0;<br>function addSum(num) {<br>  sum = sum + num;<br>}<br>var returnedValue = addSum(3); // sum will be modified but returned value is undefined</blockquote>",
        "<code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>",
        "<hr>",
        "Create a function <code>addFive</code> without any arguments. This function adds 5 to the <code>sum</code> variable, but its returned value is <code>undefined</code>."
      ],
      "tests": [
        {
          "text": "<code>addFive</code> should be a function",
          "testString":
            "assert(typeof addFive === 'function', '<code>addFive</code> should be a function');"
        },
        {
          "text": "<code>sum</code> should be equal to 8",
          "testString":
            "assert(sum === 8, '<code>sum</code> should be equal to 8');"
        },
        {
          "text":
            "Returned value from <code>addFive</code> should be <code>undefined</code>",
          "testString":
            "assert(addFive() === undefined, 'Returned value from <code>addFive</code> should be <code>undefined</code>');"
        },
        {
          "text":
            "Inside of your functions, add 5 to the <code>sum</code> variable",
          "testString":
            "assert(code.match(/(sum\\s*\\=\\s*sum\\s*\\+\\s*5)|(sum\\s*\\+\\=\\s*5)/g).length === 1, 'Inside of your functions, add 5 to the <code>sum</code> variable');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar sum = 0;\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n\n// Only change code above this line\nvar returnedValue = addFive();",
          "head": "",
          "tail":
            "var sum = 0;\nfunction addThree() {sum = sum + 3;}\naddThree();\naddFive();"
        }
      },
      "name": "Understanding Undefined Value returned from a Function",
      "dashedName": "understanding-undefined-value-returned-from-a-function"
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "description": [
        "If you'll recall from our discussion of <a href=\"storing-values-with-the-assignment-operator\" target=\"_blank\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.",
        "Assume we have pre-defined a function <code>sum</code> which adds two numbers together, then: ",
        "<code>ourSum = sum(5, 12);</code>",
        "will call <code>sum</code> function, which returns a value of <code>17</code> and assigns it to <code>ourSum</code> variable.",
        "<hr>",
        "Call the <code>processArg</code> function with an argument of <code>7</code> and assign its return value to the variable <code>processed</code>."
      ],
      "tests": [
        {
          "text":
            "<code>processed</code> should have a value of <code>2</code>",
          "testString":
            "assert(processed === 2, '<code>processed</code> should have a value of <code>2</code>');"
        },
        {
          "text":
            "You should assign <code>processArg</code> to <code>processed</code>",
          "testString":
            "assert(/processed\\s*=\\s*processArg\\(\\s*7\\s*\\)\\s*;/.test(code), 'You should assign <code>processArg</code> to <code>processed</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar changed = 0;\n\nfunction change(num) {\n  return (num + 5) / 3;\n}\n\nchanged = change(10);\n\n// Setup\nvar processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\n// Only change code below this line\n\n",
          "head": "",
          "tail": "(function(){return \"processed = \" + processed})();"
        }
      },
      "name": "Assignment with a Returned Value",
      "dashedName": "assignment-with-a-returned-value"
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "description": [
        "In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the <code>queue</code> and old items are taken off from the front of the <code>queue</code>.",
        "Write a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.",
        "Add the number to the end of the array, then remove the first element of the array.",
        "The <code>nextInLine</code> function should then return the element that was removed."
      ],
      "tests": [
        {
          "text": "<code>nextInLine([], 5)</code> should return a number.",
          "testString":
            "assert.isNumber(nextInLine([],5), '<code>nextInLine([], 5)</code> should return a number.');"
        },
        {
          "text": "<code>nextInLine([], 1)</code> should return <code>1</code>",
          "testString":
            "assert(nextInLine([],1) === 1, '<code>nextInLine([], 1)</code> should return <code>1</code>');"
        },
        {
          "text":
            "<code>nextInLine([2], 1)</code> should return <code>2</code>",
          "testString":
            "assert(nextInLine([2],1) === 2, '<code>nextInLine([2], 1)</code> should return <code>2</code>');"
        },
        {
          "text":
            "<code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code>",
          "testString":
            "assert(nextInLine([5,6,7,8,9],1) === 5, '<code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code>');"
        },
        {
          "text":
            "After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code>",
          "testString":
            "nextInLine(testArr, 10); assert(testArr[4] === 10, 'After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function nextInLine(arr, item) {\n  // Your code here\n  \n  return item;  // Change this line\n}\n\n// Test Setup\nvar testArr = [1,2,3,4,5];\n\n// Display Code\nconsole.log(\"Before: \" + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6)); // Modify this line to test\nconsole.log(\"After: \" + JSON.stringify(testArr));",
          "head":
            "var logOutput = [];\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput.push(message);\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",
          "tail":
            "uncapture();\ntestArr = [1,2,3,4,5];\n(function() { return logOutput.join(\"\\n\");})();"
        }
      },
      "name": "Stand in Line",
      "dashedName": "stand-in-line"
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "description": [
        "Another data type is the <dfn>Boolean</dfn>. <code>Booleans</code> may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is \"on\" and <code>false</code> is \"off.\"  These two states are mutually exclusive.",
        "<strong>Note</strong><br><code>Boolean</code> values are never written with quotes. The <code>strings</code> <code>\"true\"</code> and <code>\"false\"</code> are not <code>Boolean</code> and have no special meaning in JavaScript.",
        "<hr>",
        "Modify the <code>welcomeToBooleans</code> function so that it returns <code>true</code> instead of <code>false</code> when the run button is clicked."
      ],
      "tests": [
        {
          "text":
            "The <code>welcomeToBooleans()</code> function should return a boolean &#40;true/false&#41; value.",
          "testString":
            "assert(typeof welcomeToBooleans() === 'boolean', 'The <code>welcomeToBooleans()</code> function should return a boolean &#40;true/false&#41; value.');"
        },
        {
          "text": "<code>welcomeToBooleans()</code> should return true.",
          "testString":
            "assert(welcomeToBooleans() === true, '<code>welcomeToBooleans()</code> should return true.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function welcomeToBooleans() {\n\n// Only change code below this line.\n\nreturn false; // Change this line\n\n// Only change code above this line.\n}",
          "head": "",
          "tail": "welcomeToBooleans();"
        }
      },
      "name": "Understanding Boolean Values",
      "dashedName": "understanding-boolean-values"
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "description": [
        "<code>If</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.",
        "When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.",
        "<strong>Pseudocode</strong>",
        "<blockquote>if (<i>condition is true</i>) {<br>  <i>statement is executed</i><br>}</blockquote>",
        "<strong>Example</strong>",
        "<blockquote>function test (myCondition) {<br>  if (myCondition) {<br>     return \"It was true\";<br>  }<br>  return \"It was false\";<br>}<br>test(true);  // returns \"It was true\"<br>test(false); // returns \"It was false\"</blockquote>",
        "When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>\"It was true\"</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>\"It was false\"</code>.",
        "<hr>",
        "Create an <code>if</code> statement inside the function to return <code>\"Yes, that was true\"</code> if the parameter <code>wasThatTrue</code> is <code>true</code> and return <code>\"No, that was false\"</code> otherwise."
      ],
      "tests": [
        {
          "text": "<code>trueOrFalse</code> should be a function",
          "testString":
            "assert(typeof trueOrFalse === \"function\", '<code>trueOrFalse</code> should be a function');"
        },
        {
          "text": "<code>trueOrFalse(true)</code> should return a string",
          "testString":
            "assert(typeof trueOrFalse(true) === \"string\", '<code>trueOrFalse(true)</code> should return a string');"
        },
        {
          "text": "<code>trueOrFalse(false)</code> should return a string",
          "testString":
            "assert(typeof trueOrFalse(false) === \"string\", '<code>trueOrFalse(false)</code> should return a string');"
        },
        {
          "text":
            "<code>trueOrFalse(true)</code> should return \"Yes, that was true\"",
          "testString":
            "assert(trueOrFalse(true) === \"Yes, that was true\", '<code>trueOrFalse(true)</code> should return \"Yes, that was true\"');"
        },
        {
          "text":
            "<code>trueOrFalse(false)</code> should return \"No, that was false\"",
          "testString":
            "assert(trueOrFalse(false) === \"No, that was false\", '<code>trueOrFalse(false)</code> should return \"No, that was false\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nfunction ourTrueOrFalse(isItTrue) {\n  if (isItTrue) { \n    return \"Yes, it's true\";\n  }\n  return \"No, it's false\";\n}\n\n// Setup\nfunction trueOrFalse(wasThatTrue) {\n\n  // Only change code below this line.\n  \n  \n  \n  // Only change code above this line.\n\n}\n\n// Change this value to test\ntrueOrFalse(true);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Conditional Logic with If Statements",
      "dashedName": "use-conditional-logic-with-if-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "description": [
        "There are many <dfn>Comparison Operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.",
        "The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value at the right of the operator to a variable in the left.",
        "<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}</blockquote>",
        "If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>\"Equal\"</code>. Otherwise, the function will return <code>\"Not Equal\"</code>.",
        "In order for JavaScript to compare two different <code>data types</code> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as \"Type Coercion\". Once it does, however, it can compare terms as follows:",
        "<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \"3\"  ==  3    // true</blockquote>",
        "<hr>",
        "Add the <code>equality operator</code> to the indicated line so that the function will return \"Equal\" when <code>val</code> is equivalent to <code>12</code>"
      ],
      "tests": [
        {
          "text": "<code>testEqual(10)</code> should return \"Not Equal\"",
          "testString":
            "assert(testEqual(10) === \"Not Equal\", '<code>testEqual(10)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testEqual(12)</code> should return \"Equal\"",
          "testString":
            "assert(testEqual(12) === \"Equal\", '<code>testEqual(12)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testEqual(\"12\")</code> should return \"Equal\"",
          "testString":
            "assert(testEqual(\"12\") === \"Equal\", '<code>testEqual(\"12\")</code> should return \"Equal\"');"
        },
        {
          "text": "You should use the <code>==</code> operator",
          "testString":
            "assert(code.match(/==/g) && !code.match(/===/g), 'You should use the <code>==</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction testEqual(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\n// Change this value to test\ntestEqual(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Equality Operator",
      "dashedName": "comparison-with-the-equality-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "description": [
        "Strict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.",
        "If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.",
        "<strong>Examples</strong>",
        "<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>",
        "In the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.",
        "<hr>",
        "Use the strict equality operator in the <code>if</code> statement so the function will return \"Equal\" when <code>val</code> is strictly equal to <code>7</code>"
      ],
      "tests": [
        {
          "text": "<code>testStrict(10)</code> should return \"Not Equal\"",
          "testString":
            "assert(testStrict(10) === \"Not Equal\", '<code>testStrict(10)</code> should return \"Not Equal\"');"
        },
        {
          "text": "<code>testStrict(7)</code> should return \"Equal\"",
          "testString":
            "assert(testStrict(7) === \"Equal\", '<code>testStrict(7)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testStrict(\"7\")</code> should return \"Not Equal\"",
          "testString":
            "assert(testStrict(\"7\") === \"Not Equal\", '<code>testStrict(\"7\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>===</code> operator",
          "testString":
            "assert(code.match(/(val\\s*===\\s*\\d+)|(\\d+\\s*===\\s*val)/g).length > 0, 'You should use the <code>===</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction testStrict(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\n// Change this value to test\ntestStrict(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Strict Equality Operator",
      "dashedName": "comparison-with-the-strict-equality-operator"
    },
    {
      "id": "599a789b454f2bbd91a3ff4d",
      "description": [
        "In the last two challenges, we learned about the equality operator (<code>==</code>) and the strict equality operator (<code>===</code>). Let's do a quick review and practice using these operators some more.",
        "If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equalty operator will compare both the data type and value as-is, without converting one type to the other.",
        "<strong>Examples</strong>",
        "<blockquote>3 == '3'  // returns true because JavaScript performs type converstion from string to number<br>3 === '3' // returns false because the types are different and type conversion is not performed</blockquote>",
        "<strong>Note</strong><br>In JavaScript, you can determine the type of a variable or a value with the <code>typeof</code> operator, as follows:",
        "<blockquote>typeof 3   // returns 'number'<br>typeof '3' // returns 'string'</blockquote>",
        "<hr>",
        "The <code>compareEquality</code> function in the editor compares two values using the <code>equality operator</code>. Modify the function so that it returns \"Equal\" only when the values are strictly equal."
      ],
      "tests": [
        {
          "text":
            "<code>compareEquality(10, \"10\")</code> should return \"Not Equal\"",
          "testString":
            "assert(compareEquality(10, \"10\") === \"Not Equal\", '<code>compareEquality(10, \"10\")</code> should return \"Not Equal\"');"
        },
        {
          "text":
            "<code>compareEquality(\"20\", 20)</code> should return \"Not Equal\"",
          "testString":
            "assert(compareEquality(\"20\", 20) === \"Not Equal\", '<code>compareEquality(\"20\", 20)</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>===</code> operator",
          "testString":
            "assert(code.match(/===/g), 'You should use the <code>===</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction compareEquality(a, b) {\n  if (a == b) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\n// Change this value to test\ncompareEquality(10, \"10\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Practice comparing different values",
      "dashedName": "practice-comparing-different-values"
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "description": [
        "The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means \"Not Equal\" and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
        "<hr>",
        "Add the inequality operator <code>!=</code> in the <code>if</code> statement so that the function will return \"Not Equal\" when <code>val</code> is not equivalent to <code>99</code>"
      ],
      "tests": [
        {
          "text": "<code>testNotEqual(99)</code> should return \"Equal\"",
          "testString":
            "assert(testNotEqual(99) === \"Equal\", '<code>testNotEqual(99)</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"99\")</code> should return \"Equal\"",
          "testString":
            "assert(testNotEqual(\"99\") === \"Equal\", '<code>testNotEqual(\"99\")</code> should return \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(12)</code> should return \"Not Equal\"",
          "testString":
            "assert(testNotEqual(12) === \"Not Equal\", '<code>testNotEqual(12)</code> should return \"Not Equal\"');"
        },
        {
          "text":
            "<code>testNotEqual(\"12\")</code> should return \"Not Equal\"",
          "testString":
            "assert(testNotEqual(\"12\") === \"Not Equal\", '<code>testNotEqual(\"12\")</code> should return \"Not Equal\"');"
        },
        {
          "text":
            "<code>testNotEqual(\"bob\")</code> should return \"Not Equal\"",
          "testString":
            "assert(testNotEqual(\"bob\") === \"Not Equal\", '<code>testNotEqual(\"bob\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>!=</code> operator",
          "testString":
            "assert(code.match(/(?!!==)!=/), 'You should use the <code>!=</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction testNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\n// Change this value to test\ntestNotEqual(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Inequality Operator",
      "dashedName": "comparison-with-the-inequality-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "description": [
        "The strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. Strict inequality will not convert data types.",
        "<strong>Examples</strong>",
        "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
        "<hr>",
        "Add the <code>strict inequality operator</code> to the <code>if</code> statement so the function will return \"Not Equal\" when <code>val</code> is not strictly equal to <code>17</code>"
      ],
      "tests": [
        {
          "text": "<code>testStrictNotEqual(17)</code> should return \"Equal\"",
          "testString":
            "assert(testStrictNotEqual(17) === \"Equal\", '<code>testStrictNotEqual(17)</code> should return \"Equal\"');"
        },
        {
          "text":
            "<code>testStrictNotEqual(\"17\")</code> should return \"Not Equal\"",
          "testString":
            "assert(testStrictNotEqual(\"17\") === \"Not Equal\", '<code>testStrictNotEqual(\"17\")</code> should return \"Not Equal\"');"
        },
        {
          "text":
            "<code>testStrictNotEqual(12)</code> should return \"Not Equal\"",
          "testString":
            "assert(testStrictNotEqual(12) === \"Not Equal\", '<code>testStrictNotEqual(12)</code> should return \"Not Equal\"');"
        },
        {
          "text":
            "<code>testStrictNotEqual(\"bob\")</code> should return \"Not Equal\"",
          "testString":
            "assert(testStrictNotEqual(\"bob\") === \"Not Equal\", '<code>testStrictNotEqual(\"bob\")</code> should return \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>!==</code> operator",
          "testString":
            "assert(code.match(/(val\\s*!==\\s*\\d+)|(\\d+\\s*!==\\s*val)/g).length > 0, 'You should use the <code>!==</code> operator');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction testStrictNotEqual(val) {\n  // Only Change Code Below this Line\n  \n  if (val) {\n\n  // Only Change Code Above this Line\n\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\n// Change this value to test\ntestStrictNotEqual(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Strict Inequality Operator",
      "dashedName": "comparison-with-the-strict-inequality-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "description": [
        "The greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, greater than operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
        "<hr>",
        "Add the <code>greater than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "tests": [
        {
          "text":
            "<code>testGreaterThan(0)</code> should return \"10 or Under\"",
          "testString":
            "assert(testGreaterThan(0) === \"10 or Under\", '<code>testGreaterThan(0)</code> should return \"10 or Under\"');"
        },
        {
          "text":
            "<code>testGreaterThan(10)</code> should return \"10 or Under\"",
          "testString":
            "assert(testGreaterThan(10) === \"10 or Under\", '<code>testGreaterThan(10)</code> should return \"10 or Under\"');"
        },
        {
          "text": "<code>testGreaterThan(11)</code> should return \"Over 10\"",
          "testString":
            "assert(testGreaterThan(11) === \"Over 10\", '<code>testGreaterThan(11)</code> should return \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(99)</code> should return \"Over 10\"",
          "testString":
            "assert(testGreaterThan(99) === \"Over 10\", '<code>testGreaterThan(99)</code> should return \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(100)</code> should return \"Over 10\"",
          "testString":
            "assert(testGreaterThan(100) === \"Over 10\", '<code>testGreaterThan(100)</code> should return \"Over 10\"');"
        },
        {
          "text":
            "<code>testGreaterThan(101)</code> should return \"Over 100\"",
          "testString":
            "assert(testGreaterThan(101) === \"Over 100\", '<code>testGreaterThan(101)</code> should return \"Over 100\"');"
        },
        {
          "text":
            "<code>testGreaterThan(150)</code> should return \"Over 100\"",
          "testString":
            "assert(testGreaterThan(150) === \"Over 100\", '<code>testGreaterThan(150)</code> should return \"Over 100\"');"
        },
        {
          "text":
            "You should use the <code>&gt;</code> operator at least twice",
          "testString":
            "assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&gt;</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testGreaterThan(val) {\n  if (val) {  // Change this line\n    return \"Over 100\";\n  }\n  \n  if (val) {  // Change this line\n    return \"Over 10\";\n  }\n\n  return \"10 or Under\";\n}\n\n// Change this value to test\ntestGreaterThan(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Greater Than Operator",
      "dashedName": "comparison-with-the-greater-than-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "description": [
        "The <code>greater than or equal to</code> operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, <code>greater than or equal to</code> operator will convert data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
        "<hr>",
        "Add the <code>greater than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "tests": [
        {
          "text":
            "<code>testGreaterOrEqual(0)</code> should return \"Less than 10\"",
          "testString":
            "assert(testGreaterOrEqual(0) === \"Less than 10\", '<code>testGreaterOrEqual(0)</code> should return \"Less than 10\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(9)</code> should return \"Less than 10\"",
          "testString":
            "assert(testGreaterOrEqual(9) === \"Less than 10\", '<code>testGreaterOrEqual(9)</code> should return \"Less than 10\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(10)</code> should return \"10 or Over\"",
          "testString":
            "assert(testGreaterOrEqual(10) === \"10 or Over\", '<code>testGreaterOrEqual(10)</code> should return \"10 or Over\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(11)</code> should return \"10 or Over\"",
          "testString":
            "assert(testGreaterOrEqual(11) === \"10 or Over\", '<code>testGreaterOrEqual(11)</code> should return \"10 or Over\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(19)</code> should return \"10 or Over\"",
          "testString":
            "assert(testGreaterOrEqual(19) === \"10 or Over\", '<code>testGreaterOrEqual(19)</code> should return \"10 or Over\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(100)</code> should return \"20 or Over\"",
          "testString":
            "assert(testGreaterOrEqual(100) === \"20 or Over\", '<code>testGreaterOrEqual(100)</code> should return \"20 or Over\"');"
        },
        {
          "text":
            "<code>testGreaterOrEqual(21)</code> should return \"20 or Over\"",
          "testString":
            "assert(testGreaterOrEqual(21) === \"20 or Over\", '<code>testGreaterOrEqual(21)</code> should return \"20 or Over\"');"
        },
        {
          "text":
            "You should use the <code>&gt;=</code> operator at least twice",
          "testString":
            "assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&gt;=</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testGreaterOrEqual(val) {\n  if (val) {  // Change this line\n    return \"20 or Over\";\n  }\n  \n  if (val) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}\n\n// Change this value to test\ntestGreaterOrEqual(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Greater Than Or Equal To Operator",
      "dashedName": "comparison-with-the-greater-than-or-equal-to-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "description": [
        "The <dfn>less than</dfn> operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, <dfn>less than</dfn> operator converts data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>  2 &lt; 5  // true<br>'3' &lt; 7  // true<br>  5 &lt; 5  // false<br>  3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
        "<hr>",
        "Add the <code>less than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "tests": [
        {
          "text": "<code>testLessThan(0)</code> should return \"Under 25\"",
          "testString":
            "assert(testLessThan(0) === \"Under 25\", '<code>testLessThan(0)</code> should return \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(24)</code> should return \"Under 25\"",
          "testString":
            "assert(testLessThan(24) === \"Under 25\", '<code>testLessThan(24)</code> should return \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(25)</code> should return \"Under 55\"",
          "testString":
            "assert(testLessThan(25) === \"Under 55\", '<code>testLessThan(25)</code> should return \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(54)</code> should return \"Under 55\"",
          "testString":
            "assert(testLessThan(54) === \"Under 55\", '<code>testLessThan(54)</code> should return \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(55)</code> should return \"55 or Over\"",
          "testString":
            "assert(testLessThan(55) === \"55 or Over\", '<code>testLessThan(55)</code> should return \"55 or Over\"');"
        },
        {
          "text": "<code>testLessThan(99)</code> should return \"55 or Over\"",
          "testString":
            "assert(testLessThan(99) === \"55 or Over\", '<code>testLessThan(99)</code> should return \"55 or Over\"');"
        },
        {
          "text":
            "You should use the <code>&lt;</code> operator at least twice",
          "testString":
            "assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&lt;</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testLessThan(val) {\n  if (val) {  // Change this line\n    return \"Under 25\";\n  }\n  \n  if (val) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}\n\n// Change this value to test\ntestLessThan(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Less Than Operator",
      "dashedName": "comparison-with-the-less-than-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "description": [
        "The <code>less than or equal to</code> operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, <code>less than or equal to</code> converts data types.",
        "<strong>Examples</strong>",
        "<blockquote>  4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>  5 &lt;= 5  // true<br>  3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
        "<hr>",
        "Add the <code>less than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "tests": [
        {
          "text":
            "<code>testLessOrEqual(0)</code> should return \"Smaller Than or Equal to 12\"",
          "testString":
            "assert(testLessOrEqual(0) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(0)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(11)</code> should return \"Smaller Than or Equal to 12\"",
          "testString":
            "assert(testLessOrEqual(11) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(11)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(12)</code> should return \"Smaller Than or Equal to 12\"",
          "testString":
            "assert(testLessOrEqual(12) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(12)</code> should return \"Smaller Than or Equal to 12\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(23)</code> should return \"Smaller Than or Equal to 24\"",
          "testString":
            "assert(testLessOrEqual(23) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(23)</code> should return \"Smaller Than or Equal to 24\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(24)</code> should return \"Smaller Than or Equal to 24\"",
          "testString":
            "assert(testLessOrEqual(24) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(24)</code> should return \"Smaller Than or Equal to 24\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(25)</code> should return \"More Than 24\"",
          "testString":
            "assert(testLessOrEqual(25) === \"More Than 24\", '<code>testLessOrEqual(25)</code> should return \"More Than 24\"');"
        },
        {
          "text":
            "<code>testLessOrEqual(55)</code> should return \"More Than 24\"",
          "testString":
            "assert(testLessOrEqual(55) === \"More Than 24\", '<code>testLessOrEqual(55)</code> should return \"More Than 24\"');"
        },
        {
          "text":
            "You should use the <code>&lt;=</code> operator at least twice",
          "testString":
            "assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1, 'You should use the <code>&lt;=</code> operator at least twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testLessOrEqual(val) {\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n  \n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}\n\n// Change this value to test\ntestLessOrEqual(10);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparison with the Less Than Or Equal To Operator",
      "dashedName": "comparison-with-the-less-than-or-equal-to-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "description": [
        "Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&&</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.",
        "The same effect could be achieved by nesting an if statement inside another if:",
        "<blockquote>if (num > 5) {<br>  if (num < 10) {<br>    return \"Yes\";<br>  }<br>}<br>return \"No\";</blockquote>",
        "will only return \"Yes\" if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written as:",
        "<blockquote>if (num > 5 && num < 10) {<br>  return \"Yes\";<br>}<br>return \"No\";</blockquote>",
        "<hr>",
        "Combine the two if statements into one statement which will return <code>\"Yes\"</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return <code>\"No\"</code>."
      ],
      "tests": [
        {
          "text": "You should use the <code>&&</code> operator once",
          "testString":
            "assert(code.match(/&&/g).length === 1, 'You should use the <code>&&</code> operator once');"
        },
        {
          "text": "You should only have one <code>if</code> statement",
          "testString":
            "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement');"
        },
        {
          "text": "<code>testLogicalAnd(0)</code> should return \"No\"",
          "testString":
            "assert(testLogicalAnd(0) === \"No\", '<code>testLogicalAnd(0)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(24)</code> should return \"No\"",
          "testString":
            "assert(testLogicalAnd(24) === \"No\", '<code>testLogicalAnd(24)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(25)</code> should return \"Yes\"",
          "testString":
            "assert(testLogicalAnd(25) === \"Yes\", '<code>testLogicalAnd(25)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(30)</code> should return \"Yes\"",
          "testString":
            "assert(testLogicalAnd(30) === \"Yes\", '<code>testLogicalAnd(30)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(50)</code> should return \"Yes\"",
          "testString":
            "assert(testLogicalAnd(50) === \"Yes\", '<code>testLogicalAnd(50)</code> should return \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(51)</code> should return \"No\"",
          "testString":
            "assert(testLogicalAnd(51) === \"No\", '<code>testLogicalAnd(51)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(75)</code> should return \"No\"",
          "testString":
            "assert(testLogicalAnd(75) === \"No\", '<code>testLogicalAnd(75)</code> should return \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(80)</code> should return \"No\"",
          "testString":
            "assert(testLogicalAnd(80) === \"No\", '<code>testLogicalAnd(80)</code> should return \"No\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testLogicalAnd(val) {\n  // Only change code below this line\n\n  if (val) {\n    if (val) {\n      return \"Yes\";\n    }\n  }\n\n  // Only change code above this line\n  return \"No\";\n}\n\n// Change this value to test\ntestLogicalAnd(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparisons with the Logical And Operator",
      "dashedName": "comparisons-with-the-logical-and-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "description": [
        "The <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.",
        "The <dfn>logical or</dfn> operator is composed of two pipe symbols (<code>|</code>). This can typically be found between your Backspace and Enter keys.",
        "The pattern below should look familiar from prior waypoints:",
        "<blockquote>if (num > 10) {<br>  return \"No\";<br>}<br>if (num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "will return \"Yes\" only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:",
        "<blockquote>if (num > 10 || num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "<hr>",
        "Combine the two <code>if</code> statements into one statement which returns <code>\"Outside\"</code> if <code>val</code> is not between <code>10</code> and <code>20</code>, inclusive. Otherwise, return <code>\"Inside\"</code>."
      ],
      "tests": [
        {
          "text": "You should use the <code>||</code> operator once",
          "testString":
            "assert(code.match(/\\|\\|/g).length === 1, 'You should use the <code>||</code> operator once');"
        },
        {
          "text": "You should only have one <code>if</code> statement",
          "testString":
            "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement');"
        },
        {
          "text": "<code>testLogicalOr(0)</code> should return \"Outside\"",
          "testString":
            "assert(testLogicalOr(0) === \"Outside\", '<code>testLogicalOr(0)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(9)</code> should return \"Outside\"",
          "testString":
            "assert(testLogicalOr(9) === \"Outside\", '<code>testLogicalOr(9)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(10)</code> should return \"Inside\"",
          "testString":
            "assert(testLogicalOr(10) === \"Inside\", '<code>testLogicalOr(10)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(15)</code> should return \"Inside\"",
          "testString":
            "assert(testLogicalOr(15) === \"Inside\", '<code>testLogicalOr(15)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(19)</code> should return \"Inside\"",
          "testString":
            "assert(testLogicalOr(19) === \"Inside\", '<code>testLogicalOr(19)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(20)</code> should return \"Inside\"",
          "testString":
            "assert(testLogicalOr(20) === \"Inside\", '<code>testLogicalOr(20)</code> should return \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(21)</code> should return \"Outside\"",
          "testString":
            "assert(testLogicalOr(21) === \"Outside\", '<code>testLogicalOr(21)</code> should return \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(25)</code> should return \"Outside\"",
          "testString":
            "assert(testLogicalOr(25) === \"Outside\", '<code>testLogicalOr(25)</code> should return \"Outside\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testLogicalOr(val) {\n  // Only change code below this line\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  // Only change code above this line\n  return \"Inside\";\n}\n\n// Change this value to test\ntestLogicalOr(15);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Comparisons with the Logical Or Operator",
      "dashedName": "comparisons-with-the-logical-or-operator"
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "description": [
        "When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false?  Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.",
        "<blockquote>if (num > 10) {<br>  return \"Bigger than 10\";<br>} else {<br>  return \"10 or Less\";<br>}</blockquote>",
        "<hr>",
        "Combine the <code>if</code> statements into a single <code>if/else</code> statement."
      ],
      "tests": [
        {
          "text":
            "You should only have one <code>if</code> statement in the editor",
          "testString":
            "assert(code.match(/if/g).length === 1, 'You should only have one <code>if</code> statement in the editor');"
        },
        {
          "text": "You should use an <code>else</code> statement",
          "testString":
            "assert(/else/g.test(code), 'You should use an <code>else</code> statement');"
        },
        {
          "text": "<code>testElse(4)</code> should return \"5 or Smaller\"",
          "testString":
            "assert(testElse(4) === \"5 or Smaller\", '<code>testElse(4)</code> should return \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(5)</code> should return \"5 or Smaller\"",
          "testString":
            "assert(testElse(5) === \"5 or Smaller\", '<code>testElse(5)</code> should return \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(6)</code> should return \"Bigger than 5\"",
          "testString":
            "assert(testElse(6) === \"Bigger than 5\", '<code>testElse(6)</code> should return \"Bigger than 5\"');"
        },
        {
          "text": "<code>testElse(10)</code> should return \"Bigger than 5\"",
          "testString":
            "assert(testElse(10) === \"Bigger than 5\", '<code>testElse(10)</code> should return \"Bigger than 5\"');"
        },
        {
          "text": "Do not change the code above or below the lines.",
          "testString":
            "assert(/var result = \"\";/.test(code) && /return result;/.test(code), 'Do not change the code above or below the lines.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testElse(val) {\n  var result = \"\";\n  // Only change code below this line\n  \n  if (val > 5) {\n    result = \"Bigger than 5\";\n  }\n  \n  if (val <= 5) {\n    result = \"5 or Smaller\";\n  }\n  \n  // Only change code above this line\n  return result;\n}\n\n// Change this value to test\ntestElse(4);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Introducing Else Statements",
      "dashedName": "introducing-else-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "description": [
        "If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.",
        "<blockquote>if (num > 15) {<br>  return \"Bigger than 15\";<br>} else if (num < 5) {<br>  return \"Smaller than 5\";<br>} else {<br>  return \"Between 5 and 15\";<br>}</blockquote>",
        "<hr>",
        "Convert the logic to use <code>else if</code> statements."
      ],
      "tests": [
        {
          "text": "You should have at least two <code>else</code> statements",
          "testString":
            "assert(code.match(/else/g).length > 1, 'You should have at least two <code>else</code> statements');"
        },
        {
          "text": "You should have at least two <code>if</code> statements",
          "testString":
            "assert(code.match(/if/g).length > 1, 'You should have at least two <code>if</code> statements');"
        },
        {
          "text": "<code>testElseIf(0)</code> should return \"Smaller than 5\"",
          "testString":
            "assert(testElseIf(0) === \"Smaller than 5\", '<code>testElseIf(0)</code> should return \"Smaller than 5\"');"
        },
        {
          "text":
            "<code>testElseIf(5)</code> should return \"Between 5 and 10\"",
          "testString":
            "assert(testElseIf(5) === \"Between 5 and 10\", '<code>testElseIf(5)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text":
            "<code>testElseIf(7)</code> should return \"Between 5 and 10\"",
          "testString":
            "assert(testElseIf(7) === \"Between 5 and 10\", '<code>testElseIf(7)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text":
            "<code>testElseIf(10)</code> should return \"Between 5 and 10\"",
          "testString":
            "assert(testElseIf(10) === \"Between 5 and 10\", '<code>testElseIf(10)</code> should return \"Between 5 and 10\"');"
        },
        {
          "text":
            "<code>testElseIf(12)</code> should return \"Greater than 10\"",
          "testString":
            "assert(testElseIf(12) === \"Greater than 10\", '<code>testElseIf(12)</code> should return \"Greater than 10\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testElseIf(val) {\n  if (val > 10) {\n    return \"Greater than 10\";\n  }\n  \n  if (val < 5) {\n    return \"Smaller than 5\";\n  }\n  \n  return \"Between 5 and 10\";\n}\n\n// Change this value to test\ntestElseIf(7);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Introducing Else If Statements",
      "dashedName": "introducing-else-if-statements"
    },
    {
      "id": "5690307fddb111c6084545d7",
      "description": [
        "Order is important in <code>if</code>, <code>else if</code> statements.",
        "The function is executed from top to bottom so you will want to be careful of what statement comes first.",
        "Take these two functions as an example.",
        "Here's the first:",
        "<blockquote>function foo(x) {<br>  if (x < 1) {<br>    return \"Less than one\";<br>  } else if (x < 2) {<br>    return \"Less than two\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "And the second just switches the order of the statements:",
        "<blockquote>function bar(x) {<br>  if (x < 2) {<br>    return \"Less than two\";<br>  } else if (x < 1) {<br>    return \"Less than one\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "While these two functions look nearly identical if we pass a number to both we get different outputs.",
        "<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>",
        "<hr>",
        "Change the order of logic in the function so that it will return the correct statements in all cases."
      ],
      "tests": [
        {
          "text": "<code>orderMyLogic(4)</code> should return \"Less than 5\"",
          "testString":
            "assert(orderMyLogic(4) === \"Less than 5\", '<code>orderMyLogic(4)</code> should return \"Less than 5\"');"
        },
        {
          "text": "<code>orderMyLogic(6)</code> should return \"Less than 10\"",
          "testString":
            "assert(orderMyLogic(6) === \"Less than 10\", '<code>orderMyLogic(6)</code> should return \"Less than 10\"');"
        },
        {
          "text":
            "<code>orderMyLogic(11)</code> should return \"Greater than or equal to 10\"",
          "testString":
            "assert(orderMyLogic(11) === \"Greater than or equal to 10\", '<code>orderMyLogic(11)</code> should return \"Greater than or equal to 10\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function orderMyLogic(val) {\n  if (val < 10) {\n    return \"Less than 10\";\n  } else if (val < 5) {\n    return \"Less than 5\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}\n\n// Change this value to test\norderMyLogic(7);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Logical Order in If Else Statements",
      "dashedName": "logical-order-in-if-else-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "description": [
        "<code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:",
        "<blockquote>if (<em>condition1</em>) {<br>  <em>statement1</em><br>} else if (<em>condition2</em>) {<br>  <em>statement2</em><br>} else if (<em>condition3</em>) {<br>  <em>statement3</em><br>. . .<br>} else {<br>  <em>statementN</em><br>}</blockquote>",
        "<hr>",
        "Write chained <code>if</code>/<code>else if</code> statements to fulfill the following conditions:",
        "<code>num &lt;   5</code> - return \"Tiny\"<br><code>num &lt;  10</code> - return \"Small\"<br><code>num &lt; 15</code> - return \"Medium\"<br><code>num &lt; 20</code> - return \"Large\"<br><code>num >= 20</code>  - return \"Huge\""
      ],
      "tests": [
        {
          "text": "You should have at least four <code>else</code> statements",
          "testString":
            "assert(code.match(/else/g).length > 3, 'You should have at least four <code>else</code> statements');"
        },
        {
          "text": "You should have at least four <code>if</code> statements",
          "testString":
            "assert(code.match(/if/g).length > 3, 'You should have at least four <code>if</code> statements');"
        },
        {
          "text": "You should have at least one <code>return</code> statement",
          "testString":
            "assert(code.match(/return/g).length >= 1, 'You should have at least one <code>return</code> statement');"
        },
        {
          "text": "<code>testSize(0)</code> should return \"Tiny\"",
          "testString":
            "assert(testSize(0) === \"Tiny\", '<code>testSize(0)</code> should return \"Tiny\"');"
        },
        {
          "text": "<code>testSize(4)</code> should return \"Tiny\"",
          "testString":
            "assert(testSize(4) === \"Tiny\", '<code>testSize(4)</code> should return \"Tiny\"');"
        },
        {
          "text": "<code>testSize(5)</code> should return \"Small\"",
          "testString":
            "assert(testSize(5) === \"Small\", '<code>testSize(5)</code> should return \"Small\"');"
        },
        {
          "text": "<code>testSize(8)</code> should return \"Small\"",
          "testString":
            "assert(testSize(8) === \"Small\", '<code>testSize(8)</code> should return \"Small\"');"
        },
        {
          "text": "<code>testSize(10)</code> should return \"Medium\"",
          "testString":
            "assert(testSize(10) === \"Medium\", '<code>testSize(10)</code> should return \"Medium\"');"
        },
        {
          "text": "<code>testSize(14)</code> should return \"Medium\"",
          "testString":
            "assert(testSize(14) === \"Medium\", '<code>testSize(14)</code> should return \"Medium\"');"
        },
        {
          "text": "<code>testSize(15)</code> should return \"Large\"",
          "testString":
            "assert(testSize(15) === \"Large\", '<code>testSize(15)</code> should return \"Large\"');"
        },
        {
          "text": "<code>testSize(17)</code> should return \"Large\"",
          "testString":
            "assert(testSize(17) === \"Large\", '<code>testSize(17)</code> should return \"Large\"');"
        },
        {
          "text": "<code>testSize(20)</code> should return \"Huge\"",
          "testString":
            "assert(testSize(20) === \"Huge\", '<code>testSize(20)</code> should return \"Huge\"');"
        },
        {
          "text": "<code>testSize(25)</code> should return \"Huge\"",
          "testString":
            "assert(testSize(25) === \"Huge\", '<code>testSize(25)</code> should return \"Huge\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function testSize(num) {\n  // Only change code below this line\n  \n  \n  return \"Change Me\";\n  // Only change code above this line\n}\n\n// Change this value to test\ntestSize(7);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Chaining If Else Statements",
      "dashedName": "chaining-if-else-statements"
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "description": [
        "In the game of <a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a> each hole has a <code>par</code> meaning the average number of <code>strokes</code> a golfer is expected to make in order to sink the ball in a hole to complete the play. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.",
        "Your function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):",
        "<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
        "<code>par</code> and <code>strokes</code> will always be numeric and positive. We have added an array of all the names for your convenience."
      ],
      "tests": [
        {
          "text": "<code>golfScore(4, 1)</code> should return \"Hole-in-one!\"",
          "testString":
            "assert(golfScore(4, 1) === \"Hole-in-one!\", '<code>golfScore(4, 1)</code> should return \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(4, 2)</code> should return \"Eagle\"",
          "testString":
            "assert(golfScore(4, 2) === \"Eagle\", '<code>golfScore(4, 2)</code> should return \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(5, 2)</code> should return \"Eagle\"",
          "testString":
            "assert(golfScore(5, 2) === \"Eagle\", '<code>golfScore(5, 2)</code> should return \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(4, 3)</code> should return \"Birdie\"",
          "testString":
            "assert(golfScore(4, 3) === \"Birdie\", '<code>golfScore(4, 3)</code> should return \"Birdie\"');"
        },
        {
          "text": "<code>golfScore(4, 4)</code> should return \"Par\"",
          "testString":
            "assert(golfScore(4, 4) === \"Par\", '<code>golfScore(4, 4)</code> should return \"Par\"');"
        },
        {
          "text": "<code>golfScore(1, 1)</code> should return \"Hole-in-one!\"",
          "testString":
            "assert(golfScore(1, 1) === \"Hole-in-one!\", '<code>golfScore(1, 1)</code> should return \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(5, 5)</code> should return \"Par\"",
          "testString":
            "assert(golfScore(5, 5) === \"Par\", '<code>golfScore(5, 5)</code> should return \"Par\"');"
        },
        {
          "text": "<code>golfScore(4, 5)</code> should return \"Bogey\"",
          "testString":
            "assert(golfScore(4, 5) === \"Bogey\", '<code>golfScore(4, 5)</code> should return \"Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 6)</code> should return \"Double Bogey\"",
          "testString":
            "assert(golfScore(4, 6) === \"Double Bogey\", '<code>golfScore(4, 6)</code> should return \"Double Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 7)</code> should return \"Go Home!\"",
          "testString":
            "assert(golfScore(4, 7) === \"Go Home!\", '<code>golfScore(4, 7)</code> should return \"Go Home!\"');"
        },
        {
          "text": "<code>golfScore(5, 9)</code> should return \"Go Home!\"",
          "testString":
            "assert(golfScore(5, 9) === \"Go Home!\", '<code>golfScore(5, 9)</code> should return \"Go Home!\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];\nfunction golfScore(par, strokes) {\n  // Only change code below this line\n  \n  \n  return \"Change Me\";\n  // Only change code above this line\n}\n\n// Change these values to test\ngolfScore(5, 4);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Golf Code",
      "dashedName": "golf-code"
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "description": [
        "If you have many options to choose from, use a <code>switch</code> statement. A <code>switch</code> statement tests a value and can have many <code>case</code> statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.",
        "Here is a <dfn>pseudocode</dfn> example:",
        "<blockquote>switch(num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  case valueN:<br>    statementN;<br>    break;<br>}</blockquote>",
        "<code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.",
        "<hr>",
        "Write a switch statement which tests <code>val</code> and sets <code>answer</code> for the following conditions:<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\""
      ],
      "tests": [
        {
          "text":
            "<code>caseInSwitch(1)</code> should have a value of \"alpha\"",
          "testString":
            "assert(caseInSwitch(1) === \"alpha\", '<code>caseInSwitch(1)</code> should have a value of \"alpha\"');"
        },
        {
          "text":
            "<code>caseInSwitch(2)</code> should have a value of \"beta\"",
          "testString":
            "assert(caseInSwitch(2) === \"beta\", '<code>caseInSwitch(2)</code> should have a value of \"beta\"');"
        },
        {
          "text":
            "<code>caseInSwitch(3)</code> should have a value of \"gamma\"",
          "testString":
            "assert(caseInSwitch(3) === \"gamma\", '<code>caseInSwitch(3)</code> should have a value of \"gamma\"');"
        },
        {
          "text":
            "<code>caseInSwitch(4)</code> should have a value of \"delta\"",
          "testString":
            "assert(caseInSwitch(4) === \"delta\", '<code>caseInSwitch(4)</code> should have a value of \"delta\"');"
        },
        {
          "text":
            "You should not use any <code>if</code> or <code>else</code> statements",
          "testString":
            "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should have at least 3 <code>break</code> statements",
          "testString":
            "assert(code.match(/break/g).length > 2, 'You should have at least 3 <code>break</code> statements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function caseInSwitch(val) {\n  var answer = \"\";\n  // Only change code below this line\n  \n  \n  \n  // Only change code above this line  \n  return answer;  \n}\n\n// Change this value to test\ncaseInSwitch(1);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Selecting from Many Options with Switch Statements",
      "dashedName": "selecting-from-many-options-with-switch-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "description": [
        "In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.",
        "A <code>default</code> statement should be the last case.",
        "<blockquote>switch (num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  default:<br>    defaultStatement;<br>    break;<br>}</blockquote>",
        "<hr>",
        "Write a switch statement to set <code>answer</code> for the following conditions:<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
      ],
      "tests": [
        {
          "text":
            "<code>switchOfStuff(\"a\")</code> should have a value of \"apple\"",
          "testString":
            "assert(switchOfStuff(\"a\") === \"apple\", '<code>switchOfStuff(\"a\")</code> should have a value of \"apple\"');"
        },
        {
          "text":
            "<code>switchOfStuff(\"b\")</code> should have a value of \"bird\"",
          "testString":
            "assert(switchOfStuff(\"b\") === \"bird\", '<code>switchOfStuff(\"b\")</code> should have a value of \"bird\"');"
        },
        {
          "text":
            "<code>switchOfStuff(\"c\")</code> should have a value of \"cat\"",
          "testString":
            "assert(switchOfStuff(\"c\") === \"cat\", '<code>switchOfStuff(\"c\")</code> should have a value of \"cat\"');"
        },
        {
          "text":
            "<code>switchOfStuff(\"d\")</code> should have a value of \"stuff\"",
          "testString":
            "assert(switchOfStuff(\"d\") === \"stuff\", '<code>switchOfStuff(\"d\")</code> should have a value of \"stuff\"');"
        },
        {
          "text":
            "<code>switchOfStuff(4)</code> should have a value of \"stuff\"",
          "testString":
            "assert(switchOfStuff(4) === \"stuff\", '<code>switchOfStuff(4)</code> should have a value of \"stuff\"');"
        },
        {
          "text":
            "You should not use any <code>if</code> or <code>else</code> statements",
          "testString":
            "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should use a <code>default</code> statement",
          "testString":
            "assert(switchOfStuff(\"string-to-trigger-default-case\") === \"stuff\", 'You should use a <code>default</code> statement');"
        },
        {
          "text": "You should have at least 3 <code>break</code> statements",
          "testString":
            "assert(code.match(/break/g).length > 2, 'You should have at least 3 <code>break</code> statements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function switchOfStuff(val) {\n  var answer = \"\";\n  // Only change code below this line\n  \n  \n  \n  // Only change code above this line  \n  return answer;  \n}\n\n// Change this value to test\nswitchOfStuff(1);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adding a Default Option in Switch Statements",
      "dashedName": "adding-a-default-option-in-switch-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "description": [
        "If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:",
        "<blockquote>switch(val) {<br>  case 1:<br>  case 2:<br>  case 3:<br>    result = \"1, 2, or 3\";<br>    break;<br>  case 4:<br>    result = \"4 alone\";<br>}</blockquote>",
        "Cases for 1, 2, and 3 will all produce the same result.",
        "<hr>",
        "Write a switch statement to set <code>answer</code> for the following ranges:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
        "<strong>Note</strong><br>You will need to have a <code>case</code> statement for each number in the range."
      ],
      "tests": [
        {
          "text": "<code>sequentialSizes(1)</code> should return \"Low\"",
          "testString":
            "assert(sequentialSizes(1) === \"Low\", '<code>sequentialSizes(1)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(2)</code> should return \"Low\"",
          "testString":
            "assert(sequentialSizes(2) === \"Low\", '<code>sequentialSizes(2)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(3)</code> should return \"Low\"",
          "testString":
            "assert(sequentialSizes(3) === \"Low\", '<code>sequentialSizes(3)</code> should return \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(4)</code> should return \"Mid\"",
          "testString":
            "assert(sequentialSizes(4) === \"Mid\", '<code>sequentialSizes(4)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(5)</code> should return \"Mid\"",
          "testString":
            "assert(sequentialSizes(5) === \"Mid\", '<code>sequentialSizes(5)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(6)</code> should return \"Mid\"",
          "testString":
            "assert(sequentialSizes(6) === \"Mid\", '<code>sequentialSizes(6)</code> should return \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(7)</code> should return \"High\"",
          "testString":
            "assert(sequentialSizes(7) === \"High\", '<code>sequentialSizes(7)</code> should return \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(8)</code> should return \"High\"",
          "testString":
            "assert(sequentialSizes(8) === \"High\", '<code>sequentialSizes(8)</code> should return \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(9)</code> should return \"High\"",
          "testString":
            "assert(sequentialSizes(9) === \"High\", '<code>sequentialSizes(9)</code> should return \"High\"');"
        },
        {
          "text":
            "You should not use any <code>if</code> or <code>else</code> statements",
          "testString":
            "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should have nine <code>case</code> statements",
          "testString":
            "assert(code.match(/case/g).length === 9, 'You should have nine <code>case</code> statements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sequentialSizes(val) {\n  var answer = \"\";\n  // Only change code below this line\n  \n  \n  \n  // Only change code above this line  \n  return answer;  \n}\n\n// Change this value to test\nsequentialSizes(1);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Multiple Identical Options in Switch Statements",
      "dashedName": "multiple-identical-options-in-switch-statements"
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "description": [
        "If you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>else if</code> statements. The following:",
        "<blockquote>if (val === 1) {<br>  answer = \"a\";<br>} else if (val === 2) {<br>  answer = \"b\";<br>} else {<br>  answer = \"c\";<br>}</blockquote>",
        "can be replaced with:",
        "<blockquote>switch(val) {<br>  case 1:<br>    answer = \"a\";<br>    break;<br>  case 2:<br>    answer = \"b\";<br>    break;<br>  default:<br>    answer = \"c\";<br>}</blockquote>",
        "<hr>",
        "Change the chained <code>if</code>/<code>else if</code> statements into a <code>switch</code> statement."
      ],
      "tests": [
        {
          "text":
            "You should not use any <code>else</code> statements anywhere in the editor",
          "testString":
            "assert(!/else/g.test(code), 'You should not use any <code>else</code> statements anywhere in the editor');"
        },
        {
          "text":
            "You should not use any <code>if</code> statements anywhere in the editor",
          "testString":
            "assert(!/if/g.test(code), 'You should not use any <code>if</code> statements anywhere in the editor');"
        },
        {
          "text": "You should have at least four <code>break</code> statements",
          "testString":
            "assert(code.match(/break/g).length >= 4, 'You should have at least four <code>break</code> statements');"
        },
        {
          "text": "<code>chainToSwitch(\"bob\")</code> should be \"Marley\"",
          "testString":
            "assert(chainToSwitch(\"bob\") === \"Marley\", '<code>chainToSwitch(\"bob\")</code> should be \"Marley\"');"
        },
        {
          "text": "<code>chainToSwitch(42)</code> should be \"The Answer\"",
          "testString":
            "assert(chainToSwitch(42) === \"The Answer\", '<code>chainToSwitch(42)</code> should be \"The Answer\"');"
        },
        {
          "text": "<code>chainToSwitch(1)</code> should be \"There is no #1\"",
          "testString":
            "assert(chainToSwitch(1) === \"There is no #1\", '<code>chainToSwitch(1)</code> should be \"There is no #1\"');"
        },
        {
          "text":
            "<code>chainToSwitch(99)</code> should be \"Missed me by this much!\"",
          "testString":
            "assert(chainToSwitch(99) === \"Missed me by this much!\", '<code>chainToSwitch(99)</code> should be \"Missed me by this much!\"');"
        },
        {
          "text": "<code>chainToSwitch(7)</code> should be \"Ate Nine\"",
          "testString":
            "assert(chainToSwitch(7) === \"Ate Nine\", '<code>chainToSwitch(7)</code> should be \"Ate Nine\"');"
        },
        {
          "text":
            "<code>chainToSwitch(\"John\")</code> should be \"\" (empty string)",
          "testString":
            "assert(chainToSwitch(\"John\") === \"\", '<code>chainToSwitch(\"John\")</code> should be \"\" (empty string)');"
        },
        {
          "text":
            "<code>chainToSwitch(156)</code> should be \"\" (empty string)",
          "testString":
            "assert(chainToSwitch(156) === \"\", '<code>chainToSwitch(156)</code> should be \"\" (empty string)');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function chainToSwitch(val) {\n  var answer = \"\";\n  // Only change code below this line\n  \n  if (val === \"bob\") {\n    answer = \"Marley\";\n  } else if (val === 42) {\n    answer = \"The Answer\";\n  } else if (val === 1) {\n    answer = \"There is no #1\";\n  } else if (val === 99) {\n    answer = \"Missed me by this much!\";\n  } else if (val === 7) {\n    answer = \"Ate Nine\";\n  }\n  \n  // Only change code above this line  \n  return answer;  \n}\n\n// Change this value to test\nchainToSwitch(7);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Replacing If Else Chains with Switch",
      "dashedName": "replacing-if-else-chains-with-switch"
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "description": [
        "You may recall from <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.",
        "Sometimes people use an if/else statement to do a comparison, like this:",
        "<blockquote>function isEqual(a,b) {<br>  if (a === b) {<br>    return true;<br>  } else {<br>    return false;<br>  }<br>}</blockquote>",
        "But there's a better way to do this. Since <code>===</code> returns <code>true</code> or <code>false</code>, we can return the result of the comparison:",
        "<blockquote>function isEqual(a,b) {<br>  return a === b;<br>}</blockquote>",
        "<hr>",
        "Fix the function <code>isLess</code> to remove the <code>if/else</code> statements."
      ],
      "tests": [
        {
          "text": "<code>isLess(10,15)</code> should return <code>true</code>",
          "testString":
            "assert(isLess(10,15) === true, '<code>isLess(10,15)</code> should return <code>true</code>');"
        },
        {
          "text": "<code>isLess(15,10)</code> should return <code>false</code>",
          "testString":
            "assert(isLess(15, 10) === false, '<code>isLess(15,10)</code> should return <code>false</code>');"
        },
        {
          "text":
            "You should not use any <code>if</code> or <code>else</code> statements",
          "testString":
            "assert(!/if|else/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function isLess(a, b) {\n  // Fix this code\n  if (a < b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Change these values to test\nisLess(10, 15);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Returning Boolean Values from Functions",
      "dashedName": "returning-boolean-values-from-functions"
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "description": [
        "When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.",
        "<strong>Example</strong>",
        "<blockquote>function myFun() {<br>  console.log(\"Hello\");<br>  return \"World\";<br>  console.log(\"byebye\")<br>}<br>myFun();</blockquote>",
        "The above outputs \"Hello\" to the console, returns \"World\", but <code>\"byebye\"</code> is never output, because the function exits at the <code>return</code> statement.",
        "<hr>",
        "Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.",
        "<strong>Hint</strong><br>Remember that <a href='http://www.freecodecamp.org/challenges/understanding-uninitialized-variables' target='_blank'><code>undefined</code> is a keyword</a>, not a string."
      ],
      "tests": [
        {
          "text": "<code>abTest(2,2)</code> should return a number",
          "testString":
            "assert(typeof abTest(2,2) === 'number' , '<code>abTest(2,2)</code> should return a number');"
        },
        {
          "text": "<code>abTest(2,2)</code> should return <code>8</code>",
          "testString":
            "assert(abTest(2,2) === 8 , '<code>abTest(2,2)</code> should return <code>8</code>');"
        },
        {
          "text":
            "<code>abTest(-2,2)</code> should return <code>undefined</code>",
          "testString":
            "assert(abTest(-2,2) === undefined , '<code>abTest(-2,2)</code> should return <code>undefined</code>');"
        },
        {
          "text":
            "<code>abTest(2,-2)</code> should return <code>undefined</code>",
          "testString":
            "assert(abTest(2,-2) === undefined , '<code>abTest(2,-2)</code> should return <code>undefined</code>');"
        },
        {
          "text": "<code>abTest(2,8)</code> should return <code>18</code>",
          "testString":
            "assert(abTest(2,8) === 18 , '<code>abTest(2,8)</code> should return <code>18</code>');"
        },
        {
          "text": "<code>abTest(3,3)</code> should return <code>12</code>",
          "testString":
            "assert(abTest(3,3) === 12 , '<code>abTest(3,3)</code> should return <code>12</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction abTest(a, b) {\n  // Only change code below this line\n  \n  \n  \n  // Only change code above this line\n\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\n// Change values below to test your code\nabTest(2,2);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Return Early Pattern for Functions",
      "dashedName": "return-early-pattern-for-functions"
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "description": [
        "In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called <a href='https://en.wikipedia.org/wiki/Card_counting' target='_blank'>Card Counting</a>.",
        "Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.",
        "<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>",
        "You will write a card counting function. It will receive a <code>card</code> parameter, which can be a number or a string, and increment or decrement the global <code>count</code> variable according to the card's value (see table). The function will then return a string with the current count and the string <code>Bet</code> if the count is positive, or <code>Hold</code> if the count is zero or negative. The current count and the player's decision (<code>Bet</code> or <code>Hold</code>) should be separated by a single space.",
        "<strong>Example Output</strong><br><code>-3 Hold</code><br><code>5 Bet</code>",
        "<strong>Hint</strong><br>Do NOT reset <code>count</code> to 0 when value is 7, 8, or 9.<br>Do NOT return an array.<br>Do NOT include quotes (single or double) in the output."
      ],
      "tests": [
        {
          "text":
            "Cards Sequence 2, 3, 4, 5, 6 should return <code>5 Bet</code>",
          "testString":
            "assert((function(){ count = 0; cc(2);cc(3);cc(4);cc(5);var out = cc(6); if(out === \"5 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 3, 4, 5, 6 should return <code>5 Bet</code>');"
        },
        {
          "text": "Cards Sequence 7, 8, 9 should return <code>0 Hold</code>",
          "testString":
            "assert((function(){ count = 0; cc(7);cc(8);var out = cc(9); if(out === \"0 Hold\") {return true;} return false; })(), 'Cards Sequence 7, 8, 9 should return <code>0 Hold</code>');"
        },
        {
          "text":
            "Cards Sequence 10, J, Q, K, A should return <code>-5 Hold</code>",
          "testString":
            "assert((function(){ count = 0; cc(10);cc('J');cc('Q');cc('K');var out = cc('A'); if(out === \"-5 Hold\") {return true;} return false; })(), 'Cards Sequence 10, J, Q, K, A should return <code>-5 Hold</code>');"
        },
        {
          "text":
            "Cards Sequence 3, 7, Q, 8, A should return <code>-1 Hold</code>",
          "testString":
            "assert((function(){ count = 0; cc(3);cc(7);cc('Q');cc(8);var out = cc('A'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 7, Q, 8, A should return <code>-1 Hold</code>');"
        },
        {
          "text":
            "Cards Sequence 2, J, 9, 2, 7 should return <code>1 Bet</code>",
          "testString":
            "assert((function(){ count = 0; cc(2);cc('J');cc(9);cc(2);var out = cc(7); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, J, 9, 2, 7 should return <code>1 Bet</code>');"
        },
        {
          "text": "Cards Sequence 2, 2, 10 should return <code>1 Bet</code>",
          "testString":
            "assert((function(){ count = 0; cc(2);cc(2);var out = cc(10); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 2, 10 should return <code>1 Bet</code>');"
        },
        {
          "text":
            "Cards Sequence 3, 2, A, 10, K should return <code>-1 Hold</code>",
          "testString":
            "assert((function(){ count = 0; cc(3);cc(2);cc('A');cc(10);var out = cc('K'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 2, A, 10, K should return <code>-1 Hold</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var count = 0;\n\nfunction cc(card) {\n  // Only change code below this line\n  \n  \n  return \"Change Me\";\n  // Only change code above this line\n}\n\n// Add/remove calls to test your function.\n// Note: Only the last will display\ncc(2); cc(3); cc(7); cc('K'); cc('A');",
          "head": "",
          "tail": ""
        }
      },
      "name": "Counting Cards",
      "dashedName": "counting-cards"
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "description": [
        "You may have heard the term <code>object</code> before.",
        "Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.",
        "Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.",
        "Here's a sample cat object:",
        "<blockquote>var cat = {<br>  \"name\": \"Whiskers\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>",
        "In this example, all the properties are stored as strings, such as - <code>\"name\"</code>, <code>\"legs\"</code>, and <code>\"tails\"</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:",
        "<blockquote>var anotherObject = {<br>  make: \"Ford\",<br>  5: \"five\",<br>  \"model\": \"focus\"<br>};</blockquote>",
        "However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.",
        "<hr>",
        "Make an object that represents a dog called <code>myDog</code> which contains the properties <code>\"name\"</code> (a string), <code>\"legs\"</code>, <code>\"tails\"</code> and <code>\"friends\"</code>.",
        "You can set these object properties to whatever values you want, as long <code>\"name\"</code> is a string, <code>\"legs\"</code> and <code>\"tails\"</code> are numbers, and <code>\"friends\"</code> is an array."
      ],
      "tests": [
        {
          "text":
            "<code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.",
          "testString":
            "assert((function(z){if(z.hasOwnProperty(\"name\") && z.name !== undefined && typeof z.name === \"string\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.');"
        },
        {
          "text":
            "<code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.",
          "testString":
            "assert((function(z){if(z.hasOwnProperty(\"legs\") && z.legs !== undefined && typeof z.legs === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.');"
        },
        {
          "text":
            "<code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.",
          "testString":
            "assert((function(z){if(z.hasOwnProperty(\"tails\") && z.tails !== undefined && typeof z.tails === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.');"
        },
        {
          "text":
            "<code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.",
          "testString":
            "assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), '<code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.');"
        },
        {
          "text":
            "<code>myDog</code> should only contain all the given properties.",
          "testString":
            "assert((function(z){return Object.keys(z).length === 4;})(myDog), '<code>myDog</code> should only contain all the given properties.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n\n// Only change code below this line.\n\nvar myDog = {\n  \n  \n  \n  \n};",
          "head": "",
          "tail": "(function(z){return z;})(myDog);"
        }
      },
      "name": "Build JavaScript Objects",
      "dashedName": "build-javascript-objects"
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "description": [
        "There are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.",
        "Dot notation is what you use when you know the name of the property you're trying to access ahead of time.",
        "Here is a sample of using dot notation (<code>.</code>) to read an object's property:",
        "<blockquote>var myObj = {<br>  prop1: \"val1\",<br>  prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>",
        "<hr>",
        "Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object's property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object's property <code>shirt</code>."
      ],
      "tests": [
        {
          "text": "<code>hatValue</code> should be a string",
          "testString":
            "assert(typeof hatValue === 'string' , '<code>hatValue</code> should be a string');"
        },
        {
          "text":
            "The value of <code>hatValue</code> should be <code>\"ballcap\"</code>",
          "testString":
            "assert(hatValue === 'ballcap' , 'The value of <code>hatValue</code> should be <code>\"ballcap\"</code>');"
        },
        {
          "text": "<code>shirtValue</code> should be a string",
          "testString":
            "assert(typeof shirtValue === 'string' , '<code>shirtValue</code> should be a string');"
        },
        {
          "text":
            "The value of <code>shirtValue</code> should be <code>\"jersey\"</code>",
          "testString":
            "assert(shirtValue === 'jersey' , 'The value of <code>shirtValue</code> should be <code>\"jersey\"</code>');"
        },
        {
          "text": "You should use dot notation twice",
          "testString":
            "assert(code.match(/testObj\\.\\w+/g).length > 1, 'You should use dot notation twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\n// Only change code below this line\n\nvar hatValue = testObj;      // Change this line\nvar shirtValue = testObj;    // Change this line",
          "head": "",
          "tail":
            "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
        }
      },
      "name": "Accessing Object Properties with Dot Notation",
      "dashedName": "accessing-object-properties-with-dot-notation"
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "description": [
        "The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.",
        "However, you can still use bracket notation on object properties without spaces.",
        "Here is a sample of using bracket notation to read an object's property:",
        "<blockquote>var myObj = {<br>  \"Space Name\": \"Kirk\",<br>  \"More Space\": \"Spock\",<br>  \"NoSpace\": \"USS Enterprise\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock<br>myObj[\"NoSpace\"];    // USS Enterprise</blockquote>",
        "Note that property names with spaces in them must be in quotes (single or double).",
        "<hr>",
        "Read the values of the properties <code>\"an entree\"</code> and <code>\"the drink\"</code> of <code>testObj</code> using bracket notation and assign them to <code>entreeValue</code> and <code>drinkValue</code> respectively."
      ],
      "tests": [
        {
          "text": "<code>entreeValue</code> should be a string",
          "testString":
            "assert(typeof entreeValue === 'string' , '<code>entreeValue</code> should be a string');"
        },
        {
          "text":
            "The value of <code>entreeValue</code> should be <code>\"hamburger\"</code>",
          "testString":
            "assert(entreeValue === 'hamburger' , 'The value of <code>entreeValue</code> should be <code>\"hamburger\"</code>');"
        },
        {
          "text": "<code>drinkValue</code> should be a string",
          "testString":
            "assert(typeof drinkValue === 'string' , '<code>drinkValue</code> should be a string');"
        },
        {
          "text":
            "The value of <code>drinkValue</code> should be <code>\"water\"</code>",
          "testString":
            "assert(drinkValue === 'water' , 'The value of <code>drinkValue</code> should be <code>\"water\"</code>');"
        },
        {
          "text": "You should use bracket notation twice",
          "testString":
            "assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1, 'You should use bracket notation twice');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\n\n// Only change code below this line\n\nvar entreeValue = testObj;   // Change this line\nvar drinkValue = testObj;    // Change this line",
          "head": "",
          "tail":
            "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
        }
      },
      "name": "Accessing Object Properties with Bracket Notation",
      "dashedName": "accessing-object-properties-with-bracket-notation"
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "description": [
        "Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.",
        "Here is an example of using a variable to access a property:",
        "<blockquote>var dogs = {<br>  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br>};<br>var myDog = \"Hunter\";<br>var myBreed = dogs[myDog];<br>console.log(myBreed); // \"Doberman\"</blockquote>",
        "Another way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:",
        "<blockquote>var someObj = {<br>  propName: \"John\"<br>};<br>function propPrefix(str) {<br>  var s = \"prop\";<br>  return s + str;<br>}<br>var someProp = propPrefix(\"Name\"); // someProp now holds the value 'propName'<br>console.log(someObj[someProp]); // \"John\"</blockquote>",
        "Note that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.",
        "<hr>",
        "Use the <code>playerNumber</code> variable to look up player <code>16</code> in <code>testObj</code> using bracket notation. Then assign that name to the <code>player</code> variable."
      ],
      "tests": [
        {
          "text": "<code>playerNumber</code> should be a number",
          "testString":
            "assert(typeof playerNumber === 'number', '<code>playerNumber</code> should be a number');"
        },
        {
          "text": "The variable <code>player</code> should be a string",
          "testString":
            "assert(typeof player === 'string', 'The variable <code>player</code> should be a string');"
        },
        {
          "text": "The value of <code>player</code> should be \"Montana\"",
          "testString":
            "assert(player === 'Montana', 'The value of <code>player</code> should be \"Montana\"');"
        },
        {
          "text":
            "You should use bracket notation to access <code>testObj</code>",
          "testString":
            "assert(/testObj\\s*?\\[.*?\\]/.test(code),'You should use bracket notation to access <code>testObj</code>');"
        },
        {
          "text":
            "You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.",
          "testString":
            "assert(!code.match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi),'You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.');"
        },
        {
          "text":
            "You should be using the variable <code>playerNumber</code> in your bracket notation",
          "testString":
            "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code),'You should be using the variable <code>playerNumber</code> in your bracket notation');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line;\n\nvar playerNumber;       // Change this Line\nvar player = testObj;   // Change this Line",
          "head": "",
          "tail":
            "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
        }
      },
      "name": "Accessing Object Properties with Variables",
      "dashedName": "accessing-object-properties-with-variables"
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "description": [
        "After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.",
        "For example, let's look at <code>ourDog</code>:",
        "<blockquote>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};</blockquote>",
        "Since he's a particularly happy dog, let's change his name to \"Happy Camper\". Here's how we update his object's name property:",
        "<code>ourDog.name = \"Happy Camper\";</code> or",
        "<code>ourDog[\"name\"] = \"Happy Camper\";</code>",
        "Now when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we'll get his new name, \"Happy Camper\".",
        "<hr>",
        "Update the <code>myDog</code> object's name property. Let's change her name from \"Coder\" to \"Happy Coder\". You can use either dot or bracket notation."
      ],
      "tests": [
        {
          "text":
            "Update <code>myDog</code>&apos;s <code>\"name\"</code> property to equal \"Happy Coder\".",
          "testString":
            "assert(/happy coder/gi.test(myDog.name), 'Update <code>myDog</code>&apos;s <code>\"name\"</code> property to equal \"Happy Coder\".');"
        },
        {
          "text": "Do not edit the <code>myDog</code> definition",
          "testString":
            "assert(/\"name\": \"Coder\"/.test(code), 'Do not edit the <code>myDog</code> definition');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n\nourDog.name = \"Happy Camper\";\n\n// Setup\nvar myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail": "(function(z){return z;})(myDog);"
        }
      },
      "name": "Updating Object Properties",
      "dashedName": "updating-object-properties"
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "description": [
        "You can add new properties to existing JavaScript objects the same way you would modify them.",
        "Here's how we would add a <code>\"bark\"</code> property to <code>ourDog</code>:",
        "<code>ourDog.bark = \"bow-wow\";</code> ",
        "or",
        "<code>ourDog[\"bark\"] = \"bow-wow\";</code>",
        "Now when we evaluate <code>ourDog.bark</code>, we'll get his bark, \"bow-wow\".",
        "<hr>",
        "Add a <code>\"bark\"</code> property to <code>myDog</code> and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation."
      ],
      "tests": [
        {
          "text":
            "Add the property <code>\"bark\"</code> to <code>myDog</code>.",
          "testString":
            "assert(myDog.bark !== undefined, 'Add the property <code>\"bark\"</code> to <code>myDog</code>.');"
        },
        {
          "text": "Do not add <code>\"bark\"</code> to the setup section",
          "testString":
            "assert(!/bark[^\\n]:/.test(code), 'Do not add <code>\"bark\"</code> to the setup section');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n\nourDog.bark = \"bow-wow\";\n\n// Setup\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n// Only change code below this line.\n",
          "head": "",
          "tail": "(function(z){return z;})(myDog);"
        }
      },
      "name": "Add New Properties to a JavaScript Object",
      "dashedName": "add-new-properties-to-a-javascript-object"
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "description": [
        "We can also delete properties from objects like this:",
        "<code>delete ourDog.bark;</code>",
        "<hr>",
        "Delete the <code>\"tails\"</code> property from <code>myDog</code>. You may use either dot or bracket notation."
      ],
      "tests": [
        {
          "text":
            "Delete the property <code>\"tails\"</code> from <code>myDog</code>.",
          "testString":
            "assert(typeof myDog === \"object\" && myDog.tails === undefined, 'Delete the property <code>\"tails\"</code> from <code>myDog</code>.');"
        },
        {
          "text": "Do not modify the <code>myDog</code> setup",
          "testString":
            "assert(code.match(/\"tails\": 1/g).length > 1, 'Do not modify the <code>myDog</code> setup');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\ndelete ourDog.bark;\n\n// Setup\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail": "(function(z){return z;})(myDog);"
        }
      },
      "name": "Delete Properties from a JavaScript Object",
      "dashedName": "delete-properties-from-a-javascript-object"
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "description": [
        "Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to \"lookup\" values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.",
        "Here is an example of a simple reverse alphabet lookup:",
        "<blockquote>var alpha = {<br>  1:\"Z\",<br>  2:\"Y\",<br>  3:\"X\",<br>  4:\"W\",<br>  ...<br>  24:\"C\",<br>  25:\"B\",<br>  26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>",
        "<hr>",
        "Convert the switch statement into an object called <code>lookup</code>. Use it to look up <code>val</code> and assign the associated string to the <code>result</code> variable."
      ],
      "tests": [
        {
          "text":
            "<code>phoneticLookup(\"alpha\")</code> should equal <code>\"Adams\"</code>",
          "testString":
            "assert(phoneticLookup(\"alpha\") === 'Adams', '<code>phoneticLookup(\"alpha\")</code> should equal <code>\"Adams\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"bravo\")</code> should equal <code>\"Boston\"</code>",
          "testString":
            "assert(phoneticLookup(\"bravo\") === 'Boston', '<code>phoneticLookup(\"bravo\")</code> should equal <code>\"Boston\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"charlie\")</code> should equal <code>\"Chicago\"</code>",
          "testString":
            "assert(phoneticLookup(\"charlie\") === 'Chicago', '<code>phoneticLookup(\"charlie\")</code> should equal <code>\"Chicago\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"delta\")</code> should equal <code>\"Denver\"</code>",
          "testString":
            "assert(phoneticLookup(\"delta\") === 'Denver', '<code>phoneticLookup(\"delta\")</code> should equal <code>\"Denver\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"echo\")</code> should equal <code>\"Easy\"</code>",
          "testString":
            "assert(phoneticLookup(\"echo\") === 'Easy', '<code>phoneticLookup(\"echo\")</code> should equal <code>\"Easy\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"foxtrot\")</code> should equal <code>\"Frank\"</code>",
          "testString":
            "assert(phoneticLookup(\"foxtrot\") === 'Frank', '<code>phoneticLookup(\"foxtrot\")</code> should equal <code>\"Frank\"</code>');"
        },
        {
          "text":
            "<code>phoneticLookup(\"\")</code> should equal <code>undefined</code>",
          "testString":
            "assert(typeof phoneticLookup(\"\") === 'undefined', '<code>phoneticLookup(\"\")</code> should equal <code>undefined</code>');"
        },
        {
          "text": "You should not modify the <code>return</code> statement",
          "testString":
            "assert(code.match(/return\\sresult;/), 'You should not modify the <code>return</code> statement');"
        },
        {
          "text":
            "You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements",
          "testString":
            "assert(!/case|switch|if/g.test(code), 'You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements'); "
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nfunction phoneticLookup(val) {\n  var result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\": \n      result = \"Adams\";\n      break;\n    case \"bravo\": \n      result = \"Boston\";\n      break;\n    case \"charlie\": \n      result = \"Chicago\";\n      break;\n    case \"delta\": \n      result = \"Denver\";\n      break;\n    case \"echo\": \n      result = \"Easy\";\n      break;\n    case \"foxtrot\": \n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\n// Change this value to test\nphoneticLookup(\"charlie\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Using Objects for Lookups",
      "dashedName": "using-objects-for-lookups"
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "description": [
        "Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.",
        "<strong>Example</strong>",
        "<blockquote>var myObj = {<br>  top: \"hat\",<br>  bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>",
        "<hr>",
        "Modify the function <code>checkObj</code> to test <code>myObj</code> for <code>checkProp</code>. If the property is found, return that property's value. If not, return <code>\"Not Found\"</code>."
      ],
      "tests": [
        {
          "text":
            "<code>checkObj(\"gift\")</code> should return  <code>\"pony\"</code>.",
          "testString":
            "assert(checkObj(\"gift\") === \"pony\", '<code>checkObj(\"gift\")</code> should return  <code>\"pony\"</code>.');"
        },
        {
          "text":
            "<code>checkObj(\"pet\")</code> should return  <code>\"kitten\"</code>.",
          "testString":
            "assert(checkObj(\"pet\") === \"kitten\", '<code>checkObj(\"pet\")</code> should return  <code>\"kitten\"</code>.');"
        },
        {
          "text":
            "<code>checkObj(\"house\")</code> should return  <code>\"Not Found\"</code>.",
          "testString":
            "assert(checkObj(\"house\") === \"Not Found\", '<code>checkObj(\"house\")</code> should return  <code>\"Not Found\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myObj = {\n  gift: \"pony\",\n  pet: \"kitten\",\n  bed: \"sleigh\"\n};\n\nfunction checkObj(checkProp) {\n  // Your Code Here\n  \n  return \"Change Me!\";\n}\n\n// Test your code by modifying these values\ncheckObj(\"gift\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Testing Objects for Properties",
      "dashedName": "testing-objects-for-properties"
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "description": [
        "Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.",
        "Here's an example of a complex data structure:",
        "<blockquote>var ourMusic = [<br>  {<br>    \"artist\": \"Daft Punk\",<br>    \"title\": \"Homework\",<br>    \"release_year\": 1997,<br>    \"formats\": [ <br>      \"CD\", <br>      \"Cassette\", <br>      \"LP\"<br>    ],<br>    \"gold\": true<br>  }<br>];</blockquote>",
        "This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>\"formats\"</code> array. If you want to add more album records, you can do this by adding records to the top level array.",
        "Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>\"artist\"</code> and a value of <code>\"Daft Punk\"</code>.",
        "<a href='http://www.json.org/' target=_blank>JavaScript Object Notation</a> or <code>JSON</code> is a related data interchange format used to store data.",
        "<blockquote>{<br>  \"artist\": \"Daft Punk\",<br>  \"title\": \"Homework\",<br>  \"release_year\": 1997,<br>  \"formats\": [ <br>    \"CD\",<br>    \"Cassette\",<br>    \"LP\"<br>  ],<br>  \"gold\": true<br>}</blockquote>",
        "<strong>Note</strong><br>You will need to place a comma after every object in the array, unless it is the last object in the array.",
        "<hr>",
        "Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings."
      ],
      "tests": [
        {
          "text": "<code>myMusic</code> should be an array",
          "testString":
            "assert(Array.isArray(myMusic), '<code>myMusic</code> should be an array');"
        },
        {
          "text": "<code>myMusic</code> should have at least two elements",
          "testString":
            "assert(myMusic.length > 1, '<code>myMusic</code> should have at least two elements');"
        },
        {
          "text": "<code>myMusic[1]</code> should be an object",
          "testString":
            "assert(typeof myMusic[1] === 'object', '<code>myMusic[1]</code> should be an object');"
        },
        {
          "text": "<code>myMusic[1]</code> should have at least 4 properties",
          "testString":
            "assert(Object.keys(myMusic[1]).length > 3, '<code>myMusic[1]</code> should have at least 4 properties');"
        },
        {
          "text":
            "<code>myMusic[1]</code> should contain an <code>artist</code> property which is a string",
          "testString":
            "assert(myMusic[1].hasOwnProperty('artist') && typeof myMusic[1].artist === 'string', '<code>myMusic[1]</code> should contain an <code>artist</code> property which is a string');"
        },
        {
          "text":
            "<code>myMusic[1]</code> should  contain a <code>title</code> property which is a string",
          "testString":
            "assert(myMusic[1].hasOwnProperty('title') && typeof myMusic[1].title === 'string', '<code>myMusic[1]</code> should  contain a <code>title</code> property which is a string');"
        },
        {
          "text":
            "<code>myMusic[1]</code> should contain a <code>release_year</code> property which is a number",
          "testString":
            "assert(myMusic[1].hasOwnProperty('release_year') && typeof myMusic[1].release_year === 'number', '<code>myMusic[1]</code> should contain a <code>release_year</code> property which is a number');"
        },
        {
          "text":
            "<code>myMusic[1]</code> should contain a <code>formats</code> property which is an array",
          "testString":
            "assert(myMusic[1].hasOwnProperty('formats') && Array.isArray(myMusic[1].formats), '<code>myMusic[1]</code> should contain a <code>formats</code> property which is an array');"
        },
        {
          "text":
            "<code>formats</code> should be an array of strings with at least two elements",
          "testString":
            "assert(myMusic[1].formats.every(function(item) { return (typeof item === \"string\")}) && myMusic[1].formats.length > 1, '<code>formats</code> should be an array of strings with at least two elements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n  // Add record here\n];\n",
          "head": "",
          "tail":
            "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
        }
      },
      "name": "Manipulating Complex Objects",
      "dashedName": "manipulating-complex-objects"
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "description": [
        "The sub-properties of objects can be accessed by chaining together the dot or bracket notation.",
        "Here is a nested object:",
        "<blockquote>var ourStorage = {<br>  \"desk\": {<br>    \"drawer\": \"stapler\"<br>  },<br>  \"cabinet\": {<br>    \"top drawer\": { <br>      \"folder1\": \"a file\",<br>      \"folder2\": \"secrets\"<br>    },<br>    \"bottom drawer\": \"soda\"<br>  }<br>};<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>",
        "<hr>",
        "Access the <code>myStorage</code> object and assign the contents of the <code>glove box</code> property to the <code>gloveBoxContents</code> variable. Use bracket notation for properties with a space in their name."
      ],
      "tests": [
        {
          "text": "<code>gloveBoxContents</code> should equal \"maps\"",
          "testString":
            "assert(gloveBoxContents === \"maps\", '<code>gloveBoxContents</code> should equal \"maps\"');"
        },
        {
          "text":
            "Use dot and bracket notation to access <code>myStorage</code>",
          "testString":
            "assert(/=\\s*myStorage\\.car\\.inside\\[\\s*(\"|')glove box\\1\\s*\\]/g.test(code), 'Use dot and bracket notation to access <code>myStorage</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myStorage = {\n  \"car\": {\n    \"inside\": {\n      \"glove box\": \"maps\",\n      \"passenger seat\": \"crumbs\"\n     },\n    \"outside\": {\n      \"trunk\": \"jack\"\n    }\n  }\n};\n\nvar gloveBoxContents = undefined; // Change this line\n",
          "head": "",
          "tail":
            "(function(x) { \n  if(typeof x != 'undefined') { \n    return \"gloveBoxContents = \" + x;\n  }\n  return \"gloveBoxContents is undefined\";\n})(gloveBoxContents);"
        }
      },
      "name": "Accessing Nested Objects",
      "dashedName": "accessing-nested-objects"
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "description": [
        "As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.",
        "Here is an example of how to access a nested array:",
        "<blockquote>var ourPets = [<br>  {<br>    animalType: \"cat\",<br>    names: [<br>      \"Meowzer\",<br>      \"Fluffy\",<br>      \"Kit-Cat\"<br>    ]<br>  },<br>  {<br>    animalType: \"dog\",<br>    names: [<br>      \"Spot\",<br>      \"Bowser\",<br>      \"Frankie\"<br>    ]<br>  }<br>];<br>ourPets[0].names[1]; // \"Fluffy\"<br>ourPets[1].names[0]; // \"Spot\"</blockquote>",
        "<hr>",
        "Retrieve the second tree from the variable <code>myPlants</code> using object dot and array bracket notation."
      ],
      "tests": [
        {
          "text": "<code>secondTree</code> should equal \"pine\"",
          "testString":
            "assert(secondTree === \"pine\", '<code>secondTree</code> should equal \"pine\"');"
        },
        {
          "text":
            "Use dot and bracket notation to access <code>myPlants</code>",
          "testString":
            "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code), 'Use dot and bracket notation to access <code>myPlants</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myPlants = [\n  { \n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }  \n];\n\n// Only change code below this line\n\nvar secondTree = \"\"; // Change this line\n",
          "head": "",
          "tail":
            "(function(x) { \n  if(typeof x != 'undefined') { \n    return \"secondTree = \" + x;\n  }\n  return \"secondTree is undefined\";\n})(secondTree);"
        }
      },
      "name": "Accessing Nested Arrays",
      "dashedName": "accessing-nested-arrays"
    },
    {
      "id": "56533eb9ac21ba0edf2244cf",
      "description": [
        "You are given a JSON object representing a part of your musical album collection. Each album has several properties and a unique id number as its key. Not all albums have complete information.",
        "Write a function which takes an album's <code>id</code> (like <code>2548</code>), a property <code>prop</code> (like <code>\"artist\"</code> or <code>\"tracks\"</code>), and a <code>value</code> (like <code>\"Addicted to Love\"</code>) to modify the data in this collection.",
        "If <code>prop</code> isn't <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), update or set the <code>value</code> for that record album's property.",
        "Your function must always return the entire collection object.",
        "There are several rules for handling incomplete data:",
        "If <code>prop</code> is <code>\"tracks\"</code> but the album doesn't have a <code>\"tracks\"</code> property, create an empty array before adding the new value to the album's corresponding property.",
        "If <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), push the <code>value</code> onto the end of the album's existing <code>tracks</code> array.",
        "If <code>value</code> is empty (<code>\"\"</code>), delete the given <code>prop</code> property from the album.",
        "<strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"accessing-objects-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.",
        "Push is an array method you can read about on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.",
        "You may refer back to <a href=\"manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher."
      ],
      "tests": [
        {
          "text":
            "After <code>updateRecords(5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be <code>\"ABBA\"</code>",
          "testString":
            "collection = collectionCopy; assert(updateRecords(5439, \"artist\", \"ABBA\")[5439][\"artist\"] === \"ABBA\", 'After <code>updateRecords(5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be <code>\"ABBA\"</code>');"
        },
        {
          "text":
            "After <code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have <code>\"Take a Chance on Me\"</code> as the last element.",
          "testString":
            "assert(updateRecords(5439, \"tracks\", \"Take a Chance on Me\")[5439][\"tracks\"].pop() === \"Take a Chance on Me\", 'After <code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have <code>\"Take a Chance on Me\"</code> as the last element.');"
        },
        {
          "text":
            "After <code>updateRecords(2548, \"artist\", \"\")</code>, <code>artist</code> should not be set",
          "testString":
            "updateRecords(2548, \"artist\", \"\"); assert(!collection[2548].hasOwnProperty(\"artist\"), 'After <code>updateRecords(2548, \"artist\", \"\")</code>, <code>artist</code> should not be set');"
        },
        {
          "text":
            "After <code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have <code>\"Addicted to Love\"</code> as the last element.",
          "testString":
            "assert(updateRecords(1245, \"tracks\", \"Addicted to Love\")[1245][\"tracks\"].pop() === \"Addicted to Love\", 'After <code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have <code>\"Addicted to Love\"</code> as the last element.');"
        },
        {
          "text":
            "After <code>updateRecords(2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have <code>\"1999\"</code> as the first element.",
          "testString":
            "assert(updateRecords(2468, \"tracks\", \"Free\")[2468][\"tracks\"][0] === \"1999\", 'After <code>updateRecords(2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have <code>\"1999\"</code> as the first element.');"
        },
        {
          "text":
            "After <code>updateRecords(2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set",
          "testString":
            "updateRecords(2548, \"tracks\", \"\"); assert(!collection[2548].hasOwnProperty(\"tracks\"), 'After <code>updateRecords(2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set');"
        },
        {
          "text":
            "After <code>updateRecords(1245, \"album\", \"Riptide\")</code>, <code>album</code> should be <code>\"Riptide\"</code>",
          "testString":
            "assert(updateRecords(1245, \"album\", \"Riptide\")[1245][\"album\"] === \"Riptide\", 'After <code>updateRecords(1245, \"album\", \"Riptide\")</code>, <code>album</code> should be <code>\"Riptide\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar collection = {\n    \"2548\": {\n      \"album\": \"Slippery When Wet\",\n      \"artist\": \"Bon Jovi\",\n      \"tracks\": [ \n        \"Let It Rock\", \n        \"You Give Love a Bad Name\" \n      ]\n    },\n    \"2468\": {\n      \"album\": \"1999\",\n      \"artist\": \"Prince\",\n      \"tracks\": [ \n        \"1999\", \n        \"Little Red Corvette\" \n      ]\n    },\n    \"1245\": {\n      \"artist\": \"Robert Palmer\",\n      \"tracks\": [ ]\n    },\n    \"5439\": {\n      \"album\": \"ABBA Gold\"\n    }\n};\n// Keep a copy of the collection for tests\nvar collectionCopy = JSON.parse(JSON.stringify(collection));\n\n// Only change code below this line\nfunction updateRecords(id, prop, value) {\n  \n  \n  return collection;\n}\n\n// Alter values below to test your code\nupdateRecords(5439, \"artist\", \"ABBA\");\n",
          "head": "",
          "tail":
            ";(function(x) { return \"collection = \\n\" + JSON.stringify(x, '\\n', 2); })(collection);"
        }
      },
      "name": "Record Collection",
      "dashedName": "record-collection"
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The first type of loop we will learn is called a \"<code>while</code>\" loop because it runs \"while\" a specified condition is true and stops once that condition is no longer true.",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>while(i &#60; 5) {<br>  ourArray.push(i);<br>  i++;<br>}</blockquote>",
        "Let's try getting a while loop to work by pushing values to an array.",
        "<hr>",
        "Push the numbers 0 through 4 to <code>myArray</code> using a <code>while</code> loop."
      ],
      "tests": [
        {
          "text": "You should be using a <code>while</code> loop for this.",
          "testString":
            "assert(code.match(/while/g), 'You should be using a <code>while</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[0,1,2,3,4]</code>.",
          "testString":
            "assert.deepEqual(myArray, [0,1,2,3,4], '<code>myArray</code> should equal <code>[0,1,2,3,4]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myArray = [];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Iterate with JavaScript While Loops",
      "dashedName": "iterate-with-javascript-while-loops"
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The most common type of JavaScript loop is called a \"<code>for loop</code>\" because it runs \"for\" a specific number of times.",
        "For loops are declared with three optional expressions separated by semicolons:",
        "<code>for ([initialization]; [condition]; [final-expression])</code>",
        "The <code>initialization</code> statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.",
        "The <code>condition</code> statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When <code>condition</code> is <code>false</code> at the start of the iteration, the loop will stop executing. This means if <code>condition</code> starts as <code>false</code>, your loop will never execute.",
        "The <code>final-expression</code> is executed at the end of each loop iteration, prior to the next <code>condition</code> check and is usually used to increment or decrement your loop counter.",
        "In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#60; 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our <code>final-expression</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 5; i++) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,1,2,3,4]</code>.",
        "<hr>",
        "Use a <code>for</code> loop to work to push the values 1 through 5 onto <code>myArray</code>."
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString":
            "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[1,2,3,4,5]</code>.",
          "testString":
            "assert.deepEqual(myArray, [1,2,3,4,5], '<code>myArray</code> should equal <code>[1,2,3,4,5]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [];\n\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\n\n// Setup\nvar myArray = [];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Iterate with JavaScript For Loops",
      "dashedName": "iterate-with-javascript-for-loops"
    },
    {
      "id": "56104e9e514f539506016a5c",
      "description": [
        "For loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.",
        "We'll start at <code>i = 0</code> and loop while <code>i &#60; 10</code>. We'll increment <code>i</code> by 2 each loop with <code>i += 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 10; i += 2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,2,4,6,8]</code>.",
        "Let's change our <code>initialization</code> so we can count by odd numbers.",
        "<hr>",
        "Push the odd numbers from 1 through 9 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString":
            "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[1,3,5,7,9]</code>.",
          "testString":
            "assert.deepEqual(myArray, [1,3,5,7,9], '<code>myArray</code> should equal <code>[1,3,5,7,9]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [];\n\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\n\n// Setup\nvar myArray = [];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Iterate Odd Numbers With a For Loop",
      "dashedName": "iterate-odd-numbers-with-a-for-loop"
    },
    {
      "id": "56105e7b514f539506016a5e",
      "description": [
        "A for loop can also count backwards, so long as we can define the right conditions.",
        "In order to count backwards by twos, we'll need to change our <code>initialization</code>, <code>condition</code>, and <code>final-expression</code>.",
        "We'll start at <code>i = 10</code> and loop while <code>i &#62; 0</code>. We'll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i=10; i &#62; 0; i-=2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[10,8,6,4,2]</code>.",
        "Let's change our <code>initialization</code> and <code>final-expression</code> so we can count backward by twos by odd numbers.",
        "<hr>",
        "Push the odd numbers from 9 through 1 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "tests": [
        {
          "text": "You should be using a <code>for</code> loop for this.",
          "testString":
            "assert(code.match(/for\\s*\\(/g).length > 1, 'You should be using a <code>for</code> loop for this.');"
        },
        {
          "text": "You should be using the array method <code>push</code>.",
          "testString":
            "assert(code.match(/myArray.push/), 'You should be using the array method <code>push</code>.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[9,7,5,3,1]</code>.",
          "testString":
            "assert.deepEqual(myArray, [9,7,5,3,1], '<code>myArray</code> should equal <code>[9,7,5,3,1]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArray = [];\n\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\n\n// Setup\nvar myArray = [];\n\n// Only change code below this line.\n\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Count Backwards With a For Loop",
      "dashedName": "count-backwards-with-a-for-loop"
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "description": [
        "A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:",
        "<blockquote>var arr = [10,9,8,7,6];<br>for (var i = 0; i < arr.length; i++) {<br>   console.log(arr[i]);<br>}</blockquote>",
        "Remember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our <dfn>condition</dfn> for this loop is <code>i < arr.length</code>, which stops when <code>i</code> is at length - 1.",
        "<hr>",
        "Declare and initialize a variable <code>total</code> to <code>0</code>. Use a <code>for</code> loop to add the value of each element of the <code>myArr</code> array to <code>total</code>."
      ],
      "tests": [
        {
          "text": "<code>total</code> should be declared and initialized to 0",
          "testString":
            "assert(code.match(/var.*?total\\s*=\\s*0.*?;/), '<code>total</code> should be declared and initialized to 0');"
        },
        {
          "text": "<code>total</code> should equal 20",
          "testString":
            "assert(total === 20, '<code>total</code> should equal 20');"
        },
        {
          "text":
            "You should use a <code>for</code> loop to iterate through <code>myArr</code>",
          "testString":
            "assert(code.match(/for\\s*\\(/g).length > 1 && code.match(/myArr\\s*\\[/), 'You should use a <code>for</code> loop to iterate through <code>myArr</code>');"
        },
        {
          "text": "Do not set <code>total</code> to 20 directly",
          "testString":
            "assert(!code.match(/total[\\s\\+\\-]*=\\s*(\\d(?!\\s*[;,])|[1-9])/g), 'Do not set <code>total</code> to 20 directly');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nvar ourArr = [ 9, 10, 11, 12];\nvar ourTotal = 0;\n\nfor (var i = 0; i < ourArr.length; i++) {\n  ourTotal += ourArr[i];\n}\n\n// Setup\nvar myArr = [ 2, 3, 4, 5, 6];\n\n// Only change code below this line\n\n",
          "head": "",
          "tail":
            "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
        }
      },
      "name": "Iterate Through an Array with a For Loop",
      "dashedName": "iterate-through-an-array-with-a-for-loop"
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "description": [
        "If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:",
        "<blockquote>var arr = [<br>  [1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>  for (var j=0; j &lt; arr[i].length; j++) {<br>    console.log(arr[i][j]);<br>  }<br>}</blockquote>",
        "This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.",
        "<hr>",
        "Modify function <code>multiplyAll</code> so that it multiplies the <code>product</code> variable by each number in the sub-arrays of <code>arr</code>"
      ],
      "tests": [
        {
          "text":
            "<code>multiplyAll([[1],[2],[3]])</code> should return <code>6</code>",
          "testString":
            "assert(multiplyAll([[1],[2],[3]]) === 6, '<code>multiplyAll([[1],[2],[3]])</code> should return <code>6</code>');"
        },
        {
          "text":
            "<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> should return <code>5040</code>",
          "testString":
            "assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, '<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> should return <code>5040</code>');"
        },
        {
          "text":
            "<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code> should return <code>54</code>",
          "testString":
            "assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, '<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code> should return <code>54</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function multiplyAll(arr) {\n  var product = 1;\n  // Only change code below this line\n  \n  // Only change code above this line\n  return product;\n}\n\n// Modify values below to test your code\nmultiplyAll([[1,2],[3,4],[5,6,7]]);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Nesting For Loops",
      "dashedName": "nesting-for-loops"
    },
    {
      "id": "5a2efd662fb457916e1fe604",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The next type of loop you will learn is called a \"<code>do...while</code>\" loop because it first will \"<code>do</code>\" one pass of the code inside the loop no matter what, and then it runs \"<code>while</code>\" a specified condition is true and stops once that condition is no longer true. Let's look at an example.",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>do {<br>  ourArray.push(i);<br>  i++;<br>} while (i < 5);</blockquote>",
        "This behaves just as you would expect with any other type of loop, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let's see this in action.",
        "Here is a regular while loop that will run the code in the loop as long as <code>i < 5</code>.",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>while (i < 5) {<br>  ourArray.push(i);<br>  i++;<br>}</blockquote>",
        "Notice that we initialize the value of <code>i</code> to be 5. When we execute the next line, we notice that <code>i</code> is not less than 5. So we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with nothing added to it, so it will still look like this <code>[]</code> when all the code in the example above finishes running.",
        "Now, take a look at a <code>do...while</code> loop.",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>do {<br>  ourArray.push(i);<br>  i++;<br>} while (i < 5);</blockquote>",
        "In this case, we initialize the value of <code>i</code> as 5, just like we did with the while loop. When we get to the next line, there is no check for the value of <code>i</code>, so we go to the code inside the curly braces and execute it. We will add one element to the array and increment <code>i</code> before we get to the condition check. Then, when we get to checking if <code>i < 5</code> see that <code>i</code> is now 6, which fails the conditional check. So we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>.",
        "Essentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once.",
        "Let's try getting a <code>do...while</code> loop to work by pushing values to an array.",
        "<hr>",
        "Change the <code>while</code> loop in the code to a <code>do...while</code> loop so that the loop will push the number 10 to <code>myArray</code>, and <code>i</code> will be equal to <code>11</code> when your code finishes running."
      ],
      "tests": [
        {
          "text":
            "You should be using a <code>do...while</code> loop for this.",
          "testString":
            "assert(code.match(/do/g), 'You should be using a <code>do...while</code> loop for this.');"
        },
        {
          "text": "<code>myArray</code> should equal <code>[10]</code>.",
          "testString":
            "assert.deepEqual(myArray, [10], '<code>myArray</code> should equal <code>[10]</code>.');"
        },
        {
          "text": "<code>i</code> should equal <code>11</code>",
          "testString":
            "assert.deepEqual(i, 11, '<code>i</code> should equal <code>11</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Setup\nvar myArray = [];\nvar i = 10;\n\n// Only change code below this line.\n\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}\n",
          "head": "",
          "tail":
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
        }
      },
      "name": "Iterate with JavaScript DoWhile Loops",
      "dashedName": "iterate-with-javascript-dowhile-loops"
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "description": [
        "We have an array of objects representing different people in our contacts lists.",
        "A <code>lookUpProfile</code> function that takes <code>name</code> and a property (<code>prop</code>) as arguments has been pre-written for you.",
        "The function should check if <code>name</code> is an actual contact's <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.",
        "If both are true, then return the \"value\" of that property.",
        "If <code>name</code> does not correspond to any contacts then return <code>\"No such contact\"</code>",
        "If <code>prop</code> does not correspond to any valid properties of a contact found to match <code>name</code> then return <code>\"No such property\"</code>"
      ],
      "tests": [
        {
          "text":
            "<code>\"Kristian\", \"lastName\"</code> should return <code>\"Vos\"</code>",
          "testString":
            "assert(lookUpProfile('Kristian','lastName') === \"Vos\", '<code>\"Kristian\", \"lastName\"</code> should return <code>\"Vos\"</code>');"
        },
        {
          "text":
            "<code>\"Sherlock\", \"likes\"</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code>",
          "testString":
            "assert.deepEqual(lookUpProfile(\"Sherlock\", \"likes\"), [\"Intriguing Cases\", \"Violin\"], '<code>\"Sherlock\", \"likes\"</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code>');"
        },
        {
          "text": "<code>\"Harry\",\"likes\"</code> should return an array",
          "testString":
            "assert(typeof lookUpProfile(\"Harry\", \"likes\") === \"object\", '<code>\"Harry\",\"likes\"</code> should return an array');"
        },
        {
          "text":
            "<code>\"Bob\", \"number\"</code> should return \"No such contact\"",
          "testString":
            "assert(lookUpProfile(\"Bob\", \"number\") === \"No such contact\", '<code>\"Bob\", \"number\"</code> should return \"No such contact\"');"
        },
        {
          "text":
            "<code>\"Bob\", \"potato\"</code> should return \"No such contact\"",
          "testString":
            "assert(lookUpProfile(\"Bob\", \"potato\") === \"No such contact\", '<code>\"Bob\", \"potato\"</code> should return \"No such contact\"');"
        },
        {
          "text":
            "<code>\"Akira\", \"address\"</code> should return \"No such property\"",
          "testString":
            "assert(lookUpProfile(\"Akira\", \"address\") === \"No such property\", '<code>\"Akira\", \"address\"</code> should return \"No such property\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "//Setup\nvar contacts = [\n    {\n        \"firstName\": \"Akira\",\n        \"lastName\": \"Laine\",\n        \"number\": \"0543236543\",\n        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]\n    },\n    {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Potter\",\n        \"number\": \"0994372684\",\n        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]\n    },\n    {\n        \"firstName\": \"Sherlock\",\n        \"lastName\": \"Holmes\",\n        \"number\": \"0487345643\",\n        \"likes\": [\"Intriguing Cases\", \"Violin\"]\n    },\n    {\n        \"firstName\": \"Kristian\",\n        \"lastName\": \"Vos\",\n        \"number\": \"unknown\",\n        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]\n    }\n];\n\n\nfunction lookUpProfile(name, prop){\n// Only change code below this line\n\n// Only change code above this line\n}\n\n// Change these values to test your function\nlookUpProfile(\"Akira\", \"likes\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Profile Lookup",
      "dashedName": "profile-lookup"
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "description": [
        "Random numbers are useful for creating random behavior.",
        "JavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and not quite up to <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never quite return a <code>1</code>",
        "<strong>Note</strong><br>Like <a href='storing-values-with-the-assignment-operator' target='_blank'>Storing Values with the Equal Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can <code>return</code> the value of the <code>Math.random()</code> function.",
        "<hr>",
        "Change <code>randomFraction</code> to return a random number instead of returning <code>0</code>."
      ],
      "tests": [
        {
          "text": "<code>randomFraction</code> should return a random number.",
          "testString":
            "assert(typeof randomFraction() === \"number\", '<code>randomFraction</code> should return a random number.');"
        },
        {
          "text":
            "The number returned by <code>randomFraction</code> should be a decimal.",
          "testString":
            "assert((randomFraction()+''). match(/\\./g), 'The number returned by <code>randomFraction</code> should be a decimal.');"
        },
        {
          "text":
            "You should be using <code>Math.random</code> to generate the random decimal number.",
          "testString":
            "assert(code.match(/Math\\.random/g).length >= 0, 'You should be using <code>Math.random</code> to generate the random decimal number.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function randomFraction() {\n\n  // Only change code below this line.\n\n  return 0;\n\n  // Only change code above this line.\n}",
          "head": "",
          "tail": "(function(){return randomFraction();})();"
        }
      },
      "name": "Generate Random Fractions with JavaScript",
      "dashedName": "generate-random-fractions-with-javascript"
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "description": [
        "It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.",
        "<ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol>",
        "Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.",
        "Putting everything together, this is what our code looks like:",
        "<code>Math.floor(Math.random() * 20);</code>",
        "We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.",
        "<hr>",
        "Use this technique to generate and return a random whole number between <code>0</code> and <code>9</code>."
      ],
      "tests": [
        {
          "text":
            "The result of <code>randomWholeNum</code> should be a whole number.",
          "testString":
            "assert(typeof randomWholeNum() === \"number\" && (function(){var r = randomWholeNum();return Math.floor(r) === r;})(), 'The result of <code>randomWholeNum</code> should be a whole number.');"
        },
        {
          "text":
            "You should be using <code>Math.random</code> to generate a random number.",
          "testString":
            "assert(code.match(/Math.random/g).length > 1, 'You should be using <code>Math.random</code> to generate a random number.');"
        },
        {
          "text":
            "You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.",
          "testString":
            "assert(code.match(/\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10[\\D]\\s*?/g) || code.match(/\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?/g), 'You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.');"
        },
        {
          "text":
            "You should use <code>Math.floor</code> to remove the decimal part of the number.",
          "testString":
            "assert(code.match(/Math.floor/g).length > 1, 'You should use <code>Math.floor</code> to remove the decimal part of the number.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);\n\nfunction randomWholeNum() {\n\n  // Only change code below this line.\n\n  return Math.random();\n}",
          "head": "",
          "tail": "(function(){return randomWholeNum();})();"
        }
      },
      "name": "Generate Random Whole Numbers with JavaScript",
      "dashedName": "generate-random-whole-numbers-with-javascript"
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "description": [
        "Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.",
        "To do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.",
        "Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:",
        "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
        "<hr>",
        "Create a function called <code>randomRange</code> that takes a range <code>myMin</code> and <code>myMax</code> and returns a random number that's greater than or equal to <code>myMin</code>, and is less than or equal to <code>myMax</code>, inclusive."
      ],
      "tests": [
        {
          "text":
            "The lowest random number that can be generated by <code>randomRange</code> should be equal to your minimum number, <code>myMin</code>.",
          "testString":
            "assert(calcMin === 5, 'The lowest random number that can be generated by <code>randomRange</code> should be equal to your minimum number, <code>myMin</code>.');"
        },
        {
          "text":
            "The highest random number that can be generated by <code>randomRange</code> should be equal to your maximum number, <code>myMax</code>.",
          "testString":
            "assert(calcMax === 15, 'The highest random number that can be generated by <code>randomRange</code> should be equal to your maximum number, <code>myMax</code>.');"
        },
        {
          "text":
            "The random number generated by <code>randomRange</code> should be an integer, not a decimal.",
          "testString":
            "assert(randomRange(0,1) % 1 === 0 , 'The random number generated by <code>randomRange</code> should be an integer, not a decimal.');"
        },
        {
          "text":
            "<code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.",
          "testString":
            "assert((function(){if(code.match(/myMax/g).length > 1 && code.match(/myMin/g).length > 2 && code.match(/Math.floor/g) && code.match(/Math.random/g)){return true;}else{return false;}})(), '<code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Example\nfunction ourRandomRange(ourMin, ourMax) {\n\n  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;\n}\n\nourRandomRange(1, 9);\n\n// Only change code below this line.\n\nfunction randomRange(myMin, myMax) {\n\n  return 0; // Change this line\n\n}\n\n// Change these values to test your function\nvar myRandom = randomRange(5, 15);",
          "head": "",
          "tail":
            "var calcMin = 100;\nvar calcMax = -100;\nfor(var i = 0; i < 100; i++) {\n  var result = randomRange(5,15);\n  calcMin = Math.min(calcMin, result);\n  calcMax = Math.max(calcMax, result);\n}\n(function(){\n  if(typeof myRandom === 'number') {\n    return \"myRandom = \" + myRandom;\n  } else {\n    return \"myRandom undefined\";\n  }\n})();"
        }
      },
      "name": "Generate Random Whole Numbers within a Range",
      "dashedName": "generate-random-whole-numbers-within-a-range"
    },
    {
      "id": "587d7b7e367417b2b2512b23",
      "description": [
        "The <code>parseInt()</code> function parses a string and returns an integer. Here's an example:",
        "<code>var a = parseInt(\"007\");</code>",
        "The above function converts the string \"007\" to an integer 7. If the first character in the string can't be converted into a number, then it returns <code>NaN</code>.",
        "<hr>",
        "Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts the input string <code>str</code> into an integer, and returns it."
      ],
      "tests": [
        {
          "text":
            "<code>convertToInteger</code> should use the <code>parseInt()</code> function",
          "testString":
            "assert(/parseInt/g.test(code), '<code>convertToInteger</code> should use the <code>parseInt()</code> function');"
        },
        {
          "text":
            "<code>convertToInteger(\"56\")</code> should return a number",
          "testString":
            "assert(typeof(convertToInteger(\"56\")) === \"number\", '<code>convertToInteger(\"56\")</code> should return a number');"
        },
        {
          "text": "<code>convertToInteger(\"56\")</code> should return 56",
          "testString":
            "assert(convertToInteger(\"56\") === 56, '<code>convertToInteger(\"56\")</code> should return 56');"
        },
        {
          "text": "<code>convertToInteger(\"77\")</code> should return 77",
          "testString":
            "assert(convertToInteger(\"77\") === 77, '<code>convertToInteger(\"77\")</code> should return 77');"
        },
        {
          "text":
            "<code>convertToInteger(\"JamesBond\")</code> should return NaN",
          "testString":
            "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code> should return NaN');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertToInteger(str) {\n  \n}\n\nconvertToInteger(\"56\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the parseInt Function",
      "dashedName": "use-the-parseint-function"
    },
    {
      "id": "587d7b7e367417b2b2512b22",
      "description": [
        "The <code>parseInt()</code> function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.",
        "The function call looks like:",
        "<code>parseInt(string, radix);</code>",
        "And here's an example:",
        "<code>var a = parseInt(\"11\", 2);</code>",
        "The radix variable says that \"11\" is in the binary system, or base 2. This example converts the string \"11\" to an integer 3.",
        "<hr>",
        "Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts a binary number to an integer and returns it."
      ],
      "tests": [
        {
          "text":
            "<code>convertToInteger</code> should use the <code>parseInt()</code> function",
          "testString":
            "assert(/parseInt/g.test(code), '<code>convertToInteger</code> should use the <code>parseInt()</code> function');"
        },
        {
          "text":
            "<code>convertToInteger(\"10011\")</code> should return a number",
          "testString":
            "assert(typeof(convertToInteger(\"10011\")) === \"number\", '<code>convertToInteger(\"10011\")</code> should return a number');"
        },
        {
          "text": "<code>convertToInteger(\"10011\")</code> should return 19",
          "testString":
            "assert(convertToInteger(\"10011\") === 19, '<code>convertToInteger(\"10011\")</code> should return 19');"
        },
        {
          "text": "<code>convertToInteger(\"111001\")</code> should return 57",
          "testString":
            "assert(convertToInteger(\"111001\") === 57, '<code>convertToInteger(\"111001\")</code> should return 57');"
        },
        {
          "text":
            "<code>convertToInteger(\"JamesBond\")</code> should return NaN",
          "testString":
            "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code> should return NaN');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertToInteger(str) {\n  \n}\n\nconvertToInteger(\"10011\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the parseInt Function with a Radix",
      "dashedName": "use-the-parseint-function-with-a-radix"
    },
    {
      "id": "587d7b7e367417b2b2512b24",
      "description": [
        "The <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.",
        "The syntax is:",
        "<code>condition ? statement-if-true : statement-if-false;</code>",
        "The following function uses an if-else statement to check a condition:",
        "<blockquote>function findGreater(a, b) {<br>  if(a > b) {<br>    return \"a is greater\";<br>  }<br>  else {<br>    return \"b is greater\";<br>  }<br>}</blockquote>",
        "This can be re-written using the <code>conditional operator</code>:",
        "<blockquote>function findGreater(a, b) {<br>  return a > b ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "Use the <code>conditional operator</code> in the <code>checkEqual</code> function to check if two numbers are equal or not. The function should return either true or false."
      ],
      "tests": [
        {
          "text":
            "<code>checkEqual</code> should use the <code>conditional operator</code>",
          "testString":
            "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkEqual</code> should use the <code>conditional operator</code>');"
        },
        {
          "text": "<code>checkEqual(1, 2)</code> should return false",
          "testString":
            "assert(checkEqual(1, 2) === false, '<code>checkEqual(1, 2)</code> should return false');"
        },
        {
          "text": "<code>checkEqual(1, 1)</code> should return true",
          "testString":
            "assert(checkEqual(1, 1) === true, '<code>checkEqual(1, 1)</code> should return true');"
        },
        {
          "text": "<code>checkEqual(1, -1)</code> should return false",
          "testString":
            "assert(checkEqual(1, -1) === false, '<code>checkEqual(1, -1)</code> should return false');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function checkEqual(a, b) {\n  \n}\n\ncheckEqual(1, 2);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the Conditional Ternary Operator",
      "dashedName": "use-the-conditional-ternary-operator"
    },
    {
      "id": "587d7b7e367417b2b2512b21",
      "description": [
        "In the previous challenge, you used a single <code>conditional operator</code>. You can also chain them together to check for multiple conditions.",
        "The following function uses if, else if, and else statements to check multiple conditions:",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>  if(a === b) {<br>    return \"a and b are equal\";<br>  }<br>  else if(a > b) {<br>    return \"a is greater\";<br>  }<br>  else {<br>    return \"b is greater\";<br>  }<br>}</blockquote>",
        "The above function can be re-written using multiple <code>conditional operators</code>:",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>  return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "Use multiple <code>conditional operators</code> in the <code>checkSign</code> function to check if a number is positive, negative or zero."
      ],
      "tests": [
        {
          "text":
            "<code>checkSign</code> should use multiple <code>conditional operators</code>",
          "testString":
            "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkSign</code> should use multiple <code>conditional operators</code>');"
        },
        {
          "text":
            "<code>checkSign(10)</code> should return \"positive\". Note that capitalization matters",
          "testString":
            "assert(checkSign(10) === 'positive', '<code>checkSign(10)</code> should return \"positive\". Note that capitalization matters');"
        },
        {
          "text":
            "<code>checkSign(-12)</code> should return \"negative\". Note that capitalization matters",
          "testString":
            "assert(checkSign(-12) === 'negative', '<code>checkSign(-12)</code> should return \"negative\". Note that capitalization matters');"
        },
        {
          "text":
            "<code>checkSign(0)</code> should return \"zero\". Note that capitalization matters",
          "testString":
            "assert(checkSign(0) === 'zero', '<code>checkSign(0)</code> should return \"zero\". Note that capitalization matters');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function checkSign(num) {\n  \n}\n\ncheckSign(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Multiple Conditional Ternary Operators",
      "dashedName": "use-multiple-conditional-ternary-operators"
    },
    {
      "id": "587d7b83367417b2b2512b33",
      "description": [
        "Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.",
        "You can find Developer tools in your Chrome's menu or Web Console in FireFox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.",
        "The <code>console.log()</code> method, which \"prints\" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.",
        "Here's an example to print 'Hello world!' to the console:",
        "<code>console.log('Hello world!');</code>",
        "<hr>",
        "Use the <code>console.log()</code> method to print the value of the variable <code>a</code> where noted in the code."
      ],
      "tests": [
        {
          "text":
            "Your code should use <code>console.log()</code> to check the value of the variable <code>a</code>.",
          "testString":
            "assert(code.match(/console\\.log\\(a\\)/g), 'Your code should use <code>console.log()</code> to check the value of the variable <code>a</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let a = 5;\nlet b = 1;\na++;\n// Add your code below this line\n\n\nlet sumAB = a + b;\nconsole.log(sumAB);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the JavaScript Console to Check the Value of a Variable",
      "dashedName":
        "use-the-javascript-console-to-check-the-value-of-a-variable"
    },
    {
      "id": "587d7b83367417b2b2512b37",
      "description": [
        "You may have noticed that some freeCodeCamp JavaScript challenges include their own console.  This console behaves a little differently than the browser console you used in the last challenge.",
        "The following challenge is meant to highlight some of the differences between the freeCodeCamp console and the browser console.",
        "First, the browser console.  When you load and run an ordinary JavaScript file in your browser the <code>console.log()</code> statements will print exactly what you tell them to print to the browser console the exact number of times you requested. In your in-browser text editor the process is slightly different and can be confusing at first.",
        "Values passed to <code>console.log()</code> in the text editor block run each set of tests as well as one more time for any function calls that you have in you code.",
        "This lends itself to some interesting behavior and might trip you up in the beginning, because a logged value that you expect to see only once may print out many more times depending on the number of tests and the values being passed to those tests.",
        "If you would like to see only your single output and not have to worry about running through the test cycles, you can use <code>console.clear()</code>.",
        "<hr>",
        "Use <code>console.log()</code> to print the variables in the code where indicated.",
        ""
      ],
      "tests": [
        {
          "text":
            "Use <code>console.log()</code> to print the <code>outputTwice</code> variable.  In your Browser Console this should print out the value of the variable two times.",
          "testString":
            "assert(code.match(/console\\.log\\(outputTwo\\)/g), 'Use <code>console.log()</code> to print the <code>outputTwice</code> variable.  In your Browser Console this should print out the value of the variable two times.');"
        },
        {
          "text":
            "Use <code>console.log()</code> to print the <code>outputOne</code> variable.",
          "testString":
            "assert(code.match(/console\\.log\\(outputOne\\)/g), 'Use <code>console.log()</code> to print the <code>outputOne</code> variable.');"
        },
        {
          "text":
            "Use <code>console.clear()</code> to modify your output so that <code>outputOne</code> variable only outputs once.",
          "testString":
            "assert(code.match(/(?<!\\/\\/ Use )console\\.clear\\(\\)/g), 'Use <code>console.clear()</code> to modify your output so that <code>outputOne</code> variable only outputs once.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// Open your browser console\nlet outputTwo = \"This will print to the browser console 2 times\";\n// Use console.log() to print the outputTwo variable\n\n\nlet outputOne = \"Try to get this to log only once to the browser console\";\n// Use console.clear() in the next line to print the outputOne only once\n\n\n// Use console.log() to print the outputOne variable\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Understanding the Differences between the freeCodeCamp and Browser Console",
      "dashedName":
        "understanding-the-differences-between-the-freecodecamp-and-browser-console"
    },
    {
      "id": "587d7b84367417b2b2512b34",
      "description": [
        "You can use <code>typeof</code> to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Especially take care when you're accessing and working with external data in the form of a JavaScript object (JSON).",
        "Here are some examples using <code>typeof</code>:",
        "<blockquote>console.log(typeof \"\"); // outputs \"string\"<br>console.log(typeof 0); // outputs \"number\"<br>console.log(typeof []); // outputs \"object\"<br>console.log(typeof {}); // outputs \"object\"</blockquote>",
        "JavaScript recognizes six primitive (immutable) data types: <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, and <code>Symbol</code> (new with ES6) and one type for mutable items: <code>Object</code>. Note that in JavaScript, arrays are technically a type of object.",
        "<hr>",
        "Add two <code>console.log()</code> statements to check the <code>typeof</code> each of the two variables <code>seven</code> and <code>three</code> in the code."
      ],
      "tests": [
        {
          "text":
            "Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.",
          "testString":
            "assert(code.match(/console\\.log\\(typeof[\\( ].*\\)?\\)/g).length == 2, 'Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.');"
        },
        {
          "text":
            "Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.",
          "testString":
            "assert(code.match(/typeof[\\( ]seven\\)?/g), 'Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.');"
        },
        {
          "text":
            "Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.",
          "testString":
            "assert(code.match(/typeof[\\( ]three\\)?/g), 'Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Add your code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use typeof to Check the Type of a Variable",
      "dashedName": "use-typeof-to-check-the-type-of-a-variable"
    },
    {
      "id": "587d7b84367417b2b2512b35",
      "description": [
        "The <code>console.log()</code> and <code>typeof</code> methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.",
        "Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. JavaScript variable and function names are case-sensitive.",
        "<hr>",
        "Fix the two spelling errors in the code so the <code>netWorkingCapital</code> calculation works."
      ],
      "tests": [
        {
          "text":
            "Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".",
          "testString":
            "assert(netWorkingCapital === 2, 'Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".');"
        },
        {
          "text":
            "There should be no instances of mis-spelled variables in the code.",
          "testString":
            "assert(!code.match(/recievables/g), 'There should be no instances of mis-spelled variables in the code.');"
        },
        {
          "text":
            "The <code>receivables</code> variable should be declared and used properly in the code.",
          "testString":
            "assert(code.match(/receivables/g).length == 2, 'The <code>receivables</code> variable should be declared and used properly in the code.');"
        },
        {
          "text":
            "There should be no instances of mis-spelled variables in the code.",
          "testString":
            "assert(!code.match(/payable;/g), 'There should be no instances of mis-spelled variables in the code.');"
        },
        {
          "text":
            "The <code>payables</code> variable should be declared and used properly in the code.",
          "testString":
            "assert(code.match(/payables/g).length == 2, 'The <code>payables</code> variable should be declared and used properly in the code.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Catch Misspelled Variable and Function Names",
      "dashedName": "catch-misspelled-variable-and-function-names"
    },
    {
      "id": "587d7b84367417b2b2512b36",
      "description": [
        "Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.",
        "One way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.",
        "<hr>",
        "Fix the two pair errors in the code."
      ],
      "tests": [
        {
          "text": "Your code should fix the missing piece of the array.",
          "testString":
            "assert(code.match(/myArray\\s*?=\\s*?\\[\\s*?1\\s*?,\\s*?2\\s*?,\\s*?3\\s*?\\];/g), 'Your code should fix the missing piece of the array.');"
        },
        {
          "text":
            "Your code should fix the missing piece of the <code>.reduce()</code> method. The console output should show that \"Sum of array values is: 6\".",
          "testString":
            "assert(arraySum === 6, 'Your code should fix the missing piece of the <code>.reduce()</code> method. The console output should show that \"Sum of array values is: 6\".');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let myArray = [1, 2, 3;\nlet arraySum = myArray.reduce((previous, current =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Catch Unclosed Parentheses Brackets Braces and Quotes",
      "dashedName": "catch-unclosed-parentheses-brackets-braces-and-quotes"
    },
    {
      "id": "587d7b84367417b2b2512b37",
      "description": [
        "JavaScript allows the use of both single ('') and double (\"\") quotes to declare a string. Deciding which one to use generally comes down to personal preference, with some exceptions.",
        "Having two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.",
        "Here are some examples of mixing quotes:",
        "<blockquote>// These are correct:<br>const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";<br>const quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";<br>// This is incorrect:<br>const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';</blockquote>",
        "Of course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (\\) escape character:",
        "<blockquote>// Correct use of same quotes:<br>const allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';</blockquote>",
        "<hr>",
        "Fix the string so it either uses different quotes for the <code>href</code> value, or escape the existing ones. Keep the double quote marks around the entire string."
      ],
      "tests": [
        {
          "text":
            "Your code should fix the quotes around the <code>href</code> value \"#Home\" by either changing or escaping them.",
          "testString":
            "assert(code.match(/<a href=\\s*?('|\\\\\")#Home\\1\\s*?>/g), 'Your code should fix the quotes around the <code>href</code> value \"#Home\" by either changing or escaping them.');"
        },
        {
          "text":
            "Your code should keep the double quotes around the entire string.",
          "testString":
            "assert(code.match(/\"<p>.*?<\\/p>\";/g), 'Your code should keep the double quotes around the entire string.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let innerHtml = \"<p>Click here to <a href=\"#Home\">return home</a></p>\";\nconsole.log(innerHtml);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Catch Mixed Usage of Single and Double Quotes",
      "dashedName": "catch-mixed-usage-of-single-and-double-quotes"
    },
    {
      "id": "587d7b85367417b2b2512b38",
      "description": [
        "Branching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.",
        "This logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.",
        "As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).",
        "The code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in JavaScript evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.",
        "<blockquote>let x = 1;<br>let y = 2;<br>if (x = y) {<br>&nbsp;&nbsp;// this code block will run for any value of y (unless y were originally set as a falsy)<br>} else {<br>&nbsp;&nbsp;// this code block is what should run (but won't) in this example<br>}</blockquote>",
        "<hr>",
        "Fix the condition so the program runs the right branch, and the appropriate value is assigned to <code>result</code>."
      ],
      "tests": [
        {
          "text":
            "Your code should fix the condition so it checks for equality, instead of using assignment.",
          "testString":
            "assert(result == \"Not equal!\", 'Your code should fix the condition so it checks for equality, instead of using assignment.');"
        },
        {
          "text":
            "The condition can use either <code>==</code> or <code>===</code> to test for equality.",
          "testString":
            "assert(code.match(/x\\s*?===?\\s*?y/g), 'The condition can use either <code>==</code> or <code>===</code> to test for equality.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Catch Use of Assignment Operator Instead of Equality Operator",
      "dashedName":
        "catch-use-of-assignment-operator-instead-of-equality-operator"
    },
    {
      "id": "587d7b85367417b2b2512b39",
      "description": [
        "When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.",
        "The variables in the following example are different:",
        "<blockquote>function myFunction() {<br>&nbsp;&nbsp;return \"You rock!\";<br>}<br>let varOne = myFunction; // set to equal a function<br>let varTwo = myFunction(); // set to equal the string \"You rock!\"</blockquote>",
        "<hr>",
        "Fix the code so the variable <code>result</code> is set to the value returned from calling the function <code>getNine</code>."
      ],
      "tests": [
        {
          "text":
            "Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.",
          "testString":
            "assert(result == 9, 'Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.');"
        },
        {
          "text": "Your code should call the <code>getNine</code> function.",
          "testString":
            "assert(code.match(/getNine\\(\\)/g).length == 2, 'Your code should call the <code>getNine</code> function.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Catch Missing Open and Closing Parenthesis After a Function Call",
      "dashedName":
        "catch-missing-open-and-closing-parenthesis-after-a-function-call"
    },
    {
      "id": "587d7b85367417b2b2512b3a",
      "description": [
        "Continuing the discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.",
        "<hr>",
        "The function <code>raiseToPower</code> raises a base to an exponent. Unfortunately, it's not called properly - fix the code so the value of <code>power</code> is the expected 8."
      ],
      "tests": [
        {
          "text":
            "Your code should fix the variable <code>power</code> so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.",
          "testString":
            "assert(power == 8, 'Your code should fix the variable <code>power</code> so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.');"
        },
        {
          "text":
            "Your code should use the correct order of the arguments for the <code>raiseToPower</code> function call.",
          "testString":
            "assert(code.match(/raiseToPower\\(\\s*?base\\s*?,\\s*?exp\\s*?\\);/g), 'Your code should use the correct order of the arguments for the <code>raiseToPower</code> function call.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(exp, base);\nconsole.log(power);",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Catch Arguments Passed in the Wrong Order When Calling a Function",
      "dashedName":
        "catch-arguments-passed-in-the-wrong-order-when-calling-a-function"
    },
    {
      "id": "587d7b86367417b2b2512b3b",
      "description": [
        "<code>Off by one errors</code> (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print <code>undefined</code>.",
        "When you use string or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:",
        "<blockquote>let alphabet = \"abcdefghijklmnopqrstuvwxyz\";<br>let len = alphabet.length;<br>for (let i = 0; i <= len; i++) {<br>&nbsp;&nbsp;// loops one too many times at the end<br>&nbsp;&nbsp;console.log(alphabet[i]);<br>}<br>for (let j = 1; j < len; j++) {<br>&nbsp;&nbsp;// loops one too few times and misses the first character at index 0<br>&nbsp;&nbsp;console.log(alphabet[j]);<br>}<br>for (let k = 0; k < len; k++) {<br>&nbsp;&nbsp;// Goldilocks approves - this is just right<br>&nbsp;&nbsp;console.log(alphabet[k]);<br>}</blockquote>",
        "<hr>",
        "Fix the two indexing errors in the following function so all the numbers 1 through 5 are printed to the console."
      ],
      "tests": [
        {
          "text":
            "Your code should set the initial condition of the loop so it starts at the first index.",
          "testString":
            "assert(code.match(/i\\s*?=\\s*?0\\s*?;/g).length == 1, 'Your code should set the initial condition of the loop so it starts at the first index.');"
        },
        {
          "text":
            "Your code should fix the initial condition of the loop so that the index starts at 0.",
          "testString":
            "assert(!code.match(/i\\s?=\\s*?1\\s*?;/g), 'Your code should fix the initial condition of the loop so that the index starts at 0.');"
        },
        {
          "text":
            "Your code should set the terminal condition of the loop so it stops at the last index.",
          "testString":
            "assert(code.match(/i\\s*?<\\s*?len\\s*?;/g).length == 1, 'Your code should set the terminal condition of the loop so it stops at the last index.');"
        },
        {
          "text":
            "Your code should fix the terminal condition of the loop so that it stops at 1 before the length.",
          "testString":
            "assert(!code.match(/i\\s*?<=\\s*?len;/g), 'Your code should fix the terminal condition of the loop so that it stops at 1 before the length.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function countToFive() {\n  let firstFive = \"12345\";\n  let len = firstFive.length;\n  // Fix the line below\n  for (let i = 1; i <= len; i++) {\n  // Do not alter code below this line\n    console.log(firstFive[i]);\n  }\n}\n\ncountToFive();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Catch Off By One Errors When Using Indexing",
      "dashedName": "catch-off-by-one-errors-when-using-indexing"
    },
    {
      "id": "587d7b86367417b2b2512b3c",
      "description": [
        "Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.",
        "Printing variable values with each cycle of your loop by using <code>console.log()</code> can uncover buggy behavior related to resetting, or failing to reset a variable.",
        "<hr>",
        "The following function is supposed to create a two-dimensional array with <code>m</code> rows and <code>n</code> columns of zeroes. Unfortunately, it's not producing the expected output because the <code>row</code> variable isn't being reinitialized (set back to an empty array) in the outer loop. Fix the code so it returns a correct 3x2 array of zeroes, which looks like <code>[[0, 0], [0, 0], [0, 0]]</code>."
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>matrix</code> variable to an array holding 3 rows of 2 columns of zeroes each.",
          "testString":
            "assert(JSON.stringify(matrix) == \"[[0,0],[0,0],[0,0]]\", 'Your code should set the <code>matrix</code> variable to an array holding 3 rows of 2 columns of zeroes each.');"
        },
        {
          "text": "The <code>matrix</code> variable should have 3 rows.",
          "testString":
            "assert(matrix.length == 3, 'The <code>matrix</code> variable should have 3 rows.');"
        },
        {
          "text":
            "The <code>matrix</code> variable should have 2 columns in each row.",
          "testString":
            "assert(matrix[0].length == 2 && matrix[1].length === 2 && matrix[2].length === 2, 'The <code>matrix</code> variable should have 2 columns in each row.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function zeroArray(m, n) {\n  // Creates a 2-D array with m rows and n columns of zeroes\n  let newArray = [];\n  let row = [];\n  for (let i = 0; i < m; i++) {\n    // Adds the m-th row into newArray\n    \n    for (let j = 0; j < n; j++) {\n      // Pushes n zeroes into the current row to create the columns\n      row.push(0);\n    }\n    // Pushes the current row, which now has n zeroes in it, to the array\n    newArray.push(row);\n  }\n  return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Caution When Reinitializing Variables Inside a Loop",
      "dashedName": "use-caution-when-reinitializing-variables-inside-a-loop"
    },
    {
      "id": "587d7b86367417b2b2512b3d",
      "description": [
        "The final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.",
        "There was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the <code>while</code> loop inside <code>loopy()</code>. Do NOT call this function!",
        "<blockquote>function loopy() {<br>&nbsp;&nbsp;while(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Hello, world!\");<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.",
        "<hr>",
        "The <code>myFunc()</code> function contains an infinite loop because the terminal condition <code>i != 4</code> will never evaluate to <code>false</code> (and break the looping) - <code>i</code> will increment by 2 each pass, and jump right over 4 since <code>i</code> is odd to start. Fix the comparison operator in the terminal condition so the loop only runs for <code>i</code> less than or equal to 4."
      ],
      "tests": [
        {
          "text":
            "Your code should change the comparison operator in the terminal condition (the middle part) of the <code>for</code> loop.",
          "testString":
            "assert(code.match(/i\\s*?<=\\s*?4;/g).length == 1, 'Your code should change the comparison operator in the terminal condition (the middle part) of the <code>for</code> loop.');"
        },
        {
          "text":
            "Your code should fix the comparison operator in the terminal condition of the loop.",
          "testString":
            "assert(!code.match(/i\\s*?!=\\s*?4;/g), 'Your code should fix the comparison operator in the terminal condition of the loop.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function myFunc() {\n  for (let i = 1; i != 4; i += 2) {\n    console.log(\"Still going!\");\n  }\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Prevent Infinite Loops with a Valid Terminal Condition",
      "dashedName": "prevent-infinite-loops-with-a-valid-terminal-condition"
    },
    {
      "id": "587d7b87367417b2b2512b3f",
      "description": [
        "One of the biggest problems with declaring variables with the <code>var</code> keyword is that you can overwrite variable declarations without an error.",
        "<blockquote>var camper = 'James';<br>var camper = 'David';<br>console.log(camper);<br>// logs 'David'</blockquote>",
        "As you can see in the code above, the <code>camper</code> variable is originally declared as <code>James</code> and then overridden to be <code>David</code>.",
        "In a small application, you might not run into this type of problem, but when your code becomes larger, you might accidentally overwrite a variable that you did not intend to overwrite.",
        "Because this behavior does not throw an error, searching and fixing bugs becomes more difficult.<br>",
        "A new keyword called <code>let</code> was introduced in ES6 to solve this potential issue with the <code>var</code> keyword.",
        "If you were to replace <code>var</code> with <code>let</code> in the variable declarations of the code above, the result would be an error.",
        "<blockquote>let camper = 'James';<br>let camper = 'David'; // throws an error</blockquote>",
        "This error can be seen in the console of your browser.",
        "So unlike <code>var</code>, when using <code>let</code>, a variable with the same name can only be declared once.",
        "Note the <code>\"use strict\"</code>. This enables Strict Mode, which catches common coding mistakes and \"unsafe\" actions. For instance:",
        "<blockquote>\"use strict\";<br>x = 3.14; // throws an error because x is not declared</blockquote>",
        "<hr>",
        "Update the code so it only uses the <code>let</code> keyword."
      ],
      "tests": [
        {
          "text": "<code>var</code> does not exist in code.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g),'<code>var</code> does not exist in code.');"
        },
        {
          "text": "<code>catName</code> should be <code>Oliver</code>.",
          "testString":
            "assert(catName === \"Oliver\", '<code>catName</code> should be <code>Oliver</code>.');"
        },
        {
          "text":
            "<code>quote</code> should be <code>\"Oliver says Meow!\"</code>",
          "testString":
            "assert(quote === \"Oliver says Meow!\", '<code>quote</code> should be <code>\"Oliver says Meow!\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var catName;\nvar quote;\nfunction catTalk() {\n  \"use strict\";\n\n  catName = \"Oliver\";\n  quote = catName + \" says Meow!\";\n\n}\ncatTalk();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Explore Differences Between the var and let Keywords",
      "dashedName": "explore-differences-between-the-var-and-let-keywords"
    },
    {
      "id": "587d7b87367417b2b2512b40",
      "description": [
        "When you declare a variable with the <code>var</code> keyword, it is declared globally, or locally if declared inside a function.",
        "The <code>let</code> keyword behaves similarly, but with some extra features. When you declare a variable with the <code>let</code> keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.",
        "For example:",
        "<blockquote>var numArray = [];<br>for (var i = 0; i < 3; i++) {<br>  numArray.push(i);<br>}<br>console.log(numArray);<br>// returns [0, 1, 2]<br>console.log(i);<br>// returns 3</blockquote>",
        "With the <code>var</code> keyword, <code>i</code> is declared globally. So when <code>i++</code> is executed, it updates the global variable. This code is similar to the following:",
        "<blockquote>var numArray = [];<br>var i;<br>for (i = 0; i < 3; i++) {<br>  numArray.push(i);<br>}<br>console.log(numArray);<br>// returns [0, 1, 2]<br>console.log(i);<br>// returns 3</blockquote>",
        "This behavior will cause problems if you were to create a function and store it for later use inside a for loop that uses the <code>i</code> variable. This is because the stored function will always refer to the value of the updated global <code>i</code> variable.",
        "<blockquote>var printNumTwo;<br>for (var i = 0; i < 3; i++) {<br>  if(i === 2){<br>    printNumTwo = function() {<br>      return i;<br>    };<br>  }<br>}<br>console.log(printNumTwo());<br>// returns 3</blockquote>",
        "As you can see, <code>printNumTwo()</code> prints 3 and not 2. This is because the value assigned to <code>i</code> was updated and the <code>printNumTwo()</code> returns the global <code>i</code> and not the value <code>i</code> had when the function was created in the for loop. The <code>let</code> keyword does not follow this behavior:",
        "<blockquote>'use strict';<br>let printNumTwo;<br>for (let i = 0; i < 3; i++) {<br>  if (i === 2) {<br>    printNumTwo = function() {<br>      return i;<br>    };<br>  }<br>}<br>console.log(printNumTwo());<br>// returns 2<br>console.log(i);<br>// returns \"i is not defined\"</blockquote>",
        "<code>i</code> is not defined because it was not declared in the global scope. It is only declared within the for loop statement. <code>printNumTwo()</code> returned the correct value because three different <code>i</code> variables with unique values (0, 1, and 2) were created by the <code>let</code> keyword within the loop statement.",
        "<hr>",
        "Fix the code so that <code>i</code> declared in the if statement is a separate variable than <code>i</code> declared in the first line of the function. Be certain not to use the <code>var</code> keyword anywhere in your code.",
        "This exercise is designed to illustrate the difference between how <code>var</code> and <code>let</code> keywords assign scope to the declared variable. When programming a function similar to the one used in this exercise, it is often better to use different variable names to avoid confusion."
      ],
      "tests": [
        {
          "text": "<code>var</code> does not exist in code.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g),'<code>var</code> does not exist in code.');"
        },
        {
          "text":
            "The variable <code>i</code> declared in the if statement should equal \"block scope\".",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/(i\\s*=\\s*).*\\s*.*\\s*.*\\1('|\")block\\s*scope\\2/g), 'The variable <code>i</code> declared in the if statement should equal \"block scope\".');"
        },
        {
          "text": "<code>checkScope()</code> should return \"function scope\"",
          "testString":
            "assert(checkScope() === \"function scope\", '<code>checkScope()</code> should return \"function scope\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkScope() {\n\"use strict\";\n  var i = \"function scope\";\n  if (true) {\n    i = \"block scope\";\n    console.log(\"Block scope i is: \", i);\n  }\n  console.log(\"Function scope i is: \", i);\n  return i;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Compare Scopes of the var and let Keywords",
      "dashedName": "compare-scopes-of-the-var-and-let-keywords"
    },
    {
      "id": "587d7b87367417b2b2512b41",
      "description": [
        "<code>let</code> is not the only new way to declare variables. In ES6, you can also declare variables using the <code>const</code> keyword.",
        "<code>const</code> has all the awesome features that <code>let</code> has, with the added bonus that variables declared using <code>const</code> are read-only. They are a constant value, which means that once a variable is assigned with <code>const</code>, it cannot be reassigned.",
        "<blockquote>\"use strict\"<br>const FAV_PET = \"Cats\";<br>FAV_PET = \"Dogs\"; // returns error</blockquote>",
        "As you can see, trying to reassign a variable declared with <code>const</code> will throw an error. You should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant. A common practice is to name your constants in all upper-cases and with an underscore to separate words (e.g. <code>EXAMPLE_VARIABLE</code>).",
        "<hr>",
        "Change the code so that all variables are declared using <code>let</code> or <code>const</code>. Use <code>let</code> when you want the variable to change, and <code>const</code> when you want the variable to remain constant. Also, rename variables declared with <code>const</code> to conform to common practices, meaning constants should be in all caps"
      ],
      "tests": [
        {
          "text": "<code>var</code> does not exist in code.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g),'<code>var</code> does not exist in code.');"
        },
        {
          "text":
            "<code>SENTENCE</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/(const SENTENCE)/g), '<code>SENTENCE</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text":
            "<code>i</code> should be a variable only defined within the for loop scope (by using<code>let</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/(let i)/g), '<code>i</code> should be a variable only defined within the for loop scope (by using<code>let</code>).');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function printManyTimes(str) {\n  \"use strict\";\n\n  // change code below this line\n\n  var sentence = str + \" is cool!\";\n  for(var i = 0; i < str.length; i+=2) {\n    console.log(str);\n  }\n\n  // change code above this line\n\n}\nprintManyTimes(\"freeCodeCamp\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Declare a ReadOnly Variable with the const Keyword",
      "dashedName": "declare-a-readonly-variable-with-the-const-keyword"
    },
    {
      "id": "587d7b87367417b2b2512b42",
      "description": [
        "The <code>const</code> declaration has many use cases in modern JavaScript.",
        "Some developers prefer to assign all their variables using <code>const</code> by default, unless they know they will need to reassign the value. Only in that case, they use <code>let</code>.",
        "However, it is important to understand that objects (including arrays and functions) assigned to a variable using <code>const</code> are still mutable. Using the <code>const</code> declaration only prevents reassignment of the variable identifier.",
        "<blockquote>\"use strict\";<br>const s = [5, 6, 7];<br>s = [1, 2, 3]; // throws error, trying to assign a const<br>s[2] = 45; // works just as it would with an array declared with var or let<br>console.log(s); // returns [5, 6, 45]</blockquote>",
        "As you can see, you can mutate the object <code>[5, 6, 7]</code> itself and the variable <code>s</code> will still point to the altered array <code>[5, 6, 45]</code>. Like all arrays, the array elements in <code>s</code> are mutable, but because <code>const</code> was used, you cannot use the variable identifier <code>s</code> to point to a different array using the assignment operator.",
        "<hr>",
        "An array is declared as <code>const s = [5, 7, 2]</code>. Change the array to <code>[2, 5, 7]</code> using various element assignment."
      ],
      "tests": [
        {
          "text": "Do not replace <code>const</code> keyword.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const/g), 'Do not replace <code>const</code> keyword.');"
        },
        {
          "text":
            "<code>s</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+s/g), '<code>s</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text": "Do not change the original array declaration.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+s\\s*=\\s*\\[\\s*5\\s*,\\s*7\\s*,\\s*2\\s*\\]\\s*;?/g), 'Do not change the original array declaration.');"
        },
        {
          "text": "<code>s</code> should be equal to <code>[2, 5, 7]</code>.",
          "testString":
            "assert.deepEqual(s, [2, 5, 7], '<code>s</code> should be equal to <code>[2, 5, 7]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const s = [5, 7, 2];\nfunction editInPlace() {\n  \"use strict\";\n  // change code below this line\n\n  // s = [2, 5, 7]; <- this is invalid\n\n  // change code above this line\n}\neditInPlace();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Mutate an Array Declared with const",
      "dashedName": "mutate-an-array-declared-with-const"
    },
    {
      "id": "598f48a36c8c40764b4e52b3",
      "description": [
        "As seen in previous challenge, <code>const</code> declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function <code>Object.freeze</code> to prevent data mutation.",
        "Once the object is freezed, you can no longer add/update/delete properties from it. Any attempt at changing the object will be rejected without any error.",
        "<blockquote>\nlet obj = {\n  name:\"FreeCodeCamp\"\n  review:\"Awesome\"\n};\nObject.freeze(obj);\nobj.review = \"bad\"; //will be ignored. Mutation not allowed\nobj.newProp = \"Test\"; // will be ignored. Mutation not allowed\nconsole.log(obj); \n// { name: \"FreeCodeCamp\", review:\"Awesome\"}\n</blockquote>",
        "<hr>",
        "In this challenge you are going to use <code>Object.freeze</code> to prevent mathematical constants from changing. You need to freeze <code>MATH_CONSTANTS</code> object so that noone is able alter the value of <code>PI</code> or add any more properties to it."
      ],
      "tests": [
        {
          "text": "Do not replace <code>const</code> keyword.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const/g), 'Do not replace <code>const</code> keyword.');"
        },
        {
          "text":
            "<code>MATH_CONSTANTS</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+MATH_CONSTANTS/g), '<code>MATH_CONSTANTS</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text": "Do not change original <code>MATH_CONSTANTS</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+MATH_CONSTANTS\\s+=\\s+{\\s+PI:\\s+3.14\\s+};/g), 'Do not change original <code>MATH_CONSTANTS</code>.');"
        },
        {
          "text": "<code>PI</code> equals <code>3.14</code>.",
          "testString":
            "assert(PI === 3.14, '<code>PI</code> equals <code>3.14</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function freezeObj() {\n  \"use strict\";\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  // change code below this line\n\n\n  // change code above this line\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch( ex ) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Prevent Object Mutation",
      "dashedName": "prevent-object-mutation"
    },
    {
      "id": "587d7b87367417b2b2512b43",
      "description": [
        "In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.",
        "To achieve this, we often use the following syntax:",
        "<blockquote>const myFunc = function() {<br>  const myVar = \"value\";<br>  return myVar;<br>}</blockquote>",
        "ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use <strong>arrow function syntax</strong>:",
        "<blockquote>const myFunc = () => {<br>  const myVar = \"value\";<br>  return myVar;<br>}</blockquote>",
        "When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:",
        "<blockquote>const myFunc= () => \"value\"</blockquote>",
        "This code will still return <code>value</code> by default.",
        "<hr>",
        "Rewrite the function assigned to the variable <code>magic</code> which returns a new <code>Date()</code> to use arrow function syntax. Also make sure nothing is defined using the keyword <code>var</code>."
      ],
      "tests": [
        {
          "text": "User did replace <code>var</code> keyword.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g), 'User did replace <code>var</code> keyword.');"
        },
        {
          "text":
            "<code>magic</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+magic/g), '<code>magic</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text": "<code>magic</code> is a <code>function</code>.",
          "testString":
            "assert(typeof magic === 'function', '<code>magic</code> is a <code>function</code>.');"
        },
        {
          "text": "<code>magic()</code> returns correct date.",
          "testString":
            "assert(magic().getDate() == new Date().getDate(), '<code>magic()</code> returns correct date.');"
        },
        {
          "text": "<code>function</code> keyword was not used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/function/g), '<code>function</code> keyword was not used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var magic = function() {\n  \"use strict\";\n  return new Date();\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Arrow Functions to Write Concise Anonymous Functions",
      "dashedName": "use-arrow-functions-to-write-concise-anonymous-functions"
    },
    {
      "id": "587d7b88367417b2b2512b44",
      "description": [
        "Just like a normal function, you can pass arguments into arrow functions.",
        "<blockquote>// doubles input value and returns it<br>const doubler = (item) => item * 2;</blockquote>",
        "You can pass more than one argument into arrow functions as well.",
        "<hr>",
        "Rewrite the <code>myConcat</code> function which appends contents of <code>arr2</code> to <code>arr1</code> so that the function uses arrow function syntax."
      ],
      "tests": [
        {
          "text": "User did replace <code>var</code> keyword.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g), 'User did replace <code>var</code> keyword.');"
        },
        {
          "text":
            "<code>myConcat</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+myConcat/g), '<code>myConcat</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text": "<code>myConcat</code> should be a function",
          "testString":
            "assert(typeof myConcat === 'function', '<code>myConcat</code> should be a function');"
        },
        {
          "text":
            "<code>myConcat()</code> returns the correct <code>array</code>",
          "testString":
            "assert(() => { const a = myConcat([1], [2]); return a[0] == 1 && a[1] == 2; }, '<code>myConcat()</code> returns the correct <code>array</code>');"
        },
        {
          "text": "<code>function</code> keyword was not used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/function/g), '<code>function</code> keyword was not used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var myConcat = function(arr1, arr2) {\n  \"use strict\";\n  return arr1.concat(arr2);\n};\n// test your code\nconsole.log(myConcat([1, 2], [3, 4, 5]));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Write Arrow Functions with Parameters",
      "dashedName": "write-arrow-functions-with-parameters"
    },
    {
      "id": "587d7b88367417b2b2512b45",
      "description": [
        "It's time we see how powerful arrow functions are when processing data.",
        "Arrow functions work really well with higher order functions, such as <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>, that take other functions as arguments for processing collections of data.",
        "Read the following code:",
        "<blockquote>FBPosts.filter(function(post) {<br>  return post.thumbnail !== null && post.shares > 100 && post.likes > 500;<br>})</blockquote>",
        "We have written this with <code>filter()</code> to at least make it somewhat readable. Now compare it to the following code which uses arrow function syntax instead:",
        "<blockquote>FBPosts.filter((post) => post.thumbnail !== null && post.shares > 100 && post.likes > 500)</blockquote>",
        "This code is more succinct and accomplishes the same task with fewer lines of code.",
        "<hr>",
        "Use arrow function syntax to compute the square of only the positive integers (fractions are not integers) in the array <code>realNumberArray</code> and store the new array in the variable <code>squaredIntegers</code>."
      ],
      "tests": [
        {
          "text": "User did replace <code>var</code> keyword.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/var/g), 'User did replace <code>var</code> keyword.');"
        },
        {
          "text":
            "<code>squaredIntegers</code> should be a constant variable (by using <code>const</code>).",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/const\\s+squaredIntegers/g), '<code>squaredIntegers</code> should be a constant variable (by using <code>const</code>).');"
        },
        {
          "text":
            "<code>squaredIntegers</code> should be an <code>array</code>",
          "testString":
            "assert(Array.isArray(squaredIntegers), '<code>squaredIntegers</code> should be an <code>array</code>');"
        },
        {
          "text":
            "<code>squaredIntegers</code> should be <code>[16, 1764, 36]</code>",
          "testString":
            "assert(squaredIntegers[0] === 16 && squaredIntegers[1] === 1764 && squaredIntegers[2] === 36, '<code>squaredIntegers</code> should be <code>[16, 1764, 36]</code>');"
        },
        {
          "text": "<code>function</code> keyword was not used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/function/g), '<code>function</code> keyword was not used.');"
        },
        {
          "text": "loop should not be used",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/(for)|(while)/g), 'loop should not be used');"
        },
        {
          "text":
            "<code>map</code>, <code>filter</code>, or <code>reduce</code> should be used",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/map|filter|reduce/g), '<code>map</code>, <code>filter</code>, or <code>reduce</code> should be used');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34];\nconst squareList = (arr) => {\n  \"use strict\";\n  // change code below this line\n  const squaredIntegers = arr;\n  // change code above this line\n  return squaredIntegers;\n};\n// test your code\nconst squaredIntegers = squareList(realNumberArray);\nconsole.log(squaredIntegers);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Write Higher Order Arrow Functions",
      "dashedName": "write-higher-order-arrow-functions"
    },
    {
      "id": "587d7b88367417b2b2512b46",
      "description": [
        "In order to help us create more flexible functions, ES6 introduces <dfn>default parameters</dfn> for functions.",
        "Check out this code:",
        "<blockquote>function greeting(name = \"Anonymous\") {<br>  return \"Hello \" + name;<br>}<br>console.log(greeting(\"John\")); // Hello John<br>console.log(greeting()); // Hello Anonymous</blockquote>",
        "The default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter <code>name</code> will receive its default value <code>\"Anonymous\"</code> when you do not provide a value for the parameter. You can add default values for as many parameters as you want.",
        "<hr>",
        "Modify the function <code>increment</code> by adding default parameters so that it will add 1 to <code>number</code> if <code>value</code> is not specified."
      ],
      "tests": [
        {
          "text":
            "The result of <code>increment(5, 2)</code> should be <code>7</code>.",
          "testString":
            "assert(increment(5, 2) === 7, 'The result of <code>increment(5, 2)</code> should be <code>7</code>.');"
        },
        {
          "text":
            "The result of <code>increment(5)</code> should be <code>6</code>.",
          "testString":
            "assert(increment(5) === 6, 'The result of <code>increment(5)</code> should be <code>6</code>.');"
        },
        {
          "text":
            "default parameter <code>1</code> was used for <code>value</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/value\\s*=\\s*1/g), 'default parameter <code>1</code> was used for <code>value</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const increment = (function() {\n  \"use strict\";\n  return function increment(number, value) {\n    return number + value;\n  };\n})();\nconsole.log(increment(5, 2)); // returns 7\nconsole.log(increment(5)); // returns NaN",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set Default Parameters for Your Functions",
      "dashedName": "set-default-parameters-for-your-functions"
    },
    {
      "id": "587d7b88367417b2b2512b47",
      "description": [
        "In order to help us create more flexible functions, ES6 introduces the <dfn>rest operator</dfn> for function parameters. With the rest operator, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.",
        "Check out this code:",
        "<blockquote>function howMany(...args) {<br>  return \"You have passed \" + args.length + \" arguments.\";<br>}<br>console.log(howMany(0, 1, 2)); // You have passed 3 arguments<br>console.log(howMany(\"string\", null, [1, 2, 3], { })); // You have passed 4 arguments.</blockquote>",
        "The rest operator eliminates the need to check the <code>args</code> array and allows us to apply <code>map()</code>, <code>filter()</code> and <code>reduce()</code> on the parameters array.",
        "<hr>",
        "Modify the function <code>sum</code> so that it uses the rest operator and it works in the same way with any number of parameters."
      ],
      "tests": [
        {
          "text": "The result of <code>sum(0,1,2)</code> should be 3",
          "testString":
            "assert(sum(0,1,2) === 3, 'The result of <code>sum(0,1,2)</code> should be 3');"
        },
        {
          "text": "The result of <code>sum(1,2,3,4)</code> should be 10",
          "testString":
            "assert(sum(1,2,3,4) === 10, 'The result of <code>sum(1,2,3,4)</code> should be 10');"
        },
        {
          "text": "The result of <code>sum(5)</code> should be 5",
          "testString":
            "assert(sum(5) === 5, 'The result of <code>sum(5)</code> should be 5');"
        },
        {
          "text": "The result of <code>sum()</code> should be 0",
          "testString":
            "assert(sum() === 0, 'The result of <code>sum()</code> should be 0');"
        },
        {
          "text":
            "The <code>sum</code> function uses the <code>...</code> spread operator on the <code>args</code> parameter.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/function\\s+sum\\s*\\(\\s*...args\\s*\\)\\s*{/g), 'The <code>sum</code> function uses the <code>...</code> spread operator on the <code>args</code> parameter.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const sum = (function() {\n  \"use strict\";\n  return function sum(x, y, z) {\n    const args = [ x, y, z ];\n    return args.reduce((a, b) => a + b, 0);\n  };\n})();\nconsole.log(sum(1, 2, 3)); // 6",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the Rest Operator with Function Parameters",
      "dashedName": "use-the-rest-operator-with-function-parameters"
    },
    {
      "id": "587d7b89367417b2b2512b48",
      "description": [
        "ES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.",
        "The ES5 code below uses <code>apply()</code> to compute the maximum value in an array:",
        "<blockquote>var arr = [6, 89, 3, 45];<br>var maximus = Math.max.apply(null, arr); // returns 89</blockquote>",
        "We had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> returns <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array.",
        "The spread operator makes this syntax much better to read and maintain.",
        "<blockquote>const arr = [6, 89, 3, 45];<br>const maximus = Math.max(...arr); // returns 89</blockquote>",
        "<code>...arr</code> returns an unpacked array. In other words, it <em>spreads</em> the array.",
        "However, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:",
        "<blockquote>const spreaded = ...arr; // will throw a syntax error</blockquote>",
        "<hr>",
        "Copy all contents of <code>arr1</code> into another array <code>arr2</code> using the spread operator."
      ],
      "tests": [
        {
          "text": "<code>arr2</code> is correct copy of <code>arr1</code>.",
          "testString":
            "assert(arr2.every((v, i) => v === arr1[i]), '<code>arr2</code> is correct copy of <code>arr1</code>.');"
        },
        {
          "text":
            "<code>...</code> spread operator was used to duplicate <code>arr1</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\[\\s*...arr1\\s*\\]/g),'<code>...</code> spread operator was used to duplicate <code>arr1</code>.');"
        },
        {
          "text":
            "<code>arr2</code> remains unchanged when <code>arr1</code> is changed.",
          "testString":
            "assert((arr1, arr2) => {arr1.push('JUN'); return arr2.length < arr1.length},'<code>arr2</code> remains unchanged when <code>arr1</code> is changed.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n(function() {\n  \"use strict\";\n  arr2 = []; // change this line\n})();\nconsole.log(arr2);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the Spread Operator to Evaluate Arrays InPlace",
      "dashedName": "use-the-spread-operator-to-evaluate-arrays-inplace"
    },
    {
      "id": "587d7b89367417b2b2512b49",
      "description": [
        "We saw earlier how spread operator can effectively spread, or unpack, the contents of the array.",
        "We can do something similar with objects as well. <dfn>Destructuring assignment</dfn> is special syntax for neatly assigning values taken directly from an object to variables.",
        "Consider the following ES5 code:",
        "<blockquote>var voxel = {x: 3.6, y: 7.4, z: 6.54 };<br>var x = voxel.x; // x = 3.6<br>var y = voxel.y; // y = 7.4<br>var z = voxel.z; // z = 6.54</blockquote>",
        "Here's the same assignment statement with ES6 destructuring syntax:",
        "<blockquote>const { x, y, z } = voxel; // x = 3.6, y = 7.4, z = 6.54</blockquote>",
        "If instead you want to store the values of <code>voxel.x</code> into <code>a</code>, <code>voxel.y</code> into <code>b</code>, and <code>voxel.z</code> into <code>c</code>, you have that freedom as well.",
        "<blockquote>const { x : a, y : b, z : c } = voxel // a = 3.6, b = 7.4, c = 6.54</blockquote>",
        "You may read it as \"get the field <code>x</code> and copy the value into <code>a</code>,\" and so on.",
        "<hr>",
        "Use destructuring to obtain the length of the input string <code>str</code>, and assign the length to <code>len</code> in line."
      ],
      "tests": [
        {
          "text": "the function <code>getLength()</code> returns a number.",
          "testString":
            "assert(typeof getLength('') === 'number', 'the function <code>getLength()</code> returns a number.');"
        },
        {
          "text":
            "<code>getLength(\"FreeCodeCamp\")</code> should be <code>12</code>",
          "testString":
            "assert(getLength(\"FreeCodeCamp\") === 12, '<code>getLength(\"FreeCodeCamp\")</code> should be <code>12</code>');"
        },
        {
          "text": "destructuring with reassignment was used",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\{\\s*length\\s*:\\s*len\\s*}\\s*=\\s*str/g),'destructuring with reassignment was used');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getLength(str) {\n  \"use strict\";\n\n  // change code below this line\n  const length = 0; // change this\n  // change code above this line\n\n  return len; // you must assign length to len in line\n\n}\n\nconsole.log(getLength('FreeCodeCamp'));",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Destructuring Assignment to Assign Variables from Objects",
      "dashedName":
        "use-destructuring-assignment-to-assign-variables-from-objects"
    },
    {
      "id": "587d7b89367417b2b2512b4a",
      "description": [
        "We can similarly destructure <em>nested</em> objects into variables.",
        "Consider the following code:",
        "<blockquote>const a = {<br>  start: { x: 5, y: 6},<br>  end: { x: 6, y: -9 }<br>};<br>const { start : { x: startX, y: startY }} = a;<br>console.log(startX, startY); // 5, 6</blockquote>",
        "In the example above, the variable <code>start</code> is assigned the value of <code>a.start</code>, which is also an object.",
        "<hr>",
        "Use destructuring assignment to obtain <code>max</code> of <code>forecast.tomorrow</code> and assign it to <code>maxOfTomorrow</code>."
      ],
      "tests": [
        {
          "text": "<code>maxOfTomorrow</code> equals <code>84.6</code>",
          "testString":
            "assert(getMaxOfTmrw(LOCAL_FORECAST) === 84.6, '<code>maxOfTomorrow</code> equals <code>84.6</code>');"
        },
        {
          "text": "nested destructuring was used",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\{\\s*tomorrow\\s*:\\s*\\{\\s*max\\s*:\\s*maxOfTomorrow\\s*\\}\\s*\\}\\s*=\\s*forecast/g),'nested destructuring was used');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const LOCAL_FORECAST = {\n  today: { min: 72, max: 83 },\n  tomorrow: { min: 73.3, max: 84.6 }\n};\n\nfunction getMaxOfTmrw(forecast) {\n  \"use strict\";\n  // change code below this line\n  const maxOfTomorrow = undefined; // change this line\n  // change code above this line\n  return maxOfTomorrow;\n}\n\nconsole.log(getMaxOfTmrw(LOCAL_FORECAST)); // should be 84.6",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use Destructuring Assignment to Assign Variables from Nested Objects",
      "dashedName":
        "use-destructuring-assignment-to-assign-variables-from-nested-objects"
    },
    {
      "id": "587d7b89367417b2b2512b4b",
      "description": [
        "ES6 makes destructuring arrays as easy as destructuring objects.",
        "One key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, you cannot pick or choose which elements you want to assign to variables.",
        "Destructuring an array lets us do exactly that:",
        "<blockquote>const [a, b] = [1, 2, 3, 4, 5, 6];<br>console.log(a, b); // 1, 2</blockquote>",
        "The variable <code>a</code> is assigned the first value of the array, and <code>b</code> is assigned the second value of the array.",
        "We can also access the value at any index in an array with destructuring by using commas to reach the desired index:",
        "<blockquote>const [a, b,,, c] = [1, 2, 3, 4, 5, 6];<br>console.log(a, b, c); // 1, 2, 5 </blockquote>",
        "<hr>",
        "Use destructuring assignment to swap the values of <code>a</code> and <code>b</code> so that <code>a</code> receives the value stored in <code>b</code>, and <code>b</code> receives the value stored in <code>a</code>."
      ],
      "tests": [
        {
          "text": "Value of <code>a</code> should be 6, after swapping.",
          "testString":
            "assert(a === 6, 'Value of <code>a</code> should be 6, after swapping.');"
        },
        {
          "text": "Value of <code>b</code> should be 8, after swapping.",
          "testString":
            "assert(b === 8, 'Value of <code>b</code> should be 8, after swapping.');"
        },
        {
          "text": "Use array destructuring to swap a and b.",
          "testString":
            "// assert(/\\[\\s*(\\w)\\s*,\\s*(\\w)\\s*\\]\\s*=\\s*\\[\\s*\\2\\s*,\\s*\\1\\s*\\]/g.test(code), 'Use array destructuring to swap a and b.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let a = 8, b = 6;\n(() => {\n  \"use strict\";\n  // change code below this line\n  \n  // change code above this line\n})();\nconsole.log(a); // should be 6\nconsole.log(b); // should be 8",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Destructuring Assignment to Assign Variables from Arrays",
      "dashedName":
        "use-destructuring-assignment-to-assign-variables-from-arrays"
    },
    {
      "id": "587d7b8a367417b2b2512b4c",
      "description": [
        "In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.",
        "The result is similar to <code>Array.prototype.slice()</code>, as shown below:",
        "<blockquote>const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];<br>console.log(a, b); // 1, 2<br>console.log(arr); // [3, 4, 5, 7]</blockquote>",
        "Variables <code>a</code> and <code>b</code> take the first and second values from the array. After that, because of rest operator's presence, <code>arr</code> gets rest of the values in the form of an array.",
        "The rest element only works correctly as the last variable in the list. As in, you cannot use the rest operator to catch a subarray that leaves out last element of the original array.",
        "<hr>",
        "Use destructuring assignment with the rest operator to perform an effective <code>Array.prototype.slice()</code> so that <code>arr</code> is a sub-array of the original array <code>source</code> with the first two elements omitted."
      ],
      "tests": [
        {
          "text": "<code>arr</code> should be <code>[3,4,5,6,7,8,9,10]</code>",
          "testString":
            "assert(arr.every((v, i) => v === i + 3),'<code>arr</code> should be <code>[3,4,5,6,7,8,9,10]</code>');"
        },
        {
          "text": "destructuring was used.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\[\\s*\\w*\\s*,\\s*\\w*\\s*,\\s*...arr\\s*\\]/g),'destructuring was used.');"
        },
        {
          "text": "<code>Array.slice()</code> was not used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/Array.slice/g), '<code>Array.slice()</code> was not used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const source = [1,2,3,4,5,6,7,8,9,10];\nfunction removeFirstTwo(list) {\n  \"use strict\";\n  // change code below this line\n  arr = list; // change this\n  // change code above this line\n  return arr;\n}\nconst arr = removeFirstTwo(source);\nconsole.log(arr); // should be [3,4,5,6,7,8,9,10]\nconsole.log(source); // should be [1,2,3,4,5,6,7,8,9,10];",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use Destructuring Assignment with the Rest Operator to Reassign Array Elements",
      "dashedName":
        "use-destructuring-assignment-with-the-rest-operator-to-reassign-array-elements"
    },
    {
      "id": "587d7b8a367417b2b2512b4d",
      "description": [
        "In some cases, you can destructure the object in a function argument itself.",
        "Consider the code below:",
        "<blockquote>const profileUpdate = (profileData) => {<br>  const { name, age, nationality, location } = profileData;<br>  // do something with these variables<br>}</blockquote>",
        "This effectively destructures the object sent into the function. This can also be done in-place:",
        "<blockquote>const profileUpdate = ({ name, age, nationality, location }) => {<br>  /* do something with these fields */<br>}</blockquote>",
        "This removes some extra lines and makes our code look neat.",
        "This has the added benefit of not having to manipulate an entire object in a function; only the fields that are needed are copied inside the function.",
        "<hr>",
        "Use destructuring assignment within the argument to the function <code>half</code> to send only <code>max</code> and <code>min</code> inside the function."
      ],
      "tests": [
        {
          "text": "<code>stats</code> should be an <code>object</code>.",
          "testString":
            "assert(typeof stats === 'object', '<code>stats</code> should be an <code>object</code>.');"
        },
        {
          "text": "<code>half(stats)</code> should be <code>28.015</code>",
          "testString":
            "assert(half(stats) === 28.015, '<code>half(stats)</code> should be <code>28.015</code>');"
        },
        {
          "text": "Destructuring was used.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\(\\s*\\{\\s*\\w+\\s*,\\s*\\w+\\s*\\}\\s*\\)/g), 'Destructuring was used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\nconst half = (function() {\n  \"use strict\"; // do not change this line\n\n  // change code below this line\n  return function half(stats) {\n    // use function argument destructuring\n    return (stats.max + stats.min) / 2.0;\n  };\n  // change code above this line\n\n})();\nconsole.log(stats); // should be object\nconsole.log(half(stats)); // should be 28.015",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use Destructuring Assignment to Pass an Object as a Functions Parameters",
      "dashedName":
        "use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters"
    },
    {
      "id": "587d7b8a367417b2b2512b4e",
      "description": [
        "A new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that allows you to use string interpolation features to create strings.",
        "Consider the code below:",
        "<blockquote>const person = {<br>  name: \"Zodiac Hasbro\",<br>  age: 56<br>};<br><br>// string interpolation<br>const greeting = `Hello, my name is ${person.name}!<br>I am ${person.age} years old.`;<br><br>console.log(greeting); // prints<br>// Hello, my name is Zodiac Hasbro!<br>// I am 56 years old.<br></blockquote>",
        "A lot of things happened there.",
        "Firstly, the <code>${variable}</code> syntax used above is a place holder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with <code>${</code> and <code>}</code>.",
        "Secondly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the string. Notice that the string is multi-line.",
        "This new way of creating strings gives you more flexibility to create robust strings.",
        "<hr>",
        "Use template literal syntax with backticks to display each entry of the <code>result</code> object's <code>failure</code> array. Each entry should be wrapped inside an <code>li</code> element with the class attribute <code>text-warning</code>, and listed within the <code>resultDisplayArray</code>."
      ],
      "tests": [
        {
          "text":
            "<code>resultDisplayArray</code> is a list containing <code>result failure</code> messages.",
          "testString":
            "assert(typeof makeList(result.failure) === 'object' && resultDisplayArray.length === 3, '<code>resultDisplayArray</code> is a list containing <code>result failure</code> messages.');"
        },
        {
          "text": "<code>resultDisplayArray</code> is the desired output.",
          "testString":
            "assert(makeList(result.failure).every((v, i) => v === `<li class=\"text-warning\">${result.failure[i]}</li>`), '<code>resultDisplayArray</code> is the desired output.');"
        },
        {
          "text": "Template strings were used",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/\\`<li class=\"text-warning\">\\$\\{\\w+\\}<\\/li>\\`/g), 'Template strings were used');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"id-blacklist\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  \"use strict\";\n\n  // change code below this line\n  const resultDisplayArray = null;\n  // change code above this line\n\n  return resultDisplayArray;\n}\n/**\n * makeList(result.failure) should return:\n * [ <li class=\"text-warning\">no-var</li>,\n *   <li class=\"text-warning\">var-on-top</li>, \n *   <li class=\"text-warning\">linebreak</li> ]\n **/\nconst resultDisplayArray = makeList(result.failure);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Strings using Template Literals",
      "dashedName": "create-strings-using-template-literals"
    },
    {
      "id": "587d7b8a367417b2b2512b4f",
      "description": [
        "ES6 adds some nice support for easily defining object literals.",
        "Consider the following code:",
        "<blockquote>const getMousePosition = (x, y) => ({<br>  x: x,<br>  y: y<br>});</blockquote>",
        "<code>getMousePosition</code> is a simple function that returns an object containing two fields.",
        "ES6 provides the syntactic sugar to eliminate the redundancy of having to write <code>x: x</code>. You can simply write <code>x</code> once, and it will be converted to<code>x: x</code> (or something equivalent) under the hood.",
        "Here is the same function from above rewritten to use this new syntax:",
        "<blockquote>const getMousePosition = (x, y) => ({ x, y });</blockquote>",
        "<hr>",
        "Use simple fields with object literals to create and return a <code>Person</code> object."
      ],
      "tests": [
        {
          "text":
            "the output is <code>{name: \"Zodiac Hasbro\", age: 56, gender: \"male\"}</code>.",
          "testString":
            "assert(() => {const res={name:\"Zodiac Hasbro\",age:56,gender:\"male\"}; const person=createPerson(\"Zodiac Hasbro\", 56, \"male\"); return Object.keys(person).every(k => person[k] === res[k]);}, 'the output is <code>{name: \"Zodiac Hasbro\", age: 56, gender: \"male\"}</code>.');"
        },
        {
          "text": "No <code>:</code> were used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/:/g), 'No <code>:</code> were used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const createPerson = (name, age, gender) => {\n  \"use strict\";\n  // change code below this line\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // change code above this line\n};\nconsole.log(createPerson(\"Zodiac Hasbro\", 56, \"male\")); // returns a proper object",
          "head": "",
          "tail": ""
        }
      },
      "name": "Write Concise Object Literal Declarations Using Simple Fields",
      "dashedName":
        "write-concise-object-literal-declarations-using-simple-fields"
    },
    {
      "id": "587d7b8b367417b2b2512b50",
      "description": [
        "When defining functions within objects in ES5, we have to use the keyword <code>function</code> as follows:",
        "<blockquote>const person = {<br>  name: \"Taylor\",<br>  sayHello: function() {<br>    return `Hello! My name is ${this.name}.`;<br>  }<br>};</blockquote>",
        "With ES6, You can remove the <code>function</code> keyword and colon altogether when defining functions in objects. Here's an example of this syntax:",
        "<blockquote>const person = {<br>  name: \"Taylor\",<br>  sayHello() {<br>    return `Hello! My name is ${this.name}.`;<br>  }<br>};</blockquote>",
        "<hr>",
        "Refactor the function <code>setGear</code> inside the object <code>bicycle</code> to use the shorthand syntax described above."
      ],
      "tests": [
        {
          "text":
            "<code>setGear</code> is a function and changes the <code>gear</code> variable.",
          "testString":
            "assert(() => { bicycle.setGear(48); return bicycle.gear === 48 }, '<code>setGear</code> is a function and changes the <code>gear</code> variable.');"
        },
        {
          "text": "Declarative function was used.",
          "testString":
            "getUserInput => assert(!getUserInput('index').match(/:\\s*function\\s*\\(\\)/g), 'Declarative function was used.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// change code below this line\nconst bicycle = {\n  gear: 2,\n  setGear: function(newGear) {\n    \"use strict\";\n    this.gear = newGear;\n  }\n};\n// change code above this line\nbicycle.setGear(3);\nconsole.log(bicycle.gear);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Write Concise Declarative Functions with ES6",
      "dashedName": "write-concise-declarative-functions-with-es6"
    },
    {
      "id": "587d7b8b367417b2b2512b53",
      "description": [
        "ES6 provides a new syntax to help create objects, using the keyword <dfn>class</dfn>.",
        "This is to be noted, that the <code>class</code> syntax is just a syntax, and not a full-fledged class based implementation of object oriented paradigm, unlike in languages like Java, or Python, or Ruby etc.",
        "In ES5, we usually define a constructor function, and use the <code>new</code> keyword to instantiate an object.",
        "<blockquote>var SpaceShuttle = function(targetPlanet){<br>  this.targetPlanet = targetPlanet;<br>}<br>var zeus = new spaceShuttle('Jupiter');</blockquote>",
        "The class syntax simply replaces the constructor function creation:",
        "<blockquote>class SpaceShuttle {<br>  constructor(targetPlanet){<br>    this.targetPlanet = targetPlanet;<br>  }<br>}<br>const zeus = new spaceShuttle('Jupiter');</blockquote>",
        "Notice that the <code>class</code> keyword declares a new function, and a constructor was added, which would be invoked when <code>new</code> is called - to create a new object.",
        "<hr>",
        "Use <code>class</code> keyword and write a proper constructor to create the <code>Vegetable</code> class.",
        "The <code>Vegetable</code> lets you create a vegetable object, with a property <code>name</code>, to be passed to constructor."
      ],
      "tests": [
        {
          "text":
            "<code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.",
          "testString":
            "assert(typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function', '<code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.');"
        },
        {
          "text": "<code>class</code> keyword was used.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/class/g),'<code>class</code> keyword was used.');"
        },
        {
          "text": "<code>Vegetable</code> can be instantiated.",
          "testString":
            "assert(() => {const a = new Vegetable(\"apple\"); return typeof a === 'object';},'<code>Vegetable</code> can be instantiated.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function makeClass() {\n  \"use strict\";\n  /* Alter code below this line */\n\n  /* Alter code above this line */\n  return Vegetable;\n}\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // => should be 'carrot'",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use class Syntax to Define a Constructor Function",
      "dashedName": "use-class-syntax-to-define-a-constructor-function"
    },
    {
      "id": "587d7b8c367417b2b2512b54",
      "description": [
        "You can obtain values from an object, and set a value of a property within an object.",
        "These are classically called <dfn>getters</dfn> and <dfn>setters</dfn>.",
        "Getter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.",
        "Setter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.",
        "<blockquote>class Book {<br>  constructor(author) {<br>    this._author = author;<br>  }<br>  // getter<br>  get writer(){<br>    return this._author;<br>  }<br>  // setter<br>  set writer(updatedAuthor){<br>    this._author = updatedAuthor;<br>  }<br>}<br>const lol = new Book('anonymous');<br>console.log(lol.writer);<br>lol.writer = 'wut';<br>console.log(lol.writer);</blockquote>",
        "Notice the syntax we are using to invoke the getter and setter - as if they are not even functions.",
        "Getters and setters are important, because they hide internal implementation details.",
        "<hr>",
        "Use <code>class</code> keyword to create a Thermostat class. The constructor accepts Fahrenheit temperature.",
        "Now create <code>getter</code> and <code>setter</code> in the class, to obtain the temperature in Celsius scale.",
        "Remember that <code>C = 5/9 * (F - 32)</code> and <code>F = C * 9.0 / 5 + 32</code>, where F is the value of temperature in Fahrenheit scale, and C is the value of the same temperature in Celsius scale",
        "Note",
        "When you implement this, you would be tracking the temperature inside the class in one scale - either Fahrenheit or Celsius.",
        "This is the power of getter or setter - you are creating an API for another user, who would get the correct result, no matter which one you track.",
        "In other words, you are abstracting implementation details from the consumer."
      ],
      "tests": [
        {
          "text":
            "<code>Thermostat</code> should be a <code>class</code> with a defined <code>constructor</code> method.",
          "testString":
            "assert(typeof Thermostat === 'function' && typeof Thermostat.constructor === 'function','<code>Thermostat</code> should be a <code>class</code> with a defined <code>constructor</code> method.');"
        },
        {
          "text": "<code>class</code> keyword was used.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/class/g),'<code>class</code> keyword was used.');"
        },
        {
          "text": "<code>Thermostat</code> can be instantiated.",
          "testString":
            "assert(() => {const t = new Thermostat(32); return typeof t === 'object' && t.temperature === 0;}, '<code>Thermostat</code> can be instantiated.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function makeClass() {\n  \"use strict\";\n  /* Alter code below this line */\n\n  /* Alter code above this line */\n  return Thermostat;\n}\nconst Thermostat = makeClass();\nconst thermos = new Thermostat(76); // setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in C\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in C",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use getters and setters to Control Access to an Object",
      "dashedName": "use-getters-and-setters-to-control-access-to-an-object"
    },
    {
      "id": "587d7b8c367417b2b2512b55",
      "description": [
        "In the past, the function <code>require()</code> would be used to import the functions and code in external files and modules. While handy, this presents a problem: some files and modules are rather large, and you may only need certain code from those external resources.",
        "ES6 gives us a very handy tool known as <dfn>import</dfn>. With it, we can choose which parts of a module or file to load into a given file, saving time and memory.",
        "Consider the following example. Imagine that <code>math_array_functions</code> has about 20 functions, but I only need one, <code>countItems</code>, in my current file. The old <code>require()</code> approach would force me to bring in all 20 functions. With this new <code>import</code> syntax, I can bring in just the desired function, like so:",
        "<blockquote>import { countItems } from \"math_array_functions\"</blockquote>",
        "A description of the above code:",
        "<blockquote>import { function } from \"file_path_goes_here\"<br>// We can also import variables the same way!</blockquote>",
        "There are a few ways to write an <code>import</code> statement, but the above is a very common use-case.",
        "<strong>Note</strong><br>The whitespace surrounding the function inside the curly braces is a best practice - it makes it easier to read the <code>import</code> statement.",
        "<strong>Note</strong><br>The lessons in this section handle non-browser features. <code>import</code>, and the statements we introduce in the rest of these lessons, won't work on a browser directly. However, we can use various tools to create code out of this to make it work in browser.",
        "<strong>Note</strong><br>In most cases, the file path requires a <code>./</code> before it; otherwise, node will look in the <code>node_modules</code> directory first trying to load it as a dependency.",
        "<hr>",
        "Add the appropriate <code>import</code> statement that will allow the current file to use the <code>capitalizeString</code> function. The file where this function lives is called <code>\"string_functions\"</code>, and it is in the same directory as the current file."
      ],
      "tests": [
        {
          "text": "valid <code>import</code> statement",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/import\\s+\\{\\s?capitalizeString\\s?\\}\\s+from\\s+\"string_functions\"/g), 'valid <code>import</code> statement');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "\"use strict\";\ncapitalizeString(\"hello!\");",
          "head":
            "window.require = function (str) {\nif (str === 'string_functions') {\nreturn {\ncapitalizeString: str => str.toUpperCase()\n}}};",
          "tail": ""
        }
      },
      "name": "Understand the Differences Between import and require",
      "dashedName": "understand-the-differences-between-import-and-require"
    },
    {
      "id": "587d7b8c367417b2b2512b56",
      "description": [
        "In the previous challenge, you learned about <code>import</code> and how it can be leveraged to import small amounts of code from large files. In order for this to work, though, we must utilize one of the statements that goes with <code>import</code>, known as <dfn>export</dfn>. When we want some code - a function, or a variable - to be usable in another file, we must export it in order to import it into another file. Like <code>import</code>, <code>export</code> is a non-browser feature.",
        "The following is what we refer to as a <dfn>named export</dfn>. With this, we can import any code we export into another file with the <code>import</code> syntax you learned in the last lesson. Here's an example:",
        "<blockquote>const capitalizeString = (string) => {<br>  return string.charAt(0).toUpperCase() + string.slice(1);<br>}<br>export { capitalizeString } //How to export functions.<br>export const foo = \"bar\"; //How to export variables.</blockquote>",
        "Alternatively, if you would like to compact all your <code>export</code> statements into one line, you can take this approach:",
        "<blockquote>const capitalizeString = (string) => {<br>  return string.charAt(0).toUpperCase() + string.slice(1);<br>}<br>const foo = \"bar\";<br>export { capitalizeString, foo }</blockquote>",
        "Either approach is perfectly acceptable.",
        "<hr>",
        "Below are two variables that I want to make available for other files to use. Utilizing the first way I demonstrated <code>export</code>, export the two variables."
      ],
      "tests": [
        {
          "text": "<code>foo</code> is exported.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/export\\s+const\\s+foo\\s+=+\\s\"bar\"/g), '<code>foo</code> is exported.');"
        },
        {
          "text": "<code>bar</code> is exported.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/export\\s+const\\s+boo\\s+=+\\s\"far\"/g), '<code>bar</code> is exported.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "\"use strict\";\nconst foo = \"bar\";\nconst boo = \"far\";",
          "head": "window.exports = function(){};",
          "tail": ""
        }
      },
      "name": "Use export to Reuse a Code Block",
      "dashedName": "use-export-to-reuse-a-code-block"
    },
    {
      "id": "587d7b8c367417b2b2512b57",
      "description": [
        "Suppose you have a file that you wish to import all of its contents into the current file. This can be done with the <dfn>import *</dfn> syntax.",
        "Here's an example where the contents of a file named <code>\"math_functions\"</code> are imported into a file in the same directory:",
        "<blockquote>import * as myMathModule from \"math_functions\";<br>myMathModule.add(2,3);<br>myMathModule.subtract(5,3);</blockquote>",
        "And breaking down that code:",
        "<blockquote>import * as object_with_name_of_your_choice from \"file_path_goes_here\"<br>object_with_name_of_your_choice.imported_function</blockquote>",
        "You may use any name following the <code>import * as </code>portion of the statement. In order to utilize this method, it requires an object that receives the imported values. From here, you will use the dot notation to call your imported values.",
        "<hr>",
        "The code below requires the contents of a file, <code>\"capitalize_strings\"</code>, found in the same directory as it, imported. Add the appropriate <code>import *</code> statement to the top of the file, using the object provided."
      ],
      "tests": [
        {
          "text": "Properly uses <code>import * as</code> syntax.",
          "testString":
            "assert(code.match(/import\\s+\\*\\s+as\\s+[a-zA-Z0-9_$]+\\s+from\\s*\"\\s*capitalize_strings\\s*\"\\s*;/gi), 'Properly uses <code>import * as</code> syntax.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "\"use strict\";",
          "head":
            "window.require = function(str) {\nif (str === 'capitalize_strings') {\nreturn {\ncapitalize: str => str.toUpperCase(),\nlowercase: str => str.toLowerCase()\n}}};",
          "tail": ""
        }
      },
      "name": "Use  to Import Everything from a File",
      "dashedName": "use--to-import-everything-from-a-file"
    },
    {
      "id": "587d7b8c367417b2b2512b58",
      "description": [
        "In the <code>export</code> lesson, you learned about the syntax referred to as a <dfn>named export</dfn>. This allowed you to make multiple functions and variables available for use in other files.",
        "There is another <code>export</code> syntax you need to know, known as <dfn>export default</dfn>. Usually you will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.",
        "Here is a quick example of <code>export default</code>:",
        "<blockquote>export default function add(x,y) {<br>  return x + y;<br>}</blockquote>",
        "Note: Since <code>export default</code> is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use <code>export default</code> with <code>var</code>, <code>let</code>, or <code>const</code>",
        "<hr>",
        "The following function should be the fallback value for the module. Please add the necessary code to do so."
      ],
      "tests": [
        {
          "text": "Proper used of <code>export</code> fallback.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/export\\s+default\\s+function\\s+subtract\\(x,y\\)\\s+{return\\s+x\\s-\\s+y;}/g), 'Proper used of <code>export</code> fallback.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "\"use strict\";\nfunction subtract(x,y) {return x - y;}",
          "head": "window.exports = function(){};",
          "tail": ""
        }
      },
      "name": "Create an Export Fallback with export default",
      "dashedName": "create-an-export-fallback-with-export-default"
    },
    {
      "id": "587d7b8d367417b2b2512b59",
      "description": [
        "In the last challenge, you learned about <code>export default</code> and its uses. It is important to note that, to import a default export, you need to use a different <code>import</code> syntax.",
        "In the following example, we have a function, <code>add</code>, that is the default export of a file, <code>\"math_functions\"</code>. Here is how to import it:",
        "<blockquote>import add from \"math_functions\";<br>add(5,4); //Will return 9</blockquote>",
        "The syntax differs in one key place - the imported value, <code>add</code>, is not surrounded by curly braces, <code>{}</code>. Unlike exported values, the primary method of importing a default export is to simply write the value's name after <code>import</code>.",
        "<hr>",
        "In the following code, please import the default export, <code>subtract</code>, from the file <code>\"math_functions\"</code>, found in the same directory as this file."
      ],
      "tests": [
        {
          "text": "Properly imports <code>export default</code> method.",
          "testString":
            "getUserInput => assert(getUserInput('index').match(/import\\s+subtract\\s+from\\s+\"math_functions\"/g), 'Properly imports <code>export default</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "\"use strict\";\nsubtract(7,4);",
          "head":
            "window.require = function(str) {\nif (str === 'math_functions') {\nreturn function(a, b) {\nreturn a - b;\n}}};",
          "tail": ""
        }
      },
      "name": "Import a Default Export",
      "dashedName": "import-a-default-export"
    },
    {
      "id": "587d7b8d367417b2b2512b5b",
      "description": [
        "Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope.",
        "<code>INPUT -> PROCESS -> OUTPUT</code>",
        "Functional programming is about:",
        "1) Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change",
        "2) Pure functions - the same input always gives the same output",
        "3) Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled",
        "<hr>",
        "The members of freeCodeCamp happen to love tea.",
        "In the code editor, the <code>prepareTea</code> and <code>getTea</code> functions are already defined for you. Call the <code>getTea</code> function to get 40 cups of tea for the team, and store them in the <code>tea4TeamFCC</code> variable."
      ],
      "tests": [
        {
          "text":
            "The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.",
          "testString":
            "assert(tea4TeamFCC.length === 40, 'The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.');"
        },
        {
          "text":
            "The <code>tea4TeamFCC</code> variable should hold cups of green tea.",
          "testString":
            "assert(tea4TeamFCC[0] === 'greenTea', 'The <code>tea4TeamFCC</code> variable should hold cups of green tea.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "/**\n * A long process to prepare tea.\n * @return {string} A cup of tea.\n **/\nconst prepareTea = () => 'greenTea';\n\n/**\n * Get given number of cups of tea.\n * @param {number} numOfCups Number of required cups of tea.\n * @return {Array<string>} Given amount of tea cups.\n **/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\n// Add your code below this line\n\nconst tea4TeamFCC = null; // :(\n\n// Add your code above this line\n\nconsole.log(tea4TeamFCC);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn About Functional Programming",
      "dashedName": "learn-about-functional-programming"
    },
    {
      "id": "587d7b8e367417b2b2512b5c",
      "description": [
        "The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.",
        "With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.",
        "But first, let's cover some functional terminology:",
        "<code>Callbacks</code> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.",
        "Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <code>first class</code> functions. In JavaScript, all functions are <code>first class</code> functions.",
        "The functions that take a function as an argument, or return a function as a return value are called <code>higher order</code> functions.",
        "When the functions are passed in to another function or returned from another function, then those functions which gets passed in or returned can be called a <code>lambda</code>.",
        "<hr>",
        "Prepare 27 cups of green tea and 13 cups of black tea and store them in <code>tea4GreenTeamFCC</code> and <code>tea4BlackTeamFCC</code> variables, respectively. Note that the <code>getTea</code> function has been modified so it now takes a function as the first argument.",
        "Note: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons."
      ],
      "tests": [
        {
          "text":
            "The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.",
          "testString":
            "assert(tea4GreenTeamFCC.length === 27, 'The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.');"
        },
        {
          "text":
            "The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.",
          "testString":
            "assert(tea4GreenTeamFCC[0] === 'greenTea', 'The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.');"
        },
        {
          "text":
            "The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.",
          "testString":
            "assert(tea4BlackTeamFCC.length === 13, 'The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.');"
        },
        {
          "text":
            "The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.",
          "testString":
            "assert(tea4BlackTeamFCC[0] === 'blackTea', 'The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "/**\n * A long process to prepare green tea.\n * @return {string} A cup of green tea.\n **/\nconst prepareGreenTea = () => 'greenTea';\n\n/**\n * A long process to prepare black tea.\n * @return {string} A cup of black tea.\n **/\nconst prepareBlackTea = () => 'blackTea';\n\n/**\n * Get given number of cups of tea.\n * @param {function():string} prepareTea The type of tea preparing function.\n * @param {number} numOfCups Number of required cups of tea.\n * @return {Array<string>} Given amount of tea cups.\n **/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\n// Add your code below this line\n\nconst tea4GreenTeamFCC = null; // :(\nconst tea4BlackTeamFCC = null; // :(\n\n// Add your code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand Functional Programming Terminology",
      "dashedName": "understand-functional-programming-terminology"
    },
    {
      "id": "587d7b8e367417b2b2512b5d",
      "description": [
        "Functional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues.",
        "In English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.",
        "Often the statements change the state of the program, like updating global variables. A classic example is writing a <code>for</code> loop that gives exact directions to iterate over the indices of an array.",
        "In contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.",
        "JavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the <code>for</code> loop mentioned above, you could call the <code>map</code> method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.",
        "Consider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.",
        "A Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.",
        "The code editor shows an implementation of this functionality with functions for <code>tabOpen()</code>, <code>tabClose()</code>, and <code>join()</code>. The array <code>tabs</code> is part of the Window object that stores the name of the open pages.",
        "<h4>Instructions<h4>",
        "Run the code in the editor. It's using a method that has side effects in the program, causing incorrect output. The final list of open tabs should be <code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code> but the output will be slightly different.",
        "Work through the code and see if you can figure out the problem, then advance to the next challenge to learn more."
      ],
      "tests": [
        {
          "text": "Move ahead to understand the error.",
          "testString": "assert(true, 'Move ahead to understand the error.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// tabs is an array of titles of each site open within the window\nvar Window = function(tabs) {\n  this.tabs = tabs; // we keep a record of the array inside the object\n};\n\n// When you join two windows into one window\nWindow.prototype.join = function (otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\n// When you open a new tab at the end\nWindow.prototype.tabOpen = function (tab) {\n  this.tabs.push('new tab'); // let's open a new tab for now\n  return this;\n};\n\n// When you close a tab\nWindow.prototype.tabClose = function (index) {\n  var tabsBeforeIndex = this.tabs.splice(0, index); // get the tabs before the tab\n  var tabsAfterIndex = this.tabs.splice(index); // get the tabs after the tab\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // join them together \n  return this;\n };\n\n// Let's create three browser windows\nvar workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites\nvar socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites\nvar videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); //  Entertainment sites\n\n// Now perform the tab opening, closing, and other operations\nvar finalTabs = socialWindow\n                    .tabOpen() // Open a new tab for cat memes\n                    .join(videoWindow.tabClose(2)) // Close third tab in video window, and join\n                    .join(workWindow.tabClose(1).tabOpen());\n\nalert(finalTabs.tabs);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand the Hazards of Using Imperative Code",
      "dashedName": "understand-the-hazards-of-using-imperative-code"
    },
    {
      "id": "587d7b8e367417b2b2512b5e",
      "description": [
        "If you haven't already figured it out, the issue in the previous challenge was with the <code>splice</code> call in the <code>tabClose()</code> function. Unfortunately, <code>splice</code> changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.",
        "This is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.",
        "One of the core principle of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.",
        "The previous example didn't have any complicated operations but the <code>splice</code> method changed the original array, and resulted in a bug.",
        "Recall that in functional programming, changing or altering things is called <code>mutation</code>, and the outcome is called a <code>side effect</code>. A function, ideally, should be a <code>pure function</code>, meaning that it does not cause any side effects.",
        "Let's try to master this discipline and not alter any variable or object in our code.",
        "<hr>",
        "Fill in the code for the function <code>incrementer</code> so it returns the value of the global variable <code>fixedValue</code> increased by one."
      ],
      "tests": [
        {
          "text":
            "Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.",
          "testString":
            "assert(fixedValue === 4, 'Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.');"
        },
        {
          "text":
            "Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.",
          "testString":
            "assert(newValue === 5, 'Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar fixedValue = 4;\n\nfunction incrementer () {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\n\nvar newValue = incrementer(); // Should equal 5\nconsole.log(fixedValue); // Should print 4",
          "head": "",
          "tail": ""
        }
      },
      "name": "Avoid Mutations and Side Effects Using Functional Programming",
      "dashedName":
        "avoid-mutations-and-side-effects-using-functional-programming"
    },
    {
      "id": "587d7b8e367417b2b2512b5f",
      "description": [
        "The last challenge was a step closer to functional programming principles, but there is still something missing.",
        "We didn't alter the global variable value, but the function <code>incrementer</code> would not work without the global variable <code>fixedValue</code> being there.",
        "Another principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.",
        "There are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.",
        "This can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.",
        "Finally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.",
        "<hr>",
        "Let's update the <code>incrementer</code> function to clearly declare its dependencies.",
        "Write the <code>incrementer</code> function so it takes an argument, and then increases the value by one."
      ],
      "tests": [
        {
          "text":
            "Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.",
          "testString":
            "assert(fixedValue === 4, 'Your function <code>incrementer</code> should not change the value of <code>fixedValue</code>.');"
        },
        {
          "text":
            "Your <code>incrementer</code> function should take a parameter.",
          "testString":
            "assert(code.match(/function\\s+?incrementer\\s*?\\(.+?\\)/g), 'Your <code>incrementer</code> function should take a parameter.');"
        },
        {
          "text":
            "Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.",
          "testString":
            "assert(newValue === 5, 'Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar fixedValue = 4;\n\n// Add your code below this line\nfunction incrementer () {\n  \n  \n  // Add your code above this line\n}\n\nvar newValue = incrementer(fixedValue); // Should equal 5\nconsole.log(fixedValue); // Should print 4",
          "head": "",
          "tail": ""
        }
      },
      "name": "Pass Arguments to Avoid External Dependence in a Function",
      "dashedName": "pass-arguments-to-avoid-external-dependence-in-a-function"
    },
    {
      "id": "587d7b8f367417b2b2512b60",
      "description": [
        "So far, we have seen two distinct principles for functional programming:",
        "1) Don't alter a variable or object - create new variables and objects and return them if need be from a function.",
        "2) Declare function arguments - any computation inside a function depends only on the arguments, and not on any global object or variable.",
        "Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.",
        "<hr>",
        "Refactor (rewrite) the code so the global array <code>bookList</code> is not changed inside either function. The <code>add</code> function should add the given <code>bookName</code> to the end of an array. The <code>remove</code> function should remove the given <code>bookName</code> from an array. Both functions should return an array, and any new parameters should be added before the <code>bookName</code> one."
      ],
      "tests": [
        {
          "text":
            "<code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString":
            "assert(JSON.stringify(bookList) === JSON.stringify([\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]), '<code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text":
            "<code>newBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString":
            "assert(JSON.stringify(newBookList) === JSON.stringify(['The Hound of the Baskervilles', 'On The Electrodynamics of Moving Bodies', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        },
        {
          "text":
            "<code>newerBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString":
            "assert(JSON.stringify(newerBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae']), '<code>newerBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text":
            "<code>newestBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString":
            "assert(JSON.stringify(newestBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newestBookList</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\n/* This function should add a book to the list and return the list */\n// New parameters should come before the bookName one\n\n// Add your code below this line\nfunction add (bookName) {\n  \n  return bookList.push(bookName);\n  \n  // Add your code above this line\n}\n\n/* This function should remove a book from the list and return the list */\n// New parameters should come before the bookName one\n\n// Add your code below this line\nfunction remove (bookName) {\n  if (bookList.indexOf(bookName) >= 0) {\n    \n    return bookList.splice(0, 1, bookName);\n    \n    // Add your code above this line\n    }\n}\n\nvar newBookList = add(bookList, 'A Brief History of Time');\nvar newerBookList = remove(bookList, 'On The Electrodynamics of Moving Bodies');\nvar newestBookList = remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies');\n\nconsole.log(bookList);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Refactor Global Variables Out of Functions",
      "dashedName": "refactor-global-variables-out-of-functions"
    },
    {
      "id": "587d7b8f367417b2b2512b61",
      "description": [
        "So far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.",
        "This is only the beginning. As its name suggests, functional programming is centered around a theory of functions.",
        "It would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <code>First Class Objects</code> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.",
        "Let's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at <code>Array.prototype.map()</code>, or more simply <code>map</code>.",
        "Remember that the <code>map</code> method is a way to iterate over each item in an array. It creates a new array (without changing the original one) after applying a callback function to every element.",
        "<hr>",
        "The <code>watchList</code> array holds objects with information on several movies. Use <code>map</code> to pull the title and rating from <code>watchList</code> and save the new array in the <code>rating</code> variable. The code in the editor currently uses a <code>for</code> loop to do this, replace the loop functionality with your <code>map</code> expression."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString":
            "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString":
            "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text": "Your code should use the <code>map</code> method.",
          "testString":
            "assert(code.match(/\\.map/g), 'Your code should use the <code>map</code> method.');"
        },
        {
          "text":
            "<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.",
          "testString":
            "assert(JSON.stringify(rating) === JSON.stringify([{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]), '<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar watchList = [\n                 {  \n                   \"Title\": \"Inception\",\n                   \"Year\": \"2010\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"16 Jul 2010\",\n                   \"Runtime\": \"148 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Christopher Nolan\",\n                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",\n                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n                   \"Language\": \"English, Japanese, French\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.8\",\n                   \"imdbVotes\": \"1,446,708\",\n                   \"imdbID\": \"tt1375666\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Interstellar\",\n                   \"Year\": \"2014\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"07 Nov 2014\",\n                   \"Runtime\": \"169 min\",\n                   \"Genre\": \"Adventure, Drama, Sci-Fi\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n                   \"Language\": \"English\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.6\",\n                   \"imdbVotes\": \"910,366\",\n                   \"imdbID\": \"tt0816692\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"The Dark Knight\",\n                   \"Year\": \"2008\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Jul 2008\",\n                   \"Runtime\": \"152 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n                   \"Language\": \"English, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"82\",\n                   \"imdbRating\": \"9.0\",\n                   \"imdbVotes\": \"1,652,832\",\n                   \"imdbID\": \"tt0468569\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Batman Begins\",\n                   \"Year\": \"2005\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"15 Jun 2005\",\n                   \"Runtime\": \"140 min\",\n                   \"Genre\": \"Action, Adventure\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n                   \"Language\": \"English, Urdu, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n                   \"Metascore\": \"70\",\n                   \"imdbRating\": \"8.3\",\n                   \"imdbVotes\": \"972,584\",\n                   \"imdbID\": \"tt0372784\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"Avatar\",\n                   \"Year\": \"2009\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Dec 2009\",\n                   \"Runtime\": \"162 min\",\n                   \"Genre\": \"Action, Adventure, Fantasy\",\n                   \"Director\": \"James Cameron\",\n                   \"Writer\": \"James Cameron\",\n                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n                   \"Language\": \"English, Spanish\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"83\",\n                   \"imdbRating\": \"7.9\",\n                   \"imdbVotes\": \"876,575\",\n                   \"imdbID\": \"tt0499549\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                }\n];\n\n// Add your code below this line\n\nvar rating = [];\nfor(var i=0; i < watchList.length; i++){\n  rating.push({title: watchList[i][\"Title\"],  rating: watchList[i][\"imdbRating\"]});\n}\n\n// Add your code above this line\n\nconsole.log(rating); ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the map Method to Extract Data from an Array",
      "dashedName": "use-the-map-method-to-extract-data-from-an-array"
    },
    {
      "id": "587d7b8f367417b2b2512b62",
      "description": [
        "As you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.",
        "In other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.",
        "It would teach us a lot about <code>map</code> to try to implement a version of it that behaves exactly like the <code>Array.prototype.map()</code> with a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myMap()</code>, which should behave exactly like <code>Array.prototype.map()</code>. You may use a <code>for</code> loop or the <code>forEach</code> method."
      ],
      "tests": [
        {
          "text":
            "<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.",
          "testString":
            "assert(JSON.stringify(new_s) === JSON.stringify([46, 130, 196, 10]), '<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.');"
        },
        {
          "text": "Your code should not use the <code>map</code> method.",
          "testString":
            "assert(!code.match(/\\.map/g), 'Your code should not use the <code>map</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global Array\nvar s = [23, 65, 98, 5];\n\nArray.prototype.myMap = function(callback){\n  var newArray = [];\n  // Add your code below this line\n  \n  // Add your code above this line\n  return newArray;\n\n};\n\nvar new_s = s.myMap(function(item){\n  return item * 2;\n});",
          "head": "",
          "tail": ""
        }
      },
      "name": "Implement map on a Prototype",
      "dashedName": "implement-map-on-a-prototype"
    },
    {
      "id": "587d7b8f367417b2b2512b63",
      "description": [
        "Another useful array function is <code>Array.prototype.filter()</code>, or simply <code>filter()</code>. The <code>filter</code> method returns a new array which is at most as long as the original array, but usually has fewer items.",
        "<code>Filter</code> doesn't alter the original array, just like <code>map</code>. It takes a callback function that applies the logic inside the callback on each element of the array. If an element returns true based on the criteria in the callback function, then it is included in the new array.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use a combination of <code>filter</code> and <code>map</code> to return a new array of objects with only <code>title</code> and <code>rating</code> keys, but where <code>imdbRating</code> is greater than or equal to 8.0. Note that the rating values are saved as strings in the object and you may want to convert them into numbers to perform mathematical operations on them."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString":
            "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>filter</code> method.",
          "testString":
            "assert(code.match(/\\.filter/g), 'Your code should use the <code>filter</code> method.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString":
            "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text":
            "<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.",
          "testString":
            "assert.deepEqual(filteredList, [{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}], '<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar watchList = [\n                 {  \n                   \"Title\": \"Inception\",\n                   \"Year\": \"2010\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"16 Jul 2010\",\n                   \"Runtime\": \"148 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Christopher Nolan\",\n                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",\n                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n                   \"Language\": \"English, Japanese, French\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.8\",\n                   \"imdbVotes\": \"1,446,708\",\n                   \"imdbID\": \"tt1375666\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Interstellar\",\n                   \"Year\": \"2014\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"07 Nov 2014\",\n                   \"Runtime\": \"169 min\",\n                   \"Genre\": \"Adventure, Drama, Sci-Fi\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n                   \"Language\": \"English\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.6\",\n                   \"imdbVotes\": \"910,366\",\n                   \"imdbID\": \"tt0816692\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"The Dark Knight\",\n                   \"Year\": \"2008\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Jul 2008\",\n                   \"Runtime\": \"152 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n                   \"Language\": \"English, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"82\",\n                   \"imdbRating\": \"9.0\",\n                   \"imdbVotes\": \"1,652,832\",\n                   \"imdbID\": \"tt0468569\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Batman Begins\",\n                   \"Year\": \"2005\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"15 Jun 2005\",\n                   \"Runtime\": \"140 min\",\n                   \"Genre\": \"Action, Adventure\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n                   \"Language\": \"English, Urdu, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n                   \"Metascore\": \"70\",\n                   \"imdbRating\": \"8.3\",\n                   \"imdbVotes\": \"972,584\",\n                   \"imdbID\": \"tt0372784\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"Avatar\",\n                   \"Year\": \"2009\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Dec 2009\",\n                   \"Runtime\": \"162 min\",\n                   \"Genre\": \"Action, Adventure, Fantasy\",\n                   \"Director\": \"James Cameron\",\n                   \"Writer\": \"James Cameron\",\n                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n                   \"Language\": \"English, Spanish\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"83\",\n                   \"imdbRating\": \"7.9\",\n                   \"imdbVotes\": \"876,575\",\n                   \"imdbID\": \"tt0499549\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                }\n];\n\n// Add your code below this line\n\nvar filteredList;\n\n// Add your code above this line\n\nconsole.log(filteredList); ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the filter Method to Extract Data from an Array",
      "dashedName": "use-the-filter-method-to-extract-data-from-an-array"
    },
    {
      "id": "587d7b8f367417b2b2512b64",
      "description": [
        "It would teach us a lot about the <code>filter</code> method if we try to implement a version of it that behaves exactly like <code>Array.prototype.filter()</code>. It can use either a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myFilter()</code>, which should behave exactly like <code>Array.prototype.filter()</code>. You may use a <code>for</code> loop or the <code>Array.prototype.forEach()</code> method."
      ],
      "tests": [
        {
          "text": "<code>new_s</code> should equal <code>[23, 65, 5]</code>.",
          "testString":
            "assert(JSON.stringify(new_s) === JSON.stringify([23, 65, 5]), '<code>new_s</code> should equal <code>[23, 65, 5]</code>.');"
        },
        {
          "text": "Your code should not use the <code>filter</code> method.",
          "testString":
            "assert(!code.match(/\\.filter/g), 'Your code should not use the <code>filter</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global Array\nvar s = [23, 65, 98, 5];\n\nArray.prototype.myFilter = function(callback){\n  var newArray = [];\n  // Add your code below this line\n  \n  // Add your code above this line\n  return newArray;\n\n};\n\nvar new_s = s.myFilter(function(item){\n  return item % 2 === 1;\n});",
          "head": "",
          "tail": ""
        }
      },
      "name": "Implement the filter Method on a Prototype",
      "dashedName": "implement-the-filter-method-on-a-prototype"
    },
    {
      "id": "587d7b90367417b2b2512b65",
      "description": [
        "The <code>slice</code> method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The <code>slice</code> method does not mutate the original array, but returns a new one.",
        "Here's an example:",
        "<blockquote>var arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];<br>var newArray = arr.slice(1, 3);<br>// Sets newArray to [\"Dog\", \"Tiger\"]</blockquote>",
        "<hr>",
        "Use the <code>slice</code> method in the <code>sliceArray</code> function to return part of the <code>anim</code> array given the provided <code>beginSlice</code> and <code>endSlice</code> indices. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString":
            "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "The <code>inputAnim</code> variable should not change.",
          "testString":
            "assert(JSON.stringify(inputAnim) === JSON.stringify([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"]), 'The <code>inputAnim</code> variable should not change.');"
        },
        {
          "text":
            "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.",
          "testString":
            "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)) === JSON.stringify([\"Dog\", \"Tiger\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.');"
        },
        {
          "text":
            "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.",
          "testString":
            "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)) === JSON.stringify([\"Cat\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.');"
        },
        {
          "text":
            "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.",
          "testString":
            "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)) === JSON.stringify([\"Dog\", \"Tiger\", \"Zebra\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sliceArray(anim, beginSlice, endSlice) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nvar inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];\nsliceArray(inputAnim, 1, 3);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Return Part of an Array Using the slice Method",
      "dashedName": "return-part-of-an-array-using-the-slice-method"
    },
    {
      "id": "9d7123c8c441eeafaeb5bdef",
      "description": [
        "A common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the <code>splice</code> method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the <code>splice</code> method mutates the original array it is called on. Here's an example:",
        "<blockquote>var cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];<br>cities.splice(3, 1); // Returns \"London\" and deletes it from the cities array<br>// cities is now [\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]</blockquote>",
        "As we saw in the last challenge, the <code>slice</code> method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the <code>slice</code> method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the <code>slice</code> method instead of <code>splice</code> helps to avoid any array-mutating side effects.",
        "<hr>",
        "Rewrite the function <code>nonMutatingSplice</code> by using <code>slice</code> instead of <code>splice</code>. It should limit the provided <code>cities</code> array to a length of 3, and return a new array with only the first three items.",
        "Do not mutate the original array provided to the function."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString":
            "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "Your code should not use the <code>splice</code> method.",
          "testString":
            "assert(!code.match(/\\.splice/g), 'Your code should not use the <code>splice</code> method.');"
        },
        {
          "text": "The <code>inputCities</code> array should not change.",
          "testString":
            "assert(JSON.stringify(inputCities) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"]), 'The <code>inputCities</code> array should not change.');"
        },
        {
          "text":
            "<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.",
          "testString":
            "assert(JSON.stringify(nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\"]), '<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function nonMutatingSplice(cities) {\n  // Add your code below this line\n  return cities.splice(3);\n  \n  // Add your code above this line\n}\nvar inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];\nnonMutatingSplice(inputCities);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Elements from an Array Using slice Instead of splice",
      "dashedName":
        "remove-elements-from-an-array-using-slice-instead-of-splice"
    },
    {
      "id": "587d7da9367417b2b2512b66",
      "description": [
        "<code>Concatenation</code> means to join items end to end. JavaScript offers the <code>concat</code> method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to <code>concat</code>, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:",
        "<blockquote>[1, 2, 3].concat([4, 5, 6]);<br>// Returns a new array [1, 2, 3, 4, 5, 6]</blockquote>",
        "<hr>",
        "Use the <code>concat</code> method in the <code>nonMutatingConcat</code> function to concatenate <code>attach</code> to the end of <code>original</code>. The function should return the concatenated array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString":
            "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString":
            "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString":
            "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text":
            "<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString":
            "assert(JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function nonMutatingConcat(original, attach) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nvar first = [1, 2, 3];\nvar second = [4, 5];\nnonMutatingConcat(first, second);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Combine Two Arrays Using the concat Method",
      "dashedName": "combine-two-arrays-using-the-concat-method"
    },
    {
      "id": "587d7da9367417b2b2512b67",
      "description": [
        "Functional programming is all about creating and using non-mutating functions.",
        "The last challenge introduced the <code>concat</code> method as a way to combine arrays into a new one without mutating the original arrays. Compare <code>concat</code> to the <code>push</code> method. <code>Push</code> adds an item to the end of the same array it is called on, which mutates that array. Here's an example:",
        "<blockquote>var arr = [1, 2, 3];<br>arr.push([4, 5, 6]);<br>// arr is changed to [1, 2, 3, [4, 5, 6]]<br>// Not the functional programming way</blockquote>",
        "<code>Concat</code> offers a way to add new items to the end of an array without any mutating side effects.",
        "<hr>",
        "Change the <code>nonMutatingPush</code> function so it uses <code>concat</code> to add <code>newItem</code> to the end of <code>original</code> instead of <code>push</code>. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString":
            "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "Your code should not use the <code>push</code> method.",
          "testString":
            "assert(!code.match(/\\.push/g), 'Your code should not use the <code>push</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString":
            "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString":
            "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text":
            "<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString":
            "assert(JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function nonMutatingPush(original, newItem) {\n  // Add your code below this line\n  return original.push(newItem);\n  \n  // Add your code above this line\n}\nvar first = [1, 2, 3];\nvar second = [4, 5];\nnonMutatingPush(first, second);",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Add Elements to the End of an Array Using concat Instead of push",
      "dashedName":
        "add-elements-to-the-end-of-an-array-using-concat-instead-of-push"
    },
    {
      "id": "587d7da9367417b2b2512b68",
      "description": [
        "<code>Array.prototype.reduce()</code>, or simply <code>reduce()</code>, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the <code>reduce</code> method.",
        "This is not the case with the <code>filter</code> and <code>map</code> methods since they do not allow interaction between two different elements of the array. For example, if you want to compare elements of the array, or add them together, <code>filter</code> or <code>map</code> could not process that.",
        "The <code>reduce</code> method allows for more general forms of array processing, and it's possible to show that both <code>filter</code> and <code>map</code> can be derived as a special application of <code>reduce</code>.",
        "However, before we get there, let's practice using <code>reduce</code> first.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use <code>reduce</code> to find the average IMDB rating of the movies directed by Christopher Nolan. Recall from prior challenges how to <code>filter</code> data and <code>map</code> over it to pull what you need. You may need to create other variables, but save the final average into the variable <code>averageRating</code>. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString":
            "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>reduce</code> method.",
          "testString":
            "assert(code.match(/\\.reduce/g), 'Your code should use the <code>reduce</code> method.');"
        },
        {
          "text": "The <code>averageRating</code> should equal 8.675.",
          "testString":
            "assert(averageRating == 8.675, 'The <code>averageRating</code> should equal 8.675.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString":
            "assert(!code.match(/for\\s*?\\(.*\\)/g), 'Your code should not use a <code>for</code> loop.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar watchList = [\n                 {  \n                   \"Title\": \"Inception\",\n                   \"Year\": \"2010\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"16 Jul 2010\",\n                   \"Runtime\": \"148 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Christopher Nolan\",\n                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",\n                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n                   \"Language\": \"English, Japanese, French\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.8\",\n                   \"imdbVotes\": \"1,446,708\",\n                   \"imdbID\": \"tt1375666\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Interstellar\",\n                   \"Year\": \"2014\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"07 Nov 2014\",\n                   \"Runtime\": \"169 min\",\n                   \"Genre\": \"Adventure, Drama, Sci-Fi\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n                   \"Language\": \"English\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n                   \"Metascore\": \"74\",\n                   \"imdbRating\": \"8.6\",\n                   \"imdbVotes\": \"910,366\",\n                   \"imdbID\": \"tt0816692\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"The Dark Knight\",\n                   \"Year\": \"2008\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Jul 2008\",\n                   \"Runtime\": \"152 min\",\n                   \"Genre\": \"Action, Adventure, Crime\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n                   \"Language\": \"English, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"82\",\n                   \"imdbRating\": \"9.0\",\n                   \"imdbVotes\": \"1,652,832\",\n                   \"imdbID\": \"tt0468569\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {  \n                   \"Title\": \"Batman Begins\",\n                   \"Year\": \"2005\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"15 Jun 2005\",\n                   \"Runtime\": \"140 min\",\n                   \"Genre\": \"Action, Adventure\",\n                   \"Director\": \"Christopher Nolan\",\n                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n                   \"Language\": \"English, Urdu, Mandarin\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n                   \"Metascore\": \"70\",\n                   \"imdbRating\": \"8.3\",\n                   \"imdbVotes\": \"972,584\",\n                   \"imdbID\": \"tt0372784\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                },\n                {\n                   \"Title\": \"Avatar\",\n                   \"Year\": \"2009\",\n                   \"Rated\": \"PG-13\",\n                   \"Released\": \"18 Dec 2009\",\n                   \"Runtime\": \"162 min\",\n                   \"Genre\": \"Action, Adventure, Fantasy\",\n                   \"Director\": \"James Cameron\",\n                   \"Writer\": \"James Cameron\",\n                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n                   \"Language\": \"English, Spanish\",\n                   \"Country\": \"USA, UK\",\n                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n                   \"Metascore\": \"83\",\n                   \"imdbRating\": \"7.9\",\n                   \"imdbVotes\": \"876,575\",\n                   \"imdbID\": \"tt0499549\",\n                   \"Type\": \"movie\",\n                   \"Response\": \"True\"\n                }\n];\n\n// Add your code below this line\n\nvar averageRating;\n\n// Add your code above this line\n\nconsole.log(averageRating); ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the reduce Method to Analyze Data",
      "dashedName": "use-the-reduce-method-to-analyze-data"
    },
    {
      "id": "587d7da9367417b2b2512b69",
      "description": [
        "The <code>sort</code> method sorts the elements of an array according to the callback function.",
        "For example:",
        "<blockquote>function ascendingOrder(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a - b;<br>&nbsp;&nbsp;});<br>}<br>ascendingOrder([1, 5, 2, 3, 4]);<br>// Returns [1, 2, 3, 4, 5]<br><br>function reverseAlpha(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a < b;<br>&nbsp;&nbsp;});<br>}<br>reverseAlpha(['l', 'h', 'z', 'b', 's']);<br>// Returns ['z', 's', 'l', 'h', 'b']</blockquote>",
        "Note: It's encouraged to provide a callback function to specify how to sort the array items. JavaScript's default sorting method is by string Unicode point value, which may return unexpected results.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>alphabeticalOrder</code> function to sort the elements of <code>arr</code> in alphabetical order."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString":
            "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text":
            "<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.",
          "testString":
            "assert(JSON.stringify(alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])) === JSON.stringify([\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]), '<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.');"
        },
        {
          "text":
            "<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.",
          "testString":
            "assert(JSON.stringify(alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])) === JSON.stringify([\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]), '<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.');"
        },
        {
          "text":
            "<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.",
          "testString":
            "assert(JSON.stringify(alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])) === JSON.stringify([\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]), '<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function alphabeticalOrder(arr) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nalphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sort an Array Alphabetically using the sort Method",
      "dashedName": "sort-an-array-alphabetically-using-the-sort-method"
    },
    {
      "id": "587d7da9367417b2b2512b6a",
      "description": [
        "A side effect of the <code>sort</code> method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that <code>concat</code> returns a new array), then run the <code>sort</code> method.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>nonMutatingSort</code> function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the <code>globalArray</code> variable."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString":
            "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString":
            "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>globalArray</code> variable should not change.",
          "testString":
            "assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]), 'The <code>globalArray</code> variable should not change.');"
        },
        {
          "text":
            "<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.",
          "testString":
            "assert(JSON.stringify(nonMutatingSort(globalArray)) === JSON.stringify([2, 3, 5, 6, 9]), '<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nnonMutatingSort(globalArray);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Return a Sorted Array Without Changing the Original Array",
      "dashedName": "return-a-sorted-array-without-changing-the-original-array"
    },
    {
      "id": "587d7daa367417b2b2512b6b",
      "description": [
        "The <code>split</code> method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.",
        "Here are two examples that split one string by spaces, then another by digits using a regular expression:",
        "<blockquote>var str = \"Hello World\";<br>var bySpace = str.split(\" \");<br>// Sets bySpace to [\"Hello\", \"World\"]<br><br>var otherString = \"How9are7you2today\";<br>var byDigits = str.split(/\\d/);<br>// Sets byDigits to [\"How\", \"are\", \"you\", \"today\"]</blockquote>",
        "Since strings are immutable, the <code>split</code> method makes it easier to work with them.",
        "<hr>",
        "Use the <code>split</code> method inside the <code>splitify</code> function to split <code>str</code> into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>split</code> method.",
          "testString":
            "assert(code.match(/\\.split/g), 'Your code should use the <code>split</code> method.');"
        },
        {
          "text":
            "<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.",
          "testString":
            "assert(JSON.stringify(splitify(\"Hello World,I-am code\")) === JSON.stringify([\"Hello\", \"World\", \"I\", \"am\", \"code\"]), '<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.');"
        },
        {
          "text":
            "<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.",
          "testString":
            "assert(JSON.stringify(splitify(\"Earth-is-our home\")) === JSON.stringify([\"Earth\", \"is\", \"our\", \"home\"]), '<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.');"
        },
        {
          "text":
            "<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.",
          "testString":
            "assert(JSON.stringify(splitify(\"This.is.a-sentence\")) === JSON.stringify([\"This\", \"is\", \"a\", \"sentence\"]), '<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function splitify(str) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nsplitify(\"Hello World,I-am code\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Split a String into an Array Using the split Method",
      "dashedName": "split-a-string-into-an-array-using-the-split-method"
    },
    {
      "id": "587d7daa367417b2b2512b6c",
      "description": [
        "The <code>join</code> method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.",
        "Here's an example:",
        "<blockquote>var arr = [\"Hello\", \"World\"];<br>var str = arr.join(\" \");<br>// Sets str to \"Hello World\"</blockquote>",
        "<hr>",
        "Use the <code>join</code> method (among others) inside the <code>sentensify</code> function to make a sentence from the words in the string <code>str</code>. The function should return a string. For example, \"I-like-Star-Wars\" would be converted to \"I like Star Wars\". For this challenge, do not use the <code>replace</code> method."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>join</code> method.",
          "testString":
            "assert(code.match(/\\.join/g), 'Your code should use the <code>join</code> method.');"
        },
        {
          "text": "Your code should not use the <code>replace</code> method.",
          "testString":
            "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method.');"
        },
        {
          "text":
            "<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.",
          "testString":
            "assert(typeof sentensify(\"May-the-force-be-with-you\") === \"string\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.');"
        },
        {
          "text":
            "<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.",
          "testString":
            "assert(sentensify(\"May-the-force-be-with-you\") === \"May the force be with you\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.');"
        },
        {
          "text":
            "<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.",
          "testString":
            "assert(sentensify(\"The.force.is.strong.with.this.one\") === \"The force is strong with this one\", '<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.');"
        },
        {
          "text":
            "<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.",
          "testString":
            "assert(sentensify(\"There,has,been,an,awakening\") === \"There has been an awakening\", '<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sentensify(str) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nsentensify(\"May-the-force-be-with-you\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Combine an Array into a String Using the join Method",
      "dashedName": "combine-an-array-into-a-string-using-the-join-method"
    },
    {
      "id": "587d7dab367417b2b2512b6d",
      "description": [
        "The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.",
        "Let's combine what we've learned to solve a practical problem.",
        "Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled \"Stop Using Reduce\", it's likely the URL would have some form of the title string in it (\".../stop-using-reduce\"). You may have already noticed this on the freeCodeCamp site.",
        "<hr>",
        "Fill in the <code>urlSlug</code> function so it converts a string <code>title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use <code>replace</code>. Here are the requirements:",
        "The input is a string with spaces and title-cased words",
        "The output is a string with the spaces between words replaced by a hyphen (<code>-</code>)",
        "The output should be all lower-cased letters",
        "The output should not have any spaces"
      ],
      "tests": [
        {
          "text": "The <code>globalTitle</code> variable should not change.",
          "testString":
            "assert(globalTitle === \"Winter Is Coming\", 'The <code>globalTitle</code> variable should not change.');"
        },
        {
          "text":
            "Your code should not use the <code>replace</code> method for this challenge.",
          "testString":
            "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method for this challenge.');"
        },
        {
          "text":
            "<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString":
            "assert(urlSlug(\"Winter Is Coming\") === \"winter-is-coming\", '<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text":
            "<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString":
            "assert(urlSlug(\" Winter Is  Coming\") === \"winter-is-coming\", '<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text":
            "<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.",
          "testString":
            "assert(urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\") === \"a-mind-needs-books-like-a-sword-needs-a-whetstone\", '<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.');"
        },
        {
          "text":
            "<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.",
          "testString":
            "assert(urlSlug(\"Hold The Door\") === \"hold-the-door\", '<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// the global variable\nvar globalTitle = \"Winter Is Coming\";\n\n// Add your code below this line\nfunction urlSlug(title) {\n  \n  \n}\n// Add your code above this line\n\nvar winterComing = urlSlug(globalTitle); // Should be \"winter-is-coming\"",
          "head": "",
          "tail": ""
        }
      },
      "name": "Apply Functional Programming to Convert Strings to URL Slugs",
      "dashedName":
        "apply-functional-programming-to-convert-strings-to-url-slugs"
    },
    {
      "id": "587d7dab367417b2b2512b6e",
      "description": [
        "The <code>every</code> method works with arrays to check if <em>every</em> element passes a particular test. It returns a Boolean value - <code>true</code> if all values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if every element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [1, 5, 8, 0, 10, 11];<br>numbers.every(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns false</blockquote>",
        "<hr>",
        "Use the <code>every</code> method inside the <code>checkPositive</code> function to check if every element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>every</code> method.",
          "testString":
            "assert(code.match(/\\.every/g), 'Your code should use the <code>every</code> method.');"
        },
        {
          "text":
            "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString":
            "assert(!checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.');"
        },
        {
          "text":
            "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString":
            "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text":
            "<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString":
            "assert(!checkPositive([1, -2, 3, -4, 5]), '<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkPositive(arr) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\ncheckPositive([1, 2, 3, -4, 5]);",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the every Method to Check that Every Element in an Array Meets a Criteria",
      "dashedName":
        "use-the-every-method-to-check-that-every-element-in-an-array-meets-a-criteria"
    },
    {
      "id": "587d7dab367417b2b2512b6f",
      "description": [
        "The <code>some</code> method works with arrays to check if <em>any</em> element passes a particular test. It returns a Boolean value - <code>true</code> if any of the values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if any element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [10, 50, 8, 220, 110, 11];<br>numbers.some(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns true</blockquote>",
        "<hr>",
        "Use the <code>some</code> method inside the <code>checkPositive</code> function to check if any element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>some</code> method.",
          "testString":
            "assert(code.match(/\\.some/g), 'Your code should use the <code>some</code> method.');"
        },
        {
          "text":
            "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.",
          "testString":
            "assert(checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text":
            "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString":
            "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text":
            "<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.",
          "testString":
            "assert(!checkPositive([-1, -2, -3, -4, -5]), '<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkPositive(arr) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\ncheckPositive([1, 2, 3, -4, 5]);",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the some Method to Check that Any Elements in an Array Meet a Criteria",
      "dashedName":
        "use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria"
    },
    {
      "id": "587d7dab367417b2b2512b70",
      "description": [
        "The <code>arity</code> of a function is the number of arguments it requires. <code>Currying</code> a function means to convert a function of N <code>arity</code> into N functions of <code>arity</code> 1.",
        "In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.",
        "Here's an example:",
        "<blockquote>//Un-curried function<br>function unCurried(x, y, z) {<br>&nbsp;&nbsp;return x + y + z;<br>}<br><br>//Curried function<br>function curried(x) {<br>&nbsp;&nbsp;return function(y) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x + y;<br>&nbsp;&nbsp;}<br>}<br>curried(1)(2) // Returns 3</blockquote>",
        "This is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the <code>curried</code> function in the example above:",
        "<blockquote>// Call a curried function in parts:<br>var funcForY = curried(1);<br>var funcForZ = funcForY(2);<br>console.log(funcForZ(3)); // Prints 6</blockquote>",
        "Similarly, <code>partial application</code> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments.",
        "Here's an example:",
        "<blockquote>//Impartial function<br>function impartial(x, y, z) {<br>&nbsp;&nbsp;return x + y + z;<br>}<br>var partialFn = impartial.bind(this, 1, 2);<br>partialFn(10); // Returns 13</blockquote>",
        "<hr>",
        "Fill in the body of the <code>add</code> function so it uses currying to add parameters <code>x</code>, <code>y</code>, and <code>z</code>."
      ],
      "tests": [
        {
          "text": "<code>add(10)(20)(30)</code> should return <code>60</code>.",
          "testString":
            "assert(add(10)(20)(30) === 60, '<code>add(10)(20)(30)</code> should return <code>60</code>.');"
        },
        {
          "text": "<code>add(1)(2)(3)</code> should return <code>6</code>.",
          "testString":
            "assert(add(1)(2)(3) === 6, '<code>add(1)(2)(3)</code> should return <code>6</code>.');"
        },
        {
          "text": "<code>add(11)(22)(33)</code> should return <code>66</code>.",
          "testString":
            "assert(add(11)(22)(33) === 66, '<code>add(11)(22)(33)</code> should return <code>66</code>.');"
        },
        {
          "text":
            "Your code should include a final statement that returns <code>x + y + z</code>.",
          "testString":
            "assert(code.match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g), 'Your code should include a final statement that returns <code>x + y + z</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function add(x) {\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n}\nadd(10)(20)(30);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Introduction to Currying and Partial Application",
      "dashedName": "introduction-to-currying-and-partial-application"
    },
    {
      "id": "a3566b1109230028080c9345",
      "description": [
        "We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.",
        "The lowest number will not always come first.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>sumAll([1, 4])</code> should return a number.",
          "testString":
            "assert(typeof sumAll([1, 4]) === 'number', '<code>sumAll([1, 4])</code> should return a number.');"
        },
        {
          "text": "<code>sumAll([1, 4])</code> should return 10.",
          "testString":
            "assert.deepEqual(sumAll([1, 4]), 10, '<code>sumAll([1, 4])</code> should return 10.');"
        },
        {
          "text": "<code>sumAll([4, 1])</code> should return 10.",
          "testString":
            "assert.deepEqual(sumAll([4, 1]), 10, '<code>sumAll([4, 1])</code> should return 10.');"
        },
        {
          "text": "<code>sumAll([5, 10])</code> should return 45.",
          "testString":
            "assert.deepEqual(sumAll([5, 10]), 45, '<code>sumAll([5, 10])</code> should return 45.');"
        },
        {
          "text": "<code>sumAll([10, 5])</code> should return 45.",
          "testString":
            "assert.deepEqual(sumAll([10, 5]), 45, '<code>sumAll([10, 5])</code> should return 45.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumAll(arr) {\n  return 1;\n}\n\nsumAll([1, 4]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sum All Numbers in a Range",
      "dashedName": "sum-all-numbers-in-a-range"
    },
    {
      "id": "a5de63ebea8dbee56860f4f2",
      "description": [
        "Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.",
        "<strong>Note</strong><br>You can return the array with its elements in any order."
      ],
      "tests": [
        {
          "text":
            "<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.",
          "testString":
            "assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === \"object\", '<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.');"
        },
        {
          "text":
            "<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.",
          "testString":
            "assert.sameMembers(diffArray([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [\"pink wool\"], '<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.');"
        },
        {
          "text":
            "<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.",
          "testString":
            "assert(diffArray([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 1, '<code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.');"
        },
        {
          "text":
            "<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.",
          "testString":
            "assert.sameMembers(diffArray([\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [\"diorite\", \"pink wool\"], '<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.');"
        },
        {
          "text":
            "<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.",
          "testString":
            "assert(diffArray([\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 2, '<code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.');"
        },
        {
          "text":
            "<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.",
          "testString":
            "assert.sameMembers(diffArray([\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]), [], '<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.');"
        },
        {
          "text":
            "<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.",
          "testString":
            "assert(diffArray([\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]).length === 0, '<code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.');"
        },
        {
          "text":
            "<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.",
          "testString":
            "assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4], '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.');"
        },
        {
          "text":
            "<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.",
          "testString":
            "assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length  === 1, '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.');"
        },
        {
          "text":
            "<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.",
          "testString":
            "assert.sameMembers(diffArray([1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]), [\"piglet\", 4], '<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.');"
        },
        {
          "text":
            "<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.",
          "testString":
            "assert(diffArray([1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]).length === 2, '<code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.');"
        },
        {
          "text":
            "<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.",
          "testString":
            "assert.sameMembers(diffArray([], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]), [\"snuffleupagus\", \"cookie monster\", \"elmo\"], '<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.');"
        },
        {
          "text":
            "<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.",
          "testString":
            "assert(diffArray([], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]).length === 3, '<code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.');"
        },
        {
          "text":
            "<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.",
          "testString":
            "assert.sameMembers(diffArray([1, \"calf\", 3, \"piglet\"], [7, \"filly\"]), [1, \"calf\", 3, \"piglet\", 7, \"filly\"], '<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.');"
        },
        {
          "text":
            "<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.",
          "testString":
            "assert(diffArray([1, \"calf\", 3, \"piglet\"], [7, \"filly\"]).length === 6, '<code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function diffArray(arr1, arr2) {\n  var newArr = [];\n  // Same, same; but different.\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Diff Two Arrays",
      "dashedName": "diff-two-arrays"
    },
    {
      "id": "a39963a4c10bc8b4d4f06d7e",
      "description": [
        "You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.",
        "<strong>Note</strong><br> You have to use the <code>arguments</code> object.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> should return <code>[1, 1]</code>.",
          "testString":
            "assert.deepEqual(destroyer([1, 2, 3, 1, 2, 3], 2, 3), [1, 1], '<code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> should return <code>[1, 1]</code>.');"
        },
        {
          "text":
            "<code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> should return <code>[1, 5, 1]</code>.",
          "testString":
            "assert.deepEqual(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3), [1, 5, 1], '<code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> should return <code>[1, 5, 1]</code>.');"
        },
        {
          "text":
            "<code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> should return <code>[1]</code>.",
          "testString":
            "assert.deepEqual(destroyer([3, 5, 1, 2, 2], 2, 3, 5), [1], '<code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> should return <code>[1]</code>.');"
        },
        {
          "text":
            "<code>destroyer([2, 3, 2, 3], 2, 3)</code> should return <code>[]</code>.",
          "testString":
            "assert.deepEqual(destroyer([2, 3, 2, 3], 2, 3), [], '<code>destroyer([2, 3, 2, 3], 2, 3)</code> should return <code>[]</code>.');"
        },
        {
          "text":
            "<code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> should return <code>[\"hamburger\"]</code>.",
          "testString":
            "assert.deepEqual(destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53), [\"hamburger\"], '<code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> should return <code>[\"hamburger\"]</code>.');"
        },
        {
          "text":
            "<code>destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")</code> should return <code>[12,92,65]</code>.",
          "testString":
            "assert.deepEqual(destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\"), [12,92,65], '<code>destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")</code> should return <code>[12,92,65]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function destroyer(arr) {\n  // Remove all the values\n  return arr;\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Seek and Destroy",
      "dashedName": "seek-and-destroy"
    },
    {
      "id": "a8e512fbe388ac2f9198f0fa",
      "description": [
        "Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.",
        "For example, if the first argument is <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, and the second argument is <code>{ last: \"Capulet\" }</code>, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })</code> should return <code>[{ first: \"Tybalt\", last: \"Capulet\" }]</code>.",
          "testString":
            "assert.deepEqual(whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" }), [{ first: \"Tybalt\", last: \"Capulet\" }], '<code>whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })</code> should return <code>[{ first: \"Tybalt\", last: \"Capulet\" }]</code>.');"
        },
        {
          "text":
            "<code>whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })</code> should return <code>[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]</code>.",
          "testString":
            "assert.deepEqual(whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 }), [{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], '<code>whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })</code> should return <code>[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]</code>.');"
        },
        {
          "text":
            "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.",
          "testString":
            "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 }), [{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.');"
        },
        {
          "text":
            "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.",
          "testString":
            "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 }), [{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.');"
        },
        {
          "text":
            "<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]</code>.",
          "testString":
            "assert.deepEqual(whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, {\"bat\":2}], { \"apple\": 1, \"bat\": 2 }), [{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }], '<code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]</code>.');"
        },
        {
          "text":
            "<code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code>",
          "testString":
            "assert.deepEqual(whatIsInAName([{ \"a\": 1, \"b\": 2, \"c\": 3 }], { \"a\": 1, \"b\": 9999, \"c\": 3 }), [], '<code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code>');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function whatIsInAName(collection, source) {\n  // What's in a name?\n  var arr = [];\n  // Only change code below this line\n  \n  \n  // Only change code above this line\n  return arr;\n}\n\nwhatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" });",
          "head": "",
          "tail": ""
        }
      },
      "name": "Wherefore art thou",
      "dashedName": "wherefore-art-thou"
    },
    {
      "id": "a103376db3ba46b2d50db289",
      "description": [
        "Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>spinalCase(\"This Is Spinal Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.",
          "testString":
            "assert.deepEqual(spinalCase(\"This Is Spinal Tap\"), \"this-is-spinal-tap\", '<code>spinalCase(\"This Is Spinal Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.');"
        },
        {
          "text":
            "<code>spinalCase(\"thisIsSpinal<wbr>Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.",
          "testString":
            "assert.strictEqual(spinalCase('thisIsSpinalTap'), \"this-is-spinal-tap\", '<code>spinalCase(\"thisIsSpinal<wbr>Tap\")</code> should return <code>\"this-is-spinal-tap\"</code>.');"
        },
        {
          "text":
            "<code>spinalCase(\"The_Andy_<wbr>Griffith_Show\")</code> should return <code>\"the-andy-griffith-show\"</code>.",
          "testString":
            "assert.strictEqual(spinalCase(\"The_Andy_Griffith_Show\"), \"the-andy-griffith-show\", '<code>spinalCase(\"The_Andy_<wbr>Griffith_Show\")</code> should return <code>\"the-andy-griffith-show\"</code>.');"
        },
        {
          "text":
            "<code>spinalCase(\"Teletubbies say Eh-oh\")</code> should return <code>\"teletubbies-say-eh-oh\"</code>.",
          "testString":
            "assert.strictEqual(spinalCase(\"Teletubbies say Eh-oh\"), \"teletubbies-say-eh-oh\", '<code>spinalCase(\"Teletubbies say Eh-oh\")</code> should return <code>\"teletubbies-say-eh-oh\"</code>.');"
        },
        {
          "text":
            "<code>spinalCase(\"AllThe-small Things\")</code> should return <code>\"all-the-small-things\"</code>.",
          "testString":
            "assert.strictEqual(spinalCase(\"AllThe-small Things\"), \"all-the-small-things\", '<code>spinalCase(\"AllThe-small Things\")</code> should return <code>\"all-the-small-things\"</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function spinalCase(str) {\n  // \"It's such a fine line between stupid, and clever.\"\n  // --David St. Hubbins\n  return str;\n}\n\nspinalCase('This Is Spinal Tap');",
          "head": "",
          "tail": ""
        }
      },
      "name": "Spinal Tap Case",
      "dashedName": "spinal-tap-case"
    },
    {
      "id": "aa7697ea2477d1316795783b",
      "description": [
        "Translate the provided string to pig latin.",
        "<a href=\"http://en.wikipedia.org/wiki/Pig_Latin\" target=\"_blank\">Pig Latin</a> takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an \"ay\".",
        "If a word begins with a vowel you just add \"way\" to the end.",
        "Input strings are guaranteed to be English words in all lowercase.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>translatePigLatin(\"california\")</code> should return \"aliforniacay\".",
          "testString":
            "assert.deepEqual(translatePigLatin(\"california\"), \"aliforniacay\", '<code>translatePigLatin(\"california\")</code> should return \"aliforniacay\".');"
        },
        {
          "text":
            "<code>translatePigLatin(\"paragraphs\")</code> should return \"aragraphspay\".",
          "testString":
            "assert.deepEqual(translatePigLatin(\"paragraphs\"), \"aragraphspay\", '<code>translatePigLatin(\"paragraphs\")</code> should return \"aragraphspay\".');"
        },
        {
          "text":
            "<code>translatePigLatin(\"glove\")</code> should return \"oveglay\".",
          "testString":
            "assert.deepEqual(translatePigLatin(\"glove\"), \"oveglay\", '<code>translatePigLatin(\"glove\")</code> should return \"oveglay\".');"
        },
        {
          "text":
            "<code>translatePigLatin(\"algorithm\")</code> should return \"algorithmway\".",
          "testString":
            "assert.deepEqual(translatePigLatin(\"algorithm\"), \"algorithmway\", '<code>translatePigLatin(\"algorithm\")</code> should return \"algorithmway\".');"
        },
        {
          "text":
            "<code>translatePigLatin(\"eight\")</code> should return \"eightway\".",
          "testString":
            "assert.deepEqual(translatePigLatin(\"eight\"), \"eightway\", '<code>translatePigLatin(\"eight\")</code> should return \"eightway\".');"
        },
        {
          "text":
            "Should handle words where the first vowel comes in the end of the word.",
          "testString":
            "assert.deepEqual(translatePigLatin(\"schwartz\"), \"artzschway\", 'Should handle words where the first vowel comes in the end of the word.');"
        },
        {
          "text": "Should handle words without vowels.",
          "testString":
            "assert.deepEqual(translatePigLatin(\"rhythm\"), \"rhythmay\", 'Should handle words without vowels.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Pig Latin",
      "dashedName": "pig-latin"
    },
    {
      "id": "a0b5010f579e69b815e7c5d6",
      "description": [
        "Perform a search and replace on the sentence using the arguments provided and return the new sentence.",
        "First argument is the sentence to perform the search and replace on.",
        "Second argument is the word that you will be replacing (before).",
        "Third argument is what you will be replacing the second argument with (after).",
        "<strong>Note</strong><br> Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word \"Book\" with the word \"dog\", it should be replaced as \"Dog\"",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>myReplace(\"Let us go to the store\", \"store\", \"mall\")</code> should return \"Let us go to the mall\".",
          "testString":
            "assert.deepEqual(myReplace(\"Let us go to the store\", \"store\", \"mall\"), \"Let us go to the mall\", '<code>myReplace(\"Let us go to the store\", \"store\", \"mall\")</code> should return \"Let us go to the mall\".');"
        },
        {
          "text":
            "<code>myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")</code> should return \"He is Sitting on the couch\".",
          "testString":
            "assert.deepEqual(myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\"), \"He is Sitting on the couch\", '<code>myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")</code> should return \"He is Sitting on the couch\".');"
        },
        {
          "text":
            "<code>myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")</code> should return \"This has a spelling error\".",
          "testString":
            "assert.deepEqual(myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\"), \"This has a spelling error\", '<code>myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")</code> should return \"This has a spelling error\".');"
        },
        {
          "text":
            "<code>myReplace(\"His name is Tom\", \"Tom\", \"john\")</code> should return \"His name is John\".",
          "testString":
            "assert.deepEqual(myReplace(\"His name is Tom\", \"Tom\", \"john\"), \"His name is John\", '<code>myReplace(\"His name is Tom\", \"Tom\", \"john\")</code> should return \"His name is John\".');"
        },
        {
          "text":
            "<code>myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")</code> should return \"Let us get back to more Algorithms\".",
          "testString":
            "assert.deepEqual(myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\"), \"Let us get back to more Algorithms\", '<code>myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")</code> should return \"Let us get back to more Algorithms\".');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function myReplace(str, before, after) {\n  return str;\n}\n\nmyReplace(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Search and Replace",
      "dashedName": "search-and-replace"
    },
    {
      "id": "afd15382cdfb22c9efe8b7de",
      "description": [
        "The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.",
        "<a href=\"http://en.wikipedia.org/wiki/Base_pair\" target=\"_blank\">Base pairs</a> are a pair of AT and CG. Match the missing element to the provided character.",
        "Return the provided character as the first element in each array.",
        "For example, for the input GCG, return [[\"G\", \"C\"], [\"C\",\"G\"],[\"G\", \"C\"]]",
        "The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.",
          "testString":
            "assert.deepEqual(pairElement(\"ATCGA\"),[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]], '<code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.');"
        },
        {
          "text":
            "<code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.",
          "testString":
            "assert.deepEqual(pairElement(\"TTGAG\"),[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]], '<code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.');"
        },
        {
          "text":
            "<code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.",
          "testString":
            "assert.deepEqual(pairElement(\"CTCTA\"),[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]], '<code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "DNA Pairing",
      "dashedName": "dna-pairing"
    },
    {
      "id": "af7588ade1100bde429baf20",
      "description": [
        "Find the missing letter in the passed letter range and return it.",
        "If all letters are present in the range, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>fearNotLetter(\"abce\")</code> should return \"d\".",
          "testString":
            "assert.deepEqual(fearNotLetter('abce'), 'd', '<code>fearNotLetter(\"abce\")</code> should return \"d\".');"
        },
        {
          "text":
            "<code>fearNotLetter(\"abcdefghjklmno\")</code> should return \"i\".",
          "testString":
            "assert.deepEqual(fearNotLetter('abcdefghjklmno'), 'i', '<code>fearNotLetter(\"abcdefghjklmno\")</code> should return \"i\".');"
        },
        {
          "text": "<code>fearNotLetter(\"stvwx\")</code> should return \"u\".",
          "testString":
            "assert.deepEqual(fearNotLetter('stvwx'), 'u', '<code>fearNotLetter(\"stvwx\")</code> should return \"u\".');"
        },
        {
          "text": "<code>fearNotLetter(\"bcdf\")</code> should return \"e\".",
          "testString":
            "assert.deepEqual(fearNotLetter('bcdf'), 'e', '<code>fearNotLetter(\"bcdf\")</code> should return \"e\".');"
        },
        {
          "text":
            "<code>fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")</code> should return undefined.",
          "testString":
            "assert.isUndefined(fearNotLetter('abcdefghijklmnopqrstuvwxyz'), '<code>fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")</code> should return undefined.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function fearNotLetter(str) {\n  return str;\n}\n\nfearNotLetter(\"abce\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Missing letters",
      "dashedName": "missing-letters"
    },
    {
      "id": "a105e963526e7de52b219be9",
      "description": [
        "Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.",
        "In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.",
        "The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.",
        "Check the assertion tests for examples.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.",
          "testString":
            "assert.deepEqual(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4], '<code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.');"
        },
        {
          "text":
            "<code>uniteUnique([1, 3, 2], [1, [5]], [2, [4]])</code> should return <code>[1, 3, 2, [5], [4]]</code>.",
          "testString":
            "assert.deepEqual(uniteUnique([1, 3, 2], [1, [5]], [2, [4]]), [1, 3, 2, [5], [4]], '<code>uniteUnique([1, 3, 2], [1, [5]], [2, [4]])</code> should return <code>[1, 3, 2, [5], [4]]</code>.');"
        },
        {
          "text":
            "<code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.",
          "testString":
            "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1]), [1, 2, 3, 5], '<code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.');"
        },
        {
          "text":
            "<code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.",
          "testString":
            "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]), [1, 2, 3, 5, 4, 6, 7, 8], '<code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sorted Union",
      "dashedName": "sorted-union"
    },
    {
      "id": "a6b0bb188d873cb2c8729495",
      "description": [
        "Convert the characters <code>&</code>, <code><</code>, <code>></code>, <code>\"</code> (double quote), and <code>'</code> (apostrophe), in a string to their corresponding HTML entities.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>convertHTML(\"Dolce & Gabbana\")</code> should return <code>Dolce &&#8203;amp; Gabbana</code>.",
          "testString":
            "assert.match(convertHTML(\"Dolce & Gabbana\"), /Dolce &amp; Gabbana/, '<code>convertHTML(\"Dolce & Gabbana\")</code> should return <code>Dolce &&#8203;amp; Gabbana</code>.');"
        },
        {
          "text":
            "<code>convertHTML(\"Hamburgers < Pizza < Tacos\")</code> should return <code>Hamburgers &&#8203;lt; Pizza &&#8203;lt; Tacos</code>.",
          "testString":
            "assert.match(convertHTML(\"Hamburgers < Pizza < Tacos\"), /Hamburgers &lt; Pizza &lt; Tacos/, '<code>convertHTML(\"Hamburgers < Pizza < Tacos\")</code> should return <code>Hamburgers &&#8203;lt; Pizza &&#8203;lt; Tacos</code>.');"
        },
        {
          "text":
            "<code>convertHTML(\"Sixty > twelve\")</code> should return <code>Sixty &&#8203;gt; twelve</code>.",
          "testString":
            "assert.match(convertHTML(\"Sixty > twelve\"), /Sixty &gt; twelve/, '<code>convertHTML(\"Sixty > twelve\")</code> should return <code>Sixty &&#8203;gt; twelve</code>.');"
        },
        {
          "text":
            "<code>convertHTML(&apos;Stuff in \"quotation marks\"&apos;)</code> should return <code>Stuff in &&#8203;quot;quotation marks&&#8203;quot;</code>.",
          "testString":
            "assert.match(convertHTML('Stuff in \"quotation marks\"'), /Stuff in &quot;quotation marks&quot;/, '<code>convertHTML(&apos;Stuff in \"quotation marks\"&apos;)</code> should return <code>Stuff in &&#8203;quot;quotation marks&&#8203;quot;</code>.');"
        },
        {
          "text":
            "<code>convertHTML(\"Schindler&apos;s List\")</code> should return <code>Schindler&&#8203;apos;s List</code>.",
          "testString":
            "assert.match(convertHTML(\"Schindler's List\"), /Schindler&apos;s List/, '<code>convertHTML(\"Schindler&apos;s List\")</code> should return <code>Schindler&&#8203;apos;s List</code>.');"
        },
        {
          "text":
            "<code>convertHTML(\"<>\")</code> should return <code>&&#8203;lt;&&#8203;gt;</code>.",
          "testString":
            "assert.match(convertHTML('<>'), /&lt;&gt;/, '<code>convertHTML(\"<>\")</code> should return <code>&&#8203;lt;&&#8203;gt;</code>.');"
        },
        {
          "text":
            "<code>convertHTML(\"abc\")</code> should return <code>abc</code>.",
          "testString":
            "assert.strictEqual(convertHTML('abc'), 'abc', '<code>convertHTML(\"abc\")</code> should return <code>abc</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertHTML(str) {\n  // &colon;&rpar;\n  return str;\n}\n\nconvertHTML(\"Dolce & Gabbana\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Convert HTML Entities",
      "dashedName": "convert-html-entities"
    },
    {
      "id": "a5229172f011153519423690",
      "description": [
        "Given a positive integer <code>num</code>, return the sum of all odd Fibonacci numbers that are less than or equal to <code>num</code>.",
        "The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.",
        "For example, <code>sumFibs(10)</code> should return <code>10</code> because all odd Fibonacci numbers less than or equal to <code>10</code> are 1, 1, 3, and 5.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>sumFibs(1)</code> should return a number.",
          "testString":
            "assert(typeof sumFibs(1) === \"number\", '<code>sumFibs(1)</code> should return a number.');"
        },
        {
          "text": "<code>sumFibs(1000)</code> should return 1785.",
          "testString":
            "assert(sumFibs(1000) === 1785, '<code>sumFibs(1000)</code> should return 1785.');"
        },
        {
          "text": "<code>sumFibs(4000000)</code> should return 4613732.",
          "testString":
            "assert(sumFibs(4000000) === 4613732, '<code>sumFibs(4000000)</code> should return 4613732.');"
        },
        {
          "text": "<code>sumFibs(4)</code> should return 5.",
          "testString":
            "assert(sumFibs(4) === 5, '<code>sumFibs(4)</code> should return 5.');"
        },
        {
          "text": "<code>sumFibs(75024)</code> should return 60696.",
          "testString":
            "assert(sumFibs(75024) === 60696, '<code>sumFibs(75024)</code> should return 60696.');"
        },
        {
          "text": "<code>sumFibs(75025)</code> should return 135721.",
          "testString":
            "assert(sumFibs(75025) === 135721, '<code>sumFibs(75025)</code> should return 135721.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumFibs(num) {\n  return num;\n}\n\nsumFibs(4);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sum All Odd Fibonacci Numbers",
      "dashedName": "sum-all-odd-fibonacci-numbers"
    },
    {
      "id": "a3bfc1673c0526e06d3ac698",
      "description": [
        "Sum all the prime numbers up to and including the provided number.",
        "A prime number is defined as a number greater than one and having only two divisors, one and itself. For example, 2 is a prime number because it's only divisible by one and two.",
        "The provided number may not be a prime.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>sumPrimes(10)</code> should return a number.",
          "testString":
            "assert.deepEqual(typeof sumPrimes(10), 'number', '<code>sumPrimes(10)</code> should return a number.');"
        },
        {
          "text": "<code>sumPrimes(10)</code> should return 17.",
          "testString":
            "assert.deepEqual(sumPrimes(10), 17, '<code>sumPrimes(10)</code> should return 17.');"
        },
        {
          "text": "<code>sumPrimes(977)</code> should return 73156.",
          "testString":
            "assert.deepEqual(sumPrimes(977), 73156, '<code>sumPrimes(977)</code> should return 73156.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumPrimes(num) {\n  return num;\n}\n\nsumPrimes(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sum All Primes",
      "dashedName": "sum-all-primes"
    },
    {
      "id": "ae9defd7acaf69703ab432ea",
      "description": [
        "Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.",
        "The range will be an array of two numbers that will not necessarily be in numerical order.",
        "For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>smallestCommons([1, 5])</code> should return a number.",
          "testString":
            "assert.deepEqual(typeof smallestCommons([1, 5]), 'number', '<code>smallestCommons([1, 5])</code> should return a number.');"
        },
        {
          "text": "<code>smallestCommons([1, 5])</code> should return 60.",
          "testString":
            "assert.deepEqual(smallestCommons([1, 5]), 60, '<code>smallestCommons([1, 5])</code> should return 60.');"
        },
        {
          "text": "<code>smallestCommons([5, 1])</code> should return 60.",
          "testString":
            "assert.deepEqual(smallestCommons([5, 1]), 60, '<code>smallestCommons([5, 1])</code> should return 60.');"
        },
        {
          "text": "<code>smallestCommons([2, 10])</code> should return 2520.",
          "testString":
            "assert.deepEqual(smallestCommons([2, 10]), 2520, '<code>smallestCommons([2, 10])</code> should return 2520.');"
        },
        {
          "text": "<code>smallestCommons([1, 13])</code> should return 360360.",
          "testString":
            "assert.deepEqual(smallestCommons([1, 13]), 360360, '<code>smallestCommons([1, 13])</code> should return 360360.');"
        },
        {
          "text":
            "<code>smallestCommons([23, 18])</code> should return 6056820.",
          "testString":
            "assert.deepEqual(smallestCommons([23, 18]), 6056820, '<code>smallestCommons([23, 18])</code> should return 6056820.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function smallestCommons(arr) {\n  return arr;\n}\n\n\nsmallestCommons([1,5]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Smallest Common Multiple",
      "dashedName": "smallest-common-multiple"
    },
    {
      "id": "a5deed1811a43193f9f1c841",
      "description": [
        "Given the array <code>arr</code>, iterate through and remove each element starting from the first element (the 0 index) until the function <code>func</code> returns <code>true</code> when the iterated element is passed through it.",
        "Then return the rest of the array once the condition is satisfied, otherwise, <code>arr</code> should be returned as an empty array.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>dropElements([1, 2, 3, 4], function(n) {return n >= 3;})</code> should return <code>[3, 4]</code>.",
          "testString":
            "assert.deepEqual(dropElements([1, 2, 3, 4], function(n) {return n >= 3;}), [3, 4], '<code>dropElements([1, 2, 3, 4], function(n) {return n >= 3;})</code> should return <code>[3, 4]</code>.');"
        },
        {
          "text":
            "<code>dropElements([0, 1, 0, 1], function(n) {return n === 1;})</code> should return <code>[1, 0, 1]</code>.",
          "testString":
            "assert.deepEqual(dropElements([0, 1, 0, 1], function(n) {return n === 1;}), [1, 0, 1], '<code>dropElements([0, 1, 0, 1], function(n) {return n === 1;})</code> should return <code>[1, 0, 1]</code>.');"
        },
        {
          "text":
            "<code>dropElements([1, 2, 3], function(n) {return n > 0;})</code> should return <code>[1, 2, 3]</code>.",
          "testString":
            "assert.deepEqual(dropElements([1, 2, 3], function(n) {return n > 0;}), [1, 2, 3], '<code>dropElements([1, 2, 3], function(n) {return n > 0;})</code> should return <code>[1, 2, 3]</code>.');"
        },
        {
          "text":
            "<code>dropElements([1, 2, 3, 4], function(n) {return n > 5;})</code> should return <code>[]</code>.",
          "testString":
            "assert.deepEqual(dropElements([1, 2, 3, 4], function(n) {return n > 5;}), [], '<code>dropElements([1, 2, 3, 4], function(n) {return n > 5;})</code> should return <code>[]</code>.');"
        },
        {
          "text":
            "<code>dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})</code> should return <code>[7, 4]</code>.",
          "testString":
            "assert.deepEqual(dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;}), [7, 4], '<code>dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})</code> should return <code>[7, 4]</code>.');"
        },
        {
          "text":
            "<code>dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})</code> should return <code>[3, 9, 2]</code>.",
          "testString":
            "assert.deepEqual(dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;}), [3, 9, 2], '<code>dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})</code> should return <code>[3, 9, 2]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function dropElements(arr, func) {\n  // Drop them elements.\n  return arr;\n}\n\ndropElements([1, 2, 3], function(n) {return n < 3; });",
          "head": "",
          "tail": ""
        }
      },
      "name": "Drop it",
      "dashedName": "drop-it"
    },
    {
      "id": "ab306dbdcc907c7ddfc30830",
      "description": [
        "Flatten a nested array. You must account for varying levels of nesting.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>steamrollArray([[[\"a\"]], [[\"b\"]]])</code> should return <code>[\"a\", \"b\"]</code>.",
          "testString":
            "assert.deepEqual(steamrollArray([[[\"a\"]], [[\"b\"]]]), [\"a\", \"b\"], '<code>steamrollArray([[[\"a\"]], [[\"b\"]]])</code> should return <code>[\"a\", \"b\"]</code>.');"
        },
        {
          "text":
            "<code>steamrollArray([1, [2], [3, [[4]]]])</code> should return <code>[1, 2, 3, 4]</code>.",
          "testString":
            "assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4], '<code>steamrollArray([1, [2], [3, [[4]]]])</code> should return <code>[1, 2, 3, 4]</code>.');"
        },
        {
          "text":
            "<code>steamrollArray([1, [], [3, [[4]]]])</code> should return <code>[1, 3, 4]</code>.",
          "testString":
            "assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4], '<code>steamrollArray([1, [], [3, [[4]]]])</code> should return <code>[1, 3, 4]</code>.');"
        },
        {
          "text":
            "<code>steamrollArray([1, {}, [3, [[4]]]])</code> should return <code>[1, {}, 3, 4]</code>.",
          "testString":
            "assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4], '<code>steamrollArray([1, {}, [3, [[4]]]])</code> should return <code>[1, {}, 3, 4]</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function steamrollArray(arr) {\n  // I'm a steamroller, baby\n  return arr;\n}\n\nsteamrollArray([1, [2], [3, [[4]]]]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Steamroller",
      "dashedName": "steamroller"
    },
    {
      "id": "a8d97bd4c764e91f9d2bda01",
      "description": [
        "Return an English translated sentence of the passed binary string.",
        "The binary string will be space separated.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")</code> should return \"Aren&#39;t bonfires fun!?\"",
          "testString":
            "assert.deepEqual(binaryAgent('01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111'), \"Aren't bonfires fun!?\", '<code>binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")</code> should return \"Aren&#39;t bonfires fun!?\"');"
        },
        {
          "text":
            "<code>binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")</code> should return \"I love FreeCodeCamp!\"",
          "testString":
            "assert.deepEqual(binaryAgent('01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001'), \"I love FreeCodeCamp!\", '<code>binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")</code> should return \"I love FreeCodeCamp!\"');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function binaryAgent(str) {\n  return str;\n}\n\nbinaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Binary Agents",
      "dashedName": "binary-agents"
    },
    {
      "id": "a10d2431ad0c6a099a4b8b52",
      "description": [
        "Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).",
        "In other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.",
        "In JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.",
        "Remember, you can access object properties through either dot notation or <code>[]</code> notation.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return true.",
          "testString":
            "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"), true, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return true.');"
        },
        {
          "text":
            "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return false.",
          "testString":
            "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"), false, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\")</code> should return false.');"
        },
        {
          "text":
            "<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 3}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\")</code> should return false.",
          "testString":
            "assert.strictEqual(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 2}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\"), false, '<code>truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 3}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\")</code> should return false.');"
        },
        {
          "text":
            "<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\")</code> should return false",
          "testString":
            "assert.strictEqual(truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\"), false, '<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true}, {\"name\": \"FastFoward\", \"onBoat\": null}], \"onBoat\")</code> should return false');"
        },
        {
          "text":
            "<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\")</code> should return true",
          "testString":
            "assert.strictEqual(truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\"), true, '<code>truthCheck([{\"name\": \"Pete\", \"onBoat\": true}, {\"name\": \"Repeat\", \"onBoat\": true, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": true}], \"onBoat\")</code> should return true');"
        },
        {
          "text":
            "<code>truthCheck([{\"single\": \"yes\"}], \"single\")</code> should return true",
          "testString":
            "assert.strictEqual(truthCheck([{\"single\": \"yes\"}], \"single\"), true, '<code>truthCheck([{\"single\": \"yes\"}], \"single\")</code> should return true');"
        },
        {
          "text":
            "<code>truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\")</code> should return false",
          "testString":
            "assert.strictEqual(truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\"), false, '<code>truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\")</code> should return false');"
        },
        {
          "text":
            "<code>truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\")</code> should return false",
          "testString":
            "assert.strictEqual(truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\"), false, '<code>truthCheck([{\"single\": \"double\"}, {\"single\": undefined}], \"single\")</code> should return false');"
        },
        {
          "text":
            "<code>truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\")</code> should return false",
          "testString":
            "assert.strictEqual(truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\"), false, '<code>truthCheck([{\"single\": \"double\"}, {\"single\": NaN}], \"single\")</code> should return false');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function truthCheck(collection, pre) {\n  // Is everyone being true?\n  return pre;\n}\n\ntruthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Everything Be True",
      "dashedName": "everything-be-true"
    },
    {
      "id": "a97fd23d9b809dac9921074f",
      "description": [
        "Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.",
        "For example, <code>addTogether(2, 3)</code> should return <code>5</code>, and <code>addTogether(2)</code> should return a function.",
        "Calling this returned function with a single argument will then return the sum:",
        "<code>var sumTwoAnd = addTogether(2);</code>",
        "<code>sumTwoAnd(3)</code> returns <code>5</code>.",
        "If either argument isn't a valid number, return undefined.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>addTogether(2, 3)</code> should return 5.",
          "testString":
            "assert.deepEqual(addTogether(2, 3), 5, '<code>addTogether(2, 3)</code> should return 5.');"
        },
        {
          "text": "<code>addTogether(2)(3)</code> should return 5.",
          "testString":
            "assert.deepEqual(addTogether(2)(3), 5, '<code>addTogether(2)(3)</code> should return 5.');"
        },
        {
          "text":
            "<code>addTogether(\"http://bit.ly/IqT6zt\")</code> should return undefined.",
          "testString":
            "assert.isUndefined(addTogether(\"http://bit.ly/IqT6zt\"), '<code>addTogether(\"http://bit.ly/IqT6zt\")</code> should return undefined.');"
        },
        {
          "text": "<code>addTogether(2, \"3\")</code> should return undefined.",
          "testString":
            "assert.isUndefined(addTogether(2, \"3\"), '<code>addTogether(2, \"3\")</code> should return undefined.');"
        },
        {
          "text": "<code>addTogether(2)([3])</code> should return undefined.",
          "testString":
            "assert.isUndefined(addTogether(2)([3]), '<code>addTogether(2)([3])</code> should return undefined.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function addTogether() {\n  return false;\n}\n\naddTogether(2,3);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Arguments Optional",
      "dashedName": "arguments-optional"
    },
    {
      "id": "a2f1d72d9b908d0bd72bb9f6",
      "description": [
        "Fill in the object constructor with the following methods below:",
        "<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>",
        "Run the tests to see the expected output for each method.",
        "The methods that take an argument must accept only one argument and it has to be a string.",
        "These methods must be the only available means of interacting with the object.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>Object.keys(bob).length</code> should return 6.",
          "testString":
            "assert.deepEqual(Object.keys(bob).length, 6, '<code>Object.keys(bob).length</code> should return 6.');"
        },
        {
          "text": "<code>bob instanceof Person</code> should return true.",
          "testString":
            "assert.deepEqual(bob instanceof Person, true, '<code>bob instanceof Person</code> should return true.');"
        },
        {
          "text": "<code>bob.firstName</code> should return undefined.",
          "testString":
            "assert.deepEqual(bob.firstName, undefined, '<code>bob.firstName</code> should return undefined.');"
        },
        {
          "text": "<code>bob.lastName</code> should return undefined.",
          "testString":
            "assert.deepEqual(bob.lastName, undefined, '<code>bob.lastName</code> should return undefined.');"
        },
        {
          "text": "<code>bob.getFirstName()</code> should return \"Bob\".",
          "testString":
            "assert.deepEqual(bob.getFirstName(), 'Bob', '<code>bob.getFirstName()</code> should return \"Bob\".');"
        },
        {
          "text": "<code>bob.getLastName()</code> should return \"Ross\".",
          "testString":
            "assert.deepEqual(bob.getLastName(), 'Ross', '<code>bob.getLastName()</code> should return \"Ross\".');"
        },
        {
          "text": "<code>bob.getFullName()</code> should return \"Bob Ross\".",
          "testString":
            "assert.deepEqual(bob.getFullName(), 'Bob Ross', '<code>bob.getFullName()</code> should return \"Bob Ross\".');"
        },
        {
          "text":
            "<code>bob.getFullName()</code> should return \"Haskell Ross\" after <code>bob.setFirstName(\"Haskell\")</code>.",
          "testString":
            "assert.strictEqual((function () { bob.setFirstName(\"Haskell\"); return bob.getFullName(); })(), 'Haskell Ross', '<code>bob.getFullName()</code> should return \"Haskell Ross\" after <code>bob.setFirstName(\"Haskell\")</code>.');"
        },
        {
          "text":
            "<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setLastName(\"Curry\")</code>.",
          "testString":
            "assert.strictEqual((function () { var _bob=new Person('Haskell Ross'); _bob.setLastName(\"Curry\"); return _bob.getFullName(); })(), 'Haskell Curry', '<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setLastName(\"Curry\")</code>.');"
        },
        {
          "text":
            "<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString":
            "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getFullName(); })(), 'Haskell Curry', '<code>bob.getFullName()</code> should return \"Haskell Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        },
        {
          "text":
            "<code>bob.getFirstName()</code> should return \"Haskell\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString":
            "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getFirstName(); })(), 'Haskell', '<code>bob.getFirstName()</code> should return \"Haskell\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        },
        {
          "text":
            "<code>bob.getLastName()</code> should return \"Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.",
          "testString":
            "assert.strictEqual((function () { bob.setFullName(\"Haskell Curry\"); return bob.getLastName(); })(), 'Curry', '<code>bob.getLastName()</code> should return \"Curry\" after <code>bob.setFullName(\"Haskell Curry\")</code>.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var Person = function(firstAndLast) {\n  // Complete the method below and implement the others similarly\n  this.getFullName = function() {\n    return \"\";\n  };\n  return firstAndLast;\n};\n\nvar bob = new Person('Bob Ross');\nbob.getFullName();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make a Person",
      "dashedName": "make-a-person"
    },
    {
      "id": "af4afb223120f7348cdfc9fd",
      "description": [
        "Return a new array that transforms the elements' average altitude into their orbital periods (in seconds).",
        "The array will contain objects in the format <code>{name: 'name', avgAlt: avgAlt}</code>.",
        "You can read about orbital periods <a href=\"http://en.wikipedia.org/wiki/Orbital_period\" target='_blank'>on Wikipedia</a>.",
        "The values should be rounded to the nearest whole number. The body being orbited is Earth.",
        "The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])</code> should return <code>[{name: \"sputnik\", orbitalPeriod: 86400}]</code>.",
          "testString":
            "assert.deepEqual(orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]), [{name: \"sputnik\", orbitalPeriod: 86400}], '<code>orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])</code> should return <code>[{name: \"sputnik\", orbitalPeriod: 86400}]</code>.');"
        },
        {
          "text":
            "<code>orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])</code> should return <code>[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]</code>.",
          "testString":
            "assert.deepEqual(orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}]), [{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}], '<code>orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])</code> should return <code>[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]</code>.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function orbitalPeriod(arr) {\n  var GM = 398600.4418;\n  var earthRadius = 6367.4447;\n  return arr;\n}\n\norbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Map the Debris",
      "dashedName": "map-the-debris"
    },
    {
      "id": "aaa48de84e1ecc7c742e1124",
      "description": [
        "Return <code>true</code> if the given string is a palindrome. Otherwise, return <code>false</code>.",
        "A <dfn>palindrome</dfn> is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.",
        "<strong>Note</strong><br>You'll need to remove <strong>all non-alphanumeric characters</strong> (punctuation, spaces and symbols) and turn everything into the same case (lower or upper case) in order to check for palindromes.",
        "We'll pass strings with varying formats, such as <code>\"racecar\"</code>, <code>\"RaceCar\"</code>, and <code>\"race CAR\"</code> among others.",
        "We'll also pass strings with special symbols, such as <code>\"2A3*3a2\"</code>, <code>\"2A3  3a2\"</code>, and <code>\"2_A3*3#A2\"</code>.",
        "Remember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>palindrome(\"eye\")</code> should return a boolean.",
          "testString":
            "assert(typeof palindrome(\"eye\") === \"boolean\", '<code>palindrome(\"eye\")</code> should return a boolean.');"
        },
        {
          "text": "<code>palindrome(\"eye\")</code> should return true.",
          "testString":
            "assert(palindrome(\"eye\") === true, '<code>palindrome(\"eye\")</code> should return true.');"
        },
        {
          "text": "<code>palindrome(\"_eye\")</code> should return true.",
          "testString":
            "assert(palindrome(\"_eye\") === true, '<code>palindrome(\"_eye\")</code> should return true.');"
        },
        {
          "text": "<code>palindrome(\"race car\")</code> should return true.",
          "testString":
            "assert(palindrome(\"race car\") === true, '<code>palindrome(\"race car\")</code> should return true.');"
        },
        {
          "text":
            "<code>palindrome(\"not a palindrome\")</code> should return false.",
          "testString":
            "assert(palindrome(\"not a palindrome\") === false, '<code>palindrome(\"not a palindrome\")</code> should return false.');"
        },
        {
          "text":
            "<code>palindrome(\"A man, a plan, a canal. Panama\")</code> should return true.",
          "testString":
            "assert(palindrome(\"A man, a plan, a canal. Panama\") === true, '<code>palindrome(\"A man, a plan, a canal. Panama\")</code> should return true.');"
        },
        {
          "text":
            "<code>palindrome(\"never odd or even\")</code> should return true.",
          "testString":
            "assert(palindrome(\"never odd or even\") === true, '<code>palindrome(\"never odd or even\")</code> should return true.');"
        },
        {
          "text": "<code>palindrome(\"nope\")</code> should return false.",
          "testString":
            "assert(palindrome(\"nope\") === false, '<code>palindrome(\"nope\")</code> should return false.');"
        },
        {
          "text":
            "<code>palindrome(\"almostomla\")</code> should return false.",
          "testString":
            "assert(palindrome(\"almostomla\") === false, '<code>palindrome(\"almostomla\")</code> should return false.');"
        },
        {
          "text":
            "<code>palindrome(\"My age is 0, 0 si ega ym.\")</code> should return true.",
          "testString":
            "assert(palindrome(\"My age is 0, 0 si ega ym.\") === true, '<code>palindrome(\"My age is 0, 0 si ega ym.\")</code> should return true.');"
        },
        {
          "text":
            "<code>palindrome(\"1 eye for of 1 eye.\")</code> should return false.",
          "testString":
            "assert(palindrome(\"1 eye for of 1 eye.\") === false, '<code>palindrome(\"1 eye for of 1 eye.\")</code> should return false.');"
        },
        {
          "text":
            "<code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> should return true.",
          "testString":
            "assert(palindrome(\"0_0 (: /-\\ :) 0-0\") === true, '<code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> should return true.');"
        },
        {
          "text":
            "<code>palindrome(\"five|\\_/|four\")</code> should return false.",
          "testString":
            "assert(palindrome(\"five|\\_/|four\") === false, '<code>palindrome(\"five|\\_/|four\")</code> should return false.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function palindrome(str) {\n  // Good luck!\n  return true;\n}\n\n\n\npalindrome(\"eye\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Palindrome Checker",
      "dashedName": "palindrome-checker"
    },
    {
      "id": "a7f4d8f2483413a6ce226cac",
      "description": [
        "Convert the given number into a roman numeral.",
        "All <a href=\"http://www.mathsisfun.com/roman-numerals.html\" target=\"_blank\">roman numerals</a> answers should be provided in upper-case.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>convertToRoman(2)</code> should return \"II\".",
          "testString":
            "assert.deepEqual(convertToRoman(2), \"II\", '<code>convertToRoman(2)</code> should return \"II\".');"
        },
        {
          "text": "<code>convertToRoman(3)</code> should return \"III\".",
          "testString":
            "assert.deepEqual(convertToRoman(3), \"III\", '<code>convertToRoman(3)</code> should return \"III\".');"
        },
        {
          "text": "<code>convertToRoman(4)</code> should return \"IV\".",
          "testString":
            "assert.deepEqual(convertToRoman(4), \"IV\", '<code>convertToRoman(4)</code> should return \"IV\".');"
        },
        {
          "text": "<code>convertToRoman(5)</code> should return \"V\".",
          "testString":
            "assert.deepEqual(convertToRoman(5), \"V\", '<code>convertToRoman(5)</code> should return \"V\".');"
        },
        {
          "text": "<code>convertToRoman(9)</code> should return \"IX\".",
          "testString":
            "assert.deepEqual(convertToRoman(9), \"IX\", '<code>convertToRoman(9)</code> should return \"IX\".');"
        },
        {
          "text": "<code>convertToRoman(12)</code> should return \"XII\".",
          "testString":
            "assert.deepEqual(convertToRoman(12), \"XII\", '<code>convertToRoman(12)</code> should return \"XII\".');"
        },
        {
          "text": "<code>convertToRoman(16)</code> should return \"XVI\".",
          "testString":
            "assert.deepEqual(convertToRoman(16), \"XVI\", '<code>convertToRoman(16)</code> should return \"XVI\".');"
        },
        {
          "text": "<code>convertToRoman(29)</code> should return \"XXIX\".",
          "testString":
            "assert.deepEqual(convertToRoman(29), \"XXIX\", '<code>convertToRoman(29)</code> should return \"XXIX\".');"
        },
        {
          "text": "<code>convertToRoman(44)</code> should return \"XLIV\".",
          "testString":
            "assert.deepEqual(convertToRoman(44), \"XLIV\", '<code>convertToRoman(44)</code> should return \"XLIV\".');"
        },
        {
          "text": "<code>convertToRoman(45)</code> should return \"XLV\"",
          "testString":
            "assert.deepEqual(convertToRoman(45), \"XLV\", '<code>convertToRoman(45)</code> should return \"XLV\"');"
        },
        {
          "text": "<code>convertToRoman(68)</code> should return \"LXVIII\"",
          "testString":
            "assert.deepEqual(convertToRoman(68), \"LXVIII\", '<code>convertToRoman(68)</code> should return \"LXVIII\"');"
        },
        {
          "text": "<code>convertToRoman(83)</code> should return \"LXXXIII\"",
          "testString":
            "assert.deepEqual(convertToRoman(83), \"LXXXIII\", '<code>convertToRoman(83)</code> should return \"LXXXIII\"');"
        },
        {
          "text": "<code>convertToRoman(97)</code> should return \"XCVII\"",
          "testString":
            "assert.deepEqual(convertToRoman(97), \"XCVII\", '<code>convertToRoman(97)</code> should return \"XCVII\"');"
        },
        {
          "text": "<code>convertToRoman(99)</code> should return \"XCIX\"",
          "testString":
            "assert.deepEqual(convertToRoman(99), \"XCIX\", '<code>convertToRoman(99)</code> should return \"XCIX\"');"
        },
        {
          "text": "<code>convertToRoman(400)</code> should return \"CD\"",
          "testString":
            "assert.deepEqual(convertToRoman(400), \"CD\", '<code>convertToRoman(400)</code> should return \"CD\"');"
        },
        {
          "text": "<code>convertToRoman(500)</code> should return \"D\"",
          "testString":
            "assert.deepEqual(convertToRoman(500), \"D\", '<code>convertToRoman(500)</code> should return \"D\"');"
        },
        {
          "text": "<code>convertToRoman(501)</code> should return \"DI\"",
          "testString":
            "assert.deepEqual(convertToRoman(501), \"DI\", '<code>convertToRoman(501)</code> should return \"DI\"');"
        },
        {
          "text": "<code>convertToRoman(649)</code> should return \"DCXLIX\"",
          "testString":
            "assert.deepEqual(convertToRoman(649), \"DCXLIX\", '<code>convertToRoman(649)</code> should return \"DCXLIX\"');"
        },
        {
          "text":
            "<code>convertToRoman(798)</code> should return \"DCCXCVIII\"",
          "testString":
            "assert.deepEqual(convertToRoman(798), \"DCCXCVIII\", '<code>convertToRoman(798)</code> should return \"DCCXCVIII\"');"
        },
        {
          "text": "<code>convertToRoman(891)</code> should return \"DCCCXCI\"",
          "testString":
            "assert.deepEqual(convertToRoman(891), \"DCCCXCI\", '<code>convertToRoman(891)</code> should return \"DCCCXCI\"');"
        },
        {
          "text": "<code>convertToRoman(1000)</code> should return \"M\"",
          "testString":
            "assert.deepEqual(convertToRoman(1000), \"M\", '<code>convertToRoman(1000)</code> should return \"M\"');"
        },
        {
          "text": "<code>convertToRoman(1004)</code> should return \"MIV\"",
          "testString":
            "assert.deepEqual(convertToRoman(1004), \"MIV\", '<code>convertToRoman(1004)</code> should return \"MIV\"');"
        },
        {
          "text": "<code>convertToRoman(1006)</code> should return \"MVI\"",
          "testString":
            "assert.deepEqual(convertToRoman(1006), \"MVI\", '<code>convertToRoman(1006)</code> should return \"MVI\"');"
        },
        {
          "text": "<code>convertToRoman(1023)</code> should return \"MXXIII\"",
          "testString":
            "assert.deepEqual(convertToRoman(1023), \"MXXIII\", '<code>convertToRoman(1023)</code> should return \"MXXIII\"');"
        },
        {
          "text": "<code>convertToRoman(2014)</code> should return \"MMXIV\"",
          "testString":
            "assert.deepEqual(convertToRoman(2014), \"MMXIV\", '<code>convertToRoman(2014)</code> should return \"MMXIV\"');"
        },
        {
          "text":
            "<code>convertToRoman(3999)</code> should return \"MMMCMXCIX\"",
          "testString":
            "assert.deepEqual(convertToRoman(3999), \"MMMCMXCIX\", '<code>convertToRoman(3999)</code> should return \"MMMCMXCIX\"');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Roman Numeral Converter",
      "dashedName": "roman-numeral-converter"
    },
    {
      "id": "56533eb9ac21ba0edf2244e2",
      "description": [
        "One of the simplest and most widely known <dfn>ciphers</dfn> is a <code>Caesar cipher</code>, also known as a <code>shift cipher</code>. In a <code>shift cipher</code> the meanings of the letters are shifted by some set amount.",
        "A common modern use is the <a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> cipher, where the values of the letters are shifted by 13 places. Thus 'A' &harr; 'N', 'B' &harr;  'O' and so on.",
        "Write a function which takes a <a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> encoded string as input and returns a decoded string.",
        "All letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>rot13(\"SERR PBQR PNZC\")</code> should decode to <code>FREE CODE CAMP</code>",
          "testString":
            "assert(rot13(\"SERR PBQR PNZC\") === \"FREE CODE CAMP\", '<code>rot13(\"SERR PBQR PNZC\")</code> should decode to <code>FREE CODE CAMP</code>');"
        },
        {
          "text":
            "<code>rot13(\"SERR CVMMN!\")</code> should decode to <code>FREE PIZZA!</code>",
          "testString":
            "assert(rot13(\"SERR CVMMN!\") === \"FREE PIZZA!\", '<code>rot13(\"SERR CVMMN!\")</code> should decode to <code>FREE PIZZA!</code>');"
        },
        {
          "text":
            "<code>rot13(\"SERR YBIR?\")</code> should decode to <code>FREE LOVE?</code>",
          "testString":
            "assert(rot13(\"SERR YBIR?\") === \"FREE LOVE?\", '<code>rot13(\"SERR YBIR?\")</code> should decode to <code>FREE LOVE?</code>');"
        },
        {
          "text":
            "<code>rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\")</code> should decode to <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.</code>",
          "testString":
            "assert(rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\") === \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\", '<code>rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\")</code> should decode to <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.</code>');"
        }
      ],
      "challengeType": 5,
      "isRequired": true,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function rot13(str) { // LBH QVQ VG!\n  \n  return str;\n}\n\n// Change the inputs below to test\nrot13(\"SERR PBQR PNZC\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Caesars Cipher",
      "dashedName": "caesars-cipher"
    },
    {
      "id": "aff0395860f5d3034dc0bfc9",
      "description": [
        "Return <code>true</code> if the passed string looks like a valid US phone number.",
        "The user may fill out the form field any way they choose as long as it has the format of a valid US number. The following are examples of valid formats for US numbers (refer to the tests below for other variants):",
        "<blockquote>555-555-5555\n(555)555-5555\n(555) 555-5555\n555 555 5555\n5555555555\n1 555 555 5555</blockquote>",
        "For this challenge you will be presented with a string such as <code>800-692-7753</code> or <code>8oo-six427676;laskdjf</code>. Your job is to validate or reject the US phone number based on any combination of the formats provided above. The area code is required. If the country code is provided, you must confirm that the country code is <code>1</code>. Return <code>true</code> if the string is a valid US phone number; otherwise return <code>false</code>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>telephoneCheck(\"555-555-5555\")</code> should return a boolean.",
          "testString":
            "assert(typeof telephoneCheck(\"555-555-5555\") === \"boolean\", '<code>telephoneCheck(\"555-555-5555\")</code> should return a boolean.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1 555-555-5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"1 555-555-5555\") === true, '<code>telephoneCheck(\"1 555-555-5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1 (555) 555-5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"1 (555) 555-5555\") === true, '<code>telephoneCheck(\"1 (555) 555-5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"5555555555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"5555555555\") === true, '<code>telephoneCheck(\"5555555555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"555-555-5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"555-555-5555\") === true, '<code>telephoneCheck(\"555-555-5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"(555)555-5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"(555)555-5555\") === true, '<code>telephoneCheck(\"(555)555-5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1(555)555-5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"1(555)555-5555\") === true, '<code>telephoneCheck(\"1(555)555-5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"555-5555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"555-5555\") === false, '<code>telephoneCheck(\"555-5555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"5555555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"5555555\") === false, '<code>telephoneCheck(\"5555555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1 555)555-5555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"1 555)555-5555\") === false, '<code>telephoneCheck(\"1 555)555-5555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1 555 555 5555\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"1 555 555 5555\") === true, '<code>telephoneCheck(\"1 555 555 5555\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"1 456 789 4444\")</code> should return true.",
          "testString":
            "assert(telephoneCheck(\"1 456 789 4444\") === true, '<code>telephoneCheck(\"1 456 789 4444\")</code> should return true.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"123**&!!asdf#\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"123**&!!asdf#\") === false, '<code>telephoneCheck(\"123**&!!asdf#\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"55555555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"55555555\") === false, '<code>telephoneCheck(\"55555555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"(6054756961)\")</code> should return false",
          "testString":
            "assert(telephoneCheck(\"(6054756961)\") === false, '<code>telephoneCheck(\"(6054756961)\")</code> should return false');"
        },
        {
          "text":
            "<code>telephoneCheck(\"2 (757) 622-7382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"2 (757) 622-7382\") === false, '<code>telephoneCheck(\"2 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"0 (757) 622-7382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"0 (757) 622-7382\") === false, '<code>telephoneCheck(\"0 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"-1 (757) 622-7382\")</code> should return false",
          "testString":
            "assert(telephoneCheck(\"-1 (757) 622-7382\") === false, '<code>telephoneCheck(\"-1 (757) 622-7382\")</code> should return false');"
        },
        {
          "text":
            "<code>telephoneCheck(\"2 757 622-7382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"2 757 622-7382\") === false, '<code>telephoneCheck(\"2 757 622-7382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"10 (757) 622-7382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"10 (757) 622-7382\") === false, '<code>telephoneCheck(\"10 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"27576227382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"27576227382\") === false, '<code>telephoneCheck(\"27576227382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"(275)76227382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"(275)76227382\") === false, '<code>telephoneCheck(\"(275)76227382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"2(757)6227382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"2(757)6227382\") === false, '<code>telephoneCheck(\"2(757)6227382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"2(757)622-7382\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"2(757)622-7382\") === false, '<code>telephoneCheck(\"2(757)622-7382\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"555)-555-5555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"555)-555-5555\") === false, '<code>telephoneCheck(\"555)-555-5555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"(555-555-5555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"(555-555-5555\") === false, '<code>telephoneCheck(\"(555-555-5555\")</code> should return false.');"
        },
        {
          "text":
            "<code>telephoneCheck(\"(555)5(55?)-5555\")</code> should return false.",
          "testString":
            "assert(telephoneCheck(\"(555)5(55?)-5555\") === false, '<code>telephoneCheck(\"(555)5(55?)-5555\")</code> should return false.');"
        }
      ],
      "challengeType": 5,
      "isRequired": true,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function telephoneCheck(str) {\n  // Good luck!\n  return true;\n}\n\ntelephoneCheck(\"555-555-5555\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Telephone Number Validator",
      "dashedName": "telephone-number-validator"
    },
    {
      "id": "aa2e6f85cab2ab736c9a9b24",
      "description": [
        "Design a cash register drawer function <code>checkCashRegister()</code> that accepts purchase price as the first argument (<code>price</code>), payment as the second argument (<code>cash</code>), and cash-in-drawer (<code>cid</code>) as the third argument.",
        "<code>cid</code> is a 2D array listing available currency.",
        "The <code>checkCashRegister()</code> function should always return an object with a <code>status</code> key and a <code>change</code> key.",
        "Return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code> if cash-in-drawer is less than the change due, or if you cannot return the exact change.",
        "Return <code>{status: \"CLOSED\", change: [...]}</code> with cash-in-drawer as the value for the key <code>change</code> if it is equal to the change due.",
        "Otherwise, return <code>{status: \"OPEN\", change: [...]}</code>, with the change due in coins and bills, sorted in highest to lowest order, as the value of the <code>change</code> key.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.",
        "<table class='table table-striped'><tr><th>Currency Unit</th><th>Amount</th></tr><tr><td>Penny</td><td>$0.01 (PENNY)</td></tr><tr><td>Nickel</td><td>$0.05 (NICKEL)</td></tr><tr><td>Dime</td><td>$0.1 (DIME)</td></tr><tr><td>Quarter</td><td>$0.25 (QUARTER)</td></tr><tr><td>Dollar</td><td>$1 (DOLLAR)</td></tr><tr><td>Five Dollars</td><td>$5 (FIVE)</td></tr><tr><td>Ten Dollars</td><td>$10 (TEN)</td></tr><tr><td>Twenty Dollars</td><td>$20 (TWENTY)</td></tr><tr><td>One-hundred Dollars</td><td>$100 (ONE HUNDRED)</td></tr></table>"
      ],
      "tests": [
        {
          "text":
            "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return an object.",
          "testString":
            "assert.deepEqual(Object.prototype.toString.call(checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])), '[object Object]', '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return an object.');"
        },
        {
          "text":
            "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}</code>.",
          "testString":
            "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]), {status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}</code>.');"
        },
        {
          "text":
            "<code>checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}</code>.",
          "testString":
            "assert.deepEqual(checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]), {status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}, '<code>checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}</code>.');"
        },
        {
          "text":
            "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.",
          "testString":
            "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"INSUFFICIENT_FUNDS\", change: []}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.');"
        },
        {
          "text":
            "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.",
          "testString":
            "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"INSUFFICIENT_FUNDS\", change: []}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.');"
        },
        {
          "text":
            "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}</code>.",
          "testString":
            "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}</code>.');"
        }
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkCashRegister(price, cash, cid) {\n  var change;\n  // Here is your change, ma'am.\n  return change;\n}\n\n// Example cash-in-drawer array:\n// [[\"PENNY\", 1.01],\n// [\"NICKEL\", 2.05],\n// [\"DIME\", 3.1],\n// [\"QUARTER\", 4.25],\n// [\"ONE\", 90],\n// [\"FIVE\", 55],\n// [\"TEN\", 20],\n// [\"TWENTY\", 60],\n// [\"ONE HUNDRED\", 100]]\n\ncheckCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Cash Register",
      "dashedName": "cash-register"
    },
    {
      "id": "587d7dac367417b2b2512b73",
      "description": [
        "Think about things people see everyday, like cars, shops, and birds. These are all <code>objects</code>: tangible things people can observe and interact with.",
        "What are some qualities of these <code>objects</code>? A car has wheels. Shops sell items. Birds have wings.",
        "These qualities, or <code>properties</code>, define what makes up an <code>object</code>. Note that similar <code>objects</code> share the same <code>properties</code>, but may have different values for those <code>properties</code>. For example, all cars have wheels, but not all cars have the same number of wheels.",
        "<code>Objects</code> in JavaScript are used to model real-world objects, giving them <code>properties</code> and behavior just like their real-world counterparts. Here's an example using these concepts to create a <code>duck</code> <code>object</code>:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};</blockquote>",
        "This <code>duck</code> <code>object</code> has two property/value pairs: a <code>name</code> of \"Aflac\" and a <code>numLegs</code> of 2.",
        "<hr>",
        "Create a <code>dog</code> <code>object</code> with <code>name</code> and <code>numLegs</code> properties, and set them to a string and a number, respectively."
      ],
      "tests": [
        {
          "text": "<code>dog</code> should be an <code>object</code>.",
          "testString":
            "assert(typeof(dog) === 'object', '<code>dog</code> should be an <code>object</code>.');"
        },
        {
          "text":
            "<code>dog</code> should have a <code>name</code> property set to a <code>string</code>.",
          "testString":
            "assert(typeof(dog.name) === 'string', '<code>dog</code> should have a <code>name</code> property set to a <code>string</code>.');"
        },
        {
          "text":
            "<code>dog</code> should have a <code>numLegs</code> property set to a <code>number</code>.",
          "testString":
            "assert(typeof(dog.numLegs) === 'number', '<code>dog</code> should have a <code>numLegs</code> property set to a <code>number</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "let dog = {\n  \n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Basic JavaScript Object",
      "dashedName": "create-a-basic-javascript-object"
    },
    {
      "id": "587d7dac367417b2b2512b74",
      "description": [
        "The last challenge created an <code>object</code> with various <code>properties</code>, now you'll see how to access the values of those <code>properties</code>. Here's an example:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br>console.log(duck.name);<br>// This prints \"Aflac\" to the console</blockquote>",
        "Dot notation is used on the <code>object</code> name, <code>duck</code>, followed by the name of the <code>property</code>, <code>name</code>, to access the value of \"Aflac\".",
        "<hr>",
        "Print both <code>properties</code> of the <code>dog</code> object below to your console."
      ],
      "tests": [
        {
          "text":
            "Your should use <code>console.log</code> to print the value for the <code>name</code> property of the <code>dog</code> object.",
          "testString":
            "assert(/console.log\\(.*dog\\.name.*\\)/g.test(code), 'Your should use <code>console.log</code> to print the value for the <code>name</code> property of the <code>dog</code> object.');"
        },
        {
          "text":
            "Your should use <code>console.log</code> to print the value for the <code>numLegs</code> property of the <code>dog</code> object.",
          "testString":
            "assert(/console.log\\(.*dog\\.numLegs.*\\)/g.test(code), 'Your should use <code>console.log</code> to print the value for the <code>numLegs</code> property of the <code>dog</code> object.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\n// Add your code below this line\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Dot Notation to Access the Properties of an Object",
      "dashedName": "use-dot-notation-to-access-the-properties-of-an-object"
    },
    {
      "id": "587d7dad367417b2b2512b75",
      "description": [
        "<code>Objects</code> can have a special type of <code>property</code>, called a <code>method</code>.",
        "<code>Methods</code> are <code>properties</code> that are functions. This adds different behavior to an <code>object</code>. Here is the <code>duck</code> example with a method:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}<br>};<br>duck.sayName();<br>// Returns \"The name of this duck is Aflac.\"</blockquote>",
        "The example adds the <code>sayName</code> <code>method</code>, which is a function that returns a sentence giving the name of the <code>duck</code>.",
        "Notice that the <code>method</code> accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.",
        "<hr>",
        "Using the <code>dog</code> <code>object</code>, give it a method called <code>sayLegs</code>. The method should return the sentence \"This dog has 4 legs.\""
      ],
      "tests": [
        {
          "text": "<code>dog.sayLegs()</code> should be a function.",
          "testString":
            "assert(typeof(dog.sayLegs) === 'function', '<code>dog.sayLegs()</code> should be a function.');"
        },
        {
          "text":
            "<code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.",
          "testString":
            "assert(dog.sayLegs() === 'This dog has 4 legs.', '<code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  \n};\n\ndog.sayLegs();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Method on an Object",
      "dashedName": "create-a-method-on-an-object"
    },
    {
      "id": "587d7dad367417b2b2512b76",
      "description": [
        "The last challenge introduced a <code>method</code> to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:",
        "<code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}</code>",
        "While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.",
        "A way to avoid these issues is with the <code>this</code> keyword:",
        "<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + this.name + \".\";}<br>};</blockquote>",
        "<code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>.",
        "If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.",
        "<hr>",
        "Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance."
      ],
      "tests": [
        {
          "text": "<code>dog.sayLegs()</code> should return the given string.",
          "testString":
            "assert(dog.sayLegs() === 'This dog has 4 legs.', '<code>dog.sayLegs()</code> should return the given string.');"
        },
        {
          "text":
            "Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.",
          "testString":
            "assert(code.match(/this\\.numLegs/g), 'Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Code More Reusable with the this Keyword",
      "dashedName": "make-code-more-reusable-with-the-this-keyword"
    },
    {
      "id": "587d7dad367417b2b2512b77",
      "description": [
        "<code>Constructors</code> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.",
        "Here is an example of a <code>constructor</code>:",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>",
        "This <code>constructor</code> defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively.",
        "<code>Constructors</code> follow a few conventions:",
        "<ul><li><code>Constructors</code> are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li><code>Constructors</code> use the keyword <code>this</code> to set properties of the object they will create. Inside the <code>constructor</code>, <code>this</code> refers to the new object it will create.</li><li><code>Constructors</code> define properties and behaviors instead of returning a value as other functions might.</li></ul>",
        "<hr>",
        "Create a <code>constructor</code>, <code>Dog</code>, with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> that are set to a string, a string, and a number, respectively."
      ],
      "tests": [
        {
          "text":
            "<code>Dog</code> should have a <code>name</code> property set to a string.",
          "testString":
            "assert(typeof (new Dog()).name === 'string', '<code>Dog</code> should have a <code>name</code> property set to a string.');"
        },
        {
          "text":
            "<code>Dog</code> should have a <code>color</code> property set to a string.",
          "testString":
            "assert(typeof (new Dog()).color === 'string', '<code>Dog</code> should have a <code>color</code> property set to a string.');"
        },
        {
          "text":
            "<code>Dog</code> should have a <code>numLegs</code> property set to a number.",
          "testString":
            "assert(typeof (new Dog()).numLegs === 'number', '<code>Dog</code> should have a <code>numLegs</code> property set to a number.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "",
          "head": "",
          "tail": ""
        }
      },
      "name": "Define a Constructor Function",
      "dashedName": "define-a-constructor-function"
    },
    {
      "id": "587d7dad367417b2b2512b78",
      "description": [
        "Here's the <code>Bird</code> constructor from the previous challenge:",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color  = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>&nbsp;&nbsp;// \"this\" inside the constructor always refers to the object being created<br>}<br><br>let blueBird = new Bird();</blockquote>",
        "Notice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new <code>instance</code> of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results.",
        "Now <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:",
        "<blockquote>blueBird.name; // => Albert<br>blueBird.color; // => blue<br>blueBird.numLegs; // => 2</blockquote>",
        "Just like any other object, its properties can be accessed and modified:",
        "<blockquote>blueBird.name = 'Elvira';<br>blueBird.name; // => Elvira</blockquote>",
        "<hr>",
        "Use the <code>Dog</code> constructor from the last lesson to create a new instance of <code>Dog</code>, assigning it to a variable <code>hound</code>."
      ],
      "tests": [
        {
          "text":
            "<code>hound</code> should be created using the <code>Dog</code> constructor.",
          "testString":
            "assert(hound instanceof Dog, '<code>hound</code> should be created using the <code>Dog</code> constructor.');"
        },
        {
          "text":
            "Your code should use the <code>new</code> operator to create an <code>instance</code> of <code>Dog</code>.",
          "testString":
            "assert(code.match(/new/g), 'Your code should use the <code>new</code> operator to create an <code>instance</code> of <code>Dog</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\n// Add your code below this line\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a Constructor to Create Objects",
      "dashedName": "use-a-constructor-to-create-objects"
    },
    {
      "id": "587d7dae367417b2b2512b79",
      "description": [
        "The <code>Bird</code> and <code>Dog</code> constructors from last challenge worked well. However, notice that all <code>Birds</code> that are created with the <code>Bird</code> constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:",
        "<blockquote>let swan = new Bird();<br>swan.name = \"Carlos\";<br>swan.color = \"white\";</blockquote>",
        "Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one.",
        "To more easily create different <code>Bird</code> objects, you can design your Bird constructor to accept parameters:",
        "<blockquote>function Bird(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>",
        "Then pass in the values as arguments to define each unique bird into the <code>Bird</code> constructor:",
        "<code>let cardinal = new Bird(\"Bruce\", \"red\");</code>",
        "This gives a new instance of <code>Bird</code> with name and color properties set to Bruce and red, respectively. The <code>numLegs</code> property is still set to 2.",
        "The <code>cardinal</code> has these properties:",
        "<blockquote>cardinal.name // => Bruce<br>cardinal.color // => red<br>cardinal.numLegs // => 2</blockquote>",
        "The constructor is more flexible. It's now possible to define the properties for each <code>Bird</code> at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.",
        "<hr>",
        "Create another <code>Dog</code> constructor. This time, set it up to take the parameters <code>name</code> and <code>color</code>, and have the property <code>numLegs</code> fixed at 4. Then create a new <code>Dog</code> saved in a variable <code>terrier</code>. Pass it two strings as arguments for the <code>name</code> and <code>color</code> properties."
      ],
      "tests": [
        {
          "text":
            "<code>Dog</code> should receive an argument for <code>name</code>.",
          "testString":
            "assert((new Dog('Clifford')).name === 'Clifford', '<code>Dog</code> should receive an argument for <code>name</code>.');"
        },
        {
          "text":
            "<code>Dog</code> should receive an argument for <code>color</code>.",
          "testString":
            "assert((new Dog('Clifford', 'yellow')).color === 'yellow', '<code>Dog</code> should receive an argument for <code>color</code>.');"
        },
        {
          "text":
            "<code>Dog</code> should have property <code>numLegs</code> set to 4.",
          "testString":
            "assert((new Dog('Clifford')).numLegs === 4, '<code>Dog</code> should have property <code>numLegs</code> set to 4.');"
        },
        {
          "text":
            "<code>terrier</code> should be created using the <code>Dog</code> constructor.",
          "testString":
            "assert(terrier instanceof Dog, '<code>terrier</code> should be created using the <code>Dog</code> constructor.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function Dog() {\n  \n}\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Extend Constructors to Receive Arguments",
      "dashedName": "extend-constructors-to-receive-arguments"
    },
    {
      "id": "587d7dae367417b2b2512b7a",
      "description": [
        "Anytime a constructor function creates a new object, that object is said to be an <code>instance</code> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:",
        "<blockquote>let Bird = function(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let crow = new Bird(\"Alexis\", \"black\");<br><br>crow instanceof Bird; // => true</blockquote>",
        "If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:",
        "<blockquote>let canary = {<br>&nbsp;&nbsp;name: \"Mildred\",<br>&nbsp;&nbsp;color: \"Yellow\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>canary instanceof Bird; // => false</blockquote>",
        "<hr>",
        "Create a new instance of the <code>House</code> constructor, calling it <code>myHouse</code> and passing a number of bedrooms. Then, use <code>instanceof</code> to verify that it is an instance of <code>House</code>."
      ],
      "tests": [
        {
          "text":
            "<code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.",
          "testString":
            "assert(typeof myHouse.numBedrooms === 'number', '<code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.');"
        },
        {
          "text":
            "Be sure to verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.",
          "testString":
            "assert(/myHouse\\s*instanceof\\s*House/.test(code), 'Be sure to verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "/* jshint expr: true */\n\nfunction House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Add your code below this line\n\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Verify an Objects Constructor with instanceof",
      "dashedName": "verify-an-objects-constructor-with-instanceof"
    },
    {
      "id": "587d7dae367417b2b2512b7b",
      "description": [
        "In the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name  = name;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let duck = new Bird(\"Donald\");<br>let canary = new Bird(\"Tweety\");</blockquote>",
        "<code>name</code> and <code>numLegs</code> are called <code>own</code> properties, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties.",
        "In fact every instance of <code>Bird</code> will have its own copy of these properties.",
        "The following code adds all of the <code>own</code> properties of <code>duck</code> to the array <code>ownProps</code>:",
        "<blockquote>let ownProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [ \"name\", \"numLegs\" ]</blockquote>",
        "<hr>",
        "Add the <code>own</code> properties of <code>canary</code> to the array <code>ownProps</code>."
      ],
      "tests": [
        {
          "text":
            "<code>ownProps</code> should include the values <code>\"numLegs\"</code> and <code>\"name\"</code>.",
          "testString":
            "assert(ownProps.indexOf('name') !== -1 && ownProps.indexOf('numLegs') !== -1, '<code>ownProps</code> should include the values <code>\"numLegs\"</code> and <code>\"name\"</code>.');"
        },
        {
          "text":
            "Solve this challenge without using the built in method <code>Object.keys()</code>.",
          "testString":
            "assert(!/\\Object.keys/.test(code), 'Solve this challenge without using the built in method <code>Object.keys()</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Add your code below this line\n\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand Own Properties",
      "dashedName": "understand-own-properties"
    },
    {
      "id": "587d7dae367417b2b2512b7c",
      "description": [
        "Since <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.",
        "This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.",
        "A better way is to use <code>Bird’s</code> <code>prototype</code>. The <code>prototype</code> is an object that is shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:",
        "<blockquote>Bird.prototype.numLegs = 2;</blockquote>",
        "Now all instances of <code>Bird</code> have the <code>numLegs</code> property.",
        "<blockquote>console.log(duck.numLegs);  // prints 2<br>console.log(canary.numLegs);  // prints 2</blockquote>",
        "Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects.",
        "Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.",
        "<hr>",
        "Add a <code>numLegs</code> property to the <code>prototype</code> of <code>Dog</code>"
      ],
      "tests": [
        {
          "text":
            "<code>beagle</code> should have a <code>numLegs</code> property.",
          "testString":
            "assert(beagle.numLegs !== undefined, '<code>beagle</code> should have a <code>numLegs</code> property.');"
        },
        {
          "text": "<code>beagle.numLegs</code> should be a number.",
          "testString":
            "assert(typeof(beagle.numLegs) === 'number' , '<code>beagle.numLegs</code> should be a number.');"
        },
        {
          "text":
            "<code>numLegs</code> should be a <code>prototype</code> property not an <code>own</code> property.",
          "testString":
            "assert(beagle.hasOwnProperty('numLegs') === false, '<code>numLegs</code> should be a <code>prototype</code> property not an <code>own</code> property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Add your code above this line\nlet beagle = new Dog(\"Snoopy\");",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Prototype Properties to Reduce Duplicate Code",
      "dashedName": "use-prototype-properties-to-reduce-duplicate-code"
    },
    {
      "id": "587d7daf367417b2b2512b7d",
      "description": [
        "You have now seen two kinds of properties: <code>own</code> properties and <code>prototype</code> properties. <code>Own</code> properties are defined directly on the object instance itself. And <code>prototype</code> properties are defined on the <code>prototype</code>.",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;  //own property<br>}<br><br>Bird.prototype.numLegs = 2; // prototype property<br><br>let duck = new Bird(\"Donald\");</blockquote>",
        "Here is how you add <code>duck’s</code> <code>own</code> properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:",
        "<blockquote>let ownProps = [];<br>let prototypeProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;prototypeProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [\"name\"]<br>console.log(prototypeProps); // prints [\"numLegs\"]</blockquote>",
        "<hr>",
        "Add all of the <code>own</code> properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>ownProps</code> array should include <code>\"name\"</code>.",
          "testString":
            "assert(ownProps.indexOf('name') !== -1, 'The <code>ownProps</code> array should include <code>\"name\"</code>.');"
        },
        {
          "text":
            "The <code>prototypeProps</code> array should include <code>\"numLegs\"</code>.",
          "testString":
            "assert(prototypeProps.indexOf('numLegs') !== -1, 'The <code>prototypeProps</code> array should include <code>\"numLegs\"</code>.');"
        },
        {
          "text":
            "Solve this challenge without using the built in method <code>Object.keys()</code>.",
          "testString":
            "assert(!/\\Object.keys/.test(code), 'Solve this challenge without using the built in method <code>Object.keys()</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Add your code below this line \n\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Iterate Over All Properties",
      "dashedName": "iterate-over-all-properties"
    },
    {
      "id": "587d7daf367417b2b2512b7e",
      "description": [
        "There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:",
        "<blockquote>let duck = new Bird();<br>let beagle = new Dog();<br><br>console.log(duck.constructor === Bird);  //prints true<br>console.log(beagle.constructor === Dog);  //prints true</blockquote>",
        "Note that the <code>constructor</code> property is a reference to the constructor function that created the instance.",
        "The advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:",
        "<blockquote>function joinBirdFraternity(candidate) {<br>&nbsp;&nbsp;if (candidate.constructor === Bird) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<strong>Note</strong><br>Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the <code>instanceof</code> method to check the type of an object.",
        "<hr>",
        "Write a <code>joinDogFraternity</code> function that takes a <code>candidate</code> parameter and, using the <code>constructor</code> property, return <code>true</code> if the candidate is a <code>Dog</code>, otherwise return <code>false</code>."
      ],
      "tests": [
        {
          "text":
            "<code>joinDogFraternity</code> should be defined as a function.",
          "testString":
            "assert(typeof(joinDogFraternity) === 'function', '<code>joinDogFraternity</code> should be defined as a function.');"
        },
        {
          "text":
            "<code>joinDogFraternity</code> should return true if<code>candidate</code> is an instance of <code>Dog</code>.",
          "testString":
            "assert(joinDogFraternity(new Dog(\"\")) === true, '<code>joinDogFraternity</code> should return true if<code>candidate</code> is an instance of <code>Dog</code>.');"
        },
        {
          "text":
            "<code>joinDogFraternity</code> should use the <code>constructor</code> property.",
          "testString":
            "assert(/\\.constructor/.test(code) && !/instanceof/.test(code), '<code>joinDogFraternity</code> should use the <code>constructor</code> property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name;\n}\n\n// Add your code below this line\nfunction joinDogFraternity(candidate) {\n  \n}\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand the Constructor Property",
      "dashedName": "understand-the-constructor-property"
    },
    {
      "id": "587d7daf367417b2b2512b7f",
      "description": [
        "Up until now you have been adding properties to the <code>prototype</code> individually:",
        "<blockquote>Bird.prototype.numLegs = 2;</blockquote>",
        "This becomes tedious after more than a few properties.",
        "<blockquote>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>}<br><br>Bird.prototype.describe = function() {<br>&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>}</blockquote>",
        "A more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;numLegs: 2, <br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "<hr>",
        "Add the property <code>numLegs</code> and the two methods <code>eat()</code> and <code>describe()</code> to the <code>prototype</code> of <code>Dog</code> by setting the <code>prototype</code> to a new object."
      ],
      "tests": [
        {
          "text": "<code>Dog.prototype</code> should be set to a new object.",
          "testString":
            "assert((/Dog\\.prototype\\s*?=\\s*?{/).test(code), '<code>Dog.prototype</code> should be set to a new object.');"
        },
        {
          "text":
            "<code>Dog.prototype</code> should have the property <code>numLegs</code>.",
          "testString":
            "assert(Dog.prototype.numLegs !== undefined, '<code>Dog.prototype</code> should have the property <code>numLegs</code>.');"
        },
        {
          "text":
            "<code>Dog.prototype</code> should have the method <code>eat()</code>.",
          "testString":
            "assert(typeof Dog.prototype.eat === 'function', '<code>Dog.prototype</code> should have the method <code>eat()</code>.'); "
        },
        {
          "text":
            "<code>Dog.prototype</code> should have the method <code>describe()</code>.",
          "testString":
            "assert(typeof Dog.prototype.describe === 'function', '<code>Dog.prototype</code> should have the method <code>describe()</code>.'); "
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name; \n}\n\nDog.prototype = {\n  // Add your code below this line\n  \n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the Prototype to a New Object",
      "dashedName": "change-the-prototype-to-a-new-object"
    },
    {
      "id": "587d7daf367417b2b2512b80",
      "description": [
        "There is one crucial side effect of manually setting the <code>prototype</code> to a new object. It erased the <code>constructor</code> property! The code in the previous challenge would print the following for <code>duck</code>:",
        "<blockquote>console.log(duck.constructor)<br>// prints ‘undefined’ - Oops!</blockquote>",
        "To fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // define the constructor property<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote>",
        "<hr>",
        "Define the <code>constructor</code> property on the <code>Dog</code> <code>prototype</code>."
      ],
      "tests": [
        {
          "text":
            "<code>Dog.prototype</code> should set the <code>constructor</code> property.",
          "testString":
            "assert(Dog.prototype.constructor === Dog, '<code>Dog.prototype</code> should set the <code>constructor</code> property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name; \n}\n\n// Modify the code below this line\nDog.prototype = {\n  \n  numLegs: 2, \n  eat: function() {\n    console.log(\"nom nom nom\"); \n  }, \n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Remember to Set the Constructor Property when Changing the Prototype",
      "dashedName":
        "remember-to-set-the-constructor-property-when-changing-the-prototype"
    },
    {
      "id": "587d7db0367417b2b2512b81",
      "description": [
        "Just like people inherit genes from their parents, an object inherits its <code>prototype</code> directly from the constructor function that created it. For example, here the <code>Bird</code> constructor creates the <code>duck</code> object:",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>let duck = new Bird(\"Donald\");</blockquote>",
        "<code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:",
        "<blockquote>Bird.prototype.isPrototypeOf(duck);<br>// returns true</blockquote>",
        "<hr>",
        "Use <code>isPrototypeOf</code> to check the <code>prototype</code> of <code>beagle</code>."
      ],
      "tests": [
        {
          "text":
            "Show that <code>Dog.prototype</code> is the <code>prototype</code> of <code>beagle</code>",
          "testString":
            "assert(/Dog\\.prototype\\.isPrototypeOf\\(beagle\\)/.test(code), 'Show that <code>Dog.prototype</code> is the <code>prototype</code> of <code>beagle</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\n// Add your code below this line\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand Where an Objects Prototype Comes From",
      "dashedName": "understand-where-an-objects-prototype-comes-from"
    },
    {
      "id": "587d7db0367417b2b2512b82",
      "description": [
        "All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an object’s <code>prototype</code> itself is an object.",
        "<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>typeof Bird.prototype; // => object</blockquote>",
        "Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:",
        "<blockquote>Object.prototype.isPrototypeOf(Bird.prototype);<br>// returns true</blockquote>",
        "How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:",
        "<blockquote>let duck = new Bird(\"Donald\");<br>duck.hasOwnProperty(\"name\"); // => true</blockquote>",
        "The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain.",
        "In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>.",
        "<code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.",
        "<hr>",
        "Modify the code to show the correct prototype chain."
      ],
      "tests": [
        {
          "text":
            "Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code>\")",
          "testString":
            "assert(/Object\\.prototype\\.isPrototypeOf/.test(code), \"Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code>\");"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // => true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand the Prototype Chain",
      "dashedName": "understand-the-prototype-chain"
    },
    {
      "id": "587d7db0367417b2b2512b83",
      "description": [
        "There's a principle in programming called <code>Don't Repeat Yourself (DRY)</code>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.",
        "Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "The <code>describe</code> method is repeated in two places. The code can be edited to follow the <code>DRY</code> principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:",
        "<blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:",
        "<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote>",
        "<hr>",
        "The <code>eat</code> method is repeated in both <code>Cat</code> and <code>Bear</code>. Edit the code in the spirit of <code>DRY</code> by moving the <code>eat</code> method to the <code>Animal</code> <code>supertype</code>."
      ],
      "tests": [
        {
          "text":
            "<code>Animal.prototype</code> should have the <code>eat</code> property.",
          "testString":
            "assert(Animal.prototype.hasOwnProperty('eat'), '<code>Animal.prototype</code> should have the <code>eat</code> property.');"
        },
        {
          "text":
            "<code>Bear.prototype</code> should not have the <code>eat</code> property.",
          "testString":
            "assert(!(Bear.prototype.hasOwnProperty('eat')), '<code>Bear.prototype</code> should not have the <code>eat</code> property.');"
        },
        {
          "text":
            "<code>Cat.prototype</code> should not have the <code>eat</code> property.",
          "testString":
            "assert(!(Cat.prototype.hasOwnProperty('eat')), '<code>Cat.prototype</code> should not have the <code>eat</code> property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Cat(name) {\n  this.name = name; \n}\n\nCat.prototype = {\n  constructor: Cat, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name; \n}\n\nBear.prototype = {\n  constructor: Bear, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  \n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Inheritance So You Dont Repeat Yourself",
      "dashedName": "use-inheritance-so-you-dont-repeat-yourself"
    },
    {
      "id": "587d7db0367417b2b2512b84",
      "description": [
        "In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};</blockquote>",
        "This and the next challenge will cover how to reuse <code>Animal's</code> methods inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called <code>inheritance</code>.",
        "This challenge covers the first step: make an instance of the <code>supertype</code> (or parent).",
        "You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:",
        "<blockquote>let animal = new Animal();</blockquote>",
        "There are some disadvantages when using this syntax for <code>inheritance</code>, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:",
        "<blockquote>let animal = Object.create(Animal.prototype);</blockquote>",
        "<code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be <code>Animal's</code> <code>prototype</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.",
        "<blockquote>animal.eat(); // prints \"nom nom nom\"<br>animal instanceof Animal; // => true</blockquote>",
        "<hr>",
        "Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>."
      ],
      "tests": [
        {
          "text": "The <code>duck</code> variable should be defined.",
          "testString":
            "assert(typeof duck !== \"undefined\", 'The <code>duck</code> variable should be defined.');"
        },
        {
          "text": "The <code>beagle</code> variable should be defined.",
          "testString":
            "assert(typeof beagle !== \"undefined\", 'The <code>beagle</code> variable should be defined.');"
        },
        {
          "text":
            "<code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.",
          "testString":
            "assert(duck instanceof Animal, '<code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.');"
        },
        {
          "text":
            "<code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.",
          "testString":
            "assert(beagle instanceof Animal, '<code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Add your code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line\n\nduck.eat(); // Should print \"nom nom nom\"\nbeagle.eat(); // Should print \"nom nom nom\" ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Inherit Behaviors from a Supertype",
      "dashedName": "inherit-behaviors-from-a-supertype"
    },
    {
      "id": "587d7db1367417b2b2512b85",
      "description": [
        "In the previous challenge you saw the first step for inheriting behavior from the <code>supertype</code> (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.",
        "This challenge covers the next step: set the <code>prototype</code> of the <code>subtype</code> (or child)&mdash;in this case, <code>Bird</code>&mdash;to be an instance of <code>Animal</code>.",
        "<blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote>",
        "Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.",
        "<blockquote>let duck = new Bird(\"Donald\");<br>duck.eat(); // prints \"nom nom nom\"</blockquote>",
        "<code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.",
        "<hr>",
        "Modify the code so that instances of <code>Dog</code> inherit from <code>Animal</code>."
      ],
      "tests": [
        {
          "text":
            "<code>Dog.prototype</code> should be an instance of <code>Animal</code>.",
          "testString":
            "assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code> should be an instance of <code>Animal</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\n\n// Add your code below this line\n\n\nlet beagle = new Dog();\nbeagle.eat();  // Should print \"nom nom nom\"",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set the Childs Prototype to an Instance of the Parent",
      "dashedName": "set-the-childs-prototype-to-an-instance-of-the-parent"
    },
    {
      "id": "587d7db1367417b2b2512b86",
      "description": [
        "When an object inherits its <code>prototype</code> from another object, it also inherits the <code>supertype</code>'s constructor property.",
        "Here's an example:",
        "<blockquote>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>let duck = new Bird();<br>duck.constructor // function Animal(){...}</blockquote>",
        "But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set <code>Bird's</code> constructor property to the <code>Bird</code> object:",
        "<blockquote>Bird.prototype.constructor = Bird;<br>duck.constructor // function Bird(){...}</blockquote>",
        "<hr>",
        "Fix the code so <code>duck.constructor</code> and <code>beagle.constructor</code> return their respective constructors."
      ],
      "tests": [
        {
          "text":
            "<code>Bird.prototype</code> should be an instance of <code>Animal</code>.",
          "testString":
            "assert(Animal.prototype.isPrototypeOf(Bird.prototype), '<code>Bird.prototype</code> should be an instance of <code>Animal</code>.');"
        },
        {
          "text":
            "<code>duck.constructor</code> should return <code>Bird</code>.",
          "testString":
            "assert(duck.constructor === Bird, '<code>duck.constructor</code> should return <code>Bird</code>.');"
        },
        {
          "text":
            "<code>Dog.prototype</code> should be an instance of <code>Animal</code>.",
          "testString":
            "assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code> should be an instance of <code>Animal</code>.');"
        },
        {
          "text":
            "<code>beagle.constructor</code> should return <code>Dog</code>.",
          "testString":
            "assert(beagle.constructor === Dog, '<code>beagle.constructor</code> should return <code>Dog</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// Add your code below this line\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Reset an Inherited Constructor Property",
      "dashedName": "reset-an-inherited-constructor-property"
    },
    {
      "id": "587d7db1367417b2b2512b87",
      "description": [
        "A constructor function that inherits its <code>prototype</code> object from a <code>supertype</code> constructor function can still have its own methods in addition to inherited methods.",
        "For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};<br>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>Bird.prototype.constructor = Bird;</blockquote>",
        "In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's</code> <code>prototype</code> the same way as any constructor function:",
        "<blockquote>Bird.prototype.fly = function() {<br>&nbsp;&nbsp;console.log(\"I'm flying!\");<br>};</blockquote>",
        "Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:",
        "<blockquote>let duck = new Bird();<br>duck.eat(); // prints \"nom nom nom\"<br>duck.fly(); // prints \"I'm flying!\"</blockquote>",
        "<hr>",
        "Add all necessary code so the <code>Dog</code> object inherits from <code>Animal</code> and the <code>Dog's</code> <code>prototype</code> constructor is set to Dog. Then add a <code>bark()</code> method to the <code>Dog</code> object so that <code>beagle</code> can both <code>eat()</code> and <code>bark()</code>. The <code>bark()</code> method should print \"Woof!\" to the console."
      ],
      "tests": [
        {
          "text":
            "<code>Animal</code> should not respond to the <code>bark()</code> method.",
          "testString":
            "assert(typeof Animal.prototype.bark == \"undefined\", '<code>Animal</code> should not respond to the <code>bark()</code> method.');"
        },
        {
          "text":
            "<code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.",
          "testString":
            "assert(typeof Dog.prototype.eat == \"function\", '<code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.');"
        },
        {
          "text":
            "<code>Dog</code> should have the <code>bark()</code> method as an <code>own</code> property.",
          "testString":
            "assert(Dog.prototype.hasOwnProperty('bark'), '<code>Dog</code> should have the <code>bark()</code> method as an <code>own</code> property.');"
        },
        {
          "text":
            "<code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.",
          "testString":
            "assert(beagle instanceof Animal, '<code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.');"
        },
        {
          "text":
            "The constructor for <code>beagle</code> should be set to <code>Dog</code>.",
          "testString":
            "assert(beagle.constructor === Dog, 'The constructor for <code>beagle</code> should be set to <code>Dog</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\n\n// Add your code below this line\n\n\n\n\n// Add your code above this line\n\nlet beagle = new Dog();\n\nbeagle.eat(); // Should print \"nom nom nom\"\nbeagle.bark(); // Should print \"Woof!\"",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Methods After Inheritance",
      "dashedName": "add-methods-after-inheritance"
    },
    {
      "id": "587d7db1367417b2b2512b88",
      "description": [
        "In previous lessons, you learned that an object can inherit its behavior (methods) from another object by cloning its <code>prototype</code> object:",
        "<blockquote>ChildObject.prototype = Object.create(ParentObject.prototype);</blockquote>",
        "Then the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:",
        "<blockquote>ChildObject.prototype.methodName = function() {...};</blockquote>",
        "It's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override.",
        "Here's an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:",
        "<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;return \"nom nom nom\";<br>};<br>function Bird() { }<br><br>// Inherit all methods from Animal<br>Bird.prototype = Object.create(Animal.prototype);<br><br>// Bird.eat() overrides Animal.eat()<br>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;return \"peck peck peck\";<br>};</blockquote>",
        "If you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on <code>duck’s</code> <code>prototype</code> chain:",
        "1. duck => Is eat() defined here? No.",
        "2. Bird => Is eat() defined here? => Yes. Execute it and stop searching.",
        "3. Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.",
        "4. Object => JavaScript stopped searching before reaching this level.",
        "<hr>",
        "Override the <code>fly()</code> method for <code>Penguin</code> so that it returns \"Alas, this is a flightless bird.\""
      ],
      "tests": [
        {
          "text":
            "<code>penguin.fly()</code> should return the string \"Alas, this is a flightless bird.\"",
          "testString":
            "assert(penguin.fly() === \"Alas, this is a flightless bird.\", '<code>penguin.fly()</code> should return the string \"Alas, this is a flightless bird.\"');"
        },
        {
          "text":
            "The <code>bird.fly()</code> method should return \"I am flying!\"",
          "testString":
            "assert((new Bird()).fly() === \"I am flying!\", 'The <code>bird.fly()</code> method should return \"I am flying!\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Add your code below this line\n\n\n\n// Add your code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());",
          "head": "",
          "tail": ""
        }
      },
      "name": "Override Inherited Methods",
      "dashedName": "override-inherited-methods"
    },
    {
      "id": "587d7db2367417b2b2512b89",
      "description": [
        "As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.",
        "For unrelated objects, it's better to use <code>mixins</code>. A <code>mixin</code> allows other objects to use a collection of functions.",
        "<blockquote>let flyMixin = function(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;}<br>};</blockquote>",
        "The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.",
        "<blockquote>let bird = {<br>&nbsp;&nbsp;name: \"Donald\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>let plane = {<br>&nbsp;&nbsp;model: \"777\",<br>&nbsp;&nbsp;numPassengers: 524<br>};<br><br>flyMixin(bird);<br>flyMixin(plane);</blockquote>",
        "Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:",
        "<blockquote>bird.fly(); // prints \"Flying, wooosh!\"<br>plane.fly(); // prints \"Flying, wooosh!\"</blockquote>",
        "Note how the <code>mixin</code> allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.",
        "<hr>",
        "Create a <code>mixin</code> named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide."
      ],
      "tests": [
        {
          "text":
            "Your code should declare a <code>glideMixin</code> variable that is a function.",
          "testString":
            "assert(typeof glideMixin === \"function\", 'Your code should declare a <code>glideMixin</code> variable that is a function.');"
        },
        {
          "text":
            "Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.",
          "testString":
            "assert(typeof bird.glide === \"function\", 'Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.');"
        },
        {
          "text":
            "Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.",
          "testString":
            "assert(typeof boat.glide === \"function\", 'Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Add your code below this line\n\n\n\n\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a Mixin to Add Common Behavior Between Unrelated Objects",
      "dashedName":
        "use-a-mixin-to-add-common-behavior-between-unrelated-objects"
    },
    {
      "id": "587d7db2367417b2b2512b8a",
      "description": [
        "In the previous challenge, <code>bird</code> had a public property <code>name</code>. It is considered public because it can be accessed and changed outside of <code>bird</code>'s definition.",
        "<blockquote>bird.name = \"Duffy\";</blockquote>",
        "Therefore, any part of your code can easily change the name of <code>bird</code> to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.",
        "The simplest way to make properties private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the property can only be accessed and changed by methods also within the constructor function.",
        "<blockquote>function Bird() {<br>&nbsp;&nbsp;let hatchedEgg = 10; // private property<br><br>&nbsp;&nbsp;this.getHatchedEggCount = function() { // publicly available method that a bird object can use<br>&nbsp;&nbsp;&nbsp;&nbsp;return hatchedEgg;<br>&nbsp;&nbsp;};<br>}<br>let ducky = new Bird();<br>ducky.getHatchedEggCount(); // returns 10</blockquote>",
        "Here <code>getHachedEggCount</code> is a privileged method, because it has access to the private variable <code>hatchedEgg</code>. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHachedEggCount</code>. In JavaScript, a function always has access to the context in which it was created. This is called <code>closure</code>.",
        "<hr>",
        "Change how <code>weight</code> is declared in the <code>Bird</code> function so it is a private variable. Then, create a method <code>getWeight</code> that returns the value of <code>weight</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>weight</code> property should be a private variable.",
          "testString":
            "assert(!code.match(/this\\.weight/g), 'The <code>weight</code> property should be a private variable.');"
        },
        {
          "text":
            "Your code should create a method in <code>Bird</code> called <code>getWeight</code> that returns the <code>weight</code>.",
          "testString":
            "assert((new Bird()).getWeight() === 15, 'Your code should create a method in <code>Bird</code> called <code>getWeight</code> that returns the <code>weight</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function Bird() {\n  this.weight = 15;\n  \n  \n}\n",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use Closure to Protect Properties Within an Object from Being Modified Externally",
      "dashedName":
        "use-closure-to-protect-properties-within-an-object-from-being-modified-externally"
    },
    {
      "id": "587d7db2367417b2b2512b8b",
      "description": [
        "A common pattern in JavaScript is to execute a function as soon as it is declared:",
        "<blockquote>(function () {<br>&nbsp;&nbsp;console.log(\"Chirp, chirp!\");<br>})(); // this is an anonymous function expression that executes right away<br>// Outputs \"Chirp, chirp!\" immediately</blockquote>",
        "Note that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <code>immediately invoked function expression</code> or <code>IIFE</code>.",
        "<hr>",
        "Rewrite the function <code>makeNest</code> and remove its call so instead it's an anonymous <code>immediately invoked function expression</code> (<code>IIFE</code>)."
      ],
      "tests": [
        {
          "text": "The function should be anonymous.",
          "testString":
            "assert(/\\(\\s*?function\\s*?\\(\\s*?\\)\\s*?{/.test(code), 'The function should be anonymous.');"
        },
        {
          "text":
            "Your function should have parentheses at the end of the expression to call it immediately.",
          "testString":
            "assert(/}\\s*?\\)\\s*?\\(\\s*?\\)/.test(code), 'Your function should have parentheses at the end of the expression to call it immediately.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function makeNest() {\n  console.log(\"A cozy nest is ready\");\n}\n\nmakeNest(); ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Understand the Immediately Invoked Function Expression IIFE",
      "dashedName":
        "understand-the-immediately-invoked-function-expression-iife"
    },
    {
      "id": "587d7db2367417b2b2512b8c",
      "description": [
        "An <code>immediately invoked function expression</code> (<code>IIFE</code>) is often used to group related functionality into a single object or <code>module</code>. For example, an earlier challenge defined two mixins:",
        "<blockquote>function glideMixin(obj) {<br>&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;};<br>}<br>function flyMixin(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;};<br>}</blockquote>",
        "We can group these <code>mixins</code> into a module as follows:",
        "<blockquote>let motionModule = (function () {<br>&nbsp;&nbsp;return {<br>&nbsp;&nbsp;&nbsp;&nbsp;glideMixin: function (obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;flyMixin: function(obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}) (); // The two parentheses cause the function to be immediately invoked</blockquote>",
        "Note that you have an <code>immediately invoked function expression</code> (<code>IIFE</code>) that returns an object <code>motionModule</code>. This returned object contains all of the <code>mixin</code> behaviors as properties of the object.",
        "The advantage of the <code>module</code> pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:",
        "<blockquote>motionModule.glideMixin(duck);<br>duck.glide();</blockquote>",
        "<hr>",
        "Create a <code>module</code> named <code>funModule</code> to wrap the two <code>mixins</code> <code>isCuteMixin</code> and <code>singMixin</code>. <code>funModule</code> should return an object."
      ],
      "tests": [
        {
          "text":
            "<code>funModule</code> should be defined and return an object.",
          "testString":
            "assert(typeof funModule === \"object\", '<code>funModule</code> should be defined and return an object.');"
        },
        {
          "text":
            "<code>funModule.isCuteMixin</code> should access a function.",
          "testString":
            "assert(typeof funModule.isCuteMixin === \"function\", '<code>funModule.isCuteMixin</code> should access a function.');"
        },
        {
          "text": "<code>funModule.singMixin</code> should access a function.",
          "testString":
            "assert(typeof funModule.singMixin === \"function\", '<code>funModule.singMixin</code> should access a function.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let isCuteMixin = function(obj) {\n  obj.isCute = function() {\n    return true;\n  };\n};\nlet singMixin = function(obj) {\n  obj.sing = function() {\n    console.log(\"Singing to an awesome tune\");\n  };\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use an IIFE to Create a Module",
      "dashedName": "use-an-iife-to-create-a-module"
    },
    {
      "id": "587d7db3367417b2b2512b8e",
      "description": [
        "Regular expressions are used in programming languages to match parts of strings. You create patterns to help you do that matching.",
        "If you want to find the word <code>\"the\"</code> in the string <code>\"The dog chased the cat\"</code>, you could use the following regular expression: <code>/the/</code>. Notice that quote marks are not required within the regular expression.",
        "JavaScript has multiple ways to use regexes. One way to test a regex is using the <code>.test()</code> method. The <code>.test()</code> method takes the regex, applies it to a string (which is placed inside the parentheses), and returns <code>true</code> or <code>false</code> if your pattern finds something or not.",
        "<blockquote>let testStr = \"freeCodeCamp\";<br>let testRegex = /Code/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>",
        "<hr>",
        "Apply the regex <code>myRegex</code> on the string <code>myString</code> using the <code>.test()</code> method."
      ],
      "tests": [
        {
          "text": "You should use <code>.test()</code> to test the regex.",
          "testString":
            "assert(code.match(/myRegex.test\\(\\s*myString\\s*\\)/), 'You should use <code>.test()</code> to test the regex.');"
        },
        {
          "text": "Your result should return <code>true</code>.",
          "testString":
            "assert(result === true, 'Your result should return <code>true</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Using the Test Method",
      "dashedName": "using-the-test-method"
    },
    {
      "id": "587d7db3367417b2b2512b8f",
      "description": [
        "In the last challenge, you searched for the word <code>\"Hello\"</code> using the regular expression <code>/Hello/</code>. That regex searched for a literal match of the string <code>\"Hello\"</code>. Here's another example searching for a literal match of the string <code>\"Kevin\"</code>:",
        "<blockquote>let testStr = \"Hello, my name is Kevin.\";<br>let testRegex = /Kevin/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>",
        "Any other forms of <code>\"Kevin\"</code> will not match. For example, the regex <code>/Kevin/</code> will not match <code>\"kevin\"</code> or <code>\"KEVIN\"</code>.",
        "<blockquote>let wrongRegex = /kevin/;<br>wrongRegex.test(testStr);<br>// Returns false</blockquote>",
        "A future challenge will show how to match those other forms as well.",
        "<hr>",
        "Complete the regex <code>waldoRegex</code> to find <code>\"Waldo\"</code> in the string <code>waldoIsHiding</code> with a literal match."
      ],
      "tests": [
        {
          "text":
            "Your regex <code>waldoRegex</code> should find <code>\"Waldo\"</code>",
          "testString":
            "assert(waldoRegex.test(waldoIsHiding), 'Your regex <code>waldoRegex</code> should find <code>\"Waldo\"</code>');"
        },
        {
          "text":
            "Your regex <code>waldoRegex</code> should not search for anything else.",
          "testString":
            "assert(!waldoRegex.test('Somewhere is hiding in this text.'), 'Your regex <code>waldoRegex</code> should not search for anything else.');"
        },
        {
          "text": "You should perform a literal string match with your regex.",
          "testString":
            "assert(!/\\/.*\\/i/.test(code), 'You should perform a literal string match with your regex.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Literal Strings",
      "dashedName": "match-literal-strings"
    },
    {
      "id": "587d7db4367417b2b2512b90",
      "description": [
        "Using regexes like <code>/coding/</code>, you can look for the pattern <code>\"coding\"</code> in another string.",
        "This is powerful to search single strings, but it's limited to only one pattern. You can search for multiple patterns using the <code>alternation</code> or <code>OR</code> operator: <code>|</code>.",
        "This operator matches patterns either before or after it. For example, if you wanted to match <code>\"yes\"</code> or <code>\"no\"</code>, the regex you want is <code>/yes|no/</code>.",
        "You can also search for more than just two patterns. You can do this by adding more patterns with more <code>OR</code> operators separating them, like <code>/yes|no|maybe/</code>.",
        "<hr>",
        "Complete the regex <code>petRegex</code> to match the pets <code>\"dog\"</code>, <code>\"cat\"</code>, <code>\"bird\"</code>, or <code>\"fish\"</code>."
      ],
      "tests": [
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"John has a pet dog.\"</code>",
          "testString":
            "assert(petRegex.test('John has a pet dog.'), 'Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"John has a pet dog.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Emma has a pet rock.\"</code>",
          "testString":
            "assert(!petRegex.test('Emma has a pet rock.'), 'Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Emma has a pet rock.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Emma has a pet bird.\"</code>",
          "testString":
            "assert(petRegex.test('Emma has a pet bird.'), 'Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Emma has a pet bird.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Liz has a pet cat.\"</code>",
          "testString":
            "assert(petRegex.test('Liz has a pet cat.'), 'Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Liz has a pet cat.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Kara has a pet dolphin.\"</code>",
          "testString":
            "assert(!petRegex.test('Kara has a pet dolphin.'), 'Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Kara has a pet dolphin.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Alice has a pet fish.\"</code>",
          "testString":
            "assert(petRegex.test('Alice has a pet fish.'), 'Your regex <code>petRegex</code> should return <code>true</code> for the string <code>\"Alice has a pet fish.\"</code>');"
        },
        {
          "text":
            "Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Jimmy has a pet computer.\"</code>",
          "testString":
            "assert(!petRegex.test('Jimmy has a pet computer.'), 'Your regex <code>petRegex</code> should return <code>false</code> for the string <code>\"Jimmy has a pet computer.\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let petString = \"James has a pet cat.\";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match a Literal String with Different Possibilities",
      "dashedName": "match-a-literal-string-with-different-possibilities"
    },
    {
      "id": "587d7db4367417b2b2512b91",
      "description": [
        "Up until now, you've looked at regexes to do literal matches of strings. But sometimes, you might want to also match case differences.",
        "Case (or sometimes letter case) is the difference between uppercase letters and lowercase letters. Examples of uppercase are <code>\"A\"</code>, <code>\"B\"</code>, and <code>\"C\"</code>. Examples of lowercase are <code>\"a\"</code>, <code>\"b\"</code>, and <code>\"c\"</code>.",
        "You can match both cases using what is called a flag. There are other flags but here you'll focus on the flag that ignores case - the <code>i</code> flag. You can use it by appending it to the regex.  An example of using this flag is <code>/ignorecase/i</code>. This regex can match the strings <code>\"ignorecase\"</code>, <code>\"igNoreCase\"</code>, and <code>\"IgnoreCase\"</code>.",
        "<hr>",
        "Write a regex <code>fccRegex</code> to match <code>\"freeCodeCamp\"</code>, no matter its case. Your regex should not match any abbreviations or variations with spaces."
      ],
      "tests": [
        {
          "text": "Your regex should match <code>freeCodeCamp</code>",
          "testString":
            "assert(fccRegex.test('freeCodeCamp'), 'Your regex should match <code>freeCodeCamp</code>');"
        },
        {
          "text": "Your regex should match <code>FreeCodeCamp</code>",
          "testString":
            "assert(fccRegex.test('FreeCodeCamp'), 'Your regex should match <code>FreeCodeCamp</code>');"
        },
        {
          "text": "Your regex should match <code>FreecodeCamp</code>",
          "testString":
            "assert(fccRegex.test('FreecodeCamp'), 'Your regex should match <code>FreecodeCamp</code>');"
        },
        {
          "text": "Your regex should match <code>FreeCodecamp</code>",
          "testString":
            "assert(fccRegex.test('FreeCodecamp'), 'Your regex should match <code>FreeCodecamp</code>');"
        },
        {
          "text": "Your regex should not match <code>Free Code Camp</code>",
          "testString":
            "assert(!fccRegex.test('Free Code Camp'), 'Your regex should not match <code>Free Code Camp</code>');"
        },
        {
          "text": "Your regex should match <code>FreeCOdeCamp</code>",
          "testString":
            "assert(fccRegex.test('FreeCOdeCamp'), 'Your regex should match <code>FreeCOdeCamp</code>');"
        },
        {
          "text": "Your regex should not match <code>FCC</code>",
          "testString":
            "assert(!fccRegex.test('FCC'), 'Your regex should not match <code>FCC</code>');"
        },
        {
          "text": "Your regex should match <code>FrEeCoDeCamp</code>",
          "testString":
            "assert(fccRegex.test('FrEeCoDeCamp'), 'Your regex should match <code>FrEeCoDeCamp</code>');"
        },
        {
          "text": "Your regex should match <code>FrEeCodECamp</code>",
          "testString":
            "assert(fccRegex.test('FrEeCodECamp'), 'Your regex should match <code>FrEeCodECamp</code>');"
        },
        {
          "text": "Your regex should match <code>FReeCodeCAmp</code>",
          "testString":
            "assert(fccRegex.test('FReeCodeCAmp'), 'Your regex should match <code>FReeCodeCAmp</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let myString = \"freeCodeCamp\";\nlet fccRegex = /change/; // Change this line\nlet result = fccRegex.test(myString);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Ignore Case While Matching",
      "dashedName": "ignore-case-while-matching"
    },
    {
      "id": "587d7db4367417b2b2512b92",
      "description": [
        "So far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the <code>.match()</code> method.",
        "To use the <code>.match()</code> method, apply the method on a string and pass in the regex inside the parentheses. Here's an example:",
        "<blockquote>\"Hello, World!\".match(/Hello/);<br>// Returns [\"Hello\"]<br>let ourStr = \"Regular expressions\";<br>let ourRegex = /expressions/;<br>ourStr.match(ourRegex);<br>// Returns [\"expressions\"]</blockquote>",
        "<hr>",
        "Apply the <code>.match()</code> method to extract the word <code>coding</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>result</code> should have the word <code>coding</code>",
          "testString":
            "assert(result.join() === \"coding\", 'The <code>result</code> should have the word <code>coding</code>');"
        },
        {
          "text":
            "Your regex <code>codingRegex</code> should search for <code>coding</code>",
          "testString":
            "assert(codingRegex.source === \"coding\", 'Your regex <code>codingRegex</code> should search for <code>coding</code>');"
        },
        {
          "text": "You should use the <code>.match()</code> method.",
          "testString":
            "assert(code.match(/\\.match\\(.*\\)/), 'You should use the <code>.match()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Extract Matches",
      "dashedName": "extract-matches"
    },
    {
      "id": "587d7db4367417b2b2512b93",
      "description": [
        "So far, you have only been able to extract or search a pattern once.",
        "<blockquote>let testStr = \"Repeat, Repeat, Repeat\";<br>let ourRegex = /Repeat/;<br>testStr.match(ourRegex);<br>// Returns [\"Repeat\"]</blockquote>",
        "To search or extract a pattern more than once, you can use the <code>g</code> flag.",
        "<blockquote>let repeatRegex = /Repeat/g;<br>testStr.match(repeatRegex);<br>// Returns [\"Repeat\", \"Repeat\", \"Repeat\"]</blockquote>",
        "<hr>",
        "Using the regex <code>starRegex</code>, find and extract both <code>\"Twinkle\"</code> words from the string <code>twinkleStar</code>.",
        "<strong>Note</strong><br>You can have multiple flags on your regex like <code>/search/gi</code>"
      ],
      "tests": [
        {
          "text":
            "Your regex <code>starRegex</code> should use the global flag <code>g</code>",
          "testString":
            "assert(starRegex.flags.match(/g/).length == 1, 'Your regex <code>starRegex</code> should use the global flag <code>g</code>');"
        },
        {
          "text":
            "Your regex <code>starRegex</code> should use the case insensitive flag <code>i</code>",
          "testString":
            "assert(starRegex.flags.match(/i/).length == 1, 'Your regex <code>starRegex</code> should use the case insensitive flag <code>i</code>');"
        },
        {
          "text":
            "Your match should match both occurrences of the word <code>\"Twinkle\"</code>",
          "testString":
            "assert(result.sort().join() == twinkleStar.match(/twinkle/gi).sort().join(), 'Your match should match both occurrences of the word <code>\"Twinkle\"</code>');"
        },
        {
          "text":
            "Your match <code>result</code> should have two elements in it.",
          "testString":
            "assert(result.length == 2, 'Your match <code>result</code> should have two elements in it.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let twinkleStar = \"Twinkle, twinkle, little star\";\nlet starRegex = /change/; // Change this line\nlet result = twinkleStar; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Find More Than the First Match",
      "dashedName": "find-more-than-the-first-match"
    },
    {
      "id": "587d7db5367417b2b2512b94",
      "description": [
        "Sometimes you won't (or don't need to) know the exact characters in your patterns. Thinking of all words that match, say, a misspelling would take a long time. Luckily, you can save time using the wildcard character: <code>.</code>",
        "The wildcard character <code>.</code> will match any one character. The wildcard is also called <code>dot</code> and <code>period</code>. You can use the wildcard character just like any other character in the regex. For example, if you wanted to match <code>\"hug\"</code>, <code>\"huh\"</code>, <code>\"hut\"</code>, and <code>\"hum\"</code>, you can use the regex <code>/hu./</code> to match all four words.",
        "<blockquote>let humStr = \"I'll hum a song\";<br>let hugStr = \"Bear hug\";<br>let huRegex = /hu./;<br>humStr.match(huRegex); // Returns [\"hum\"]<br>hugStr.match(huRegex); // Returns [\"hug\"]</blockquote>",
        "<hr>",
        "Complete the regex <code>unRegex</code> so that it matches the strings <code>\"run\"</code>, <code>\"sun\"</code>, <code>\"fun\"</code>, <code>\"pun\"</code>, <code>\"nun\"</code>, and <code>\"bun\"</code>. Your regex should use the wildcard character."
      ],
      "tests": [
        {
          "text": "You should use the <code>.test()</code> method.",
          "testString":
            "assert(code.match(/\\.test\\(.*\\)/), 'You should use the <code>.test()</code> method.');"
        },
        {
          "text":
            "You should use the wildcard character in your regex <code>unRegex</code>",
          "testString":
            "assert(/\\./.test(unRegex.source), 'You should use the wildcard character in your regex <code>unRegex</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"run\"</code> in <code>\"Let us go on a run.\"</code>",
          "testString":
            "assert(unRegex.test(\"Let us go on a run.\"), 'Your regex <code>unRegex</code> should match <code>\"run\"</code> in <code>\"Let us go on a run.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"sun\"</code> in <code>\"The sun is out today.\"</code>",
          "testString":
            "assert(unRegex.test(\"The sun is out today.\"), 'Your regex <code>unRegex</code> should match <code>\"sun\"</code> in <code>\"The sun is out today.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"fun\"</code> in <code>\"Coding is a lot of fun.\"</code>",
          "testString":
            "assert(unRegex.test(\"Coding is a lot of fun.\"), 'Your regex <code>unRegex</code> should match <code>\"fun\"</code> in <code>\"Coding is a lot of fun.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"pun\"</code> in <code>\"Seven days without a pun makes one weak.\"</code>",
          "testString":
            "assert(unRegex.test(\"Seven days without a pun makes one weak.\"), 'Your regex <code>unRegex</code> should match <code>\"pun\"</code> in <code>\"Seven days without a pun makes one weak.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"nun\"</code> in <code>\"One takes a vow to be a nun.\"</code>",
          "testString":
            "assert(unRegex.test(\"One takes a vow to be a nun.\"), 'Your regex <code>unRegex</code> should match <code>\"nun\"</code> in <code>\"One takes a vow to be a nun.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should match <code>\"bun\"</code> in <code>\"She got fired from the hot dog stand for putting her hair in a bun.\"</code>",
          "testString":
            "assert(unRegex.test(\"She got fired from the hot dog stand for putting her hair in a bun.\"), 'Your regex <code>unRegex</code> should match <code>\"bun\"</code> in <code>\"She got fired from the hot dog stand for putting her hair in a bun.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should not match <code>\"There is a bug in my code.\"</code>",
          "testString":
            "assert(!unRegex.test(\"There is a bug in my code.\"), 'Your regex <code>unRegex</code> should not match <code>\"There is a bug in my code.\"</code>');"
        },
        {
          "text":
            "Your regex <code>unRegex</code> should not match <code>\"Catch me if you can.\"</code>",
          "testString":
            "assert(!unRegex.test(\"Can me if you can.\"), 'Your regex <code>unRegex</code> should not match <code>\"Catch me if you can.\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let exampleStr = \"Let's have fun with regular expressions!\";\nlet unRegex = /change/; // Change this line\nlet result = unRegex.test(exampleStr);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Anything with Wildcard Period",
      "dashedName": "match-anything-with-wildcard-period"
    },
    {
      "id": "587d7db5367417b2b2512b95",
      "description": [
        "You learned how to match literal patterns (<code>/literal/</code>) and wildcard character (<code>/./</code>). Those are the extremes of regular expressions, where one finds exact matches and the other matches everything. There are options that are a balance between the two extremes.",
        "You can search for a literal pattern with some flexibility with <code>character classes</code>. Character classes allow you to define a group of characters you wish to match by placing them inside square (<code>[</code> and <code>]</code>) brackets.",
        "For example, you want to match <code>\"bag\"</code>, <code>\"big\"</code>, and <code>\"bug\"</code> but not <code>\"bog\"</code>. You can create the regex <code>/b[aiu]g/</code> to do this. The <code>[aiu]</code> is the character class that will only match the characters <code>\"a\"</code>, <code>\"i\"</code>, or <code>\"u\"</code>.",
        "<blockquote>let bigStr = \"big\";<br>let bagStr = \"bag\";<br>let bugStr = \"bug\";<br>let bogStr = \"bog\";<br>let bgRegex = /b[aiu]g/;<br>bigStr.match(bgRegex); // Returns [\"big\"]<br>bagStr.match(bgRegex); // Returns [\"bag\"]<br>bugStr.match(bgRegex); // Returns [\"bug\"]<br>bogStr.match(bgRegex); // Returns null</blockquote>",
        "<hr>",
        "Use a character class with vowels (<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>) in your regex <code>vowelRegex</code> to find all the vowels in the string <code>quoteSample</code>.",
        "<strong>Note</strong><br>Be sure to match both upper- and lowercase vowels."
      ],
      "tests": [
        {
          "text": "You should find all 25 vowels.",
          "testString":
            "assert(result.length == 25, 'You should find all 25 vowels.');"
        },
        {
          "text":
            "Your regex <code>vowelRegex</code> should use a character class.",
          "testString":
            "assert(/\\[.*\\]/.test(vowelRegex.source), 'Your regex <code>vowelRegex</code> should use a character class.');"
        },
        {
          "text":
            "Your regex <code>vowelRegex</code> should use the global flag.",
          "testString":
            "assert(vowelRegex.flags.match(/g/).length == 1, 'Your regex <code>vowelRegex</code> should use the global flag.');"
        },
        {
          "text":
            "Your regex <code>vowelRegex</code> should use the case insensitive flag.",
          "testString":
            "assert(vowelRegex.flags.match(/i/).length == 1, 'Your regex <code>vowelRegex</code> should use the case insensitive flag.');"
        },
        {
          "text": "Your regex should not match any consonants.",
          "testString":
            "assert(!/[b-df-hj-np-tv-z]/gi.test(result.join()), 'Your regex should not match any consonants.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"Beware of bugs in the above code; I have only proved it correct, not tried it.\";\nlet vowelRegex = /change/; // Change this line\nlet result = vowelRegex; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Single Character with Multiple Possibilities",
      "dashedName": "match-single-character-with-multiple-possibilities"
    },
    {
      "id": "587d7db5367417b2b2512b96",
      "description": [
        "You saw how you can use <code>character sets</code> to specify a group of characters to match, but that's a lot of typing when you need to match a large range of characters (for example, every letter in the alphabet). Fortunately, there is a built-in feature that makes this short and simple.",
        "Inside a <code>character set</code>, you can define a range of characters to match using a <code>hyphen</code> character: <code>-</code>.",
        "For example, to match lowercase letters <code>a</code> through <code>e</code> you would use <code>[a-e]</code>.",
        "<blockquote>let catStr = \"cat\";<br>let batStr = \"bat\";<br>let matStr = \"mat\";<br>let bgRegex = /[a-e]at/;<br>catStr.match(bgRegex); // Returns [\"cat\"]<br>batStr.match(bgRegex); // Returns [\"bat\"]<br>matStr.match(bgRegex); // Returns null</blockquote>",
        "<hr>",
        "Match all the letters in the string <code>quoteSample</code>.",
        "<strong>Note</strong><br>Be sure to match both upper- and lowercase <strong>letters<strong>."
      ],
      "tests": [
        {
          "text":
            "Your regex <code>alphabetRegex</code> should match 35 items.",
          "testString":
            "assert(result.length == 35, 'Your regex <code>alphabetRegex</code> should match 35 items.');"
        },
        {
          "text":
            "Your regex <code>alphabetRegex</code> should use the global flag.",
          "testString":
            "assert(alphabetRegex.flags.match(/g/).length == 1, 'Your regex <code>alphabetRegex</code> should use the global flag.');"
        },
        {
          "text":
            "Your regex <code>alphabetRegex</code> should use the case insensitive flag.",
          "testString":
            "assert(alphabetRegex.flags.match(/i/).length == 1, 'Your regex <code>alphabetRegex</code> should use the case insensitive flag.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /change/; // Change this line\nlet result = alphabetRegex; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Letters of the Alphabet",
      "dashedName": "match-letters-of-the-alphabet"
    },
    {
      "id": "587d7db5367417b2b2512b97",
      "description": [
        "Using the hyphen (<code>-</code>) to match a range of characters is not limited to letters. It also works to match a range of numbers.",
        "For example, <code>/[0-5]/</code> matches any number between <code>0</code> and <code>5</code>, including the <code>0</code> and <code>5</code>.",
        "Also, it is possible to combine a range of letters and numbers in a single character set.",
        "<blockquote>let jennyStr = \"Jenny8675309\";<br>let myRegex = /[a-z0-9]/ig;<br>// matches all letters and numbers in jennyStr<br>jennyStr.match(myRegex);</blockquote>",
        "<hr>",
        "Create a single regex that matches a range of letters between <code>h</code> and <code>s</code>, and a range of numbers between <code>2</code> and <code>6</code>. Remember to include the appropriate flags in the regex."
      ],
      "tests": [
        {
          "text": "Your regex <code>myRegex</code> should match 17 items.",
          "testString":
            "assert(result.length == 17, 'Your regex <code>myRegex</code> should match 17 items.');"
        },
        {
          "text": "Your regex <code>myRegex</code> should use the global flag.",
          "testString":
            "assert(myRegex.flags.match(/g/).length == 1, 'Your regex <code>myRegex</code> should use the global flag.');"
        },
        {
          "text":
            "Your regex <code>myRegex</code> should use the case insensitive flag.",
          "testString":
            "assert(myRegex.flags.match(/i/).length == 1, 'Your regex <code>myRegex</code> should use the case insensitive flag.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"Blueberry 3.141592653s are delicious.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Numbers and Letters of the Alphabet",
      "dashedName": "match-numbers-and-letters-of-the-alphabet"
    },
    {
      "id": "587d7db6367417b2b2512b98",
      "description": [
        "So far, you have created a set of characters that you want to match, but you could also create a set of characters that you do not want to match. These types of character sets are called <code>negated character sets</code>.",
        "To create a <code>negated character set</code>, you place a <code>caret</code> character (<code>^</code>) after the opening bracket and before the characters you do not want to match.",
        "For example, <code>/[^aeiou]/gi</code> matches all characters that are not a vowel. Note that characters like <code>.</code>, <code>!</code>, <code>[</code>, <code>@</code>, <code>/</code> and white space are matched - the negated vowel character set only excludes the vowel characters.",
        "<hr>",
        "Create a single regex that matches all characters that are not a number or a vowel. Remember to include the appropriate flags in the regex."
      ],
      "tests": [
        {
          "text": "Your regex <code>myRegex</code> should match 9 items.",
          "testString":
            "assert(result.length == 9, 'Your regex <code>myRegex</code> should match 9 items.');"
        },
        {
          "text": "Your regex <code>myRegex</code> should use the global flag.",
          "testString":
            "assert(myRegex.flags.match(/g/).length == 1, 'Your regex <code>myRegex</code> should use the global flag.');"
        },
        {
          "text":
            "Your regex <code>myRegex</code> should use the case insensitive flag.",
          "testString":
            "assert(myRegex.flags.match(/i/).length == 1, 'Your regex <code>myRegex</code> should use the case insensitive flag.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"3 blind mice.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Single Characters Not Specified",
      "dashedName": "match-single-characters-not-specified"
    },
    {
      "id": "587d7db6367417b2b2512b99",
      "description": [
        "Sometimes, you need to match a character (or group of characters) that appears one or more times in a row. This means it occurs at least once, and may be repeated.",
        "You can use the <code>+</code> character to check if that is the case. Remember, the character or pattern has to be present consecutively. That is, the character has to repeat one after the other.",
        "For example, <code>/a+/g</code> would find one match in <code>\"abc\"</code> and return <code>[\"a\"]</code>. Because of the <code>+</code>, it would also find a single match in <code>\"aabc\"</code> and return <code>[\"aa\"]</code>.",
        "If it were instead checking the string <code>\"abab\"</code>, it would find two matches and return <code>[\"a\", \"a\"]</code> because the <code>a</code> characters are not in a row - there is a <code>b</code> between them. Finally, since there is no <code>\"a\"</code> in the string <code>\"bcd\"</code>, it wouldn't find a match.",
        "<hr>",
        "You want to find matches when the letter <code>s</code> occurs one or more times in <code>\"Mississippi\"</code>. Write a regex that uses the <code>+</code> sign."
      ],
      "tests": [
        {
          "text":
            "Your regex <code>myRegex</code> should use the <code>+</code> sign to match one or more <code>s</code> characters.",
          "testString":
            "assert(/\\+/.test(myRegex.source), 'Your regex <code>myRegex</code> should use the <code>+</code> sign to match one or more <code>s</code> characters.');"
        },
        {
          "text": "Your regex <code>myRegex</code> should match 2 items.",
          "testString":
            "assert(result.length == 2, 'Your regex <code>myRegex</code> should match 2 items.');"
        },
        {
          "text":
            "The <code>result</code> variable should be an array with two matches of <code>\"ss\"</code>",
          "testString":
            "assert(result[0] == 'ss' && result[1] == 'ss', 'The <code>result</code> variable should be an array with two matches of <code>\"ss\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let difficultSpelling = \"Mississippi\";\nlet myRegex = /change/; // Change this line\nlet result = difficultSpelling.match(myRegex);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Characters that Occur One or More Times",
      "dashedName": "match-characters-that-occur-one-or-more-times"
    },
    {
      "id": "587d7db6367417b2b2512b9a",
      "description": [
        "The last challenge used the plus <code>+</code> sign to look for characters that occur one or more times. There's also an option that matches characters that occur zero or more times.",
        "The character to do this is the <code>asterisk</code> or <code>star</code>: <code>*</code>.",
        "<blockquote>let soccerWord = \"gooooooooal!\";<br>let gPhrase = \"gut feeling\";<br>let oPhrase = \"over the moon\";<br>let goRegex = /go*/;<br>soccerWord.match(goRegex); // Returns [\"goooooooo\"]<br>gPhrase.match(goRegex); // Returns [\"g\"]<br>oPhrase.match(goRegex); // Returns null</blockquote>",
        "<hr>",
        "Create a regex <code>chewieRegex</code> that uses the <code>*</code> character to match all the upper and lower<code>\"a\"</code> characters in <code>chewieQuote</code>. Your regex does not need flags, and it should not match any of the other quotes."
      ],
      "tests": [
        {
          "text":
            "Your regex <code>chewieRegex</code> should use the <code>*</code> character to match zero or more <code>a</code> characters.",
          "testString":
            "assert(/\\*/.test(chewieRegex.source), 'Your regex <code>chewieRegex</code> should use the <code>*</code> character to match zero or more <code>a</code> characters.');"
        },
        {
          "text":
            "Your regex <code>chewieRegex</code> should match 16 characters.",
          "testString":
            "assert(result[0].length === 16, 'Your regex <code>chewieRegex</code> should match 16 characters.');"
        },
        {
          "text": "Your regex should match <code>\"Aaaaaaaaaaaaaaaa\"</code>.",
          "testString":
            "assert(result[0] === 'Aaaaaaaaaaaaaaaa', 'Your regex should match <code>\"Aaaaaaaaaaaaaaaa\"</code>.');"
        },
        {
          "text":
            "Your regex should not match any characters in <code>\"He made a fair move. Screaming about it can&#39t help you.\"</code>",
          "testString":
            "assert(!\"He made a fair move. Screaming about it can\\'t help you.\".match(chewieRegex), 'Your regex should not match any characters in <code>\"He made a fair move. Screaming about it can&#39t help you.\"</code>');"
        },
        {
          "text":
            "Your regex should not match any characters in <code>\"Let him have it. It&#39s not wise to upset a Wookiee.\"</code>",
          "testString":
            "assert(!\"Let him have it. It\\'s not wise to upset a Wookiee.\".match(chewieRegex), 'Your regex should not match any characters in <code>\"Let him have it. It&#39s not wise to upset a Wookiee.\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let chewieQuote = \"Aaaaaaaaaaaaaaaarrrgh!\";\nlet chewieRegex = /change/; // Change this line\nlet result = chewieQuote.match(chewieRegex);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Characters that Occur Zero or More Times",
      "dashedName": "match-characters-that-occur-zero-or-more-times"
    },
    {
      "id": "587d7db6367417b2b2512b9b",
      "description": [
        "In regular expressions, a <code>greedy</code> match finds the longest possible part of a string that fits the regex pattern and returns it as a match. The alternative is called a <code>lazy</code> match, which finds the smallest possible part of the string that satisfies the regex pattern.",
        "You can apply the regex <code>/t[a-z]*i/</code> to the string <code>\"titanic\"</code>. This regex is basically a pattern that starts with <code>t</code>, ends with <code>i</code>, and has some letters in between.",
        "Regular expressions are by default <code>greedy</code>, so the match would return <code>[\"titani\"]</code>. It finds the largest sub-string possible to fit the pattern.",
        "However, you can use the <code>?</code> character to change it to <code>lazy</code> matching. <code>\"titanic\"</code> matched against the adjusted regex of <code>/t[a-z]*?i/</code> returns <code>[\"ti\"]</code>.",
        "<hr>",
        "Fix the regex <code>/&lt;.*&gt;/</code> to return the HTML tag <code>&lt;h1&gt;</code> and not the text <code>\"&lt;h1&gt;Winter is coming&lt;/h1&gt;\"</code>. Remember the wildcard <code>.</code> in a regular expression matches any character."
      ],
      "tests": [
        {
          "text":
            "The <code>result</code> variable should be an array with <code>&lt;h1&gt;</code> in it",
          "testString":
            "assert(result[0] == '<h1>', 'The <code>result</code> variable should be an array with <code>&lt;h1&gt;</code> in it');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*>/; // Change this line\nlet result = text.match(myRegex);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Find Characters with Lazy Matching",
      "dashedName": "find-characters-with-lazy-matching"
    },
    {
      "id": "587d7db7367417b2b2512b9c",
      "description": [
        "Time to pause and test your new regex writing skills. A group of criminals escaped from jail and ran away, but you don't know how many. However, you do know that they stay close together when they are around other people. You are responsible for finding all of the criminals at once.",
        "Here's an example to review how to do this:",
        "The regex <code>/z+/</code> matches the letter <code>z</code> when it appears one or more times in a row. It would find matches in all of the following strings:",
        "<blockquote>\"z\"<br>\"zzzzzz\"<br>\"ABCzzzz\"<br>\"zzzzABC\"<br>\"abczzzzzzzzzzzzzzzzzzzzzabc\"</blockquote>",
        "But it does not find matches in the following strings since there are no letter <code>z</code> characters:",
        "<blockquote>\"\"<br>\"ABC\"<br>\"abcabc\"</blockquote>",
        "<hr>",
        "Write a <code>greedy</code> regex that finds one or more criminals within a group of other people. A criminal is represented by the capital letter <code>C</code>."
      ],
      "tests": [
        {
          "text":
            "Your regex should match <em>one</em> criminal (\"<code>C</code>\") in <code>\"C\"</code>",
          "testString":
            "assert('C'.match(reCriminals) && 'C'.match(reCriminals)[0] == 'C', 'Your regex should match <em>one</em> criminal (\"<code>C</code>\") in <code>\"C\"</code>');"
        },
        {
          "text":
            "Your regex should match <em>two</em> criminals (\"<code>CC</code>\") in <code>\"CC\"</code>",
          "testString":
            "assert('CC'.match(reCriminals) && 'CC'.match(reCriminals)[0] == 'CC', 'Your regex should match <em>two</em> criminals (\"<code>CC</code>\") in <code>\"CC\"</code>');"
        },
        {
          "text":
            "Your regex should match <em>three</em> criminals (\"<code>CCC</code>\") in <code>\"P1P5P4CCCP2P6P3\"</code>",
          "testString":
            "assert('P1P5P4CCCP2P6P3'.match(reCriminals) && 'P1P5P4CCCP2P6P3'.match(reCriminals)[0] == 'CCC', 'Your regex should match <em>three</em> criminals (\"<code>CCC</code>\") in <code>\"P1P5P4CCCP2P6P3\"</code>');"
        },
        {
          "text":
            "Your regex should match <em>five</em> criminals (\"<code>CCCCC</code>\") in <code>\"P6P2P7P4P5CCCCCP3P1\"</code>",
          "testString":
            "assert('P6P2P7P4P5CCCCCP3P1'.match(reCriminals) && 'P6P2P7P4P5CCCCCP3P1'.match(reCriminals)[0] == 'CCCCC', 'Your regex should match <em>five</em> criminals (\"<code>CCCCC</code>\") in <code>\"P6P2P7P4P5CCCCCP3P1\"</code>');"
        },
        {
          "text":
            "Your regex should not match any criminals in <code>\"\"</code>",
          "testString":
            "assert(!reCriminals.test(''), 'Your regex should not match any criminals in <code>\"\"</code>');"
        },
        {
          "text":
            "Your regex should not match any criminals in <code>\"P1P2P3\"</code>",
          "testString":
            "assert(!reCriminals.test('P1P2P3'), 'Your regex should not match any criminals in <code>\"P1P2P3\"</code>');"
        },
        {
          "text":
            "Your regex should match <em>fifty</em> criminals (\"<code>CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</code>\") in <code>\"P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3\"</code>.",
          "testString":
            "assert('P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3'.match(reCriminals) && 'P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3'.match(reCriminals)[0] == \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\", 'Your regex should match <em>fifty</em> criminals (\"<code>CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</code>\") in <code>\"P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// example crowd gathering\nlet crowd = 'P1P2P3P4P5P6CCCP7P8P9';\n\nlet reCriminals = /./; // Change this line\n\nlet matchedCriminals = crowd.match(reCriminals);\nconsole.log(matchedCriminals);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Find One or More Criminals in a Hunt",
      "dashedName": "find-one-or-more-criminals-in-a-hunt"
    },
    {
      "id": "587d7db7367417b2b2512b9d",
      "description": [
        "Prior challenges showed that regular expressions can be used to look for a number of matches. They are also used to search for patterns in specific positions in strings.",
        "In an earlier challenge, you used the <code>caret</code> character (<code>^</code>) inside a <code>character set</code> to create a <code>negated character set</code> in the form <code>[^thingsThatWillNotBeMatched]</code>. Outside of a <code>character set</code>, the <code>caret</code> is used to search for patterns at the beginning of strings.",
        "<blockquote>let firstString = \"Ricky is first and can be found.\";<br>let firstRegex = /^Ricky/;<br>firstRegex.test(firstString);<br>// Returns true<br>let notFirst = \"You can't find Ricky now.\";<br>firstRegex.test(notFirst);<br>// Returns false</blockquote>",
        "<hr>",
        "Use the <code>caret</code> character in a regex to find <code>\"Cal\"</code> only in the beginning of the string <code>rickyAndCal</code>."
      ],
      "tests": [
        {
          "text":
            "Your regex should search for <code>\"Cal\"</code> with a capital letter.",
          "testString":
            "assert(calRegex.source == \"^Cal\", 'Your regex should search for <code>\"Cal\"</code> with a capital letter.');"
        },
        {
          "text": "Your regex should not use any flags.",
          "testString":
            "assert(calRegex.flags == \"\", 'Your regex should not use any flags.');"
        },
        {
          "text":
            "Your regex should match <code>\"Cal\"</code> at the beginning of the string.",
          "testString":
            "assert(calRegex.test(\"Cal and Ricky both like racing.\"), 'Your regex should match <code>\"Cal\"</code> at the beginning of the string.');"
        },
        {
          "text":
            "Your regex should not match <code>\"Cal\"</code> in the middle of a string.",
          "testString":
            "assert(!calRegex.test(\"Ricky and Cal both like racing.\"), 'Your regex should not match <code>\"Cal\"</code> in the middle of a string.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let rickyAndCal = \"Cal and Ricky both like racing.\";\nlet calRegex = /change/; // Change this line\nlet result = calRegex.test(rickyAndCal);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Beginning String Patterns",
      "dashedName": "match-beginning-string-patterns"
    },
    {
      "id": "587d7db7367417b2b2512b9e",
      "description": [
        "In the last challenge, you learned to use the <code>caret</code> character to search for patterns at the beginning of strings. There is also a way to search for patterns at the end of strings.",
        "You can search the end of strings using the <code>dollar sign</code> character <code>$</code> at the end of the regex.",
        "<blockquote>let theEnding = \"This is a never ending story\";<br>let storyRegex = /story$/;<br>storyRegex.test(theEnding);<br>// Returns true<br>let noEnding = \"Sometimes a story will have to end\";<br>storyRegex.test(noEnding);<br>// Returns false<br></blockquote>",
        "<hr>",
        "Use the anchor character (<code>$</code>) to match the string <code>\"caboose\"</code> at the end of the string <code>caboose</code>."
      ],
      "tests": [
        {
          "text":
            "You should search for <code>\"caboose\"</code> with the dollar sign <code>$</code> anchor in your regex.",
          "testString":
            "assert(lastRegex.source == \"caboose$\", 'You should search for <code>\"caboose\"</code> with the dollar sign <code>$</code> anchor in your regex.');"
        },
        {
          "text": "Your regex should not use any flags.",
          "testString":
            "assert(lastRegex.flags == \"\", 'Your regex should not use any flags.');"
        },
        {
          "text":
            "You should match <code>\"caboose\"</code> at the end of the string <code>\"The last car on a train is the caboose\"</code>",
          "testString":
            "assert(lastRegex.test(\"The last car on a train is the caboose\"), 'You should match <code>\"caboose\"</code> at the end of the string <code>\"The last car on a train is the caboose\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let caboose = \"The last car on a train is the caboose\";\nlet lastRegex = /change/; // Change this line\nlet result = lastRegex.test(caboose);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Ending String Patterns",
      "dashedName": "match-ending-string-patterns"
    },
    {
      "id": "587d7db7367417b2b2512b9f",
      "description": [
        "Using character classes, you were able to search for all letters of the alphabet with <code>[a-z]</code>. This kind of character class is common enough that there is a shortcut for it, although it includes a few extra characters as well.",
        "The closest character class in JavaScript to match the alphabet is <code>\\w</code>. This shortcut is equal to <code>[A-Za-z0-9_]</code>. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (<code>_</code>).",
        "<blockquote>let longHand = /[A-Za-z0-9_]+/;<br>let shortHand = /\\w+/;<br>let numbers = \"42\";<br>let varNames = \"important_var\";<br>longHand.test(numbers); // Returns true<br>shortHand.test(numbers); // Returns true<br>longHand.test(varNames); // Returns true<br>shortHand.test(varNames); // Returns true</blockquote>",
        "These shortcut character classes are also known as <code>shorthand character classes</code>.",
        "<hr>",
        "Use the shorthand character class <code>\\w</code> to count the number of alphanumeric characters in various quotes and strings."
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(alphabetRegexV2.global, 'Your regex should use the global flag.');"
        },
        {
          "text":
            "Your regex should find 31 alphanumeric characters in <code>\"The five boxing wizards jump quickly.\"</code>",
          "testString":
            "assert(\"The five boxing wizards jump quickly.\".match(alphabetRegexV2).length === 31, 'Your regex should find 31 alphanumeric characters in <code>\"The five boxing wizards jump quickly.\"</code>');"
        },
        {
          "text":
            "Your regex should find 32 alphanumeric characters in <code>\"Pack my box with five dozen liquor jugs.\"</code>",
          "testString":
            "assert(\"Pack my box with five dozen liquor jugs.\".match(alphabetRegexV2).length === 32, 'Your regex should find 32 alphanumeric characters in <code>\"Pack my box with five dozen liquor jugs.\"</code>');"
        },
        {
          "text":
            "Your regex should find 30 alphanumeric characters in <code>\"How vexingly quick daft zebras jump!\"</code>",
          "testString":
            "assert(\"How vexingly quick daft zebras jump!\".match(alphabetRegexV2).length === 30, 'Your regex should find 30 alphanumeric characters in <code>\"How vexingly quick daft zebras jump!\"</code>');"
        },
        {
          "text":
            "Your regex should find 36 alphanumeric characters in <code>\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\"</code>",
          "testString":
            "assert(\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\".match(alphabetRegexV2).length === 36, 'Your regex should find 36 alphanumeric characters in <code>\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /change/; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match All Letters and Numbers",
      "dashedName": "match-all-letters-and-numbers"
    },
    {
      "id": "587d7db8367417b2b2512ba0",
      "description": [
        "You've learned that you can use a shortcut to match alphanumerics <code>[A-Za-z0-9_]</code> using <code>\\w</code>. A natural pattern you might want to search for is the opposite of alphanumerics.",
        "You can search for the opposite of the <code>\\w</code> with <code>\\W</code>. Note, the opposite pattern uses a capital letter. This shortcut is the same as <code>[^A-Za-z0-9_]</code>.",
        "<blockquote>let shortHand = /\\W/;<br>let numbers = \"42%\";<br>let sentence = \"Coding!\";<br>numbers.match(shortHand); // Returns [\"%\"]<br>sentence.match(shortHand); // Returns [\"!\"]<br></blockquote>",
        "<hr>",
        "Use the shorthand character class <code>\\W</code> to count the number of non-alphanumeric characters in various quotes and strings."
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(nonAlphabetRegex.global, 'Your regex should use the global flag.');"
        },
        {
          "text":
            "Your regex should find 6 non-alphanumeric characters in <code>\"The five boxing wizards jump quickly.\"</code>.",
          "testString":
            "assert(\"The five boxing wizards jump quickly.\".match(nonAlphabetRegex).length == 6, 'Your regex should find 6 non-alphanumeric characters in <code>\"The five boxing wizards jump quickly.\"</code>.');"
        },
        {
          "text":
            "Your regex should find 8 non-alphanumeric characters in <code>\"Pack my box with five dozen liquor jugs.\"</code>",
          "testString":
            "assert(\"Pack my box with five dozen liquor jugs.\".match(nonAlphabetRegex).length == 8, 'Your regex should find 8 non-alphanumeric characters in <code>\"Pack my box with five dozen liquor jugs.\"</code>');"
        },
        {
          "text":
            "Your regex should find 6 non-alphanumeric characters in <code>\"How vexingly quick daft zebras jump!\"</code>",
          "testString":
            "assert(\"How vexingly quick daft zebras jump!\".match(nonAlphabetRegex).length == 6, 'Your regex should find 6 non-alphanumeric characters in <code>\"How vexingly quick daft zebras jump!\"</code>');"
        },
        {
          "text":
            "Your regex should find 12 non-alphanumeric characters in <code>\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\"</code>",
          "testString":
            "assert(\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\".match(nonAlphabetRegex).length == 12, 'Your regex should find 12 non-alphanumeric characters in <code>\"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet nonAlphabetRegex = /change/; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Everything But Letters and Numbers",
      "dashedName": "match-everything-but-letters-and-numbers"
    },
    {
      "id": "5d712346c441eddfaeb5bdef",
      "description": [
        "You've learned shortcuts for common string patterns like alphanumerics. Another common pattern is looking for just digits or numbers.",
        "The shortcut to look for digit characters is <code>\\d</code>, with a lowercase <code>d</code>. This is equal to the character class <code>[0-9]</code>, which looks for a single character of any number between zero and nine.",
        "<hr>",
        "Use the shorthand character class <code>\\d</code> to count how many digits are in movie titles. Written out numbers (\"six\" instead of 6) do not count."
      ],
      "tests": [
        {
          "text":
            "Your regex should use the shortcut character to match digit characters",
          "testString":
            "assert(/\\\\d/.test(numRegex.source), 'Your regex should use the shortcut character to match digit characters');"
        },
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(numRegex.global, 'Your regex should use the global flag.');"
        },
        {
          "text": "Your regex should find 1 digit in <code>\"9\"</code>.",
          "testString":
            "assert(\"9\".match(numRegex).length == 1, 'Your regex should find 1 digit in <code>\"9\"</code>.');"
        },
        {
          "text":
            "Your regex should find 2 digits in <code>\"Catch 22\"</code>.",
          "testString":
            "assert(\"Catch 22\".match(numRegex).length == 2, 'Your regex should find 2 digits in <code>\"Catch 22\"</code>.');"
        },
        {
          "text":
            "Your regex should find 3 digits in <code>\"101 Dalmatians\"</code>.",
          "testString":
            "assert(\"101 Dalmatians\".match(numRegex).length == 3, 'Your regex should find 3 digits in <code>\"101 Dalmatians\"</code>.');"
        },
        {
          "text":
            "Your regex should find no digits in <code>\"One, Two, Three\"</code>.",
          "testString":
            "assert(\"One, Two, Three\".match(numRegex) == null, 'Your regex should find no digits in <code>\"One, Two, Three\"</code>.');"
        },
        {
          "text":
            "Your regex should find 2 digits in <code>\"21 Jump Street\"</code>.",
          "testString":
            "assert(\"21 Jump Street\".match(numRegex).length == 2, 'Your regex should find 2 digits in <code>\"21 Jump Street\"</code>.');"
        },
        {
          "text":
            "Your regex should find 4 digits in <code>\"2001: A Space Odyssey\"</code>.",
          "testString":
            "assert(\"2001: A Space Odyssey\".match(numRegex).length == 4, 'Your regex should find 4 digits in <code>\"2001: A Space Odyssey\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let numString = \"Your sandwich will be $5.00\";\nlet numRegex = /change/; // Change this line\nlet result = numString.match(numRegex).length;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match All Numbers",
      "dashedName": "match-all-numbers"
    },
    {
      "id": "587d7db8367417b2b2512ba1",
      "description": [
        "The last challenge showed how to search for digits using the shortcut <code>\\d</code> with a lowercase <code>d</code>. You can also search for non-digits using a similar shortcut that uses an uppercase <code>D</code> instead.",
        "The shortcut to look for non-digit characters is <code>\\D</code>. This is equal to the character class <code>[^0-9]</code>, which looks for a single character that is not a number between zero and nine.",
        "<hr>",
        "Use the shorthand character class for non-digits <code>\\D</code> to count how many non-digits are in movie titles."
      ],
      "tests": [
        {
          "text":
            "Your regex should use the shortcut character to match non-digit characters",
          "testString":
            "assert(/\\\\D/.test(noNumRegex.source), 'Your regex should use the shortcut character to match non-digit characters');"
        },
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(noNumRegex.global, 'Your regex should use the global flag.');"
        },
        {
          "text": "Your regex should find no non-digits in <code>\"9\"</code>.",
          "testString":
            "assert(\"9\".match(noNumRegex) == null, 'Your regex should find no non-digits in <code>\"9\"</code>.');"
        },
        {
          "text":
            "Your regex should find 6 non-digits in <code>\"Catch 22\"</code>.",
          "testString":
            "assert(\"Catch 22\".match(noNumRegex).length == 6, 'Your regex should find 6 non-digits in <code>\"Catch 22\"</code>.');"
        },
        {
          "text":
            "Your regex should find 11 non-digits in <code>\"101 Dalmatians\"</code>.",
          "testString":
            "assert(\"101 Dalmatians\".match(noNumRegex).length == 11, 'Your regex should find 11 non-digits in <code>\"101 Dalmatians\"</code>.');"
        },
        {
          "text":
            "Your regex should find 15 non-digits in <code>\"One, Two, Three\"</code>.",
          "testString":
            "assert(\"One, Two, Three\".match(noNumRegex).length == 15, 'Your regex should find 15 non-digits in <code>\"One, Two, Three\"</code>.');"
        },
        {
          "text":
            "Your regex should find 12 non-digits in <code>\"21 Jump Street\"</code>.",
          "testString":
            "assert(\"21 Jump Street\".match(noNumRegex).length == 12, 'Your regex should find 12 non-digits in <code>\"21 Jump Street\"</code>.');"
        },
        {
          "text":
            "Your regex should find 17 non-digits in <code>\"2001: A Space Odyssey\"</code>.",
          "testString":
            "assert(\"2001: A Space Odyssey\".match(noNumRegex).length == 17, 'Your regex should find 17 non-digits in <code>\"2001: A Space Odyssey\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let numString = \"Your sandwich will be $5.00\";\nlet noNumRegex = /change/; // Change this line\nlet result = numString.match(noNumRegex).length;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match All NonNumbers",
      "dashedName": "match-all-nonnumbers"
    },
    {
      "id": "587d7db8367417b2b2512ba2",
      "description": [
        "Usernames are used everywhere on the internet. They are what give users a unique identity on their favorite sites.",
        "You need to check all the usernames in a database. Here are some simple rules that users have to follow when creating their username.",
        "1) The only numbers in the username have to be at the end. There can be zero or more of them at the end.",
        "2) Username letters can be lowercase and uppercase.",
        "3) Usernames have to be at least two characters long. A two-letter username can only use alphabet letter characters.",
        "<hr>",
        "Change the regex <code>userCheck</code> to fit the constraints listed above."
      ],
      "tests": [
        {
          "text": "Your regex should match <code>JACK</code>",
          "testString":
            "assert(userCheck.test(\"JACK\"), 'Your regex should match <code>JACK</code>');"
        },
        {
          "text": "Your regex should not match <code>J</code>",
          "testString":
            "assert(!userCheck.test(\"J\"), 'Your regex should not match <code>J</code>');"
        },
        {
          "text": "Your regex should match <code>Oceans11</code>",
          "testString":
            "assert(userCheck.test(\"Oceans11\"), 'Your regex should match <code>Oceans11</code>');"
        },
        {
          "text": "Your regex should match <code>RegexGuru</code>",
          "testString":
            "assert(userCheck.test(\"RegexGuru\"), 'Your regex should match <code>RegexGuru</code>');"
        },
        {
          "text": "Your regex should not match <code>007</code>",
          "testString":
            "assert(!userCheck.test(\"007\"), 'Your regex should not match <code>007</code>');"
        },
        {
          "text": "Your regex should not match <code>9</code>",
          "testString":
            "assert(!userCheck.test(\"9\"), 'Your regex should not match <code>9</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let username = \"JackOfAllTrades\";\nlet userCheck = /change/; // Change this line\nlet result = userCheck.test(username);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Restrict Possible Usernames",
      "dashedName": "restrict-possible-usernames"
    },
    {
      "id": "587d7db8367417b2b2512ba3",
      "description": [
        "The challenges so far have covered matching letters of the alphabet and numbers. You can also match the whitespace or spaces between letters.",
        "You can search for whitespace using <code>\\s</code>, which is a lowercase <code>s</code>. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. You can think of it as similar to the character class <code>[ \\r\\t\\f\\n\\v]</code>.",
        "<blockquote>let whiteSpace = \"Whitespace. Whitespace everywhere!\"<br>let spaceRegex = /\\s/g;<br>whiteSpace.match(spaceRegex);<br>// Returns [\" \", \" \"]<br></blockquote>",
        "<hr>",
        "Change the regex <code>countWhiteSpace</code> to look for multiple whitespace characters in a string."
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(countWhiteSpace.global, 'Your regex should use the global flag.');"
        },
        {
          "text":
            "Your regex should find eight spaces in <code>\"Men are from Mars and women are from Venus.\"</code>",
          "testString":
            "assert(\"Men are from Mars and women are from Venus.\".match(countWhiteSpace).length == 8, 'Your regex should find eight spaces in <code>\"Men are from Mars and women are from Venus.\"</code>');"
        },
        {
          "text":
            "Your regex should find three spaces in <code>\"Space: the final frontier.\"</code>",
          "testString":
            "assert(\"Space: the final frontier.\".match(countWhiteSpace).length == 3, 'Your regex should find three spaces in <code>\"Space: the final frontier.\"</code>');"
        },
        {
          "text":
            "Your regex should find no spaces in <code>\"MindYourPersonalSpace\"</code>",
          "testString":
            "assert(\"MindYourPersonalSpace\".match(countWhiteSpace) == null, 'Your regex should find no spaces in <code>\"MindYourPersonalSpace\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let sample = \"Whitespace is important in separating words\";\nlet countWhiteSpace = /change/; // Change this line\nlet result = sample.match(countWhiteSpace);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match Whitespace",
      "dashedName": "match-whitespace"
    },
    {
      "id": "587d7db9367417b2b2512ba4",
      "description": [
        "You learned about searching for whitespace using <code>\\s</code>, with a lowercase <code>s</code>. You can also search for everything except whitespace.",
        "Search for non-whitespace using <code>\\S</code>, which is an uppercase <code>s</code>. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. You can think of it being similar to the character class <code>[^ \\r\\t\\f\\n\\v]</code>.",
        "<blockquote>let whiteSpace = \"Whitespace. Whitespace everywhere!\"<br>let nonSpaceRegex = /\\S/g;<br>whiteSpace.match(nonSpaceRegex).length; // Returns 32</blockquote>",
        "<hr>",
        "Change the regex <code>countNonWhiteSpace</code> to look for multiple non-whitespace characters in a string."
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testString":
            "assert(countNonWhiteSpace.global, 'Your regex should use the global flag.');"
        },
        {
          "text":
            "Your regex should find 35 non-spaces in <code>\"Men are from Mars and women are from Venus.\"</code>",
          "testString":
            "assert(\"Men are from Mars and women are from Venus.\".match(countNonWhiteSpace).length == 35, 'Your regex should find 35 non-spaces in <code>\"Men are from Mars and women are from Venus.\"</code>');"
        },
        {
          "text":
            "Your regex should find 23 non-spaces in <code>\"Space: the final frontier.\"</code>",
          "testString":
            "assert(\"Space: the final frontier.\".match(countNonWhiteSpace).length == 23, 'Your regex should find 23 non-spaces in <code>\"Space: the final frontier.\"</code>');"
        },
        {
          "text":
            "Your regex should find 21 non-spaces in <code>\"MindYourPersonalSpace\"</code>",
          "testString":
            "assert(\"MindYourPersonalSpace\".match(countNonWhiteSpace).length == 21, 'Your regex should find 21 non-spaces in <code>\"MindYourPersonalSpace\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /change/; // Change this line\nlet result = sample.match(countNonWhiteSpace);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Match NonWhitespace Characters",
      "dashedName": "match-nonwhitespace-characters"
    },
    {
      "id": "587d7db9367417b2b2512ba5",
      "description": [
        "Recall that you use the plus sign <code>+</code> to look for one or more characters and the asterisk <code>*</code> to look for zero or more characters. These are convenient but sometimes you want to match a certain range of patterns.",
        "You can specify the lower and upper number of patterns with <code>quantity specifiers</code>. Quantity specifiers are used with curly brackets (<code>{</code> and <code>}</code>). You put two numbers between the curly brackets - for the lower and upper number of patterns.",
        "For example, to match only the letter <code>a</code> appearing between <code>3</code> and <code>5</code> times in the string <code>\"ah\"</code>, your regex would be <code>/a{3,5}h/</code>.",
        "<blockquote>let A4 = \"aaaah\";<br>let A2 = \"aah\";<br>let multipleA = /a{3,5}h/;<br>multipleA.test(A4); // Returns true<br>multipleA.test(A2); // Returns false</blockquote>",
        "<hr>",
        "Change the regex <code>ohRegex</code> to match only <code>3</code> to <code>6</code> letter <code>h</code>'s in the word <code>\"Oh no\"</code>."
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testString":
            "assert(ohRegex.source.match(/{.*?}/).length > 0, 'Your regex should use curly brackets.');"
        },
        {
          "text": "Your regex should not match <code>\"Ohh no\"</code>",
          "testString":
            "assert(!ohRegex.test(\"Ohh no\"), 'Your regex should not match <code>\"Ohh no\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Ohhh no\"</code>",
          "testString":
            "assert(ohRegex.test(\"Ohhh no\"), 'Your regex should match <code>\"Ohhh no\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Ohhhh no\"</code>",
          "testString":
            "assert(ohRegex.test(\"Ohhhh no\"), 'Your regex should match <code>\"Ohhhh no\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Ohhhhh no\"</code>",
          "testString":
            "assert(ohRegex.test(\"Ohhhhh no\"), 'Your regex should match <code>\"Ohhhhh no\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Ohhhhhh no\"</code>",
          "testString":
            "assert(ohRegex.test(\"Ohhhhhh no\"), 'Your regex should match <code>\"Ohhhhhh no\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"Ohhhhhhh no\"</code>",
          "testString":
            "assert(!ohRegex.test(\"Ohhhhhhh no\"), 'Your regex should not match <code>\"Ohhhhhhh no\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let ohStr = \"Ohhh no\";\nlet ohRegex = /change/; // Change this line\nlet result = ohRegex.test(ohStr);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Specify Upper and Lower Number of Matches",
      "dashedName": "specify-upper-and-lower-number-of-matches"
    },
    {
      "id": "587d7db9367417b2b2512ba6",
      "description": [
        "You can specify the lower and upper number of patterns with <code>quantity specifiers</code> using curly brackets. Sometimes you only want to specify the lower number of patterns with no upper limit.",
        "To only specify the lower number of patterns, keep the first number followed by a comma.",
        "For example, to match only the string <code>\"hah\"</code> with the letter <code>a</code> appearing at least <code>3</code> times, your regex would be <code>/ha{3,}h/</code>.",
        "<blockquote>let A4 = \"haaaah\";<br>let A2 = \"haah\";<br>let A100 = \"h\" + \"a\".repeat(100) + \"h\";<br>let multipleA = /ha{3,}h/;<br>multipleA.test(A4); // Returns true<br>multipleA.test(A2); // Returns false<br>multipleA.test(A100); // Returns true</blockquote>",
        "<hr>",
        "Change the regex <code>haRegex</code> to match the word <code>\"Hazzah\"</code> only when it has four or more letter <code>z</code>'s."
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testString":
            "assert(haRegex.source.match(/{.*?}/).length > 0, 'Your regex should use curly brackets.');"
        },
        {
          "text": "Your regex should not match <code>\"Hazzah\"</code>",
          "testString":
            "assert(!haRegex.test(\"Hazzah\"), 'Your regex should not match <code>\"Hazzah\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"Hazzzah\"</code>",
          "testString":
            "assert(!haRegex.test(\"Hazzzah\"), 'Your regex should not match <code>\"Hazzzah\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Hazzzzah\"</code>",
          "testString":
            "assert(haRegex.test(\"Hazzzzah\"), 'Your regex should match <code>\"Hazzzzah\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Hazzzzzah\"</code>",
          "testString":
            "assert(haRegex.test(\"Hazzzzzah\"), 'Your regex should match <code>\"Hazzzzzah\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Hazzzzzzah\"</code>",
          "testString":
            "assert(haRegex.test(\"Hazzzzzzah\"), 'Your regex should match <code>\"Hazzzzzzah\"</code>');"
        },
        {
          "text":
            "Your regex should match <code>\"Hazzah\"</code> with 30 <code>z</code>\\'s in it.",
          "testString":
            "assert(haRegex.test(\"Ha\" + \"z\".repeat(30) + \"ah\"), 'Your regex should match <code>\"Hazzah\"</code> with 30 <code>z</code>\\'s in it.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let haStr = \"Hazzzzah\";\nlet haRegex = /change/; // Change this line\nlet result = haRegex.test(haStr);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Specify Only the Lower Number of Matches",
      "dashedName": "specify-only-the-lower-number-of-matches"
    },
    {
      "id": "587d7db9367417b2b2512ba7",
      "description": [
        "You can specify the lower and upper number of patterns with <code>quantity specifiers</code> using curly brackets. Sometimes you only want a specific number of matches.",
        "To specify a certain number of patterns, just have that one number between the curly brackets.",
        "For example, to match only the word <code>\"hah\"</code> with the letter <code>a</code> <code>3</code> times, your regex would be <code>/ha{3}h/</code>.",
        "<blockquote>let A4 = \"haaaah\";<br>let A3 = \"haaah\";<br>let A100 = \"h\" + \"a\".repeat(100) + \"h\";<br>let multipleHA = /a{3}h/;<br>multipleHA.test(A4); // Returns false<br>multipleHA.test(A3); // Returns true<br>multipleHA.test(A100); // Returns false</blockquote>",
        "<hr>",
        "Change the regex <code>timRegex</code> to match the word <code>\"Timber\"</code> only when it has four letter <code>m</code>'s."
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testString":
            "assert(timRegex.source.match(/{.*?}/).length > 0, 'Your regex should use curly brackets.');"
        },
        {
          "text": "Your regex should not match <code>\"Timber\"</code>",
          "testString":
            "assert(!timRegex.test(\"Timber\"), 'Your regex should not match <code>\"Timber\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"Timmber\"</code>",
          "testString":
            "assert(!timRegex.test(\"Timmber\"), 'Your regex should not match <code>\"Timmber\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"Timmmber\"</code>",
          "testString":
            "assert(!timRegex.test(\"Timmmber\"), 'Your regex should not match <code>\"Timmmber\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"Timmmmber\"</code>",
          "testString":
            "assert(timRegex.test(\"Timmmmber\"), 'Your regex should match <code>\"Timmmmber\"</code>');"
        },
        {
          "text":
            "Your regex should not match <code>\"Timber\"</code> with 30 <code>m</code>\\'s in it.",
          "testString":
            "assert(!timRegex.test(\"Ti\" + \"m\".repeat(30) + \"ber\"), 'Your regex should not match <code>\"Timber\"</code> with 30 <code>m</code>\\'s in it.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let timStr = \"Timmmmber\";\nlet timRegex = /change/; // Change this line\nlet result = timRegex.test(timStr);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Specify Exact Number of Matches",
      "dashedName": "specify-exact-number-of-matches"
    },
    {
      "id": "587d7dba367417b2b2512ba8",
      "description": [
        "Sometimes the patterns you want to search for may have parts of it that may or may not exist. However, it may be important to check for them nonetheless.",
        "You can specify the possible existence of an element with a question mark, <code>?</code>. This checks for zero or one of the preceding element. You can think of this symbol as saying the previous element is optional.",
        "For example, there are slight differences in American and British English and you can use the question mark to match both spellings.",
        "<blockquote>let american = \"color\";<br>let british = \"colour\";<br>let rainbowRegex= /colou?r/;<br>rainbowRegex.test(american); // Returns true<br>rainbowRegex.test(british); // Returns true</blockquote>",
        "<hr>",
        "Change the regex <code>favRegex</code> to match both the American English (favorite) and the British English (favourite) version of the word."
      ],
      "tests": [
        {
          "text": "Your regex should use the optional symbol, <code>?</code>.",
          "testString":
            "assert(favRegex.source.match(/\\?/).length > 0, 'Your regex should use the optional symbol, <code>?</code>.');"
        },
        {
          "text": "Your regex should match <code>\"favorite\"</code>",
          "testString":
            "assert(favRegex.test(\"favorite\"), 'Your regex should match <code>\"favorite\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"favourite\"</code>",
          "testString":
            "assert(favRegex.test(\"favourite\"), 'Your regex should match <code>\"favourite\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"fav\"</code>",
          "testString":
            "assert(!favRegex.test(\"fav\"), 'Your regex should not match <code>\"fav\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let favWord = \"favorite\";\nlet favRegex = /change/; // Change this line\nlet result = favRegex.test(favWord);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Check for All or None",
      "dashedName": "check-for-all-or-none"
    },
    {
      "id": "587d7dba367417b2b2512ba9",
      "description": [
        "<code>Lookaheads</code> are patterns that tell JavaScript to look-ahead in your string to check for patterns further along. This can be useful when you want to search for multiple patterns over the same string.",
        "There are two kinds of <code>lookaheads</code>: <code>positive lookahead</code> and <code>negative lookahead</code>.",
        "A <code>positive lookahead</code> will look to make sure the element in the search pattern is there, but won't actually match it. A positive lookahead is used as <code>(?=...)</code> where the <code>...</code> is the required part that is not matched.",
        "On the other hand, a <code>negative lookahead</code> will look to make sure the element in the search pattern is not there. A negative lookahead is used as <code>(?!...)</code> where the <code>...</code> is the pattern that you do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present.",
        "Lookaheads are a bit confusing but some examples will help.",
        "<blockquote>let quit = \"qu\";<br>let noquit = \"qt\";<br>let quRegex= /q(?=u)/;<br>let qRegex = /q(?!u)/;<br>quit.match(quRegex); // Returns [\"q\"]<br>noquit.match(qRegex); // Returns [\"q\"]</blockquote>",
        "A more practical use of <code>lookaheads</code> is to check two or more patterns in one string. Here is a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:",
        "<blockquote>let password = \"abc123\";<br>let checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;<br>checkPass.test(password); // Returns true</blockquote>",
        "<hr>",
        "Use <code>lookaheads</code> in the <code>pwRegex</code> to match passwords that are greater than 5 characters long and have two consecutive digits."
      ],
      "tests": [
        {
          "text": "Your regex should use two positive <code>lookaheads</code>.",
          "testString":
            "assert(pwRegex.source.match(/\\(\\?=.*?\\)\\(\\?=.*?\\)/) !== null, 'Your regex should use two positive <code>lookaheads</code>.');"
        },
        {
          "text": "Your regex should not match <code>\"astronaut\"</code>",
          "testString":
            "assert(!pwRegex.test(\"astronaut\"), 'Your regex should not match <code>\"astronaut\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"airplanes\"</code>",
          "testString":
            "assert(!pwRegex.test(\"airplanes\"), 'Your regex should not match <code>\"airplanes\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"bana12\"</code>",
          "testString":
            "assert(pwRegex.test(\"bana12\"), 'Your regex should match <code>\"bana12\"</code>');"
        },
        {
          "text": "Your regex should match <code>\"abc123\"</code>",
          "testString":
            "assert(pwRegex.test(\"abc123\"), 'Your regex should match <code>\"abc123\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"123\"</code>",
          "testString":
            "assert(!pwRegex.test(\"123\"), 'Your regex should not match <code>\"123\"</code>');"
        },
        {
          "text": "Your regex should not match <code>\"1234\"</code>",
          "testString":
            "assert(!pwRegex.test(\"1234\"), 'Your regex should not match <code>\"1234\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let sampleWord = \"astronaut\";\nlet pwRegex = /change/; // Change this line\nlet result = pwRegex.test(sampleWord);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Positive and Negative Lookahead",
      "dashedName": "positive-and-negative-lookahead"
    },
    {
      "id": "587d7dbb367417b2b2512baa",
      "description": [
        "Some patterns you search for will occur multiple times in a string. It is wasteful to manually repeat that regex. There is a better way to specify when you have multiple repeat substrings in your string.",
        "You can search for repeat substrings using <code>capture groups</code>. Parentheses, <code>(</code> and <code>)</code>, are used to find repeat substrings. You put the regex of the pattern that will repeat in between the parentheses.",
        "To specify where that repeat string will appear, you use a backslash (<code>\\</code>) and then a number. This number starts at 1 and increases with each additional capture group you use. An example would be <code>\\1</code> to match the first group.",
        "The example below matches any word that occurs twice separated by a space:",
        "<blockquote>let repeatStr = \"regex regex\";<br>let repeatRegex = /(\\w+)\\s\\1/;<br>repeatRegex.test(repeatStr); // Returns true<br>repeatStr.match(repeatRegex); // Returns [\"regex regex\", \"regex\"]</blockquote>",
        "Using the <code>.match()</code> method on a string will return an array with the string it matches, along with its capture group.",
        "<hr>",
        "Use <code>capture groups</code> in <code>reRegex</code> to match numbers that are repeated only three times in a string, each separated by a space."
      ],
      "tests": [
        {
          "text":
            "Your regex should use the shorthand character class for digits.",
          "testString":
            "assert(reRegex.source.match(/\\\\d/), 'Your regex should use the shorthand character class for digits.');"
        },
        {
          "text": "Your regex should reuse the capture group twice.",
          "testString":
            "assert(reRegex.source.match(/\\\\\\d/g).length === 2, 'Your regex should reuse the capture group twice.');"
        },
        {
          "text":
            "Your regex should have two spaces separating the three numbers.",
          "testString":
            "assert(reRegex.source.match(/\\\\s/g).length === 2, 'Your regex should have two spaces separating the three numbers.');"
        },
        {
          "text": "Your regex should match <code>\"42 42 42\"</code>.",
          "testString":
            "assert(reRegex.test(\"42 42 42\"), 'Your regex should match <code>\"42 42 42\"</code>.');"
        },
        {
          "text": "Your regex should match <code>\"100 100 100\"</code>.",
          "testString":
            "assert(reRegex.test(\"100 100 100\"), 'Your regex should match <code>\"100 100 100\"</code>.');"
        },
        {
          "text": "Your regex should not match <code>\"42 42 42 42\"</code>.",
          "testString":
            "assert.equal((\"42 42 42 42\").match(reRegex.source), null, 'Your regex should not match <code>\"42 42 42 42\"</code>.');"
        },
        {
          "text": "Your regex should not match <code>\"42 42\"</code>.",
          "testString":
            "assert.equal((\"42 42\").match(reRegex.source), null, 'Your regex should not match <code>\"42 42\"</code>.');"
        },
        {
          "text": "Your regex should not match <code>\"101 102 103\"</code>.",
          "testString":
            "assert(!reRegex.test(\"101 102 103\"), 'Your regex should not match <code>\"101 102 103\"</code>.');"
        },
        {
          "text": "Your regex should not match <code>\"1 2 3\"</code>.",
          "testString":
            "assert(!reRegex.test(\"1 2 3\"), 'Your regex should not match <code>\"1 2 3\"</code>.');"
        },
        {
          "text": "Your regex should match <code>\"10 10 10\"</code>.",
          "testString":
            "assert(reRegex.test(\"10 10 10\"), 'Your regex should match <code>\"10 10 10\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let repeatNum = \"42 42 42\";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Reuse Patterns Using Capture Groups",
      "dashedName": "reuse-patterns-using-capture-groups"
    },
    {
      "id": "587d7dbb367417b2b2512bab",
      "description": [
        "Searching is useful. However, you can make searching even more powerful when it also changes (or replaces) the text you match.",
        "You can search and replace text in a string using <code>.replace()</code> on a string. The inputs for <code>.replace()</code> is first the regex pattern you want to search for. The second parameter is the string to replace the match or a function to do something.",
        "<blockquote>let wrongText = \"The sky is silver.\";<br>let silverRegex = /silver/;<br>wrongText.replace(silverRegex, \"blue\");<br>// Returns \"The sky is blue.\"</blockquote>",
        "You can also access capture groups in the replacement string with dollar signs (<code>$</code>).",
        "<blockquote>\"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1');<br>// Returns \"Camp Code\"</blockquote>",
        "<hr>",
        "Write a regex so that it will search for the string <code>\"good\"</code>. Then update the <code>replaceText</code> variable to replace <code>\"good\"</code> with <code>\"okey-dokey\"</code>."
      ],
      "tests": [
        {
          "text":
            "You should use <code>.replace()</code> to search and replace.",
          "testString":
            "assert(code.match(/\\.replace\\(.*\\)/), 'You should use <code>.replace()</code> to search and replace.');"
        },
        {
          "text":
            "Your regex should change <code>\"This sandwich is good.\"</code> to <code>\"This sandwich is okey-dokey.\"</code>",
          "testString":
            "assert(result == \"This sandwich is okey-dokey.\" && replaceText === \"okey-dokey\", 'Your regex should change <code>\"This sandwich is good.\"</code> to <code>\"This sandwich is okey-dokey.\"</code>');"
        },
        {
          "text": "You should not change the last line.",
          "testString":
            "assert(code.match(/result\\s*=\\s*huhText\\.replace\\(.*?\\)/), 'You should not change the last line.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let huhText = \"This sandwich is good.\";\nlet fixRegex = /change/; // Change this line\nlet replaceText = \"\"; // Change this line\nlet result = huhText.replace(fixRegex, replaceText);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Capture Groups to Search and Replace",
      "dashedName": "use-capture-groups-to-search-and-replace"
    },
    {
      "id": "587d7dbb367417b2b2512bac",
      "description": [
        "Sometimes whitespace characters around strings are not wanted but are there. Typical processing of strings is to remove the whitespace at the start and end of it.",
        "<hr>",
        "Write a regex and use the appropriate string methods to remove whitespace at the beginning and end of strings.",
        "<strong>Note</strong><br>The <code>.trim()</code> method would work here, but you'll need to complete this challenge using regular expressions."
      ],
      "tests": [
        {
          "text":
            "<code>result</code> should equal to <code>\"Hello, World!\"</code>",
          "testString":
            "assert(result == \"Hello, World!\", '<code>result</code> should equal to <code>\"Hello, World!\"</code>');"
        },
        {
          "text": "You should not use the <code>.trim()</code> method.",
          "testString":
            "assert(!code.match(/\\.trim\\(.*?\\)/), 'You should not use the <code>.trim()</code> method.');"
        },
        {
          "text":
            "The <code>result</code> variable should not be set equal to a string.",
          "testString":
            "assert(!code.match(/result\\s*=\\s*\".*?\"/), 'The <code>result</code> variable should not be set equal to a string.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "let hello = \"   Hello, World!  \";\nlet wsRegex = /change/; // Change this line\nlet result = hello; // Change this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Whitespace from Start and End",
      "dashedName": "remove-whitespace-from-start-and-end"
    },
    {
      "id": "bad87fee1348bd9acde08712",
      "description": [
        "In the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App. Now let's go back to it. This time, we'll style it using the popular Bootstrap responsive CSS framework.",
        "Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name <code>Responsive Design</code>.",
        "With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.",
        "You can add Bootstrap to any app by adding the following code to the top of your HTML:",
        "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/&#62;</code>",
        "In this case, we've already added it for you to this page behind the scenes. Note that using either <code>></code> or <code>/></code> to close the <code>link</code> tag is acceptable.",
        "To get started, we should nest all of our HTML (except the <code>link</code> tag and the <code>style</code> element) in a <code>div</code> element with the class <code>container-fluid</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>div</code> element should have the class <code>container-fluid</code>.",
          "testString":
            "assert($(\"div\").hasClass(\"container-fluid\"), 'Your <code>div</code> element should have the class <code>container-fluid</code>.');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        },
        {
          "text":
            "Make sure you have nested all HTML elements after the closing <code>style</code> tag in <code>.container-fluid</code>.",
          "testString":
            "assert($(\".container-fluid\").children().length >= 8, 'Make sure you have nested all HTML elements after the closing <code>style</code> tag in <code>.container-fluid</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>cat nip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Responsive Design with Bootstrap Fluid Containers",
      "dashedName": "use-responsive-design-with-bootstrap-fluid-containers"
    },
    {
      "id": "bad87fee1348bd9acde08812",
      "description": [
        "First, add a new image below the existing one. Set its <code>src</code> attribute to <code>https://bit.ly/fcc-running-cats</code>.",
        "It would be great if this image could be exactly the width of our phone's screen.",
        "Fortunately, with Bootstrap, all we need to do is add the <code>img-responsive</code> class to your image. Do this, and the image should perfectly fit the width of your page."
      ],
      "tests": [
        {
          "text": "You should have a total of two images.",
          "testString":
            "assert($(\"img\").length === 2, 'You should have a total of two images.');"
        },
        {
          "text":
            "Your new image should be below your old one and have the class <code>img-responsive</code>.",
          "testString":
            "assert($(\"img:eq(1)\").hasClass(\"img-responsive\"), 'Your new image should be below your old one and have the class <code>img-responsive</code>.');"
        },
        {
          "text":
            "Your new image should not have the class <code>smaller-image</code>.",
          "testString":
            "assert(!$(\"img:eq(1)\").hasClass(\"smaller-image\"), 'Your new image should not have the class <code>smaller-image</code>.');"
        },
        {
          "text":
            "Your new image should have a <code>src</code> of <code>https&#58;//bit.ly/fcc-running-cats</code>.",
          "testString":
            "assert($(\"img:eq(1)\").attr(\"src\") === \"https://bit.ly/fcc-running-cats\", 'Your new image should have a <code>src</code> of <code>https&#58;//bit.ly/fcc-running-cats</code>.');"
        },
        {
          "text":
            "Make sure your new <code>img</code> element has a closing angle bracket.",
          "testString":
            "assert(code.match(/<img/g) && code.match(/<img[^<]*>/g).length === 2 && code.match(/<img/g).length === 2, 'Make sure your new <code>img</code> element has a closing angle bracket.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Make Images Mobile Responsive",
      "dashedName": "make-images-mobile-responsive"
    },
    {
      "id": "bad87fee1348bd8acde08812",
      "description": [
        "Now that we're using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class <code>text-center</code> to our <code>h2</code> element.",
        "Remember that you can add several classes to the same element by separating each of them with a space, like this:",
        "<code>&#60h2 class=\"red-text text-center\"&#62your text&#60/h2&#62</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>h2</code> element should be centered by applying the class <code>text-center</code>",
          "testString":
            "assert($(\"h2\").hasClass(\"text-center\"), 'Your <code>h2</code> element should be centered by applying the class <code>text-center</code>');"
        },
        {
          "text":
            "Your <code>h2</code> element should still have the class <code>red-text</code>",
          "testString":
            "assert($(\"h2\").hasClass(\"red-text\"), 'Your <code>h2</code> element should still have the class <code>red-text</code>');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Center Text with Bootstrap",
      "dashedName": "center-text-with-bootstrap"
    },
    {
      "id": "bad87fee1348cd8acdf08812",
      "description": [
        "Bootstrap has its own styles for <code>button</code> elements, which look much better than the plain HTML ones.",
        "Create a new <code>button</code> element below your large kitten photo. Give it the <code>btn</code> and <code>btn-default</code> classes, as well as the text of \"Like\"."
      ],
      "tests": [
        {
          "text":
            "Create a new <code>button</code> element with the text \"Like\".",
          "testString":
            "assert(new RegExp(\"like\",\"gi\").test($(\"button\").text()) && ($(\"img.img-responsive + button.btn\").length > 0), 'Create a new <code>button</code> element with the text \"Like\".');"
        },
        {
          "text":
            "Your new button should have two classes: <code>btn</code> and <code>btn-default</code>.",
          "testString":
            "assert($(\"button\").hasClass(\"btn\") && $(\"button\").hasClass(\"btn-default\"), 'Your new button should have two classes: <code>btn</code> and <code>btn-default</code>.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Bootstrap Button",
      "dashedName": "create-a-bootstrap-button"
    },
    {
      "id": "bad87fee1348cd8acef08812",
      "description": [
        "Normally, your <code>button</code> elements with the <code>btn</code> and <code>btn-default</code> classes are only as wide as the text that they contain. For example:",
        "<code>&lt;button class=\"btn btn-default\"&gt;Submit&lt;/button&gt;</code>",
        "This button would only be as wide as the word \"Submit\".",
        "<button class='btn btn-default'>Submit</button>",
        "By making them block elements with the additional class of <code>btn-block</code>, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a \"new line\" below the block.",
        "<code>&lt;button class=\"btn btn-default btn-block\"&gt;Submit&lt;/button&gt;</code>",
        "This button would take up 100% of the available width.",
        "<button class='btn btn-default btn-block'>Submit</button>",
        "Note that these buttons still need the <code>btn</code> class.",
        "Add Bootstrap's <code>btn-block</code> class to your Bootstrap button."
      ],
      "tests": [
        {
          "text":
            "Your button should still have the <code>btn</code> and <code>btn-default</code> classes.",
          "testString":
            "assert($(\"button\").hasClass(\"btn\") && $(\"button\").hasClass(\"btn-default\"), 'Your button should still have the <code>btn</code> and <code>btn-default</code> classes.');"
        },
        {
          "text": "Your button should have the class <code>btn-block</code>.",
          "testString":
            "assert($(\"button\").hasClass(\"btn-block\"), 'Your button should have the class <code>btn-block</code>.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Block Element Bootstrap Button",
      "dashedName": "create-a-block-element-bootstrap-button"
    },
    {
      "id": "bad87fee1348cd8acef08811",
      "description": [
        "The <code>btn-primary</code> class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.",
        "Replace Bootstrap's <code>btn-default</code> class by <code>btn-primary</code> in your button.",
        "Note that this button will still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text": "Your button should have the class <code>btn-primary</code>.",
          "testString":
            "assert($(\"button\").hasClass(\"btn-primary\"), 'Your button should have the class <code>btn-primary</code>.');"
        },
        {
          "text":
            "Your button should still have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString":
            "assert($(\"button\").hasClass(\"btn-block\") && $(\"button\").hasClass(\"btn\"), 'Your button should still have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Taste the Bootstrap Button Color Rainbow",
      "dashedName": "taste-the-bootstrap-button-color-rainbow"
    },
    {
      "id": "bad87fee1348cd8acef08813",
      "description": [
        "Bootstrap comes with several pre-defined colors for buttons. The <code>btn-info</code> class is used to call attention to optional actions that the user can take.",
        "Create a new block-level Bootstrap button below your \"Like\" button with the text \"Info\", and add Bootstrap's <code>btn-info</code> and <code>btn-block</code> classes to it.",
        "Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text":
            "Create a new <code>button</code> element with the text \"Info\".",
          "testString":
            "assert(new RegExp(\"info\",\"gi\").test($(\"button\").text()), 'Create a new <code>button</code> element with the text \"Info\".');"
        },
        {
          "text":
            "Both of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString":
            "assert($(\"button.btn-block.btn\").length > 1, 'Both of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text":
            "Your new button should have the class <code>btn-info</code>.",
          "testString":
            "assert($(\"button\").hasClass(\"btn-info\"), 'Your new button should have the class <code>btn-info</code>.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Call out Optional Actions with btninfo",
      "dashedName": "call-out-optional-actions-with-btninfo"
    },
    {
      "id": "bad87fee1348ce8acef08814",
      "description": [
        "Bootstrap comes with several pre-defined colors for buttons. The <code>btn-danger</code> class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.",
        "Create a button with the text \"Delete\" and give it the class <code>btn-danger</code>.",
        "Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes."
      ],
      "tests": [
        {
          "text":
            "Create a new <code>button</code> element with the text \"Delete\".",
          "testString":
            "assert(new RegExp(\"Delete\",\"gi\").test($(\"button\").text()), 'Create a new <code>button</code> element with the text \"Delete\".');"
        },
        {
          "text":
            "All of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.",
          "testString":
            "assert($(\"button.btn-block.btn\").length > 2, 'All of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.');"
        },
        {
          "text":
            "Your new button should have the class <code>btn-danger</code>.",
          "testString":
            "assert($(\"button\").hasClass(\"btn-danger\"), 'Your new button should have the class <code>btn-danger</code>.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Warn Your Users of a Dangerous Action with btndanger",
      "dashedName": "warn-your-users-of-a-dangerous-action-with-btndanger"
    },
    {
      "id": "bad88fee1348ce8acef08815",
      "description": [
        "Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.",
        "Bootstrap has different column width attributes that it uses depending on how wide the user's screen is. For example, phones have narrow screens, and laptops have wider screens.",
        "Take for example Bootstrap's <code>col-md-*</code> class. Here, <code>md</code> means medium, and <code>*</code> is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.",
        "In the Cat Photo App that we're building, we'll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.",
        "Put the <code>Like</code>, <code>Info</code> and <code>Delete</code> buttons side-by-side by nesting all three of them within one <code>&#60;div class=\"row\"&#62;</code> element, then each of them within a <code>&#60;div class=\"col-xs-4\"&#62;</code> element.",
        "The <code>row</code> class is applied to a <code>div</code>, and the buttons themselves can be nested within it."
      ],
      "tests": [
        {
          "text":
            "Your buttons should all be nested within the same <code>div</code> element with the class <code>row</code>.",
          "testString":
            "assert($(\"div.row:has(button)\").length > 0, 'Your buttons should all be nested within the same <code>div</code> element with the class <code>row</code>.');"
        },
        {
          "text":
            "Each of your Bootstrap buttons should be nested within its own <code>div</code> element with the class <code>col-xs-4</code>.",
          "testString":
            "assert($(\"div.col-xs-4:has(button)\").length > 2, 'Each of your Bootstrap buttons should be nested within its own <code>div</code> element with the class <code>col-xs-4</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>button</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure each of your <code>button</code> elements has a closing tag.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use the Bootstrap Grid to Put Elements Side By Side",
      "dashedName": "use-the-bootstrap-grid-to-put-elements-side-by-side"
    },
    {
      "id": "bad87fee1347bd9aedf08845",
      "description": [
        "We can clean up our code and make our Cat Photo App look more conventional by using Bootstrap's built-in styles instead of the custom styles we created earlier.",
        "Don't worry - there will be plenty of time to customize our CSS later.",
        "Delete the <code>.red-text</code>, <code>p</code>, and <code>.smaller-image</code> CSS declarations from your <code>style</code> element so that the only declarations left in your <code>style</code> element are <code>h2</code> and <code>thick-green-border</code>.",
        "Then delete the <code>p</code> element that contains a dead link. Then remove the <code>red-text</code> class from your <code>h2</code> element and replace it with the <code>text-primary</code> Bootstrap class.",
        "Finally, remove the \"smaller-image\" class from your first <code>img</code> element and replace it with the <code>img-responsive</code> class."
      ],
      "tests": [
        {
          "text":
            "Your h2 element should no longer have the class <code>red-text</code>.",
          "testString":
            "assert(!$(\"h2\").hasClass(\"red-text\"), 'Your h2 element should no longer have the class <code>red-text</code>.');"
        },
        {
          "text":
            "Your h2 element should now have the class <code>text-primary</code>.",
          "testString":
            "assert($(\"h2\").hasClass(\"text-primary\"), 'Your h2 element should now have the class <code>text-primary</code>.');"
        },
        {
          "text":
            "Your paragraph elements should no longer use the font <code>Monospace</code>.",
          "testString":
            "assert(!$(\"p\").css(\"font-family\").match(/monospace/i), 'Your paragraph elements should no longer use the font <code>Monospace</code>.');"
        },
        {
          "text":
            "Remove the <code>smaller-image</code> class from your top image.",
          "testString":
            "assert(!$(\"img\").hasClass(\"smaller-image\"), 'Remove the <code>smaller-image</code> class from your top image.');"
        },
        {
          "text":
            "Add the <code>img-responsive</code> class to your top image.",
          "testString":
            "assert($(\".img-responsive\").length > 1, 'Add the <code>img-responsive</code> class to your top image.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Ditch Custom CSS for Bootstrap",
      "dashedName": "ditch-custom-css-for-bootstrap"
    },
    {
      "id": "bad87fee1348bd9aedf08845",
      "description": [
        "You can use spans to create inline elements. Remember when we used the <code>btn-block</code> class to make the button fill the entire row?",
        "<button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>normal button</button>",
        "<button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>btn-block button</button>",
        "That illustrates the difference between an \"inline\" element and a \"block\" element.",
        "By using the inline <code>span</code> element, you can put several elements on the same line, and even style different parts of the same line differently.",
        "Nest the word \"love\" in your \"Things cats love\" element below within a <code>span</code> element. Then give that <code>span</code> the class <code>text-danger</code> to make the text red.",
        "Here's how you would do this with the \"Top 3 things cats hate\" element:",
        "<code>&#60;p&#62;Top 3 things cats &#60;span class=\"text-danger\"&#62;hate:&#60;/span&#62;&#60;/p&#62;</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>span</code> element should be inside your <code>p</code> element.",
          "testString":
            "assert($(\"p span\") && $(\"p span\").length > 0, 'Your <code>span</code> element should be inside your <code>p</code> element.');"
        },
        {
          "text":
            "Your <code>span</code> element should have just the text <code>love</code>.",
          "testString":
            "assert($(\"p span\") && $(\"p span\").text().match(/love/i) && !$(\"p span\").text().match(/Things cats/i), 'Your <code>span</code> element should have just the text <code>love</code>.');"
        },
        {
          "text":
            "Your <code>span</code> element should have class <code>text-danger</code>.",
          "testString":
            "assert($(\"span\").hasClass(\"text-danger\"), 'Your <code>span</code> element should have class <code>text-danger</code>.');"
        },
        {
          "text": "Make sure your <code>span</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/span>/g) && code.match(/<span/g) && code.match(/<\\/span>/g).length === code.match(/<span/g).length, 'Make sure your <code>span</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a span to Target Inline Elements",
      "dashedName": "use-a-span-to-target-inline-elements"
    },
    {
      "id": "bad87fee1348bd9aede08845",
      "description": [
        "We will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row.",
        "Remember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.",
        "Take for example Bootstrap's <code>col-md-*</code> class. Here, <code>md</code> means medium, and <code>*</code> is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.",
        "In the Cat Photo App that we're building, we'll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.",
        "Put the <code>Like</code>, <code>Info</code> and <code>Delete</code> buttons side-by-side by nesting all three of them within one <code>&#60;div class=\"row\"&#62;</code> element, then each of them within a <code>&#60;div class=\"col-xs-4\"&#62;</code> element.",
        "In the Cat Photo App that we're building, we'll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.",
        "Nest your first image and your <code>h2</code> element within a single <code>&#60;div class=\"row\"&#62;</code> element. Nest your <code>h2</code> element within a <code>&#60;div class=\"col-xs-8\"&#62;</code> and your image in a <code>&#60;div class=\"col-xs-4\"&#62;</code> so that they are on the same line.",
        "Notice how the image is now just the right size to fit along the text?"
      ],
      "tests": [
        {
          "text":
            "Your <code>h2</code> element and topmost <code>img</code> element should both be nested together within a <code>div</code> element with the class <code>row</code>.",
          "testString":
            "assert($(\"div.row:has(h2)\").length > 0 && $(\"div.row:has(img)\").length > 0, 'Your <code>h2</code> element and topmost <code>img</code> element should both be nested together within a <code>div</code> element with the class <code>row</code>.');"
        },
        {
          "text":
            "Nest your topmost <code>img</code> element within a <code>div</code> with the class <code>col-xs-4</code>.",
          "testString":
            "assert($(\"div.col-xs-4:has(img)\").length > 0 && $(\"div.col-xs-4:has(div)\").length === 0, 'Nest your topmost <code>img</code> element within a <code>div</code> with the class <code>col-xs-4</code>.');"
        },
        {
          "text":
            "Nest your <code>h2</code> element within a <code>div</code> with the class <code>col-xs-8</code>.",
          "testString":
            "assert($(\"div.col-xs-8:has(h2)\").length > 0 && $(\"div.col-xs-8:has(div)\").length === 0, 'Nest your <code>h2</code> element within a <code>div</code> with the class <code>col-xs-8</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Custom Heading",
      "dashedName": "create-a-custom-heading"
    },
    {
      "id": "bad87fee1348bd9aedd08845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.",
        "You can include Font Awesome in any app by adding the following code to the top of your HTML:",
        "<code>&#60;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\" integrity=\"sha384-XdYbMnZ/QjLh6iI4ogqCTaIjrFk87ip+ekIjefZch0Y+PvJ8CDYtEs1ipDmPorQ+\" crossorigin=\"anonymous\"&#62;</code>",
        "In this case, we've already added it for you to this page behind the scenes.",
        "The <code>i</code> element was originally used to make other elements italic, but is now commonly used for icons. You can add the Font Awesome classes to the <code>i</code> element to turn it into an icon, for example:",
        "<code>&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt;</code>",
        "Note that the <code>span</code> element is also acceptable for use with icons.",
        "Use Font Awesome to add a <code>thumbs-up</code> icon to your like button by giving it an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>; make sure to keep the text \"Like\" next to the icon."
      ],
      "tests": [
        {
          "text":
            "Add an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>.",
          "testString":
            "assert($(\"i\").is(\".fa.fa-thumbs-up\") || $(\"span\").is(\".fa.fa-thumbs-up\"), 'Add an <code>i</code> element with the classes <code>fa</code> and <code>fa-thumbs-up</code>.');"
        },
        {
          "text":
            "Your <code>fa-thumbs-up</code> icon should be located within the Like button.",
          "testString":
            "assert(($(\"i.fa-thumbs-up\").parent().text().match(/Like/gi) && $(\".btn-primary > i\").is(\".fa.fa-thumbs-up\")) || ($(\"span.fa-thumbs-up\").parent().text().match(/Like/gi) && $(\".btn-primary > span\").is(\".fa.fa-thumbs-up\")), 'Your <code>fa-thumbs-up</code> icon should be located within the Like button.');"
        },
        {
          "text":
            "Nest your <code>i</code> element within your <code>button</code> element.",
          "testString":
            "assert($(\"button\").children(\"i\").length > 0 || $(\"button\").children(\"span\").length > 0, 'Nest your <code>i</code> element within your <code>button</code> element.');"
        },
        {
          "text": "Make sure your icon element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/i>|<\\/span>/g), 'Make sure your icon element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Font Awesome Icons to our Buttons",
      "dashedName": "add-font-awesome-icons-to-our-buttons"
    },
    {
      "id": "bad87fee1348bd9aedc08845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the <code>.svg</code> file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.",
        "Use Font Awesome to add an <code>info-circle</code> icon to your info button and a <code>trash</code> icon to your delete button.",
        "Note: The <code>span</code> element is an acceptable alternative to the <code>i</code> element for the directions below."
      ],
      "tests": [
        {
          "text":
            "You should add a <code>&#60;i class=\"fa fa-info-circle\"&#62;&#60;/i&#62;</code> within your info button element.",
          "testString":
            "assert($(\".btn-info > i\").is(\".fa.fa-info-circle\") || $(\".btn-info > span\").is(\".fa.fa-info-circle\"), 'You should add a <code>&#60;i class=\"fa fa-info-circle\"&#62;&#60;/i&#62;</code> within your info button element.');"
        },
        {
          "text":
            "You should add a <code>&#60;i class=\"fa fa-trash\"&#62;&#60;/i&#62;</code> within your delete button element.",
          "testString":
            "assert($(\".btn-danger > i\").is(\".fa.fa-trash\") || $(\".btn-danger > span\").is(\".fa.fa-trash\"), 'You should add a <code>&#60;i class=\"fa fa-trash\"&#62;&#60;/i&#62;</code> within your delete button element.');"
        },
        {
          "text":
            "Make sure each of your <code>i</code> elements has a closing tag and <code>&#60;i class=\"fa fa-thumbs-up\"&#62;&#60;/i&#62;</code> is in your like button element.",
          "testString":
            "assert(code.match(/<\\/i>|<\\/span/g) && code.match(/<\\/i|<\\/span>/g).length > 2 && ($(\".btn-primary > i\").is(\".fa.fa-thumbs-up\") || $(\".btn-primary > span\").is(\".fa.fa-thumbs-up\")), 'Make sure each of your <code>i</code> elements has a closing tag and <code>&#60;i class=\"fa fa-thumbs-up\"&#62;&#60;/i&#62;</code> is in your like button element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Font Awesome Icons to all of our Buttons",
      "dashedName": "add-font-awesome-icons-to-all-of-our-buttons"
    },
    {
      "id": "bad87fee1348bd9aedb08845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.",
        "Nest both your radio buttons within a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them within a <code>&#60;div class=\"col-xs-6\"&#62;</code> element.",
        "<strong>Note:</strong> As a reminder, radio buttons are <code>input</code> elements of type <code>radio</code>."
      ],
      "tests": [
        {
          "text":
            "Nest all of your radio buttons inside one <code>div</code> with the class <code>row</code>.",
          "testString":
            "assert($(\"div.row:has(input[type=\\\"radio\\\"])\").length > 0, 'Nest all of your radio buttons inside one <code>div</code> with the class <code>row</code>.');"
        },
        {
          "text":
            "Nest each of your radio buttons inside its own <code>div</code> with the class <code>col-xs-6</code>.",
          "testString":
            "assert($(\"div.col-xs-6:has(input[type=\\\"radio\\\"])\").length > 1, 'Nest each of your radio buttons inside its own <code>div</code> with the class <code>col-xs-6</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Responsively Style Radio Buttons",
      "dashedName": "responsively-style-radio-buttons"
    },
    {
      "id": "bad87fee1348bd9aeda08845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.",
        "Nest all three of your checkboxes in a <code>&#60;div class=\"row\"&#62;</code> element. Then nest each of them in a <code>&#60;div class=\"col-xs-4\"&#62;</code> element."
      ],
      "tests": [
        {
          "text":
            "Nest all of your checkboxes inside one <code>div</code> with the class <code>row</code>.",
          "testString":
            "assert($(\"div.row:has(input[type=\\\"checkbox\\\"])\").length > 0, 'Nest all of your checkboxes inside one <code>div</code> with the class <code>row</code>.');"
        },
        {
          "text":
            "Nest each of your checkboxes inside its own <code>div</code> with the class <code>col-xs-4</code>.",
          "testString":
            "assert($(\"div.col-xs-4:has(input[type=\\\"checkbox\\\"])\").length > 2, 'Nest each of your checkboxes inside its own <code>div</code> with the class <code>col-xs-4</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Responsively Style Checkboxes",
      "dashedName": "responsively-style-checkboxes"
    },
    {
      "id": "bad87fee1348bd9aed908845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "You can add the <code>fa-paper-plane</code> Font Awesome icon by adding <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.",
        "Give your form's text input field a class of <code>form-control</code>. Give your form's submit button the classes <code>btn btn-primary</code>. Also give this button the Font Awesome icon of <code>fa-paper-plane</code>.",
        "All textual <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> elements with the class <code>.form-control</code> have a width of 100%."
      ],
      "tests": [
        {
          "text":
            "Give the submit button in your form the classes <code>btn btn-primary</code>.",
          "testString":
            "assert($(\"button[type=\\\"submit\\\"]\").hasClass(\"btn btn-primary\"), 'Give the submit button in your form the classes <code>btn btn-primary</code>.');"
        },
        {
          "text":
            "Add a <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.",
          "testString":
            "assert($(\"button[type=\\\"submit\\\"]:has(i.fa.fa-paper-plane)\").length > 0, 'Add a <code>&#60;i class=\"fa fa-paper-plane\"&#62;&#60;/i&#62;</code> within your submit <code>button</code> element.');"
        },
        {
          "text":
            "Give the text <code>input</code> in your form the class <code>form-control</code>.",
          "testString":
            "assert($(\"input[type=\\\"text\\\"]\").hasClass(\"form-control\"), 'Give the text <code>input</code> in your form the class <code>form-control</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>i</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/i>/g) && code.match(/<\\/i/g).length > 3, 'Make sure each of your <code>i</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Style Text Inputs as Form Controls",
      "dashedName": "style-text-inputs-as-form-controls"
    },
    {
      "id": "bad87fee1348bd9aec908845",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css",
          "raw": true
        }
      ],
      "description": [
        "Now let's get your form <code>input</code> and your submission <code>button</code> on the same line. We'll do this the same way we have previously: by using a <code>div</code> element with the class <code>row</code>, and other <code>div</code> elements within it using the <code>col-xs-*</code> class.",
        "Nest both your form's text <code>input</code> and submit <code>button</code> within a <code>div</code> with the class <code>row</code>. Nest your form's text <code>input</code> within a div with the class of <code>col-xs-7</code>. Nest your form's submit <code>button</code> in a <code>div</code> with the class <code>col-xs-5</code>.",
        "This is the last challenge we'll do for our Cat Photo App for now. We hope you've enjoyed learning Font Awesome, Bootstrap, and responsive design!"
      ],
      "tests": [
        {
          "text":
            "Nest your form submission button and text input in a div with class <code>row</code>.",
          "testString":
            "assert($(\"div.row:has(input[type=\\\"text\\\"])\").length > 0 &&  $(\"div.row:has(button[type=\\\"submit\\\"])\").length > 0, 'Nest your form submission button and text input in a div with class <code>row</code>.');"
        },
        {
          "text":
            "Nest your form text input in a div with the class <code>col-xs-7</code>.",
          "testString":
            "assert($(\"div.col-xs-7:has(input[type=\\\"text\\\"])\").length > 0, 'Nest your form text input in a div with the class <code>col-xs-7</code>.');"
        },
        {
          "text":
            "Nest your form submission button in a div with the class <code>col-xs-5</code>.",
          "testString":
            "assert($(\"div.col-xs-5:has(button[type=\\\"submit\\\"])\").length > 0, 'Nest your form submission button in a div with the class <code>col-xs-5</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://bit.ly/fcc-relaxing-cat\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://bit.ly/fcc-running-cats\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n  </form>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Line up Form Elements Responsively with Bootstrap",
      "dashedName": "line-up-form-elements-responsively-with-bootstrap"
    },
    {
      "id": "bad87fee1348bd9aec908846",
      "description": [
        "Now let's build something from scratch to practice our HTML, CSS and Bootstrap skills.",
        "We'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.",
        "To start with, create an <code>h3</code> element, with the text <code>jQuery Playground</code>.",
        "Color your <code>h3</code> element with the <code>text-primary</code> Bootstrap class, and center it with the <code>text-center</code> Bootstrap class."
      ],
      "tests": [
        {
          "text": "Add a <code>h3</code> element to your page.",
          "testString":
            "assert($(\"h3\") && $(\"h3\").length > 0, 'Add a <code>h3</code> element to your page.');"
        },
        {
          "text": "Make sure your <code>h3</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/h3>/g) && code.match(/<h3/g) && code.match(/<\\/h3>/g).length === code.match(/<h3/g).length, 'Make sure your <code>h3</code> element has a closing tag.');"
        },
        {
          "text":
            "Your <code>h3</code> element should be colored by applying the class <code>text-primary</code>",
          "testString":
            "assert($(\"h3\").hasClass(\"text-primary\"), 'Your <code>h3</code> element should be colored by applying the class <code>text-primary</code>');"
        },
        {
          "text":
            "Your <code>h3</code> element should be centered by applying the class <code>text-center</code>",
          "testString":
            "assert($(\"h3\").hasClass(\"text-center\"), 'Your <code>h3</code> element should be centered by applying the class <code>text-center</code>');"
        },
        {
          "text":
            "Your <code>h3</code> element should have the text <code>jQuery Playground</code>.",
          "testString":
            "assert.isTrue((/jquery(\\s)+playground/gi).test($(\"h3\").text()), 'Your <code>h3</code> element should have the text <code>jQuery Playground</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Bootstrap Headline",
      "dashedName": "create-a-bootstrap-headline"
    },
    {
      "id": "bad87fee1348bd9aec908746",
      "description": [
        "Now let's make sure all the content on your page is mobile-responsive.",
        "Let's nest your <code>h3</code> element within a <code>div</code> element with the class <code>container-fluid</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>div</code> element should have the class <code>container-fluid</code>.",
          "testString":
            "assert($(\"div\").hasClass(\"container-fluid\"), 'Your <code>div</code> element should have the class <code>container-fluid</code>.');"
        },
        {
          "text":
            "Make sure each of your <code>div</code> elements has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure each of your <code>div</code> elements has a closing tag.');"
        },
        {
          "text":
            "Nest your <code>h3</code> element inside a <code>div</code> element.",
          "testString":
            "assert($(\"div\").children(\"h3\").length >0, 'Nest your <code>h3</code> element inside a <code>div</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<h3 class=\"text-primary text-center\">jQuery Playground</h3>\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "House our page within a Bootstrap containerfluid div",
      "dashedName": "house-our-page-within-a-bootstrap-containerfluid-div"
    },
    {
      "id": "bad87fee1348bd9bec908846",
      "description": [
        "Now we'll create a Bootstrap row for our inline elements.",
        "Create a <code>div</code> element below the <code>h3</code> tag, with a class of <code>row</code>."
      ],
      "tests": [
        {
          "text":
            "Add a <code>div</code> element below your <code>h3</code> element.",
          "testString":
            "assert(($(\"div\").length > 1) && ($(\"div.row h3.text-primary\").length == 0) && ($(\"div.row + h3.text-primary\").length == 0) && ($(\"h3.text-primary + div.row\").length > 0), 'Add a <code>div</code> element below your <code>h3</code> element.');"
        },
        {
          "text":
            "Your <code>div</code> element should have the class <code>row</code>",
          "testString":
            "assert($(\"div\").hasClass(\"row\"), 'Your <code>div</code> element should have the class <code>row</code>');"
        },
        {
          "text":
            "Your <code>row div</code> should be nested inside the <code>container-fluid div</code>",
          "testString":
            "assert($(\"div.container-fluid div.row\").length > 0, 'Your <code>row div</code> should be nested inside the <code>container-fluid div</code>');"
        },
        {
          "text": "Make sure your <code>div</code> element has a closing tag.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure your <code>div</code> element has a closing tag.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n\n</div>\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Bootstrap Row",
      "dashedName": "create-a-bootstrap-row"
    },
    {
      "id": "bad87fee1348bd9aec908847",
      "description": [
        "Now that we have a Bootstrap Row, let's split it into two columns to house our elements.",
        "Create two <code>div</code> elements within your row, both with the class <code>col-xs-6</code>."
      ],
      "tests": [
        {
          "text":
            "Nest two <code>div class=\"col-xs-6\"</code> elements within your <code>div class=\"row\"</code> element.",
          "testString":
            "assert($(\"div.row > div.col-xs-6\").length > 1, 'Nest two <code>div class=\"col-xs-6\"</code> elements within your <code>div class=\"row\"</code> element.');"
        },
        {
          "text":
            "Make sure all your <code>div</code> elements have closing tags.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure all your <code>div</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n\n\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Split Your Bootstrap Row",
      "dashedName": "split-your-bootstrap-row"
    },
    {
      "id": "bad87fee1348bd9aec908848",
      "description": [
        "Bootstrap has a class called <code>well</code> that can create a visual sense of depth for your columns.",
        "Nest one <code>div</code> element with the class <code>well</code> within each of your <code>col-xs-6</code> <code>div</code> elements."
      ],
      "tests": [
        {
          "text":
            "Add a <code>div</code> element with the class <code>well</code> inside each of your <code>div</code> elements with the class <code>\"col-xs-6\"</code>",
          "testString":
            "assert($(\"div.col-xs-6\").not(\":has(>div.well)\").length < 1, 'Add a <code>div</code> element with the class <code>well</code> inside each of your <code>div</code> elements with the class <code>\"col-xs-6\"</code>');"
        },
        {
          "text":
            "Nest both of your <code>div</code> elements with the class <code>\"col-xs-6\"</code> within your <code>div</code> element with the class <code>\"row\"</code>.",
          "testString":
            "assert($(\"div.row > div.col-xs-6\").length > 1, 'Nest both of your <code>div</code> elements with the class <code>\"col-xs-6\"</code> within your <code>div</code> element with the class <code>\"row\"</code>.');"
        },
        {
          "text":
            "Make sure all your <code>div</code> elements have closing tags.",
          "testString":
            "assert(code.match(/<\\/div>/g) && code.match(/<div/g) && code.match(/<\\/div>/g).length === code.match(/<div/g).length, 'Make sure all your <code>div</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n    </div>\n    <div class=\"col-xs-6\">\n\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Bootstrap Wells",
      "dashedName": "create-bootstrap-wells"
    },
    {
      "id": "bad87fee1348bd9aec908849",
      "description": [
        "Now we're several <code>div</code> elements deep on each column of our row. This is as deep as we'll need to go. Now we can add our <code>button</code> elements.",
        "Nest three <code>button</code> elements within each of your <code>well</code> <code>div</code> elements."
      ],
      "tests": [
        {
          "text":
            "Nest three <code>button</code> elements within each of your <code>div</code> elements with class <code>well</code>.",
          "testString":
            "assert($(\"div.well:eq(0)\").children(\"button\").length === 3 && $(\"div.well:eq(1)\").children(\"button\").length === 3, 'Nest three <code>button</code> elements within each of your <code>div</code> elements with class <code>well</code>.');"
        },
        {
          "text": "You should have a total of 6 <code>button</code> elements.",
          "testString":
            "assert($(\"button\") && $(\"button\").length > 5, 'You should have a total of 6 <code>button</code> elements.');"
        },
        {
          "text":
            "Make sure all your <code>button</code> elements have closing tags.",
          "testString":
            "assert(code.match(/<\\/button>/g) && code.match(/<button/g) && code.match(/<\\/button>/g).length === code.match(/<button/g).length, 'Make sure all your <code>button</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Elements within Your Bootstrap Wells",
      "dashedName": "add-elements-within-your-bootstrap-wells"
    },
    {
      "id": "bad87fee1348bd9aec908850",
      "description": [
        "Bootstrap has another button class called <code>btn-default</code>.",
        "Apply both the <code>btn</code> and <code>btn-default</code> classes to each of your <code>button</code> elements."
      ],
      "tests": [
        {
          "text":
            "Apply the <code>btn</code> class to each of your <code>button</code> elements.",
          "testString":
            "assert($(\".btn\").length > 5, 'Apply the <code>btn</code> class to each of your <code>button</code> elements.');"
        },
        {
          "text":
            "Apply the <code>btn-default</code> class to each of your <code>button</code> elements.",
          "testString":
            "assert($(\".btn-default\").length > 5, 'Apply the <code>btn-default</code> class to each of your <code>button</code> elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Apply the Default Bootstrap Button Style",
      "dashedName": "apply-the-default-bootstrap-button-style"
    },
    {
      "id": "bad87fee1348bd9aec908852",
      "description": [
        "Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.",
        "Give each of your <code>button</code> elements the class <code>target</code>."
      ],
      "tests": [
        {
          "text":
            "Apply the <code>target</code> class to each of your <code>button</code> elements.",
          "testString":
            "assert($(\".target\").length > 5, 'Apply the <code>target</code> class to each of your <code>button</code> elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Class to Target with jQuery Selectors",
      "dashedName": "create-a-class-to-target-with-jquery-selectors"
    },
    {
      "id": "bad87fee1348bd9aec908853",
      "description": [
        "Recall that in addition to class attributes, you can give each of your elements an <code>id</code> attribute.",
        "Each id must be unique to a specific element and used only once per page.",
        "Let's give a unique id to each of our <code>div</code> elements of class <code>well</code>.",
        "Remember that you can give an element an id like this:",
        "<code>&#60;div class=\"well\" id=\"center-well\"&#62;</code>",
        "Give the well on the left the id of <code>left-well</code>. Give the well on the right the id of <code>right-well</code>."
      ],
      "tests": [
        {
          "text":
            "Give your left <code>well</code> the id of <code>left-well</code>.",
          "testString":
            "assert($(\".col-xs-6\").children(\"#left-well\") && $(\".col-xs-6\").children(\"#left-well\").length > 0, 'Give your left <code>well</code> the id of <code>left-well</code>.');"
        },
        {
          "text":
            "Give your right <code>well</code> the id of <code>right-well</code>.",
          "testString":
            "assert($(\".col-xs-6\").children(\"#right-well\") && $(\".col-xs-6\").children(\"#right-well\").length > 0, 'Give your right <code>well</code> the id of <code>right-well</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add id Attributes to Bootstrap Elements",
      "dashedName": "add-id-attributes-to-bootstrap-elements"
    },
    {
      "id": "bad87fee1348bd9aec908854",
      "description": [
        "For the sake of clarity, let's label both of our wells with their ids.",
        "Above your left-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#left-well</code>.",
        "Above your right-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#right-well</code>."
      ],
      "tests": [
        {
          "text":
            "Add an <code>h4</code> element to each of your <code>&#60;div class=\"col-xs-6\"&#62;</code> elements.",
          "testString":
            "assert($(\".col-xs-6\").children(\"h4\") && $(\".col-xs-6\").children(\"h4\").length > 1, 'Add an <code>h4</code> element to each of your <code>&#60;div class=\"col-xs-6\"&#62;</code> elements.');"
        },
        {
          "text":
            "One <code>h4</code> element should have the text <code>#left-well</code>.",
          "testString":
            "assert(new RegExp(\"#left-well\",\"gi\").test($(\"h4\").text()), 'One <code>h4</code> element should have the text <code>#left-well</code>.');"
        },
        {
          "text":
            "One <code>h4</code> element should have the text <code>#right-well</code>.",
          "testString":
            "assert(new RegExp(\"#right-well\",\"gi\").test($(\"h4\").text()), 'One <code>h4</code> element should have the text <code>#right-well</code>.');"
        },
        {
          "text":
            "Make sure all your <code>h4</code> elements have closing tags.",
          "testString":
            "assert(code.match(/<\\/h4>/g) && code.match(/<h4/g) && code.match(/<\\/h4>/g).length === code.match(/<h4/g).length, 'Make sure all your <code>h4</code> elements have closing tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Label Bootstrap Wells",
      "dashedName": "label-bootstrap-wells"
    },
    {
      "id": "bad87fee1348bd9aec908855",
      "description": [
        "We will also want to be able to use jQuery to target each button by its unique id.",
        "Give each of your buttons a unique id, starting with <code>target1</code> and ending with <code>target6</code>.",
        "Make sure that <code>target1</code> to <code>target3</code> are in <code>#left-well</code>, and <code>target4</code> to <code>target6</code> are in <code>#right-well</code>."
      ],
      "tests": [
        {
          "text":
            "One <code>button</code> element should have the id <code>target1</code>.",
          "testString":
            "assert($(\"#left-well\").children(\"#target1\") && $(\"#left-well\").children(\"#target1\").length > 0, 'One <code>button</code> element should have the id <code>target1</code>.');"
        },
        {
          "text":
            "One <code>button</code> element should have the id <code>target2</code>.",
          "testString":
            "assert($(\"#left-well\").children(\"#target2\") && $(\"#left-well\").children(\"#target2\").length > 0, 'One <code>button</code> element should have the id <code>target2</code>.');"
        },
        {
          "text":
            "One <code>button</code> element should have the id <code>target3</code>.",
          "testString":
            "assert($(\"#left-well\").children(\"#target3\") && $(\"#left-well\").children(\"#target3\").length > 0, 'One <code>button</code> element should have the id <code>target3</code>.');"
        },
        {
          "text":
            "One <code>button</code> element should have the id <code>target4</code>.",
          "testString":
            "assert($(\"#right-well\").children(\"#target4\") && $(\"#right-well\").children(\"#target4\").length > 0, 'One <code>button</code> element should have the id <code>target4</code>.');"
        },
        {
          "text":
            "One <code>button</code> element should have the id <code>target5</code>.",
          "testString":
            "assert($(\"#right-well\").children(\"#target5\") && $(\"#right-well\").children(\"#target5\").length > 0, 'One <code>button</code> element should have the id <code>target5</code>.');"
        },
        {
          "text":
            "One <code>button</code> element should have the id <code>target6</code>.",
          "testString":
            "assert($(\"#right-well\").children(\"#target6\") && $(\"#right-well\").children(\"#target6\").length > 0, 'One <code>button</code> element should have the id <code>target6</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Give Each Element a Unique id",
      "dashedName": "give-each-element-a-unique-id"
    },
    {
      "id": "bad87fee1348bd9aec908856",
      "description": [
        "Just like we labeled our wells, we want to label our buttons.",
        "Give each of your <code>button</code> elements text that corresponds to its <code>id</code>'s selector."
      ],
      "tests": [
        {
          "text":
            "Give your <code>button</code> element with the id <code>target1</code> the text <code>#target1</code>.",
          "testString":
            "assert(new RegExp(\"#target1\",\"gi\").test($(\"#target1\").text()), 'Give your <code>button</code> element with the id <code>target1</code> the text <code>#target1</code>.');"
        },
        {
          "text":
            "Give your <code>button</code> element with the id <code>target2</code> the text <code>#target2</code>.",
          "testString":
            "assert(new RegExp(\"#target2\",\"gi\").test($(\"#target2\").text()), 'Give your <code>button</code> element with the id <code>target2</code> the text <code>#target2</code>.');"
        },
        {
          "text":
            "Give your <code>button</code> element with the id <code>target3</code> the text <code>#target3</code>.",
          "testString":
            "assert(new RegExp(\"#target3\",\"gi\").test($(\"#target3\").text()), 'Give your <code>button</code> element with the id <code>target3</code> the text <code>#target3</code>.');"
        },
        {
          "text":
            "Give your <code>button</code> element with the id <code>target4</code> the text <code>#target4</code>.",
          "testString":
            "assert(new RegExp(\"#target4\",\"gi\").test($(\"#target4\").text()), 'Give your <code>button</code> element with the id <code>target4</code> the text <code>#target4</code>.');"
        },
        {
          "text":
            "Give your <code>button</code> element with the id <code>target5</code> the text <code>#target5</code>.",
          "testString":
            "assert(new RegExp(\"#target5\",\"gi\").test($(\"#target5\").text()), 'Give your <code>button</code> element with the id <code>target5</code> the text <code>#target5</code>.');"
        },
        {
          "text":
            "Give your <code>button</code> element with the id <code>target6</code> the text <code>#target6</code>.",
          "testString":
            "assert(new RegExp(\"#target6\",\"gi\").test($(\"#target6\").text()), 'Give your <code>button</code> element with the id <code>target6</code> the text <code>#target6</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Label Bootstrap Buttons",
      "dashedName": "label-bootstrap-buttons"
    },
    {
      "id": "bad87fee1348bd9aec908857",
      "description": [
        "When we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.",
        "Let's make sure that everyone knows they shouldn't actually modify any of this code directly.",
        "Remember that you can start a comment with <code>&#60;!--</code> and end a comment with <code>--&#62;</code>",
        "Add a comment at the top of your HTML that says <code>Only change code above this line.</code>"
      ],
      "tests": [
        {
          "text":
            "Start a comment with <code>&#60;!--</code> at the top of your HTML.",
          "testString":
            "assert(code.match(/^\\s*<!--/), 'Start a comment with <code>&#60;!--</code> at the top of your HTML.');"
        },
        {
          "text":
            "Your comment should have the text <code>Only change code above this line</code>.",
          "testString":
            "assert(code.match(/<!--(?!(>|->|.*-->.*this line))\\s*.*this line.*\\s*-->/gi), 'Your comment should have the text <code>Only change code above this line</code>.');"
        },
        {
          "text": "Be sure to close your comment with <code>--&#62;</code>.",
          "testString":
            "assert(code.match(/-->.*\\n+.+/g), 'Be sure to close your comment with <code>--&#62;</code>.');"
        },
        {
          "text":
            "You should have the same number of comment openers and closers.",
          "testString":
            "assert(code.match(/<!--/g).length === code.match(/-->/g).length, 'You should have the same number of comment openers and closers.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Comments to Clarify Code",
      "dashedName": "use-comments-to-clarify-code"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/qRZeGZ' target='_blank'>https://codepen.io/freeCodeCamp/full/qRZeGZ</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I can see a wrapper element with a corresponding <code>id=\"quote-box\"</code>.",
        "<strong>User Story #2:</strong> Within <code>#quote-box</code>, I can see an element with a corresponding <code>id=\"text\"</code>.",
        "<strong>User Story #3:</strong> Within <code>#quote-box</code>, I can see an element with a corresponding <code>id=\"author\"</code>.",
        "<strong>User Story #4:</strong> Within <code>#quote-box</code>, I can see a clickable element with a corresponding <code>id=\"new-quote\"</code>.",
        "<strong>User Story #5:</strong> Within <code>#quote-box</code>, I can see a clickable <codea</code> element with a corresponding <code>id=\"tweet-quote\"</code>.",
        "<strong>User Story #6:</strong> On first load, my quote machine displays a random quote in the element with <code>id=\"text\"</code>.",
        "<strong>User Story #7:</strong> On first load, my quote machine displays the random quote's author in the element with <code>id=\"author\"</code>.",
        "<strong>User Story #8:</strong> When the <code>#new-quote</code> button is clicked, my quote machine should fetch a new quote and display it in the <code>#text</code> element.",
        "<strong>User Story #9:</strong> My quote machine should fetch the new quote's author when the <code>#new-quote</code> button is clicked and display it in the <code>#author</code> element.",
        "<strong>User Story #10:</strong> I can tweet the current quote by clicking on the <code>#tweet-quote</code> <code>a</code> element. This <code>a</code> element should include the <code>\"twitter.com/intent/tweet\"</code> path in it's <code>href</code> attribute to tweet the current quote.",
        "<strong>User Story #11:</strong> The <code>#quote-box</code> wrapper element should be horizontally centered. Please run tests with browser's zoom level at 100% and page maximized.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Random Quote Machine",
      "dashedName": "build-a-random-quote-machine"
    },
    {
      "id": "bd7157d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/GrZVVO' target='_blank'>https://codepen.io/freeCodeCamp/full/GrZVVO</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I can see a <code>textarea</code> element with a corresponding <code>id=\"editor\"</code>.",
        "<strong>User Story #2:</strong> I can see an element with a corresponding <code>id=\"preview\"</code>.",
        "<strong>User Story #3:</strong> When I enter text into the <code>#editor</code> element, the <code>#preview</code> element is updated as I type to display the content of the textarea.",
        "<strong>User Story #4:</strong> When I enter GitHub flavored markdown into the <code>#editor</code> element, the text is rendered as HTML in the <code>#preview</code> element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: <a href='https://cdnjs.com/libraries/marked' target='_blank'>https://cdnjs.com/libraries/marked</a>).",
        "<strong>User Story #5:</strong> When my markdown previewer first loads, the default text in the <code>#editor</code> field should contain valid markdown that represents at least one of each of the following elements: a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.",
        "<strong>User Story #6:</strong> When my markdown previewer first loads, the default markdown in the <code>#editor</code> field should be rendered as HTML in the <code>#preview</code> element.",
        "<strong>Optional Bonus (you do not need to make this test pass):</strong> When I click a link rendered by my markdown previewer, the link is opened up in a new tab (HINT: read the Marked.js docs for this one!).",
        "<strong>Optional Bonus (you do not need to make this test pass):</strong> My markdown previewer interprets carriage returns and renders them as <code>br</code> (line break) elements.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Markdown Previewer",
      "dashedName": "build-a-markdown-previewer"
    },
    {
      "id": "587d7dbc367417b2b2512bae",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/MJyNMd' target='_blank'>https://codepen.io/freeCodeCamp/full/MJyNMd</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I should be able to see an outer container with a corresponding <code>id=\"drum-machine\"</code> that contains all other elements.",
        "<strong>User Story #2:</strong> Within <code>#drum-machine</code> I can see an element with a corresponding <code>id=\"display\"</code>.",
        "<strong>User Story #3:</strong> Within <code>#drum-machine</code> I can see 9 clickable drum pad elements, each with a class name of <code>drum-pad</code>, a unique id that describes the audio clip the drum pad will be set up to trigger, and an inner text that corresponds to one of the following keys on the keyboard: Q, W, E, A, S, D, Z, X, C. The drum pads MUST be in this order.",
        "<strong>User Story #4:</strong> Within each <code>.drum-pad</code>, there should be an HTML5 <code>audio</code> element which has a <code>src</code> attribute pointing to an audio clip, a class name of <code>clip</code>, and an id corresponding to the inner text of its parent <code>.drum-pad</code> (e.g. <code>id=\"Q\"</code>, <code>id=\"W\"</code>, <code>id=\"E\"</code> etc.).",
        "<strong>User Story #5:</strong> When I click on a <code>.drum-pad</code> element, the audio clip contained in its child <code>audio</code> element should be triggered.",
        "<strong>User Story #6:</strong> When I press the trigger key associated with each <code>.drum-pad</code>, the audio clip contained in its child <code>audio</code> element should be triggered (e.g. pressing the Q key should trigger the drum pad which contains the string \"Q\", pressing the W key should trigger the drum pad which contains the string \"W\", etc.).",
        "<strong>User Story #7:</strong> When a <code>.drum-pad</code> is triggered, a string describing the associated audio clip is displayed as the inner text of the <code>#display</code> element (each string must be unique).",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Drum Machine",
      "dashedName": "build-a-drum-machine"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd17",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/wgGVVX' target='_blank'>https://codepen.io/freeCodeCamp/full/wgGVVX</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> My calculator should contain a clickable element containing an <code>=</code> (equal sign) with a corresponding <code>id=\"equals\"</code>.",
        "<strong>User Story #2:</strong> My calculator should contain 10 clickable elements containing one number each from 0-9, with the following corresponding IDs: <code>id=\"zero\"</code>, <code>id=\"one\"</code>, <code>id=\"two\"</code>, <code>id=\"three\"</code>, <code>id=\"four\"</code>, <code>id=\"five\"</code>, <code>id=\"six\"</code>, <code>id=\"seven\"</code>, <code>id=\"eight\"</code>, and <code>id=\"nine\"</code>.",
        "<strong>User Story #3:</strong> My calculator should contain 4 clickable elements each containing one of the 4 primary mathematical operators with the following corresponding IDs: <code>id=\"add\"</code>, <code>id=\"subtract\"</code>, <code>id=\"multiply\"</code>, <code>id=\"divide\"</code>.",
        "<strong>User Story #4:</strong> My calculator should contain a clickable element containing a <code>.</code> (decimal point) symbol with a corresponding <code>id=\"decimal\"</code>.",
        "<strong>User Story #5:</strong> My calculator should contain a clickable element with an <code>id=\"clear\"</code>.",
        "<strong>User Story #6:</strong> My calculator should contain an element to display values with a corresponding <code>id=\"display\"</code>.",
        "<strong>User Story #7:</strong> At any time, pressing the clear button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of <code>display</code>.",
        "<strong>User Story #8:</strong> As I input numbers, I should be able to see my input in the element with the id of <code>display</code>.",
        "<strong>User Story #9:</strong> In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, and when I hit <code>=</code>, the correct result should be shown in the element with the id of <code>display</code>.",
        "<strong>User Story #10:</strong> When inputting numbers, my calculator should not allow a number to begin with multiple zeros.",
        "<strong>User Story #11:</strong> When the decimal element is clicked, a <code>.</code> should append to the currently displayed value; two <code>.</code> in one number should not be accepted.",
        "<strong>User Story #12:</strong> I should be able to perform any operation (+, -, *, /) on numbers containing decimal points.",
        "<strong>User Story #13:</strong> If 2 or more operators are entered consecutively, the operation performed should be the last operator entered.",
        "<strong>User Story #14:</strong> Pressing an operator immediately following <code>=</code> should start a new calculation that operates on the result of the previous evaluation.",
        "<strong>User Story #15:</strong> My calculator should have several decimal places of precision when it comes to rounding (note that there is no exact standard, but you should be able to handle calculations like <code>2 / 7</code> with reasonable precision to at least 4 decimal places).",
        "<strong>Note On Calculator Logic:</strong> It should be noted that there are two main schools of thought on calculator input logic: <dfn>immediate execution logic</dfn> and <dfn>formula logic</dfn>. Our example utilizes formula logic and observes order of operation precedence, immediate execution does not. Either is acceptable, but please note that depending on which you choose, your calculator may yield different results than ours for certain equations (see below example). As long as your math can be verified by another production calculator, please do not consider this a bug.",
        "<strong>EXAMPLE:</strong> <code>3 + 5 x 6 - 2 / 4 =</code><br><ul><li><strong>Immediate Execution Logic:</strong> <code>11.5</code></li><li><strong>Formula/Expression Logic:</strong> <code>32.5</code></li></ul>",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": true,
      "name": "Build a JavaScript Calculator",
      "dashedName": "build-a-javascript-calculator"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd0f",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/XpKrrW' target='_blank'>https://codepen.io/freeCodeCamp/full/XpKrrW</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!",
        "<strong>User Story #1:</strong> I can see an element with <code>id=\"break-label\"</code> that contains a string (e.g. \"Break Length\").",
        "<strong>User Story #2:</strong> I can see an element with <code>id=\"session-label\"</code> that contains a string (e.g. \"Session Length\").",
        "<strong>User Story #3:</strong> I can see two clickable elements with corresponding IDs: <code>id=\"break-decrement\"</code> and <code>id=\"session-decrement\"</code>.",
        "<strong>User Story #4:</strong> I can see two clickable elements with corresponding IDs: <code>id=\"break-increment\"</code> and <code>id=\"session-increment\"</code>.",
        "<strong>User Story #5:</strong> I can see an element with a corresponding <code>id=\"break-length\"</code>, which by default (on load) displays a value of 5.",
        "<strong>User Story #6:</strong> I can see an element with a corresponding <code>id=\"session-length\"</code>, which by default displays a value of 25.",
        "<strong>User Story #7:</strong> I can see an element with a corresponding <code>id=\"timer-label\"</code>, that contains a string indicating a session is initialized (e.g. \"Session\").",
        "<strong>User Story #8:</strong> I can see an element with corresponding <code>id=\"time-left\"</code>. NOTE: Paused or running, the value in this field should always be displayed in <code>mm:ss</code> format (i.e. 25:00).",
        "<strong>User Story #9:</strong> I can see a clickable element with a corresponding <code>id=\"start_stop\"</code>.",
        "<strong>User Story #10:</strong> I can see a clickable element with a corresponding <code>id=\"reset\"</code>.",
        "<strong>User Story #11:</strong> When I click the element with the id of <code>reset</code>, any running timer should be stopped, the value within <code>id=\"break-length\"</code> should return to <code>5</code>, the value within <code>id=\"session-length\"</code> should return to 25, and the element with <code>id=\"time-left\"</code> should reset to it's default state.",
        "<strong>User Story #12:</strong> When I click the element with the id of <code>break-decrement</code>, the value within <code>id=\"break-length\"</code> decrements by a value of 1, and I can see the updated value.",
        "<strong>User Story #13:</strong> When I click the element with the id of <code>break-increment</code>, the value within <code>id=\"break-length\"</code> increments by a value of 1, and I can see the updated value.",
        "<strong>User Story #14:</strong> When I click the element with the id of <code>session-decrement</code>, the value within <code>id=\"session-length\"</code> decrements by a value of 1, and I can see the updated value.",
        "<strong>User Story #15:</strong> When I click the element with the id of <code>session-increment</code>, the value within <code>id=\"session-length\"</code> increments by a value of 1, and I can see the updated value.",
        "<strong>User Story #16:</strong> I should not be able to set a session or break length to <= 0.",
        "<strong>User Story #17:</strong> I should not be able to set a session or break length to > 60.",
        "<strong>User Story #18:</strong> When I first click the element with <code>id=\"start_stop\"</code>, the timer should begin running from the value currently displayed in <code>id=\"session-length\"</code>, even if the value has been incremented or decremented from the original value of 25.",
        "<strong>User Story #19:</strong> If the timer is running, the element with the id of <code>time-left</code> should display the remaining time in <code>mm:ss</code> format (decrementing by a value of 1 and updating the display every 1000ms).",
        "<strong>User Story #20:</strong> If the timer is running and I click the element with <code>id=\"start_stop\"</code>, the countdown should pause.",
        "<strong>User Story #21:</strong> If the timer is paused and I click the element with <code>id=\"start_stop\"</code>, the countdown should resume running from the point at which it was paused.",
        "<strong>User Story #22:</strong> When a session countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of <code>timer-label</code> should display a string indicating a break has begun.",
        "<strong>User Story #23:</strong> When a session countdown reaches zero (NOTE: timer MUST reach 00:00), a new break countdown should begin, counting down from the value currently displayed in the <code>id=\"break-length\"</code> element.",
        "<strong>User Story #24:</strong> When a break countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of <code>timer-label</code> should display a string indicating a session has begun.",
        "<strong>User Story #25:</strong> When a break countdown reaches zero (NOTE: timer MUST reach 00:00), a new session countdown should begin, counting down from the value currently displayed in the <code>id=\"session-length\"</code> element.",
        "<strong>User Story #26:</strong> When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play. This should utilize an HTML5 <code>audio</code> tag and have a corresponding <code>id=\"beep\"</code>.",
        "<strong>User Story #27:</strong> The audio element with <code>id=\"beep\"</code> must be 1 second or longer.",
        "<strong>User Story #28:</strong> The audio element with id of <code>beep</code> must stop playing and be rewound to the beginning when the element with the id of <code>reset</code> is clicked.",
        "You can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Build a Pomodoro Clock",
      "dashedName": "build-a-pomodoro-clock"
    },
    {
      "id": "bad87fee1348bd9acdd08826",
      "description": [
        "Now we're ready to learn jQuery, the most popular JavaScript tool of all time.",
        "Before we can start using jQuery, we need to add some things to our HTML.",
        "First, add a <code>script</code> element at the top of your page. Be sure to close it on the following line.",
        "Your browser will run any JavaScript inside a <code>script</code> element, including jQuery.",
        "Inside your <code>script</code> element, add this code: <code>$(document).ready(function() {</code> to your <code>script</code>. Then close it on the following line (still inside your <code>script</code> element) with: <code>});</code>",
        "We'll learn more about <code>functions</code> later. The important thing to know is that code you put inside this <code>function</code> will run as soon as your browser has loaded your page.",
        "This is important because without your <code>document ready function</code>, your code may run before your HTML is rendered, which would cause bugs."
      ],
      "tests": [
        {
          "text":
            "Create a <code>script</code> element making sure it is valid and has a closing tag.",
          "testString":
            "assert(code.match(/<\\/script\\s*>/g) && code.match(/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\']+[^\"\\']*[\"\\']+)*(\\sasync|\\sdefer)*\\s*>/g) && code.match(/<\\/script\\s*>/g).length === code.match(/<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\']+[^\"\\']*[\"\\']+)*(\\sasync|\\sdefer)*\\s*>/g).length, 'Create a <code>script</code> element making sure it is valid and has a closing tag.');"
        },
        {
          "text":
            "You should add <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> to the beginning of your <code>script</code> element.",
          "testString":
            "assert(code.match(/\\$\\s*?\\(\\s*?document\\s*?\\)\\.ready\\s*?\\(\\s*?function\\s*?\\(\\s*?\\)\\s*?\\{/g), 'You should add <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> to the beginning of your <code>script</code> element.');"
        },
        {
          "text":
            "Close your <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> function with <code>}&#41;;</code>",
          "testString":
            "assert(code.match(/\\n*?\\s*?\\}\\s*?\\);/g), 'Close your <code>$&#40;document&#41;.ready<wbr>&#40;function&#40;&#41; {</code> function with <code>}&#41;;</code>');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn How Script Tags and Document Ready Work",
      "dashedName": "learn-how-script-tags-and-document-ready-work"
    },
    {
      "id": "bad87fee1348bd9bedc08826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "Now we have a <code>document ready function</code>.",
        "Now let's write our first jQuery statement. All jQuery functions start with a <code>$</code>, usually referred to as a <code>dollar sign operator</code>, or as <code>bling</code>.",
        "jQuery often selects an HTML element with a <code>selector</code>, then does something to that element.",
        "For example, let's make all of your <code>button</code> elements bounce. Just add this code inside your document ready function:",
        "<code>$(\"button\").addClass(\"animated bounce\");</code>",
        "Note that we've already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor. So you are using jQuery to apply the Animate.css <code>bounce</code> class to your <code>button</code> elements."
      ],
      "tests": [
        {
          "text":
            "Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>bounce</code> to your <code>button</code> elements.",
          "testString":
            "assert($(\"button\").hasClass(\"animated\") && $(\"button\").hasClass(\"bounce\"), 'Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>bounce</code> to your <code>button</code> elements.');"
        },
        {
          "text": "Only use jQuery to add these colors to the element.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these colors to the element.');"
        },
        {
          "text":
            "Your jQuery code should be within the <code>$(document).ready();</code> function.",
          "testString":
            "assert(code.match(/\\$\\(document\\)\\.ready\\(function.*(\\s|\\n)*.*button.*.addClass.*\\);/g), 'Your jQuery code should be within the <code>$(document).ready();</code> function.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target HTML Elements with Selectors Using jQuery",
      "dashedName": "target-html-elements-with-selectors-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aedc08826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You see how we made all of your <code>button</code> elements bounce? We selected them with <code>$(\"button\")</code>, then we added some CSS classes to them with <code>.addClass(\"animated bounce\");</code>.",
        "You just used jQuery's <code>.addClass()</code> function, which allows you to add classes to elements.",
        "First, let's target your <code>div</code> elements with the class <code>well</code> by using the <code>$(\".well\")</code> selector.",
        "Note that, just like with CSS declarations, you type a <code>.</code> before the class's name.",
        "Then use jQuery's <code>.addClass()</code> function to add the classes <code>animated</code> and <code>shake</code>.",
        "For example, you could make all the elements with the class <code>text-primary</code> shake by adding the following to your <code>document ready function</code>:",
        "<code>$(\".text-primary\").addClass(\"animated shake\");</code>"
      ],
      "tests": [
        {
          "text":
            "Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>shake</code> to all your elements with the class <code>well</code>.",
          "testString":
            "assert($(\".well\").hasClass(\"animated\") && $(\".well\").hasClass(\"shake\"), 'Use the jQuery <code>addClass&#40&#41</code> function to give the classes <code>animated</code> and <code>shake</code> to all your elements with the class <code>well</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(!code.match(/class\\.\\*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target Elements by Class Using jQuery",
      "dashedName": "target-elements-by-class-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aeda08826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You can also target elements by their id attributes.",
        "First target your <code>button</code> element with the id <code>target3</code> by using the <code>$(\"#target3\")</code> selector.",
        "Note that, just like with CSS declarations, you type a <code>#</code> before the id's name.",
        "Then use jQuery's <code>.addClass()</code> function to add the classes <code>animated</code> and <code>fadeOut</code>.",
        "Here's how you'd make the <code>button</code> element with the id <code>target6</code> fade out:",
        "<code>$(\"#target6\").addClass(\"animated fadeOut\")</code>."
      ],
      "tests": [
        {
          "text":
            "Select the <code>button</code> element with the <code>id</code> of <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class of <code>animated</code>.",
          "testString":
            "assert($(\"#target3\").hasClass(\"animated\"), 'Select the <code>button</code> element with the <code>id</code> of <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class of <code>animated</code>.');"
        },
        {
          "text":
            "Target the element with the id <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class <code>fadeOut</code>.",
          "testString":
            "assert(($(\"#target3\").hasClass(\"fadeOut\") || $(\"#target3\").hasClass(\"fadeout\"))  && code.match(/\\$\\(\\s*.#target3.\\s*\\)/g), 'Target the element with the id <code>target3</code> and use the jQuery <code>addClass&#40&#41</code> function to give it the class <code>fadeOut</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target Elements by id Using jQuery",
      "dashedName": "target-elements-by-id-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aeda08726",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "These animations were cool at first, but now they're getting kind of distracting.",
        "Delete all three of these jQuery functions from your <code>document ready function</code>, but leave your <code>document ready function</code> itself intact."
      ],
      "tests": [
        {
          "text":
            "Delete all three of your jQuery functions from your <code>document ready function</code>.",
          "testString":
            "assert(code.match(/\\{\\s*\\}\\);/g), 'Delete all three of your jQuery functions from your <code>document ready function</code>.');"
        },
        {
          "text": "Leave your <code>script</code> element intact.",
          "testString":
            "assert(code.match(/<script>/g), 'Leave your <code>script</code> element intact.');"
        },
        {
          "text":
            "Leave your <code>$&#40document&#41.ready&#40function&#40&#41 {</code> to the beginning of your <code>script</code> element.",
          "testString":
            "assert(code.match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\s?\\{/g), 'Leave your <code>$&#40document&#41.ready&#40function&#40&#41 {</code> to the beginning of your <code>script</code> element.');"
        },
        {
          "text":
            "Leave your \"document ready function\" closing <code>&#125;&#41;</code> intact.",
          "testString":
            "assert(code.match(/.*\\s*\\}\\);/g), 'Leave your \"document ready function\" closing <code>&#125;&#41;</code> intact.');"
        },
        {
          "text": "Leave your <code>script</code> element closing tag intact.",
          "testString":
            "assert(code.match(/<\\/script>/g) && code.match(/<script/g) && code.match(/<\\/script>/g).length === code.match(/<script/g).length, 'Leave your <code>script</code> element closing tag intact.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Delete Your jQuery Functions",
      "dashedName": "delete-your-jquery-functions"
    },
    {
      "id": "bad87fee1348bd9aed908626",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "Now you know three ways of targeting elements: by type: <code>$(\"button\")</code>, by class: <code>$(\".btn\")</code>, and by id <code>$(\"#target1\")</code>.",
        "Although it is possible to add multiple classes in a single <code>.addClass()</code> call, let's add them to the same element in <em>three separate ways</em>.",
        "Using <code>.addClass()</code>, add only one class at a time to the same element, three different ways:",
        "Add the <code>animated</code> class to all elements with type <code>button</code>.",
        "Add the <code>shake</code> class to all the buttons with class <code>.btn</code>.",
        "Add the <code>btn-primary</code> class to the button with id <code>#target1</code>.",
        "<strong>Note</strong><br>You should only be targeting one element and adding only one class at a time. Altogether, your three individual selectors will end up adding the three classes <code>shake</code>, <code>animated</code>, and <code>btn-primary</code> to <code>#target1</code>."
      ],
      "tests": [
        {
          "text": "Use the <code>$&#40\"button\"&#41</code> selector.",
          "testString":
            "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?button\\s*?(?:'|\")/gi), 'Use the <code>$&#40\"button\"&#41</code> selector.');"
        },
        {
          "text": "Use the <code>$&#40\".btn\"&#41</code> selector.",
          "testString":
            "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.btn\\s*?(?:'|\")/gi), 'Use the <code>$&#40\".btn\"&#41</code> selector.');"
        },
        {
          "text": "Use the <code>$&#40\"#target1\"&#41</code> selector.",
          "testString":
            "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")/gi), 'Use the <code>$&#40\"#target1\"&#41</code> selector.');"
        },
        {
          "text": "Only add one class with each of your three selectors.",
          "testString":
            "assert(code.match(/addClass/g) && code.match(/addClass\\s*?\\(\\s*?('|\")\\s*?[\\w-]+\\s*?\\1\\s*?\\)/g).length > 2, 'Only add one class with each of your three selectors.');"
        },
        {
          "text":
            "Your <code>#target1</code> element should have the classes <code>animated</code>&#130; <code>shake</code> and <code>btn-primary</code>.",
          "testString":
            "assert($(\"#target1\").hasClass(\"animated\") && $(\"#target1\").hasClass(\"shake\") && $(\"#target1\").hasClass(\"btn-primary\"), 'Your <code>#target1</code> element should have the classes <code>animated</code>&#130; <code>shake</code> and <code>btn-primary</code>.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target the Same Element with Multiple jQuery Selectors",
      "dashedName": "target-the-same-element-with-multiple-jquery-selectors"
    },
    {
      "id": "bad87fee1348bd9aed918626",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "In the same way you can add classes to an element with jQuery's <code>addClass()</code> function, you can remove them with jQuery's <code>removeClass()</code> function.",
        "Here's how you would do this for a specific button:",
        "<code>$(\"#target2\").removeClass(\"btn-default\");</code>",
        "Let's remove the <code>btn-default</code> class from all of our <code>button</code> elements."
      ],
      "tests": [
        {
          "text":
            "Remove the <code>btn-default</code> class from all of your <code>button</code> elements.",
          "testString":
            "assert($(\".btn-default\").length === 0, 'Remove the <code>btn-default</code> class from all of your <code>button</code> elements.');"
        },
        {
          "text": "Only use jQuery to remove this class from the element.",
          "testString":
            "assert(code.match(/btn btn-default/g), 'Only use jQuery to remove this class from the element.');"
        },
        {
          "text": "Only remove the <code>btn-default</code> class.",
          "testString":
            "assert(code.match(/\\.[\\v\\s]*removeClass[\\s\\v]*\\([\\s\\v]*('|\")\\s*btn-default\\s*('|\")[\\s\\v]*\\)/gm), 'Only remove the <code>btn-default</code> class.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Classes from an Element with jQuery",
      "dashedName": "remove-classes-from-an-element-with-jquery"
    },
    {
      "id": "bad87fee1348bd9aed908826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "We can also change the CSS of an HTML element directly with jQuery.",
        "jQuery has a function called <code>.css()</code> that allows you to change the CSS of an element.",
        "Here's how we would change its color to blue:",
        "<code>$(\"#target1\").css(\"color\", \"blue\");</code>",
        "This is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.",
        "Delete your jQuery selectors, leaving an empty <code>document ready function</code>.",
        "Select <code>target1</code> and change its color to red."
      ],
      "tests": [
        {
          "text": "Your <code>target1</code> element should have red text.",
          "testString":
            "assert($(\"#target1\").css(\"color\") === 'rgb(255, 0, 0)', 'Your <code>target1</code> element should have red text.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n    $(\"button\").removeClass(\"btn-default\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the CSS of an Element Using jQuery",
      "dashedName": "change-the-css-of-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed808826",
      "description": [
        "You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.",
        "When you disable a button, it will become grayed-out and can no longer be clicked.",
        "jQuery has a function called <code>.prop()</code> that allows you to adjust the properties of elements.",
        "Here's how you would disable all buttons:",
        "<code>$(\"button\").prop(\"disabled\", true);</code>",
        "Disable only the <code>target1</code> button."
      ],
      "tests": [
        {
          "text": "Disable your <code>target1</code> button.",
          "testString":
            "assert($(\"#target1\") && $(\"#target1\").prop(\"disabled\") && code.match(/[\"']disabled[\"'],( true|true)/g), 'Disable your <code>target1</code> button.');"
        },
        {
          "text": "Do not disable any other buttons.",
          "testString":
            "assert($(\"#target2\") && !$(\"#target2\").prop(\"disabled\"), 'Do not disable any other buttons.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(!code.match(/disabled[^<]*>/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Disable an Element Using jQuery",
      "dashedName": "disable-an-element-using-jquery"
    },
    {
      "id": "564944c91be2204b269d51e3",
      "description": [
        "Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.",
        "jQuery has a function called <code>.html()</code> that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function.",
        "Here's how you would rewrite and emphasize the text of our heading:",
        "<code>$(\"h3\").html(\"&#60;em&#62;jQuery Playground&#60;/em&#62;\");</code>",
        "jQuery also has a similar function called <code>.text()</code> that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.",
        "Change the button with id <code>target4</code> by emphasizing its text.",
        "Check this <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/em\" target=\"_blank\">link</a> to know more on the difference between <code>&#60;i&#62;</code> and <code>&#60;em&#62;</code> and their uses.",
        "Note that while the <code>&#60;i&#62;</code> tag has traditionally been used to emphasize text, it has since been coopted for use as a tag for icons. The <code>&#60;em&#62;</code> tag is now widely accepted as the tag for emphasis. Either will work for this challenge."
      ],
      "tests": [
        {
          "text":
            "Emphasize the text in your <code>target4</code> button by adding HTML tags.",
          "testString":
            "assert.isTrue((/<em>|<i>\\s*#target4\\s*<\\/em>|<\\/i>/gi).test($(\"#target4\").html()), 'Emphasize the text in your <code>target4</code> button by adding HTML tags.');"
        },
        {
          "text": "Make sure the text is otherwise unchanged.",
          "testString":
            "assert($(\"#target4\") && $(\"#target4\").text().trim() === '#target4', 'Make sure the text is otherwise unchanged.');"
        },
        {
          "text": "Do not alter any other text.",
          "testString":
            "assert.isFalse((/<em>|<i>/gi).test($(\"h3\").html()), 'Do not alter any other text.');"
        },
        {
          "text":
            "Make sure you are using <code>.html()</code> and not <code>.text()</code>.",
          "testString":
            "assert(code.match(/\\.html\\(/g), 'Make sure you are using <code>.html()</code> and not <code>.text()</code>.');"
        },
        {
          "text":
            "Make sure to select <code>button id=\"target4\"</code> with jQuery.",
          "testString":
            "assert(code.match(/\\$\\(\\s*?(\\\"|\\')#target4(\\\"|\\')\\s*?\\)\\.html\\(/), 'Make sure to select <code>button id=\"target4\"</code> with jQuery.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    \n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change Text Inside an Element Using jQuery",
      "dashedName": "change-text-inside-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed708826",
      "description": [
        "Now let's remove an HTML element from your page using jQuery.",
        "jQuery has a function called <code>.remove()</code> that will remove an HTML element entirely",
        "Remove element <code>target4</code> from the page by using the <code>.remove()</code> function."
      ],
      "tests": [
        {
          "text":
            "Use jQuery to remove your <code>target4</code> element from your page.",
          "testString":
            "assert($(\"#target4\").length === 0 && code.match(/\\$\\([\"']#target4[\"']\\).remove\\(\\)/g), 'Use jQuery to remove your <code>target4</code> element from your page.');"
        },
        {
          "text": "Only use jQuery to remove this element.",
          "testString":
            "assert(code.match(/id=\"target4/g) && !code.match(/<!--.*id=\"target4\".*-->/g) && $(\"#right-well\").length > 0, 'Only use jQuery to remove this element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove an Element Using jQuery",
      "dashedName": "remove-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed608826",
      "description": [
        "Now let's try moving elements from one <code>div</code> to another.",
        "jQuery has a function called <code>appendTo()</code> that allows you to select HTML elements and append them to another element.",
        "For example, if we wanted to move <code>target4</code> from our right well to our left well, we would use:",
        "<code>$(\"#target4\").appendTo(\"#left-well\");</code>",
        "Move your <code>target2</code> element from your <code>left-well</code> to your <code>right-well</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>target2</code> element should not be inside your <code>left-well</code>.",
          "testString":
            "assert($(\"#left-well\").children(\"#target2\").length === 0, 'Your <code>target2</code> element should not be inside your <code>left-well</code>.');"
        },
        {
          "text":
            "Your <code>target2</code> element should be inside your <code>right-well</code>.",
          "testString":
            "assert($(\"#right-well\").children(\"#target2\").length > 0, 'Your <code>target2</code> element should be inside your <code>right-well</code>.');"
        },
        {
          "text": "Only use jQuery to move these elements.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to move these elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use appendTo to Move Elements with jQuery",
      "dashedName": "use-appendto-to-move-elements-with-jquery"
    },
    {
      "id": "bad87fee1348bd9aed508826",
      "description": [
        "In addition to moving elements, you can also copy them from one place to another.",
        "jQuery has a function called <code>clone()</code> that makes a copy of an element.",
        "For example, if we wanted to copy <code>target2</code> from our <code>left-well</code> to our <code>right-well</code>, we would use:",
        "<code>$(\"#target2\").clone().appendTo(\"#right-well\");</code>",
        "Did you notice this involves sticking two jQuery functions together? This is called <code>function chaining</code> and it's a convenient way to get things done with jQuery.",
        "Clone your <code>target5</code> element and append it to your <code>left-well</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>target5</code> element should be inside your <code>right-well</code>.",
          "testString":
            "assert($(\"#right-well\").children(\"#target5\").length > 0, 'Your <code>target5</code> element should be inside your <code>right-well</code>.');"
        },
        {
          "text":
            "A copy of your <code>target5</code> element should also be inside your <code>left-well</code>.",
          "testString":
            "assert($(\"#left-well\").children(\"#target5\").length > 0, 'A copy of your <code>target5</code> element should also be inside your <code>left-well</code>.');"
        },
        {
          "text": "Only use jQuery to move these elements.",
          "testString":
            "assert(!code.match(/class.*animated/g), 'Only use jQuery to move these elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Clone an Element Using jQuery",
      "dashedName": "clone-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed308826",
      "description": [
        "Every HTML element has a <code>parent</code> element from which it <code>inherits</code> properties.",
        "For example, your <code>jQuery Playground</code> <code>h3</code> element has the parent element of <code>&#60;div class=\"container-fluid\"&#62</code>, which itself has the parent <code>body</code>.",
        "jQuery has a function called <code>parent()</code> that allows you to access the parent of whichever element you've selected.",
        "Here's an example of how you would use the <code>parent()</code> function if you wanted to give the parent element of the <code>left-well</code> element a background color of blue:",
        "<code>$(\"#left-well\").parent().css(\"background-color\", \"blue\")</code>",
        "Give the parent of the <code>#target1</code> element a background-color of red."
      ],
      "tests": [
        {
          "text":
            "Your <code>left-well</code> element should have a red background.",
          "testString":
            "assert($(\"#left-well\").css(\"background-color\") === 'red' || $(\"#left-well\").css(\"background-color\") === 'rgb(255, 0, 0)' || $(\"#left-well\").css(\"background-color\").toLowerCase() === '#ff0000' || $(\"#left-well\").css(\"background-color\").toLowerCase() === '#f00', 'Your <code>left-well</code> element should have a red background.');"
        },
        {
          "text":
            "You should use the <code>&#46;parent&#40;&#41;</code> function to modify this element.",
          "testString":
            "assert(code.match(/\\.parent\\s*\\(\\s*\\)\\s*\\.css/g), 'You should use the <code>&#46;parent&#40;&#41;</code> function to modify this element.');"
        },
        {
          "text":
            "The <code>&#46;parent&#40;&#41;</code> method should be called on the <code>&#35;target1</code> element.",
          "testString":
            "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")\\s*?\\)\\s*?\\.parent/gi), 'The <code>&#46;parent&#40;&#41;</code> method should be called on the <code>&#35;target1</code> element.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(code.match(/<div class=\"well\" id=\"left-well\">/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<body>\n  <div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <h4>#left-well</h4>\n        <div class=\"well\" id=\"left-well\">\n          <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n          <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n          <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n        </div>\n      </div>\n      <div class=\"col-xs-6\">\n        <h4>#right-well</h4>\n        <div class=\"well\" id=\"right-well\">\n          <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n          <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n          <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target the Parent of an Element Using jQuery",
      "dashedName": "target-the-parent-of-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed208826",
      "description": [
        "When HTML elements are placed one level below another they are called <code>children</code> of that element. For example, the button elements in this challenge with the text \"#target1\", \"#target2\", and \"#target3\" are all <code>children</code> of the <code>&#60;div class=\"well\" id=\"left-well\"&#62;</code> element.",
        "jQuery has a function called <code>children()</code> that allows you to access the children of whichever element you've selected.",
        "Here's an example of how you would use the <code>children()</code> function to give the children of your <code>left-well</code> element the color <code>blue</code>:",
        "<code>$(\"#left-well\").children().css(\"color\", \"blue\")</code>",
        "<hr>",
        "Give all the children of your <code>right-well</code> element the color orange."
      ],
      "tests": [
        {
          "text":
            "All children of <code>#right-well</code> should have orange text.",
          "testString":
            "assert($(\"#right-well\").children().css(\"color\") === 'rgb(255, 165, 0)', 'All children of <code>#right-well</code> should have orange text.');"
        },
        {
          "text":
            "You should use the <code>children&#40&#41</code> function to modify these elements.",
          "testString":
            "assert(code.match(/\\.children\\(\\)\\.css/g), 'You should use the <code>children&#40&#41</code> function to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(code.match(/<div class=\"well\" id=\"right-well\">/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target the Children of an Element Using jQuery",
      "dashedName": "target-the-children-of-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed108826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.",
        "Fortunately, jQuery has some other tricks for targeting the right elements.",
        "jQuery uses CSS Selectors to target elements. The <code>target:nth-child(n)</code> CSS selector allows you to select all the nth elements with the target class or element type.",
        "Here's how you would give the third element in each well the bounce class:",
        "<code>$(\".target:nth-child(3)\").addClass(\"animated bounce\");</code>",
        "Make the second child in each of your well elements bounce. You must select the elements' children with the <code>target</code> class."
      ],
      "tests": [
        {
          "text":
            "The second element in your <code>target</code> elements should bounce.",
          "testString":
            "assert($(\".target:nth-child(2)\").hasClass(\"animated\") && $(\".target:nth-child(2)\").hasClass(\"bounce\"), 'The second element in your <code>target</code> elements should bounce.');"
        },
        {
          "text": "Only two elements should bounce.",
          "testString":
            "assert($(\".animated.bounce\").length === 2, 'Only two elements should bounce.');"
        },
        {
          "text":
            "You should use the <code>&#58;nth-child&#40&#41</code> selector to modify these elements.",
          "testString":
            "assert(code.match(/\\:nth-child\\(/g), 'You should use the <code>&#58;nth-child&#40&#41</code> selector to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(code.match(/\\$\\(\".target:nth-child\\(2\\)\"\\)/g) || code.match(/\\$\\('.target:nth-child\\(2\\)'\\)/g) || code.match(/\\$\\(\".target\"\\).filter\\(\":nth-child\\(2\\)\"\\)/g) || code.match(/\\$\\('.target'\\).filter\\(':nth-child\\(2\\)'\\)/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target a Specific Child of an Element Using jQuery",
      "dashedName": "target-a-specific-child-of-an-element-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aed008826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "You can also target elements based on their positions using <code>:odd</code> or <code>:even</code> selectors.",
        "Note that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, <code>:odd</code> selects the second element (position 1), fourth element (position 3), and so on.",
        "Here's how you would target all the odd elements with class <code>target</code> and give them classes:",
        "<code>$(\".target:odd\").addClass(\"animated shake\");</code>",
        "Try selecting all the even <code>target</code> elements and giving them the classes of <code>animated</code> and <code>shake</code>. Remember that <strong>even</strong> refers to the position of elements with a zero-based system in mind."
      ],
      "tests": [
        {
          "text":
            "All of the <code>target</code> elements that jQuery considers to be even should shake.",
          "testString":
            "assert($('.target:even').hasClass('animated') && $('.target:even').hasClass('shake'), 'All of the <code>target</code> elements that jQuery considers to be even should shake.');"
        },
        {
          "text":
            "You should use the <code>&#58;even</code> selector to modify these elements.",
          "testString":
            "assert(code.match(/\\:even/g), 'You should use the <code>&#58;even</code> selector to modify these elements.');"
        },
        {
          "text": "Only use jQuery to add these classes to the element.",
          "testString":
            "assert(code.match(/\\$\\(\".target:even\"\\)/g) || code.match(/\\$\\('.target:even'\\)/g) || code.match(/\\$\\(\".target\"\\).filter\\(\":even\"\\)/g) || code.match(/\\$\\('.target'\\).filter\\(':even'\\)/g), 'Only use jQuery to add these classes to the element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Target Even Elements Using jQuery",
      "dashedName": "target-even-elements-using-jquery"
    },
    {
      "id": "bad87fee1348bd9aecb08826",
      "required": [
        {
          "link":
            "https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css"
        }
      ],
      "description": [
        "We're done playing with our jQuery playground. Let's tear it down!",
        "jQuery can target the <code>body</code> element as well.",
        "Here's how we would make the entire body fade out: <code> $(\"body\").addClass(\"animated fadeOut\");</code>",
        "But let's do something more dramatic. Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element."
      ],
      "tests": [
        {
          "text":
            "Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element.",
          "testString":
            "assert($('body').hasClass('animated') && $('body').hasClass('hinge'), 'Add the classes <code>animated</code> and <code>hinge</code> to your <code>body</code> element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n    $(\".target:even\").addClass(\"animated shake\");\n\n  });\n</script>\n\n<!-- Only change code above this line. -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use jQuery to Modify the Entire Page",
      "dashedName": "use-jquery-to-modify-the-entire-page"
    },
    {
      "id": "5a24c314108439a4d4036141",
      "description": [
        "This series of challenges introduces how to use Redux with React. First, here's a review of some of the key principles of each technology. React is a view library that you provide with data, then it renders the view in an efficient, predictable way. Redux is a state management framework that you can use to simplify the management of your application's state. Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app. Your React components subscribe to only the pieces of data in the store that are relevant to their role. Then, you dispatch actions directly from React components, which then trigger store updates.",
        "Although React components can manage their own state locally, when you have a complex app, it's generally better to keep the app state in a single location with Redux. There are exceptions when individual components may have local state specific only to them. Finally, because Redux is not designed to work with React out of the box, you need to use the <code>react-redux</code> package. It provides a way for you to pass Redux <code>state</code> and <code>dispatch</code> to your React components as <code>props</code>.",
        "Over the next few challenges, first, you'll create a simple React component which allows you to input new text messages. These are added to an array that's displayed in the view. This should be a nice review of what you learned in the React lessons. Next, you'll create a Redux store and actions that manage the state of the messages array. Finally, you'll use <code>react-redux</code> to connect the Redux store with your component, thereby extracting the local state into the Redux store.",
        "<hr>",
        "Start with a <code>DisplayMessages</code> component. Add a constructor to this component and initialize it with a state that has two properties: <code>input</code>, that's set to an empty string, and <code>messages</code>, that's set to an empty array."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class DisplayMessages extends React.Component {\n  // change code below this line\n\n  // change code above this line\n  render() {\n    return <div />\n  }\n};",
          "tail":
            "ReactDOM.render(<DisplayMessages />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>DisplayMessages</code> component should render an empty <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); return mockedComponent.find('div').text() === '' })(), 'The <code>DisplayMessages</code> component should render an empty <code>div</code> element.');"
        },
        {
          "text":
            "The <code>DisplayMessages</code> constructor should be called properly with <code>super</code>, passing in <code>props</code>.",
          "testString":
            "getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\s/g,''); return noWhiteSpace.includes('constructor(props)') && noWhiteSpace.includes('super(props'); })(), 'The <code>DisplayMessages</code> constructor should be called properly with <code>super</code>, passing in <code>props</code>.');"
        },
        {
          "text":
            "The <code>DisplayMessages</code> component should have an initial state equal to <code>{input: \"\", messages: []}</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return typeof initialState === 'object' && initialState.input === '' && Array.isArray(initialState.messages) && initialState.messages.length === 0; })(), 'The <code>DisplayMessages</code> component should have an initial state equal to <code>{input: \"\", messages: []}</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Getting Started with React Redux",
      "dashedName": "getting-started-with-react-redux",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036142",
      "description": [
        "Here you'll finish creating the <code>DisplayMessages</code> component.",
        "<hr>",
        "First, in the <code>render()</code> method, have the component render an <code>input</code> element, <code>button</code> element, and <code>ul</code> element. When the <code>input</code> element changes, it should trigger a <code>handleChange()</code> method. Also, the <code>input</code> element should render the value of <code>input</code> that's in the component's state. The <code>button</code> element should trigger a <code>submitMessage()</code> method when it's clicked.",
        "Second, write these two methods. The <code>handleChange()</code> method should update the <code>input</code> with what the user is typing. The <code>submitMessage()</code> method should concatenate the current message (stored in <code>input</code>) to the <code>messages</code> array in local state, and clear the value of the <code>input</code>.",
        "Finally, use the <code>ul</code> to map over the array of <code>messages</code> and render it to the screen as a list of <code>li</code> elements."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n  }\n  // add handleChange() and submitMessage() methods here\n\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        { /* render an input, button, and ul here */ }\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<DisplayMessages />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>DisplayMessages</code> component should initialize with a state equal to <code>{ input: \"\", messages: [] }</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return ( typeof initialState === 'object' && initialState.input === '' && initialState.messages.length === 0); })(), 'The <code>DisplayMessages</code> component should initialize with a state equal to <code>{ input: \"\", messages: [] }</code>.');"
        },
        {
          "text":
            "The <code>DisplayMessages</code> component should render a <code>div</code> containing an <code>h2</code> element, a <code>button</code> element, a <code>ul</code> element, and <code>li</code> elements as children.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const state = () => { mockedComponent.setState({messages: ['__TEST__MESSAGE']}); return waitForIt(() => mockedComponent )}; const updated = await state(); assert(updated.find('div').length === 1 && updated.find('h2').length === 1 && updated.find('button').length === 1 && updated.find('ul').length === 1, 'The <code>DisplayMessages</code> component should render a <code>div</code> containing an <code>h2</code> element, a <code>button</code> element, a <code>ul</code> element, and <code>li</code> elements as children.'); }; "
        },
        {
          "text":
            "The <code>input</code> element should render the value of <code>input</code> in local state.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const testValue = '__TEST__EVENT__INPUT'; const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); assert(updated.find('input').props().value === testValue, 'The <code>input</code> element should render the value of <code>input</code> in local state.'); }; "
        },
        {
          "text":
            "Calling the method <code>handleChange</code> should update the <code>input</code> value in state to the current input.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__TEST__EVENT__MESSAGE__'; const changed = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const afterInput = await changed(); assert(initialState.input === '' && afterInput.state().input === '__TEST__EVENT__MESSAGE__', 'Calling the method <code>handleChange</code> should update the <code>input</code> value in state to the current input.');  }; "
        },
        {
          "text":
            "Clicking the <code>Add message</code> button should call the method <code>submitMessage</code> which should add the current <code>input</code> to the <code>messages</code> array in state.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage_1 = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage_1); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_1 = await firstSubmit(); const submitState_1 = afterSubmit_1.state(); const testMessage_2 = '__SECOND__MESSAGE__'; const secondChange = () => { causeChange(mockedComponent, testMessage_2); return waitForIt(() => mockedComponent )}; const secondResult = await secondChange(); const secondSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_2 = await secondSubmit(); const submitState_2 = afterSubmit_2.state(); assert(initialState.messages.length === 0 && submitState_1.messages.length === 1 && submitState_2.messages.length === 2 && submitState_2.messages[1] === testMessage_2, 'Clicking the <code>Add message</code> button should call the method <code>submitMessage</code> which should add the current <code>input</code> to the <code>messages</code> array in state.'); }; "
        },
        {
          "text":
            "The <code>submitMessage</code> method should clear the current input.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstState = firstResult.state(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit = await firstSubmit(); const submitState = afterSubmit.state(); assert(firstState.input === testMessage && submitState.input === '', 'The <code>submitMessage</code> method should clear the current input.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Manage State Locally First",
      "dashedName": "manage-state-locally-first",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036143",
      "description": [
        "Now that you finished the React component, you need to move the logic it's performing locally in its <code>state</code> into Redux. This is the first step to connect the simple React app to Redux. The only functionality your app has is to add new messages from the user to an unordered list. The example is simple in order to demonstrate how React and Redux work together.",
        "<hr>",
        "First, define an action type 'ADD' and set it to a const <code>ADD</code>. Next, define an action creator <code>addMessage()</code> which creates the action to add a message. You'll need to pass a <code>message</code> to this action creator and include the message in the returned <code>action</code>.",
        "Then create a reducer called <code>messageReducer()</code> that handles the state for the messages. The initial state should equal an empty array. This reducer should add a message to the array of messages held in state, or return the current state. Finally, create your Redux store and pass it the reducer."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// define ADD, addMessage(), messageReducer(), and store here:\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The const <code>ADD</code> should exist and hold a value equal to the string <code>ADD</code>",
          "testString":
            "assert(ADD === 'ADD', 'The const <code>ADD</code> should exist and hold a value equal to the string <code>ADD</code>');"
        },
        {
          "text":
            "The action creator <code>addMessage</code> should return an object with <code>type</code> equal to <code>ADD</code> and message equal to the message that is passed in.",
          "testString":
            "assert((function() { const addAction = addMessage('__TEST__MESSAGE__'); return addAction.type === ADD && addAction.message === '__TEST__MESSAGE__'; })(), 'The action creator <code>addMessage</code> should return an object with <code>type</code> equal to <code>ADD</code> and message equal to the message that is passed in.');"
        },
        {
          "text": "<code>messageReducer</code> should be a function.",
          "testString":
            "assert(typeof messageReducer === 'function', '<code>messageReducer</code> should be a function.');"
        },
        {
          "text":
            "The store should exist and have an initial state set to an empty array.",
          "testString":
            "assert((function() { const initialState = store.getState(); return typeof store === 'object' && initialState.length === 0; })(), 'The store should exist and have an initial state set to an empty array.');"
        },
        {
          "text":
            "Dispatching <code>addMessage</code> against the store should immutably add a new message to the array of messages held in state.",
          "testString":
            "assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(addMessage('__A__TEST__MESSAGE')); const addState = store.getState(); return (isFrozen && addState[0] === '__A__TEST__MESSAGE'); })(), 'Dispatching <code>addMessage</code> against the store should immutably add a new message to the array of messages held in state.');"
        },
        {
          "text":
            "The <code>messageReducer</code> should return the current state if called with any other actions.",
          "testString":
            "assert((function() { const addState = store.getState(); store.dispatch({type: 'FAKE_ACTION'}); const testState = store.getState(); return (addState === testState); })(), 'The <code>messageReducer</code> should return the current state if called with any other actions.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Extract State Logic to Redux",
      "dashedName": "extract-state-logic-to-redux",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036144",
      "description": [
        "In the last challenge, you created a Redux store to handle the messages array and created an action for adding new messages. The next step is to provide React access to the Redux store and the actions it needs to dispatch updates. React Redux provides its <code>react-redux</code> package to help accomplish these tasks.",
        "React Redux provides a small API with two key features: <code>Provider</code> and <code>connect</code>. Another challenge covers <code>connect</code>. The <code>Provider</code> is a wrapper component from React Redux that wraps your React app. This wrapper then allows you to access the Redux <code>store</code> and <code>dispatch</code> functions throughout your component tree. <code>Provider</code> takes two props, the Redux store and the child components of your app. Defining the <code>Provider</code> for an App component might look like this:",
        "<blockquote>&lt;Provider store={store}&gt;<br>  &lt;App/&gt;<br>&lt;/Provider&gt;</blockquote>",
        "<hr>",
        "The code editor now shows all your Redux and React code from the past several challenges. It includes the Redux store, actions, and the <code>DisplayMessages</code> component. The only new piece is the <code>AppWrapper</code> component at the bottom. Use this top level component to render the <code>Provider</code> from <code>ReactRedux</code>, and pass the Redux store as a prop. Then render the <code>DisplayMessages</code> component as a child. Once you are finished, you should see your React component rendered to the page.",
        "<strong>Note:</strong>&nbsp;React Redux is available as a global variable here, so you can access the Provider with dot notation. The code in the editor takes advantage of this and sets it to a constant <code>Provider</code> for you to use in the <code>AppWrapper</code> render method."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// Redux Code:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\n\n\nconst store = Redux.createStore(messageReducer);\n\n// React Code:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    const currentMessage = this.state.input;\n    this.setState({\n      input: '',\n      messages: this.state.messages.concat(currentMessage)\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // render the Provider here\n\n  // change code above this line\n};",
          "tail":
            "ReactDOM.render(<AppWrapper />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>AppWrapper</code> should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), 'The <code>AppWrapper</code> should render.');"
        },
        {
          "text":
            "The <code>Provider</code> wrapper component should have a prop of <code>store</code> passed to it, equal to the Redux store.",
          "testString":
            "getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return getUserInput('index').replace(/\\s/g,'').includes('<Providerstore={store}>'); })(), 'The <code>Provider</code> wrapper component should have a prop of <code>store</code> passed to it, equal to the Redux store.');"
        },
        {
          "text":
            "<code>DisplayMessages</code> should render as a child of <code>AppWrapper</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').find('DisplayMessages').length === 1; })(), '<code>DisplayMessages</code> should render as a child of <code>AppWrapper</code>.');"
        },
        {
          "text":
            "The <code>DisplayMessages</code> component should render an h2, input, button, and <code>ul</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('div').length === 1 && mockedComponent.find('h2').length === 1 && mockedComponent.find('button').length === 1 && mockedComponent.find('ul').length === 1; })(), 'The <code>DisplayMessages</code> component should render an h2, input, button, and <code>ul</code> element.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Provider to Connect Redux to React",
      "dashedName": "use-provider-to-connect-redux-to-react",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036145",
      "description": [
        "The <code>Provider</code> component allows you to provide <code>state</code> and <code>dispatch</code> to your React components, but you must specify exactly what state and actions you want. This way, you make sure that each component only has access to the state it needs. You accomplish this by creating two functions: <code>mapStateToProps()</code> and <code>mapDispatchToProps()</code>.",
        "In these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch. Once these functions are in place, you'll see how to use the React Redux <code>connect</code> method to connect them to your components in another challenge.",
        "<strong>Note:</strong>&nbsp;Behind the scenes, React Redux uses the <code>store.subscribe()</code> method to implement <code>mapStateToProps()</code>.",
        "<hr>",
        "Create a function <code>mapStateToProps()</code>. This function should take <code>state</code> as an argument, then return an object which maps that state to specific property names. These properties will become accessible to your component via <code>props</code>. Since this example keeps the entire state of the app in a single array, you can pass that entire state to your component. Create a property <code>messages</code> in the object that's being returned, and set it to <code>state</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": "const state = [];\n\n// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text": "The const <code>state</code> should be an empty array.",
          "testString":
            "assert(Array.isArray(state) && state.length === 0, 'The const <code>state</code> should be an empty array.');"
        },
        {
          "text": "<code>mapStateToProps</code> should be a function.",
          "testString":
            "assert(typeof mapStateToProps === 'function', '<code>mapStateToProps</code> should be a function.');"
        },
        {
          "text": "<code>mapStateToProps</code> should return an object.",
          "testString":
            "assert(typeof mapStateToProps() === 'object', '<code>mapStateToProps</code> should return an object.');"
        },
        {
          "text":
            "Passing an array as state to <code>mapStateToProps</code> should return this array assigned to a key of <code>messages</code>.",
          "testString":
            "assert(mapStateToProps(['messages']).messages.pop() === 'messages', 'Passing an array as state to <code>mapStateToProps</code> should return this array assigned to a key of <code>messages</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Map State to Props",
      "dashedName": "map-state-to-props",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036146",
      "description": [
        "The <code>mapDispatchToProps()</code> function is used to provide specific action creators to your React components so they can dispatch actions against the Redux store. It's similar in structure to the <code>mapStateToProps()</code> function you wrote in the last challenge. It returns an object that maps dispatch actions to property names, which become component <code>props</code>. However, instead of returning a piece of <code>state</code>, each property returns a function that calls <code>dispatch</code> with an action creator and any relevant action data. You have access to this <code>dispatch</code> because it's passed in to <code>mapDispatchToProps()</code> as a parameter when you define the function, just like you passed <code>state</code> to <code>mapStateToProps()</code>. Behind the scenes, React Redux is using Redux's <code>store.dispatch()</code> to conduct these dispatches with <code>mapDispatchToProps()</code>. This is similar to how it uses <code>store.subscribe()</code> for components that are mapped to <code>state</code>.",
        "For example, you have a <code>loginUser()</code> action creator that takes a <code>username</code> as an action payload. The object returned from <code>mapDispatchToProps()</code> for this action creator would look something like:",
        "<blockquote>{<br> submitLoginUser: function(username) {<br>   dispatch(loginUser(username));<br> }<br>}</blockquote>",
        "<hr>",
        "The code editor provides an action creator called <code>addMessage()</code>. Write the function <code>mapDispatchToProps()</code> that takes <code>dispatch</code> as an argument, then returns an object. The object should have a property <code>submitNewMessage</code> set to the dispatch function, which takes a parameter for the new message to add when it dispatches <code>addMessage()</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\n// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>addMessage</code> should return an object with keys <code>type</code> and <code>message</code>.",
          "testString":
            "assert((function() { const addMessageTest = addMessage(); return ( addMessageTest.hasOwnProperty('type') && addMessageTest.hasOwnProperty('message')); })(), '<code>addMessage</code> should return an object with keys <code>type</code> and <code>message</code>.');"
        },
        {
          "text": "<code>mapDispatchToProps</code> should be a function.",
          "testString":
            "assert(typeof mapDispatchToProps === 'function', '<code>mapDispatchToProps</code> should be a function.');"
        },
        {
          "text": "<code>mapDispatchToProps</code> should return an object.",
          "testString":
            "assert(typeof mapDispatchToProps() === 'object', '<code>mapDispatchToProps</code> should return an object.');"
        },
        {
          "text":
            "Dispatching <code>addMessage</code> with <code>submitNewMessage</code> from <code>mapDispatchToProps</code> should return a message to the dispatch function.",
          "testString":
            "assert((function() { let testAction; const dispatch = (fn) => { testAction = fn; }; let dispatchFn = mapDispatchToProps(dispatch); dispatchFn.submitNewMessage('__TEST__MESSAGE__'); return (testAction.type === 'ADD' && testAction.message === '__TEST__MESSAGE__'); })(), 'Dispatching <code>addMessage</code> with <code>submitNewMessage</code> from <code>mapDispatchToProps</code> should return a message to the dispatch function.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Map Dispatch to Props",
      "dashedName": "map-dispatch-to-props",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036147",
      "description": [
        "Now that you've written both the <code>mapStateToProps()</code> and the <code>mapDispatchToProps()</code> functions, you can use them to map <code>state</code> and <code>dispatch</code> to the <code>props</code> of one of your React components. The <code>connect</code> method from React Redux can handle this task. This method takes two optional arguments, <code>mapStateToProps()</code> and <code>mapDispatchToProps()</code>. They are optional because you may have a component that only needs access to <code>state</code> but doesn't need to dispatch any actions, or vice versa.",
        "To use this method, pass in the functions as arguments, and immediately call the result with your component. This syntax is a little unusual and looks like:",
        "<code>connect(mapStateToProps, mapDispatchToProps)(MyComponent)</code>",
        "<strong>Note:</strong>&nbsp;If you want to omit one of the arguments to the <code>connect</code> method, you pass <code>null</code> in its place.",
        "<hr>",
        "The code editor has the <code>mapStateToProps()</code> and <code>mapDispatchToProps()</code> functions and a new React component called <code>Presentational</code>. Connect this component to Redux with the <code>connect</code> method from the <code>ReactRedux</code> global object, and call it immediately on the <code>Presentational</code> component. Assign the result to a new <code>const</code> called <code>ConnectedComponent</code> that represents the connected component. That's it, now you're connected to Redux! Try changing either of <code>connect</code>'s arguments to <code>null</code> and observe the test results."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message));\n    }\n  }\n};\n\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h3>This is a Presentational Component</h3>\n  }\n};\n\nconst connect = ReactRedux.connect;\n// change code below this line\n",
          "tail":
            "\nconst store = Redux.createStore(\n  (state = '__INITIAL__STATE__', action) => state\n);\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <ReactRedux.Provider store = {store}>\n        <ConnectedComponent/>\n      </ReactRedux.Provider>\n    );\n  }\n};\nReactDOM.render(<AppWrapper />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>Presentational</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), 'The <code>Presentational</code> component should render.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive a prop <code>messages</code> via <code>connect</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const props = mockedComponent.find('Presentational').props(); return props.messages === '__INITIAL__STATE__'; })(), 'The <code>Presentational</code> component should receive a prop <code>messages</code> via <code>connect</code>.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive a prop <code>submitNewMessage</code> via <code>connect</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const props = mockedComponent.find('Presentational').props(); return typeof props.submitNewMessage === 'function'; })(), 'The <code>Presentational</code> component should receive a prop <code>submitNewMessage</code> via <code>connect</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Connect Redux to React",
      "dashedName": "connect-redux-to-react",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036148",
      "description": [
        "Now that you understand how to use <code>connect</code> to connect React to Redux, you can apply what you've learned to your React component that handles messages.",
        "In the last lesson, the component you connected to Redux was named <code>Presentational</code>, and this wasn't arbitrary. This term <i>generally</i> refers to React components that are not directly connected to Redux. They are simply responsible for the presentation of UI and do this as a function of the props they receive. By contrast, container components are connected to Redux. These are typically responsible for dispatching actions to the store and often pass store state to child components as props.",
        "<hr>",
        "The code editor has all the code you've written in this section so far. The only change is that the React component is renamed to <code>Presentational</code>. Create a new component held in a constant called <code>Container</code> that uses <code>connect</code> to connect the <code>Presentational</code> component to Redux. Then, in the <code>AppWrapper</code>, render the React Redux <code>Provider</code> component. Pass <code>Provider</code> the Redux <code>store</code> as a prop and render <code>Container</code> as a child. Once everything is setup, you will see the messages app rendered to the page again."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    const currentMessage = this.state.input;\n    this.setState({\n      input: '',\n      messages: this.state.messages.concat(currentMessage)\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\n// React-Redux:\nconst mapStateToProps = (state) => {\n  return { messages: state }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (newMessage) => {\n       dispatch(addMessage(newMessage))\n    }\n  }\n};\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\n// define the Container component here:\n\n\nclass AppWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // complete the return statement:\n    return (null);\n  }\n};",
          "tail":
            "ReactDOM.render(<AppWrapper />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>AppWrapper</code> should render to the page.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), 'The <code>AppWrapper</code> should render to the page.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), 'The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); return ( PresentationalComponent.find('div').length === 1 && PresentationalComponent.find('h2').length === 1 && PresentationalComponent.find('button').length === 1 && PresentationalComponent.find('ul').length === 1 ); })(), 'The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive <code>messages</code> from the Redux store as a prop.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), 'The <code>Presentational</code> component should receive <code>messages</code> from the Redux store as a prop.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive the <code>submitMessage</code> action creator as a prop.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), 'The <code>Presentational</code> component should receive the <code>submitMessage</code> action creator as a prop.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Connect Redux to the Messages App",
      "dashedName": "connect-redux-to-the-messages-app",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036149",
      "description": [
        "You're almost done! Recall that you wrote all the Redux code so that Redux could control the state management of your React messages app. Now that Redux is connected, you need to extract the state management out of the <code>Presentational</code> component and into Redux. Currently, you have Redux connected, but you are handling the state locally within the <code>Presentational</code> component.",
        "<hr>",
        "In the <code>Presentational</code> component, first, remove the <code>messages</code> property in the local <code>state</code>. These messages will be managed by Redux. Next, modify the <code>submitMessage()</code> method so that it dispatches <code>submitNewMessage()</code> from <code>this.props</code>, and pass in the current message input from local <code>state</code> as an argument. Because you removed <code>messages</code> from local state, remove the <code>messages</code> property from the call to <code>this.setState()</code> here as well. Finally, modify the <code>render()</code> method so that it maps over the messages received from <code>props</code> rather than <code>state</code>.",
        "Once these changes are made, the app will continue to function the same, except Redux manages the state. This example also illustrates how a component may have local <code>state</code>: your component still tracks user input locally in its own <code>state</code>. You can see how Redux provides a useful state management framework on top of React. You achieved the same result using only React's local state at first, and this is usually possible with simple apps. However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\n// Change code below this line\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState({\n      input: '',\n      messages: this.state.messages.concat(this.state.input)\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n// Change code above this line\n\nconst mapStateToProps = (state) => {\n  return {messages: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message))\n    }\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container/>\n      </Provider>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<AppWrapper />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>AppWrapper</code> should render to the page.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), 'The <code>AppWrapper</code> should render to the page.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), 'The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); return ( PresentationalComponent.find('div').length === 1 && PresentationalComponent.find('h2').length === 1 && PresentationalComponent.find('button').length === 1 && PresentationalComponent.find('ul').length === 1 ); })(), 'The <code>Presentational</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> elements.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive <code>messages</code> from the Redux store as a prop.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), 'The <code>Presentational</code> component should receive <code>messages</code> from the Redux store as a prop.');"
        },
        {
          "text":
            "The <code>Presentational</code> component should receive the <code>submitMessage</code> action creator as a prop.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), 'The <code>Presentational</code> component should receive the <code>submitMessage</code> action creator as a prop.');"
        },
        {
          "text":
            "The state of the <code>Presentational</code> component should contain one property, <code>input</code>, which is initialized to an empty string.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalState = mockedComponent.find('Presentational').instance().state; return typeof PresentationalState.input === 'string' && Object.keys(PresentationalState).length === 1; })(), 'The state of the <code>Presentational</code> component should contain one property, <code>input</code>, which is initialized to an empty string.');"
        },
        {
          "text":
            "Typing in the <code>input</code> element should update the state of the <code>Presentational</code> component.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const testValue = '__MOCK__INPUT__'; const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); let initialInput = mockedComponent.find('Presentational').find('input'); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); const updatedInput = updated.find('Presentational').find('input'); assert(initialInput.props().value === '' && updatedInput.props().value === '__MOCK__INPUT__', 'Typing in the <code>input</code> element should update the state of the <code>Presentational</code> component.'); }; "
        },
        {
          "text":
            "Dispatching the <code>submitMessage</code> on the <code>Presentational</code> component should update Redux store and clear the input in local state.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '', 'Dispatching the <code>submitMessage</code> on the <code>Presentational</code> component should update Redux store and clear the input in local state.'); }; "
        },
        {
          "text":
            "The <code>Presentational</code> component should render the <code>messages</code> from the Redux store.",
          "testString":
            "async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '' && afterClick.find('ul').childAt(0).text() === testValue, 'The <code>Presentational</code> component should render the <code>messages</code> from the Redux store.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Extract Local State into Redux",
      "dashedName": "extract-local-state-into-redux",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403614a",
      "description": [
        "Congratulations! You finished the lessons on React and Redux. There's one last item worth pointing out before you move on. Typically, you won't write React apps in a code editor like this. This challenge gives you a glimpse of what the syntax looks like if you're working with npm and a file system on your own machine. The code should look similar, except for the use of <code>import</code> statements (these pull in all of the dependencies that have been provided for you in the challenges). The \"Managing Packages with npm\" section covers npm in more detail.",
        "Finally, writing React and Redux code generally requires some configuration. This can get complicated quickly. If you are interested in experimenting on your own machine, the",
        "<a id='CRA' target ='_blank' href='https://github.com/facebookincubator/create-react-app'>Create React App</a> comes configured and ready to go.",
        "Alternatively, you can enable Babel as a JavaScript Preprocessor in CodePen, add React and ReactDOM as external JavaScript resources, and work there as well.",
        "<hr>",
        "Log the message <code>'Now I know React and Redux!'</code> to the console."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import { Provider, connect } from 'react-redux'\n// import { createStore, combineReducers, applyMiddleware } from 'redux'\n// import thunk from 'redux-thunk'\n\n// import rootReducer from './redux/reducers'\n// import App from './components/App'\n\n// const store = createStore(\n//   rootReducer,\n//   applyMiddleware(thunk)\n// );\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//     <App/>\n//   </Provider>,\n//   document.getElementById('root')\n// );\n\n// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The message <code>Now I know React and Redux!</code> should be logged to the console.",
          "testString":
            "assert(editor.getValue().includes('console.log(\"Now I know React and Redux!\")') || editor.getValue().includes('console.log(\\'Now I know React and Redux!\\')'), 'The message <code>Now I know React and Redux!</code> should be logged to the console.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Moving Forward From Here",
      "dashedName": "moving-forward-from-here",
      "template": "<body><div id='root'></div>${ source || '' }</body>"
    },
    {
      "id": "587d7dbc367417b2b2512bb1",
      "description": [
        "<strong>Intro:</strong> React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.",
        "React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.",
        "For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.",
        "However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.",
        "<hr>",
        "<strong>Instructions:</strong> The current code uses JSX to assign a <code>div</code> element to the constant <code>JSX</code>. Replace the <code>div</code> with an <code>h1</code> element and add the text <code>Hello JSX!</code> inside it."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": "\nconst JSX = <div></div>;\n",
          "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return an <code>h1</code> element.",
          "testString":
            "assert(JSX.type === 'h1', 'The constant <code>JSX</code> should return an <code>h1</code> element.');"
        },
        {
          "text":
            "The <code>h1</code> tag should include the text <code>Hello JSX!</code>",
          "testString":
            "assert(Enzyme.shallow(JSX).contains('Hello JSX!'), 'The <code>h1</code> tag should include the text <code>Hello JSX!</code>');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Simple JSX Element",
      "dashedName": "create-a-simple-jsx-element",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5d",
      "description": [
        "The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well.",
        "One important thing to know about nested JSX is that it must return a single element.",
        "This one parent element would wrap all of the other levels of nested elements.",
        "For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.",
        "Here's an example:",
        "<b>Valid JSX:</b>",
        "<blockquote>&lt;div&gt;<br>  &lt;p&gt;Paragraph One&lt;/p&gt;<br>  &lt;p&gt;Paragraph Two&lt;/p&gt;<br>  &lt;p&gt;Paragraph Three&lt;/p&gt;<br>&lt;/div&gt;</blockquote>",
        "<b>Invalid JSX:</b>",
        "<blockquote>&lt;p&gt;Paragraph One&lt;/p&gt;<br>&lt;p&gt;Paragraph Two&lt;/p&gt;<br>&lt;p&gt;Paragraph Three&lt;/p&gt;<br></blockquote>",
        "<hr>",
        "Define a new constant <code>JSX</code> that renders a <code>div</code> which contains the following elements in order:",
        "An <code>h1</code>, a <code>p</code>, and an unordered list that contains three <code>li</code> items. You can include any text you want within each element.",
        "<strong>Note:</strong>&nbsp;When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. Also notice this challenge uses a <code>div</code> tag to wrap all the child elements within a single parent element. If you remove the <code>div</code>, the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": "// write your code here\n",
          "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return a <code>div</code> element.",
          "testString":
            "assert(JSX.type === 'div', 'The constant <code>JSX</code> should return a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> should contain a <code>p</code> tag as the second element.",
          "testString":
            "assert(JSX.props.children[1].type === 'p', 'The <code>div</code> should contain a <code>p</code> tag as the second element.');"
        },
        {
          "text":
            "The <code>div</code> should contain a <code>ul</code> tag as the third element.",
          "testString":
            "assert(JSX.props.children[2].type === 'ul', 'The <code>div</code> should contain a <code>ul</code> tag as the third element.');"
        },
        {
          "text":
            "The <code>div</code> should contain an <code>h1</code> tag as the first element.",
          "testString":
            "assert(JSX.props.children[0].type === 'h1', 'The <code>div</code> should contain an <code>h1</code> tag as the first element.');"
        },
        {
          "text":
            "The <code>ul</code> should contain three <code>li</code> elements.",
          "testString":
            "assert(JSX.props.children[2].props.children.length === 3, 'The <code>ul</code> should contain three <code>li</code> elements.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Complex JSX Element",
      "dashedName": "create-a-complex-jsx-element",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5e",
      "description": [
        "JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this.",
        "To put comments inside JSX, you use the syntax <code>{/* */}</code> to wrap around the comment text.",
        "<hr>",
        "The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided <code>div</code> element, without modifying the existing <code>h1</code> or <code>p</code> elements."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const JSX = (\n  <div>\n    <h1>This is a block of JSX</h1>\n    <p>Here's a subtitle</p>\n  </div>\n);",
          "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return a <code>div</code> element.",
          "testString":
            "assert(JSX.type === 'div', 'The constant <code>JSX</code> should return a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> should contain an <code>h1</code> tag as the first element.",
          "testString":
            "assert(JSX.props.children[0].type === 'h1', 'The <code>div</code> should contain an <code>h1</code> tag as the first element.');"
        },
        {
          "text":
            "The <code>div</code> should contain a <code>p</code> tag as the second element.",
          "testString":
            "assert(JSX.props.children[1].type === 'p', 'The <code>div</code> should contain a <code>p</code> tag as the second element.');"
        },
        {
          "text": "The <code>JSX</code> should include a comment.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('/*') && getUserInput('index').includes('*/'), 'The <code>JSX</code> should include a comment.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Add Comments in JSX",
      "dashedName": "add-comments-in-jsx",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5f",
      "description": [
        "So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.",
        "ReactDOM offers a simple method to render React elements to the DOM which looks like this: <code>ReactDOM.render(componentToRender, targetNode)</code>, where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.",
        "As you would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how you must declare variables before using them.",
        "<hr>",
        "The code editor has a simple JSX component. Use the <code>ReactDOM.render()</code> method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use <code>document.getElementById()</code> to select the DOM node to render them to. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use. Make sure you don't change the <code>JSX</code> constant."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const JSX = (\n  <div>\n    <h1>Hello World</h1>\n    <p>Lets render this to the DOM</p>\n  </div>\n);\n// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return a <code>div</code> element.",
          "testString":
            "assert(JSX.type === 'div', 'The constant <code>JSX</code> should return a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> should contain an <code>h1</code> tag as the first element.",
          "testString":
            "assert(JSX.props.children[0].type === 'h1', 'The <code>div</code> should contain an <code>h1</code> tag as the first element.');"
        },
        {
          "text":
            "The <code>div</code> should contain a <code>p</code> tag as the second element.",
          "testString":
            "assert(JSX.props.children[1].type === 'p', 'The <code>div</code> should contain a <code>p</code> tag as the second element.');"
        },
        {
          "text":
            "The provided JSX element should render to the DOM node with id <code>challenge-node</code>.",
          "testString":
            "assert(document.getElementById('challenge-node').childNodes[0].innerHTML === '<h1>Hello World</h1><p>Lets render this to the DOM</p>', 'The provided JSX element should render to the DOM node with id <code>challenge-node</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render HTML Elements to the DOM",
      "dashedName": "render-html-elements-to-the-dom",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036160",
      "description": [
        "Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.",
        "So far, it may seem that HTML and JSX are exactly the same.",
        "One key difference in JSX is that you can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.",
        "In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is <code>onClick</code>, instead of <code>onclick</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.",
        "<hr>",
        "Apply a class of <code>myDiv</code> to the <code>div</code> provided in the JSX code."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);",
          "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return a <code>div</code> element.",
          "testString":
            "assert.strictEqual(JSX.type, 'div', 'The constant <code>JSX</code> should return a <code>div</code> element.');"
        },
        {
          "text": "The <code>div</code> has a class of <code>myDiv</code>.",
          "testString":
            "assert.strictEqual(JSX.props.className, 'myDiv', 'The <code>div</code> has a class of <code>myDiv</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Define an HTML Class in JSX",
      "dashedName": "define-an-html-class-in-jsx",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036161",
      "description": [
        "So far, you’ve seen how JSX differs from HTML in a key way with the use of <code>className</code> vs. <code>class</code> for defining HTML classes.",
        "Another important way in which JSX differs from HTML is in the idea of the self-closing tag.",
        "In HTML, almost all tags have both an opening and closing tag: <code>&lt;div&gt;&lt;/div&gt;</code>; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.",
        "For example the line-break tag can be written as <code>&lt;br&gt;</code> or as <code>&lt;br /&gt;</code>, but should never be written as <code>&lt;br&gt;&lt;/br&gt;</code>, since it doesn't contain any content.",
        "In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as <code>&lt;br /&gt;</code> in order to be valid JSX that can be transpiled. A <code>&lt;div&gt;</code>, on the other hand, can be written as <code>&lt;div /&gt;</code> or <code>&lt;div&gt;&lt;/div&gt;</code>. The difference is that in the first syntax version there is no way to include anything in the <code>&lt;div /&gt;</code>. You will see in later challenges that this syntax is useful when rendering React components.",
        "<hr>",
        "Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content - you only need to close tags where they are needed."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const JSX = (\n  <div>\n    {/* remove comment and change code below this line\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n    remove comment and change code above this line */}\n  </div>\n);\n",
          "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The constant <code>JSX</code> should return a <code>div</code> element.",
          "testString":
            "assert.strictEqual(JSX.type, 'div', 'The constant <code>JSX</code> should return a <code>div</code> element.');"
        },
        {
          "text": "The <code>div</code> should contain a <code>br</code> tag.",
          "testString":
            "assert(Enzyme.shallow(JSX).find('br').length === 1, 'The <code>div</code> should contain a <code>br</code> tag.');"
        },
        {
          "text": "The <code>div</code> should contain an <code>hr</code> tag.",
          "testString":
            "assert(Enzyme.shallow(JSX).find('hr').length === 1, 'The <code>div</code> should contain an <code>hr</code> tag.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Learn About SelfClosing JSX Tags",
      "dashedName": "learn-about-selfclosing-jsx-tags",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036162",
      "description": [
        "Components are the core of React. Everything in React is a component and here you will learn how to create one.",
        "There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a <em>stateless functional component</em>. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We'll cover the second way to create a React component in the next challenge.)",
        "To create a component with a function, you simply write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires your function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:",
        "<blockquote>// After being transpiled, the &lt;div&gt; will have a CSS class of 'customClass'<br>const DemoComponent = function() {<br>  return (<br>    &lt;div className='customClass' /&gt;<br>  );<br>};</blockquote>",
        "Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.",
        "<hr>",
        "The code editor has a function called <code>MyComponent</code>. Complete this function so it returns a single <code>div</code> element which contains some string of text.",
        "<strong>Note:</strong>&nbsp;The text is considered a child of the <code>div</code> element, so you will not be able to use a self-closing tag."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const MyComponent = function() {\n  // change code below this line\n\n\n\n  // change code above this line\n}",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "<code>MyComponent</code> should return JSX.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.length === 1; })(), '<code>MyComponent</code> should return JSX.');"
        },
        {
          "text":
            "<code>MyComponent</code> should return a <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.children().type() === 'div' })(), '<code>MyComponent</code> should return a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> element should contain a string of text.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').text() !== ''; })(), 'The <code>div</code> element should contain a string of text.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Stateless Functional Component",
      "dashedName": "create-a-stateless-functional-component",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036163",
      "description": [
        "The other way to define a React component is with the ES6 <code>class</code> syntax. In the following example, <code>Kitten</code> extends <code>React.Component</code>:",
        "<blockquote>class Kitten extends React.Component {<br>  constructor(props) {<br>    super(props);<br>  }<br><br>  render() {<br>    return (<br>      &lt;h1&gt;Hi&lt;/h1&gt;<br>    );<br>  }<br>}</blockquote>",
        "This creates an ES6 class <code>Kitten</code> which extends the <code>React.Component</code> class. So the <code>Kitten</code> class now has access to many useful React features, such as local state and lifecycle hooks. Don't worry if you aren't familiar with these terms yet, they will be covered in greater detail in later challenges.",
        "Also notice the <code>Kitten</code> class has a <code>constructor</code> defined within it that calls <code>super()</code>. It uses <code>super()</code> to call the constructor of the parent class, in this case <code>React.Component</code>. The constructor is a special method used during the initialization of objects that are created with the <code>class</code> keyword. It is best practice to call a component's <code>constructor</code> with <code>super</code>, and pass <code>props</code> to both. This makes sure the component is initialized properly. For now, know that it is standard for this code to be included. Soon you will see other uses for the constructor as well as <code>props</code>.",
        "<hr>",
        "<code>MyComponent</code> is defined in the code editor using class syntax. Finish writing the <code>render</code> method so it returns a <code>div</code> element that contains an <code>h1</code> with the text <code>Hello React!</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // change code below this line\n\n\n\n    // change code above this line\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The React component should return a <code>div</code> element.",
          "testString":
            "assert(Enzyme.shallow(React.createElement(MyComponent)).type() === 'div', 'The React component should return a <code>div</code> element.');"
        },
        {
          "text":
            "The returned <code>div</code> should render an <code>h1</code> header within it.",
          "testString":
            "assert(/<div><h1>.*<\\/h1><\\/div>/.test(Enzyme.shallow(React.createElement(MyComponent)).html()), 'The returned <code>div</code> should render an <code>h1</code> header within it.');"
        },
        {
          "text":
            "The <code>h1</code> header should contain the string <code>Hello React!</code>.",
          "testString":
            "assert(Enzyme.shallow(React.createElement(MyComponent)).html() === '<div><h1>Hello React!</h1></div>', 'The <code>h1</code> header should contain the string <code>Hello React!</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a React Component",
      "dashedName": "create-a-react-component",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036164",
      "description": [
        "Now we will look at how we can compose multiple React components together. Imagine you are building an App and have created three components, a <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.",
        "To compose these components together, you could create an <code>App</code> <i>parent</i> component which renders each of these three components as <i>children</i>. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the <code>render</code> method you could write:",
        "<blockquote>return (<br> &lt;App&gt;<br>  &lt;Navbar /&gt;<br>  &lt;Dashboard /&gt;<br>  &lt;Footer /&gt;<br> &lt;/App&gt;<br>)</blockquote>",
        "When React encounters a custom HTML tag that references another component (a component name wrapped in <code>&lt; /&gt;</code> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the <code>App</code> component and the <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.",
        "<hr>",
        "In the code editor, there is a simple functional component called <code>ChildComponent</code> and a React component called <code>ParentComponent</code>. Compose the two together by rendering the <code>ChildComponent</code> within the <code>ParentComponent</code>. Make sure to close the <code>ChildComponent</code> tag with a forward slash.",
        "<strong>Note:</strong>&nbsp;<code>ChildComponent</code> is defined with an ES6 arrow function because this is a very common practice when using React. However, know that this is just a function. If you aren't familiar with the arrow function syntax, please refer to the JavaScript section."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* change code below this line */ }\n\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<ParentComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The React component should return a single <code>div</code> element.",
          "testString":
            "assert((function() { var shallowRender = Enzyme.shallow(React.createElement(ParentComponent)); return shallowRender.type() === 'div'; })(), 'The React component should return a single <code>div</code> element.');"
        },
        {
          "text": "The component should return two nested elements.",
          "testString":
            "assert((function() { var shallowRender = Enzyme.shallow(React.createElement(ParentComponent)); return shallowRender.children().length === 2; })(), 'The component should return two nested elements.');"
        },
        {
          "text":
            "The component should return the ChildComponent as its second child.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ParentComponent)); return mockedComponent.find('ParentComponent').find('ChildComponent').length === 1; })(), 'The component should return the ChildComponent as its second child.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Component with Composition",
      "dashedName": "create-a-component-with-composition",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036165",
      "description": [
        "The last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React.",
        "Component composition is one of React's powerful features. When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects.",
        "<hr>",
        "There are two functional components defined in the code editor, called <code>TypesOfFruit</code> and <code>Fruits</code>. Take the <code>TypesOfFruit</code> component and compose it, or <em>nest</em> it, within the <code>Fruits</code> component. Then take the <code>Fruits</code> component and nest it within the <code>TypesOfFood</code> component. The result should be a child component, nested within a parent component, which is nested within a parent component of its own!"
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* change code below this line */ }\n\n      { /* change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<TypesOfFood />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>TypesOfFood</code> component should return a single <code>div</code> element.",
          "testString":
            "assert(Enzyme.shallow(React.createElement(TypesOfFood)).type() === 'div', 'The <code>TypesOfFood</code> component should return a single <code>div</code> element.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.",
          "testString":
            "assert(Enzyme.shallow(React.createElement(TypesOfFood)).props().children[1].type.name === 'Fruits', 'The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.');"
        },
        {
          "text":
            "The <code>Fruits</code> component should return the <code>TypesOfFruit</code> component.",
          "testString":
            "assert(Enzyme.mount(React.createElement(TypesOfFood)).find('h2').html() === '<h2>Fruits:</h2>', 'The <code>Fruits</code> component should return the <code>TypesOfFruit</code> component.');"
        },
        {
          "text":
            "The <code>TypesOfFruit</code> component should return the <code>h2</code> and <code>ul</code> elements.",
          "testString":
            "assert(Enzyme.mount(React.createElement(TypesOfFood)).find('ul').text() === 'ApplesBlueberriesStrawberriesBananas', 'The <code>TypesOfFruit</code> component should return the <code>h2</code> and <code>ul</code> elements.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use React to Render Nested Components",
      "dashedName": "use-react-to-render-nested-components",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036166",
      "description": [
        "As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components.",
        "<hr>",
        "In the code editor, the <code>TypesOfFood</code> component is already rendering a component called <code>Vegetables</code>. Also, there is the <code>Fruits</code> component from the last challenge.",
        "Nest two components inside of <code>Fruits</code> &mdash; first <code>NonCitrus</code>, and then <code>Citrus</code>. Both of these components are provided for you in the background. Next, nest the <code>Fruits</code> class component into the <code>TypesOfFood</code> component, below the <code>h1</code> header and above <code>Vegetables</code>. The result should be a series of nested components, which uses two different component types."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head":
            "class NonCitrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Citrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Vegetables extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Vegetables:</h2>\n        <ul>\n          <li>Brussel Sprouts</li>\n          <li>Broccoli</li>\n          <li>Squash</li>\n        </ul>\n      </div>\n    );\n     }\n};",
          "contents":
            "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* change code below this line */ }\n\n         { /* change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<TypesOfFood />, document.getElementById('root'))"
        }
      },
      "tests": [
        {
          "text":
            "The <code>TypesOfFood</code> component should return a single <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().type() === 'div'; })(), 'The <code>TypesOfFood</code> component should return a single <code>div</code> element.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(1).name() === 'Fruits'; })(), 'The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.');"
        },
        {
          "text":
            "The <code>Fruits</code> component should return the <code>NonCitrus</code> component and the <code>Citrus</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return (mockedComponent.find('Fruits').children().find('NonCitrus').length === 1 && mockedComponent.find('Fruits').children().find('Citrus').length === 1); })(), 'The <code>Fruits</code> component should return the <code>NonCitrus</code> component and the <code>Citrus</code> component.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should return the <code>Vegetables</code> component below the <code>Fruits</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(2).name() === 'Vegetables'; })(), 'The <code>TypesOfFood</code> component should return the <code>Vegetables</code> component below the <code>Fruits</code> component.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Compose React Components",
      "dashedName": "compose-react-components",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036167",
      "description": [
        "You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. The process for rendering React components will look very similar. The past few challenges focused on components and composition, so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API.",
        "Here's a refresher on the syntax: <code>ReactDOM.render(componentToRender, targetNode)</code>. The first argument is the React component that you want to render. The second argument is the DOM node that you want to render that component within.",
        "React components are passed into <code>ReactDOM.render()</code> a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example <code>ReactDOM.render(&lt;ComponentToRender /&gt;, targetNode)</code>. You use this syntax for both ES6 class components and functional components.",
        "<hr>",
        "Both the <code>Fruits</code> and <code>Vegetables</code> components are defined for you behind the scenes. Render both components as children of the <code>TypesOfFood</code> component, then render <code>TypesOfFood</code> to the DOM. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head":
            "\nconst Fruits = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n    </div>\n  );\n};\nconst Vegetables = () => {\n  return (\n    <div>\n      <h2>Vegetables:</h2>\n      <ul>\n        <li>Brussel Sprouts</li>\n        <li>Broccoli</li>\n        <li>Squash</li>\n      </ul>\n    </div>\n  );\n};\n",
          "contents":
            "\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* change code below this line */}\n\n        {/* change code above this line */}\n      </div>\n    );\n  }\n};\n\n// change code below this line\n",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>TypesOfFood</code> component should return a single <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().type() === 'div'; })(), 'The <code>TypesOfFood</code> component should return a single <code>div</code> element.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should render the <code>Fruits</code> component after the <code>h1</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(1).name() === 'Fruits'; })(), 'The <code>TypesOfFood</code> component should render the <code>Fruits</code> component after the <code>h1</code> element.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should render the <code>Vegetables</code> component after <code>Fruits</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood)); return mockedComponent.children().childAt(2).name() === 'Vegetables'; })(), 'The <code>TypesOfFood</code> component should render the <code>Vegetables</code> component after <code>Fruits</code>.');"
        },
        {
          "text":
            "The <code>TypesOfFood</code> component should render to the DOM within the <code>div</code> with the id <code>challenge-node</code>.",
          "testString":
            "assert((function() { const html = document.getElementById('challenge-node').childNodes[0].innerHTML; return (html === '<h1>Types of Food:</h1><div><h2>Fruits:</h2><h4>Non-Citrus:</h4><ul><li>Apples</li><li>Blueberries</li><li>Strawberries</li><li>Bananas</li></ul><h4>Citrus:</h4><ul><li>Lemon</li><li>Lime</li><li>Orange</li><li>Grapefruit</li></ul></div><div><h2>Vegetables:</h2><ul><li>Brussel Sprouts</li><li>Broccoli</li><li>Squash</li></ul></div>'); })(), 'The <code>TypesOfFood</code> component should render to the DOM within the <code>div</code> with the id <code>challenge-node</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render a Class Component to the DOM",
      "dashedName": "render-a-class-component-to-the-dom",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036168",
      "description": [
        "Now that you've learned the basics of JSX and React components, it's time to write a component on your own. React components are the core building blocks of React applications so it's important to become very familiar with writing them. Remember, a typical React component is an ES6 <code>class</code> which extends <code>React.Component</code>. It has a render method that returns HTML (from JSX) or <code>null</code>. This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects.",
        "<hr>",
        "Define a class <code>MyComponent</code> that extends <code>React.Component</code>. Its render method should return a <code>div</code> that contains an <code>h1</code> tag with the text: <code>My First React Component!</code> in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too.",
        "Render this component to the DOM using <code>ReactDOM.render()</code>. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": "// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "There should be a React component called <code>MyComponent</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').replace(/\\s/g, '').includes('classMyComponentextendsReact.Component{'), 'There should be a React component called <code>MyComponent</code>.');"
        },
        {
          "text":
            "<code>MyComponent</code> should contain an <code>h1</code> tag with text <code>My First React Component!</code> Case and punctuation matter.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('h1').text() === 'My First React Component!'; })(), '<code>MyComponent</code> should contain an <code>h1</code> tag with text <code>My First React Component!</code> Case and punctuation matter.');"
        },
        {
          "text": "<code>MyComponent</code> should render to the DOM.",
          "testString":
            "assert(document.getElementById('challenge-node').childNodes.length === 1, '<code>MyComponent</code> should render to the DOM.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Write a React Component from Scratch",
      "dashedName": "write-a-react-component-from-scratch",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036169",
      "description": [
        "The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it's time to look at another feature very common in React: <b>props</b>. In React, you can pass props, or properties, to child components. Say you have an <code>App</code> component which renders a child component called <code>Welcome</code> that is a stateless functional component. You can pass <code>Welcome</code> a <code>user</code> property by writing:",
        "<blockquote>&lt;App&gt;<br>  &lt;Welcome user='Mark' /&gt;<br>&lt;/App&gt;</blockquote>",
        "You use <strong>custom HTML attributes</strong> that React provides support for to pass the property <code>user</code> to the component <code>Welcome</code>. Since <code>Welcome</code> is a stateless functional component, it has access to this value like so:",
        "<blockquote>const Welcome = (props) => &lt;h1&gt;Hello, {props.user}!&lt;/h1&gt;</blockquote>",
        "It is standard to call this value <code>props</code> and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different.",
        "<hr>",
        "There is a <code>Calendar</code> and <code>CurrentDate</code> component in the code editor. When rendering <code>CurrentDate</code> from the <code>Calendar</code> component, pass in a property of <code>date</code> assigned to the current date from JavaScript's <code>Date</code> object. Then access this <code>prop</code> in the <code>CurrentDate</code> component, showing its value within the <code>p</code> tags. Note that for <code>prop</code> values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance <code>date={Date()}</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nconst CurrentDate = (props) => {\n  return (\n    <div>\n      { /* change code below this line */ }\n      <p>The current date is: </p>\n      { /* change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* change code below this line */ }\n        <CurrentDate />\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<Calendar />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>Calendar</code> component should return a single <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().type() === 'div'; })(), 'The <code>Calendar</code> component should return a single <code>div</code> element.');"
        },
        {
          "text":
            "The second child of the <code>Calendar</code> component should be the <code>CurrentDate</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().childAt(1).name() === 'CurrentDate'; })(), 'The second child of the <code>Calendar</code> component should be the <code>CurrentDate</code> component.');"
        },
        {
          "text":
            "The <code>CurrentDate</code> component should have a prop called <code>date</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.children().childAt(1).props().date })(), 'The <code>CurrentDate</code> component should have a prop called <code>date</code>.');"
        },
        {
          "text":
            "The <code>date</code> prop of the <code>CurrentDate</code> should contain a string of text.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); const prop = mockedComponent.children().childAt(1).props().date; return( typeof prop === 'string' && prop.length > 0 ); })(), 'The <code>date</code> prop of the <code>CurrentDate</code> should contain a string of text.');"
        },
        {
          "text":
            "The <code>CurrentDate</code> component should render the value from the <code>date</code> prop in the <code>p</code> tag.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Calendar)); return mockedComponent.find('p').html().includes(Date().substr(3)); })(), 'The <code>CurrentDate</code> component should render the value from the <code>date</code> prop in the <code>p</code> tag.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Pass Props to a Stateless Functional Component",
      "dashedName": "pass-props-to-a-stateless-functional-component",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616a",
      "description": [
        "The last challenge demonstrated how to pass information from a parent component to a child component as <code>props</code> or properties. This challenge looks at how arrays can be passed as <code>props</code>.  To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.",
        "<blockquote>&lt;ParentComponent&gt;<br>  &lt;ChildComponent colors={[\"green\", \"blue\", \"red\"]} /&gt;<br>&lt;/ParentComponent&gt;</blockquote>",
        "The child component then has access to the array property <code>colors</code>.  Array methods such as <code>join()</code> can be used when accessing the property.",
        "<code>const ChildComponent = (props) => &lt;p&gt{props.colors.join(', ')}&lt;/p&gt</code>",
        "This will join all <code>colors</code> array items into a comma separated string and produce:",
        " <code> &lt;p&gt;green, blue, red&lt;/p&gt;</code>",
        "Later, we will learn about other common methods to render arrays of data in React.",
        "<hr>",
        "There are <code>List</code> and <code>ToDo</code> components in the code editor. When rendering each <code>List</code> from the <code>ToDo</code> component, pass in a <code>tasks</code> property assigned to an array of to-do tasks, for example <code>[\"walk dog\", \"workout\"]</code>. Then access this <code>tasks</code> array in the <code>List</code> component, showing its value within the <code>p</code> element.  Use <code>join(\", \")</code> to display the <code>props.tasks</code>array in the <code>p</code> element as a comma separated list. Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const List= (props) => {\n  { /* change code below this line */ }\n  return <p>{}</p>\n  { /* change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail": "ReactDOM.render(<ToDo />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>ToDo</code> component should return a single outer <code>div</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().type() === 'div'; })(), 'The <code>ToDo</code> component should return a single outer <code>div</code>.');"
        },
        {
          "text":
            "The third child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(2).name() === 'List'; })(), 'The third child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.');"
        },
        {
          "text":
            "The fifth child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(4).name() === 'List'; })(), 'The fifth child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.');"
        },
        {
          "text":
            "Both instances of the <code>List</code> component should have a property called <code>tasks</code> and <code>tasks</code> should be of type array.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return Array.isArray(mockedComponent.find('List').get(0).props.tasks) && Array.isArray(mockedComponent.find('List').get(1).props.tasks); })(), 'Both instances of the <code>List</code> component should have a property called <code>tasks</code> and <code>tasks</code> should be of type array.');"
        },
        {
          "text":
            "The first <code>List</code> component representing the tasks for today should have 2 or more items.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(0).props.tasks.length >= 2; })(), 'The first <code>List</code> component representing the tasks for today should have 2 or more items.');"
        },
        {
          "text":
            "The second <code>List</code> component representing the tasks for tomorrow should have 3 or more items.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(1).props.tasks.length >= 3; })(), 'The second <code>List</code> component representing the tasks for tomorrow should have 3 or more items.');"
        },
        {
          "text":
            "The <code>List</code> component should render the value from the <code>tasks</code> prop in the <code>p</code> tag.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('p').get(0).props.children === mockedComponent.find('List').get(0).props.tasks.join(', ') && mockedComponent.find('p').get(1).props.children === mockedComponent.find('List').get(1).props.tasks.join(', '); })(), 'The <code>List</code> component should render the value from the <code>tasks</code> prop in the <code>p</code> tag.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Pass an Array as Props",
      "dashedName": "pass-an-array-as-props",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616b",
      "description": [
        "React also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare <code>MyComponent.defaultProps = { location: 'San Francisco' }</code>, you have defined a location prop that's set to the string <code>San Francisco</code>, unless you specify otherwise. React assigns default props if props are undefined, but if you pass <code>null</code> as the value for a prop, it will remain <code>null</code>.",
        "<hr>",
        "The code editor shows a <code>ShoppingCart</code> component. Define default props on this component which specify a prop <code>items</code> with a value of <code>0</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n// change code below this line\n",
          "tail":
            "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>ShoppingCart</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })(), 'The <code>ShoppingCart</code> component should render.');"
        },
        {
          "text":
            "The <code>ShoppingCart</code> component should have a default prop of <code>{ items: 0 }</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); mockedComponent.setProps({items: undefined}); return mockedComponent.find('ShoppingCart').props().items === 0; })(), 'The <code>ShoppingCart</code> component should have a default prop of <code>{ items: 0 }</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Default Props",
      "dashedName": "use-default-props",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616c",
      "description": [
        "The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.",
        "<hr>",
        "The <code>ShoppingCart</code> component now renders a child component <code>Items</code>. This <code>Items</code> component has a default prop <code>quantity</code> set to the integer <code>0</code>. Override the default prop by passing in a value of <code>10</code> for <code>quantity</code>.",
        "<strong>Note:</strong>&nbsp;Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for <code>quantity</code> is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, <code>{100}</code>. This syntax tells JSX to interpret the value within the braces directly as JavaScript."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* change code below this line */ }\n    return <Items />\n    { /* change code above this line */ }\n  }\n};",
          "tail":
            "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The component <code>ShoppingCart</code> should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })(), 'The component <code>ShoppingCart</code> should render.');"
        },
        {
          "text": "The component <code>Items</code> should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })(), 'The component <code>Items</code> should render.');"
        },
        {
          "text":
            "The <code>Items</code> component should have a prop of <code>{ quantity: 10 }</code> passed from the <code>ShoppingCart</code> component.",
          "testString":
            "getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').props().quantity == 10 && getUserInput('index').replace(/ /g,'').includes('<Itemsquantity={10}/>'); })(), 'The <code>Items</code> component should have a prop of <code>{ quantity: 10 }</code> passed from the <code>ShoppingCart</code> component.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Override Default Props",
      "dashedName": "override-default-props",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616d",
      "description": [
        "React provides useful type-checking features to verify that components receive props of the correct type. For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop. You can set <code>propTypes</code> on your component to require the data to be of type <code>array</code>. This will throw a useful warning when the data is of any other type.",
        "It's considered a best practice to set <code>propTypes</code> when you know the type of a prop ahead of time. You can define a <code>propTypes</code> property for a component in the same way you defined <code>defaultProps</code>. Doing this will check that props of a given key are present with a given type. Here's an example to require the type <code>function</code> for a prop called <code>handleClick</code>:",
        "<code>MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }</code>",
        "In the example above, the <code>PropTypes.func</code> part checks that <code>handleClick</code> is a function. Adding <code>isRequired</code> tells React that <code>handleClick</code> is a required property for that component. You will see a warning if that prop isn't provided. Also notice that <code>func</code> represents <code>function</code>. Among the seven JavaScript primitive types, <code>function</code> and <code>boolean</code> (written as <code>bool</code>) are the only two that use unusual spelling. In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the documentation for all of the options.",
        "<strong>Note:</strong> As of React v15.5.0, <code>PropTypes</code> is imported independently from React, like this:",
        "<code>import React, { PropTypes } from 'react';</code>",
        "<hr>",
        "Define <code>propTypes</code> for the <code>Items</code> component to require <code>quantity</code> as a prop and verify that it is of type <code>number</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head": "var PropTypes = {\n  number: { isRequired: true }\n};\n",
          "contents":
            "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// change code below this line\n\n// change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};",
          "tail":
            "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))"
        }
      },
      "tests": [
        {
          "text": "The <code>ShoppingCart</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })(), 'The <code>ShoppingCart</code> component should render.');"
        },
        {
          "text": "The <code>Items</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })(), 'The <code>Items</code> component should render.');"
        },
        {
          "text":
            "The <code>Items</code> component should include a <code>propTypes</code> check that requires <code>quantity</code> to be a <code>number</code>.",
          "testString":
            "getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/ /g, ''); return noWhiteSpace.includes('quantity:PropTypes.number.isRequired') && noWhiteSpace.includes('Items.propTypes='); })(), 'The <code>Items</code> component should include a <code>propTypes</code> check that requires <code>quantity</code> to be a <code>number</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use PropTypes to Define the Props You Expect",
      "dashedName": "use-proptypes-to-define-the-props-you-expect",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616e",
      "description": [
        "The last several challenges covered the basic ways to pass props to child components. But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.",
        "Anytime you refer to a class component within itself, you use the <code>this</code> keyword. To access props within a class component, you preface the code that you use to access it with <code>this</code>. For example, if an ES6 class component has a prop called <code>data</code>, you write <code>{this.props.data}</code> in JSX.",
        "<hr>",
        "Render an instance of the <code>ReturnTempPassword</code> component in the parent component <code>ResetPassword</code>. Here, give <code>ReturnTempPassword</code> a prop of <code>tempPassword</code> and assign it a value of a string that is at least 8 characters long. Within the child, <code>ReturnTempPassword</code>, access the <code>tempPassword</code> prop within the <code>strong</code> tags to make sure the user sees the temporary password."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class ReturnTempPassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* change code below this line */ }\n            <p>Your temporary password is: <strong></strong></p>\n            { /* change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          <h2>Reset Password</h2>\n          <h3>We've generated a new temporary password for you.</h3>\n          <h3>Please reset this password from your account settings ASAP.</h3>\n          { /* change code below this line */ }\n\n          { /* change code above this line */ }\n        </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<ResetPassword />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>ResetPassword</code> component should return a single <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().type() === 'div'; })(), 'The <code>ResetPassword</code> component should return a single <code>div</code> element.');"
        },
        {
          "text":
            "The fourth child of <code>ResetPassword</code> should be the <code>ReturnTempPassword</code> component.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().childAt(3).name() === 'ReturnTempPassword'; })(), 'The fourth child of <code>ResetPassword</code> should be the <code>ReturnTempPassword</code> component.');"
        },
        {
          "text":
            "The <code>ReturnTempPassword</code> component should have a prop called <code>tempPassword</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), 'The <code>ReturnTempPassword</code> component should have a prop called <code>tempPassword</code>.');"
        },
        {
          "text":
            "The <code>tempPassword</code> prop of <code>ReturnTempPassword</code> should be equal to a string of at least <code>8</code> characters.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); const temp = mockedComponent.find('ReturnTempPassword').props().tempPassword; return typeof temp === 'string' && temp.length >= 8; })(), 'The <code>tempPassword</code> prop of <code>ReturnTempPassword</code> should be equal to a string of at least <code>8</code> characters.');"
        },
        {
          "text":
            "The <code>ReturnTempPassword</code> component should display the password you create as the <code>tempPassword</code> prop within <code>strong</code> tags.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('strong').text() === mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), 'The <code>ReturnTempPassword</code> component should display the password you create as the <code>tempPassword</code> prop within <code>strong</code> tags.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Access Props Using thisprops",
      "dashedName": "access-props-using-thisprops",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403616f",
      "description": [
        "Except for the last challenge, you've been passing props to stateless functional components. These components act like pure functions. They accept props as input and return the same view every time they are passed the same props. You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here's a review of the terminology for components.",
        "A <em>stateless functional component</em> is any function you write which accepts props and returns JSX. A <em>stateless component</em>, on the other hand, is a class that extends <code>React.Component</code>, but does not use internal state (covered in the next challenge). Finally, a <em>stateful component</em> is any component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.",
        "A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.",
        "<hr>",
        "The code editor has a <code>CampSite</code> component that renders a <code>Camper</code> component as a child. Define the <code>Camper</code> component and assign it default props of <code>{ name: 'CamperBot' }</code>. Inside the <code>Camper</code> component, render any code that you want, but make sure to have one <code>p</code> element that includes only the <code>name</code> value that is passed in as a <code>prop</code>. Finally, define <code>propTypes</code> on the <code>Camper</code> component to require <code>name</code> to be provided as a prop and verify that it is of type <code>string</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head": "var PropTypes = {\n   string: { isRequired: true }\n};",
          "contents":
            "class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// change code below this line\n",
          "tail":
            "ReactDOM.render(<CampSite />, document.getElementById('root'))"
        }
      },
      "tests": [
        {
          "text": "The <code>CampSite</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('CampSite').length === 1; })(), 'The <code>CampSite</code> component should render.');"
        },
        {
          "text": "The <code>Camper</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('Camper').length === 1; })(), 'The <code>Camper</code> component should render.');"
        },
        {
          "text":
            "The <code>Camper</code> component should include default props which assign the string <code>CamperBot</code> to the key <code>name</code>.",
          "testString":
            "getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\s/g, ''); const verify1 = 'Camper.defaultProps={name:\\'CamperBot\\'}'; const verify2 = 'Camper.defaultProps={name:\"CamperBot\"}'; return (noWhiteSpace.includes(verify1) || noWhiteSpace.includes(verify2)); })(), 'The <code>Camper</code> component should include default props which assign the string <code>CamperBot</code> to the key <code>name</code>.');"
        },
        {
          "text":
            "The <code>Camper</code> component should include prop types which require the <code>name</code> prop to be of type <code>string</code>.",
          "testString":
            "getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); const noWhiteSpace = getUserInput('index').replace(/\\s/g, ''); const verifyDefaultProps = 'Camper.propTypes={name:PropTypes.string.isRequired}'; return noWhiteSpace.includes(verifyDefaultProps); })(), 'The <code>Camper</code> component should include prop types which require the <code>name</code> prop to be of type <code>string</code>.');"
        },
        {
          "text":
            "The <code>Camper</code> component should contain a <code>p</code> element with only the text from the <code>name</code> prop.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('p').text() === mockedComponent.find('Camper').props().name; })(), 'The <code>Camper</code> component should contain a <code>p</code> element with only the text from the <code>name</code> prop.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Review Using Props with Stateless Functional Components",
      "dashedName": "review-using-props-with-stateless-functional-components",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036170",
      "description": [
        "One of the most important topics in React is <code>state</code>. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.",
        "You create state in a React component by declaring a <code>state</code> property on the component class in its <code>constructor</code>. This initializes the component with <code>state</code> when it is created. The <code>state</code> property must be set to a JavaScript <code>object</code>. Declaring it looks like this:",
        "<blockquote>this.state = {<br>  // describe your state here<br>}</code>",
        "You have access to the <code>state</code> object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. The <code>state</code> object can be as complex or as simple as you need it to be. Note that you must create a class component by extending <code>React.Component</code> in order to create <code>state</code> like this.",
        "<hr>",
        "There is a component in the code editor that is trying to render a <code>name</code> property from its <code>state</code>. However, there is no <code>state</code> defined. Initialize the component with <code>state</code> in the <code>constructor</code> and assign your name to a property of <code>name</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nclass StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // initialize state here\n\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<StatefulComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "<code>StatefulComponent</code> should exist and render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(StatefulComponent)); return mockedComponent.find('StatefulComponent').length === 1; })(), '<code>StatefulComponent</code> should exist and render.');"
        },
        {
          "text":
            "<code>StatefulComponent</code> should render a <code>div</code> and an <code>h1</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(StatefulComponent)); return mockedComponent.find('div').length === 1 && mockedComponent.find('h1').length === 1; })(), '<code>StatefulComponent</code> should render a <code>div</code> and an <code>h1</code> element.');"
        },
        {
          "text":
            "The state of <code>StatefulComponent</code> should be initialized with a property <code>name</code> set to a string.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(StatefulComponent)); const initialState = mockedComponent.state(); return ( typeof initialState === 'object' && typeof initialState.name === 'string'); })(), 'The state of <code>StatefulComponent</code> should be initialized with a property <code>name</code> set to a string.');"
        },
        {
          "text":
            "The property <code>name</code> in the state of <code>StatefulComponent</code> should render in the <code>h1</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(StatefulComponent)); const initialState = mockedComponent.state(); return mockedComponent.find('h1').text() === initialState.name; })(), 'The property <code>name</code> in the state of <code>StatefulComponent</code> should render in the <code>h1</code> element.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Stateful Component",
      "dashedName": "create-a-stateful-component",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036171",
      "description": [
        "Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in <code>state</code> in its <code>render()</code> method. You can access the data with <code>this.state</code>.",
        "If you want to access a state value within the <code>return</code> of the render method, you have to enclose the value in curly braces.",
        "<code>State</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.",
        "Note that if you make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.",
        "<hr>",
        "In the code editor, <code>MyComponent</code> is already stateful. Define an <code>h1</code> tag in the component's render method which renders the value of <code>name</code> from the component's state.",
        "<strong>Note:</strong>&nbsp;The <code>h1</code> should only render the value from <code>state</code> and nothing else. In JSX, any code you write with curly braces <code>{ }</code> will be treated as JavaScript. So to access the value from <code>state</code> just enclose the reference in curly braces."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).state('name') === 'freeCodeCamp', '<code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.');"
        },
        {
          "text":
            "<code>MyComponent</code> should render an <code>h1</code> header enclosed in a single <code>div</code>.",
          "testString":
            "assert(/<div><h1>.*<\\/h1><\\/div>/.test(Enzyme.mount(React.createElement(MyComponent)).html()), '<code>MyComponent</code> should render an <code>h1</code> header enclosed in a single <code>div</code>.');"
        },
        {
          "text":
            "The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'TestName' });   return waitForIt(() => mockedComponent.html()) }; const firstValue = await first(); assert(firstValue === '<div><h1>TestName</h1></div>', 'The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.');};"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render State in the User Interface",
      "dashedName": "render-state-in-the-user-interface",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036172",
      "description": [
        "There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, you can write JavaScript directly. For example, you could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the <code>return</code> statement.",
        "<hr>",
        "In the <code>MyComponent</code> render method, define a <code>const</code> called <code>name</code> and set it equal to the name value in the component's <code>state</code>. Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces.",
        "Next, in the return statement, render this value in an <code>h1</code> tag using the variable <code>name</code>. Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // change code below this line\n\n    // change code above this line\n    return (\n      <div>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).state('name') === 'freeCodeCamp', '<code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.');"
        },
        {
          "text":
            "<code>MyComponent</code> should render an <code>h1</code> header enclosed in a single <code>div</code>.",
          "testString":
            "assert(/<div><h1>.*<\\/h1><\\/div>/.test(Enzyme.mount(React.createElement(MyComponent)).html()), '<code>MyComponent</code> should render an <code>h1</code> header enclosed in a single <code>div</code>.');"
        },
        {
          "text":
            "The rendered <code>h1</code> tag should include a reference to <code>{name}</code>.",
          "testString":
            "getUserInput => assert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/.test(getUserInput('index')), 'The rendered <code>h1</code> tag should include a reference to <code>{name}</code>.');"
        },
        {
          "text":
            "The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'TestName' });   return waitForIt(() => mockedComponent.html()) }; const firstValue = await first(); assert(firstValue === '<div><h1>TestName</h1></div>', 'The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.'); };"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render State in the User Interface Another Way",
      "dashedName": "render-state-in-the-user-interface-another-way",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036173",
      "description": [
        "The previous challenges covered component <code>state</code> and how to initialize state in the <code>constructor</code>. There is also a way to change the component's <code>state</code>. React provides a method for updating component <code>state</code> called <code>setState</code>. You call the <code>setState</code> method within your component class like so: <code>this.setState()</code>, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:",
        "<blockquote>this.setState({<br> username: 'Lewis'<br>});</blockquote>",
        "React expects you to never modify <code>state</code> directly, instead always use <code>this.setState()</code> when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the <code>setState</code> method can be asynchronous. There is an alternative syntax for the <code>setState</code> method which provides a way around this problem. This is rarely needed but it's good to keep it in mind! Please consult the <a target=\"_blank\" href=\"https://facebook.github.io/react/docs/state-and-lifecycle.html\">React documentation</a> for further details.",
        "<hr>",
        "There is a <code>button</code> element in the code editor which has an <code>onClick()</code> handler. This handler is triggered when the <code>button</code> receives a click event in the browser, and runs the <code>handleClick</code> method defined on <code>MyComponent</code>. Within the <code>handleClick</code> method, update the component <code>state</code> using <code>this.setState()</code>. Set the <code>name</code> property in <code>state</code> to equal the string <code>React Rocks!</code>.",
        "Click the button and watch the rendered state update. Don't worry if you don't fully understand how the click handler code works at this point. It's covered in upcoming challenges."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // change code below this line\n\n    // change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The state of <code>MyComponent</code> should initialize with the key value pair <code>{ name: Initial State }</code>.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).state('name') === 'Initial State', 'The state of <code>MyComponent</code> should initialize with the key value pair <code>{ name: Initial State }</code>.');"
        },
        {
          "text":
            "<code>MyComponent</code> should render an <code>h1</code> header.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).find('h1').length === 1, '<code>MyComponent</code> should render an <code>h1</code> header.');"
        },
        {
          "text":
            "The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'TestName' }); return waitForIt(() => mockedComponent.html()); }; const firstValue = await first(); assert(/<h1>TestName<\\/h1>/.test(firstValue), 'The rendered <code>h1</code> header should contain text rendered from the component&apos;s state.'); };"
        },
        {
          "text":
            "Calling the <code>handleClick</code> method on <code>MyComponent</code> should set the name property in state to equal <code>React Rocks!</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'Before' }); return waitForIt(() => mockedComponent.state('name')); }; const second = () => { mockedComponent.instance().handleClick(); return waitForIt(() => mockedComponent.state('name')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 'Before' && secondValue === 'React Rocks!', 'Calling the <code>handleClick</code> method on <code>MyComponent</code> should set the name property in state to equal <code>React Rocks!</code>.'); };"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Set State with thissetState",
      "dashedName": "set-state-with-thissetstate",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036174",
      "description": [
        "In addition to setting and updating <code>state</code>, you can also define methods for your component class. A class method typically needs to use the <code>this</code> keyword so it can access properties on the class (such as <code>state</code> and <code>props</code>) inside the scope of the method. There are a few ways to allow your class methods to access <code>this</code>.",
        "One common way is to explicitly bind <code>this</code> in the constructor so <code>this</code> becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used <code>this.handleClick = this.handleClick.bind(this)</code> for its <code>handleClick</code> method in the constructor. Then, when you call a function like <code>this.setState()</code> within your class method, <code>this</code> refers to the class and will not be <code>undefined</code>.",
        "<strong>Note:</strong>&nbsp;The <code>this</code> keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of <code>this</code> so please refer to other lessons if the above is confusing!",
        "<hr>",
        "The code editor has a component with a <code>state</code> that keeps track of an item count. It also has a method which allows you to increment this item count. However, the method doesn't work because it's using the <code>this</code> keyword that is undefined. Fix it by explicitly binding <code>this</code> to the <code>addItem()</code> method in the component's constructor.",
        "Next, add a click handler to the <code>button</code> element in the render method. It should trigger the <code>addItem()</code> method when the button receives a click event. Remember that the method you pass to the <code>onClick</code> handler needs curly braces because it should be interpreted directly as JavaScript.",
        "Once you complete the above steps you should be able to click the button and see the item count increment in the HTML."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemCount: 0\n    };\n    // change code below this line\n\n    // change code above this line\n  }\n  addItem() {\n    this.setState({\n      itemCount: this.state.itemCount + 1\n    });\n  }\n  render() {\n    return (\n      <div>\n        { /* change code below this line */ }\n        <button>Click Me</button>\n        { /* change code above this line */ }\n        <h1>Current Item Count: {this.state.itemCount}</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should return a <code>div</code> element which wraps two elements, a button and an <code>h1</code> element, in that order.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).find('div').length === 1 && Enzyme.mount(React.createElement(MyComponent)).find('div').childAt(0).type() === 'button' && Enzyme.mount(React.createElement(MyComponent)).find('div').childAt(1).type() === 'h1', '<code>MyComponent</code> should return a <code>div</code> element which wraps two elements, a button and an <code>h1</code> element, in that order.');"
        },
        {
          "text":
            "The state of <code>MyComponent</code> should initialize with the key value pair <code>{ itemCount: 0 }</code>.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyComponent)).state('itemCount') === 0, 'The state of <code>MyComponent</code> should initialize with the key value pair <code>{ itemCount: 0 }</code>.');"
        },
        {
          "text":
            "Clicking the <code>button</code> element should run the <code>addItem</code> method and increment the state <code>itemCount</code> by <code>1</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ itemCount: 0 }); return waitForIt(() => mockedComponent.state('itemCount')); }; const second = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('itemCount')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 0 && secondValue === 1, 'Clicking the <code>button</code> element should run the <code>addItem</code> method and increment the state <code>itemCount</code> by <code>1</code>.'); };"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Bind this to a Class Method",
      "dashedName": "bind-this-to-a-class-method",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036176",
      "description": [
        "You can use <code>state</code> in React applications in more complex ways than what you've seen so far. One example is to monitor the status of a value, then render the UI conditionally based on this value. There are several different ways to accomplish this, and the code editor shows one method.",
        "<hr>",
        "<code>MyComponent</code> has a <code>visibility</code> property which is initialized to <code>false</code>. The render method returns one view if the value of <code>visibility</code> is true, and a different view if it is false.",
        "Currently, there is no way of updating the <code>visibility</code> property in the component's <code>state</code>. The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called <code>toggleVisibility()</code>. Define this method so the <code>state</code> of <code>visibility</code> toggles to the opposite value when the method is called. If <code>visibility</code> is <code>false</code>, the method sets it to <code>true</code>, and vice versa.",
        "Finally, click the button to see the conditional rendering of the component based on its <code>state</code>.",
        "<strong>Hint:</strong>&nbsp;Don't forget to bind the <code>this</code> keyword to the method in the constructor!"
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    // change code below this line\n\n    // change code above this line\n  }\n  // change code below this line\n\n  // change code above this line\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should return a <code>div</code> element which contains a <code>button</code>.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).find('div').find('button').length, 1, '<code>MyComponent</code> should return a <code>div</code> element which contains a <code>button</code>.');"
        },
        {
          "text":
            "The state of <code>MyComponent</code> should initialize with a <code>visibility</code> property set to <code>false</code>.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).state('visibility'), false, 'The state of <code>MyComponent</code> should initialize with a <code>visibility</code> property set to <code>false</code>.');"
        },
        {
          "text":
            "Clicking the button element should toggle the <code>visibility</code> property in state between <code>true</code> and <code>false</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ visibility: false }); return waitForIt(() => mockedComponent.state('visibility')); }; const second = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const third = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(!firstValue && secondValue && !thirdValue, 'Clicking the button element should toggle the <code>visibility</code> property in state between <code>true</code> and <code>false</code>.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use State to Toggle an Element",
      "dashedName": "use-state-to-toggle-an-element",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036177",
      "description": [
        "You can design a more complex stateful component by combining the concepts covered so far. These include initializing <code>state</code>, writing methods that set <code>state</code>, and assigning click handlers to trigger these methods.",
        "<hr>",
        "The <code>Counter</code> component keeps track of a <code>count</code> value in <code>state</code>. There are two buttons which call methods <code>increment()</code> and <code>decrement()</code>. Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a <code>reset()</code> method so when the reset button is clicked, the count is set to 0.",
        "<strong>Note:</strong>&nbsp;Make sure you don't modify the <code>classNames</code> of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // change code below this line\n\n    // change code above this line\n  }\n  // change code below this line\n\n  // change code above this line\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<Counter />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>Counter</code> should return a <code>div</code> element which contains three buttons with text content in this order <code>Increment!</code>, <code>Decrement!</code>, <code>Reset</code>.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(Counter)); return (mockedComponent.find('.inc').text() === 'Increment!' && mockedComponent.find('.dec').text() === 'Decrement!' && mockedComponent.find('.reset').text() === 'Reset'); })(), '<code>Counter</code> should return a <code>div</code> element which contains three buttons with text content in this order <code>Increment!</code>, <code>Decrement!</code>, <code>Reset</code>.');"
        },
        {
          "text":
            "The state of <code>Counter</code> should initialize with a <code>count</code> property set to <code>0</code>.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(Counter)).state('count'), 0, 'The state of <code>Counter</code> should initialize with a <code>count</code> property set to <code>0</code>.');"
        },
        {
          "text":
            "Clicking the increment button should increment the count by <code>1</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Counter)); const first = () => { mockedComponent.setState({ count: 0 }); return waitForIt(() => mockedComponent.state('count')); }; const second = () => { mockedComponent.find('.inc').simulate('click'); return waitForIt(() => mockedComponent.state('count')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 0 && secondValue === 1, 'Clicking the increment button should increment the count by <code>1</code>.'); }; "
        },
        {
          "text":
            "Clicking the decrement button should decrement the count by <code>1</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Counter)); const first = () => { mockedComponent.setState({ count: 0 }); return waitForIt(() => mockedComponent.state('count')); }; const second = () => { mockedComponent.find('.dec').simulate('click'); return waitForIt(() => mockedComponent.state('count')); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === 0 && secondValue === -1, 'Clicking the decrement button should decrement the count by <code>1</code>.'); }; "
        },
        {
          "text":
            "Clicking the reset button should reset the count to <code>0</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Counter)); const init = () => { mockedComponent.setState({ count: 0 }); return waitForIt(() => mockedComponent.state('count')); }; const increment = () => { mockedComponent.find('.inc').simulate('click'); mockedComponent.find('.inc').simulate('click'); return waitForIt(() => mockedComponent.state('count')); }; const decrement = () => { mockedComponent.find('.dec').simulate('click'); return waitForIt(() => mockedComponent.state('count')); }; const reset = () => { mockedComponent.find('.reset').simulate('click'); return waitForIt(() => mockedComponent.state('count')); }; const firstValue = await init(); const secondValue = await increment(); const thirdValue = await decrement(); const fourthValue = await reset(); assert(firstValue === 0 && secondValue === 2 && thirdValue === 1 && fourthValue === 0, 'Clicking the reset button should reset the count to <code>0</code>.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Write a Simple Counter",
      "dashedName": "write-a-simple-counter",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036178",
      "description": [
        "Your application may have more complex interactions between <code>state</code> and the rendered UI. For example, form control elements for text input, such as <code>input</code> and <code>textarea</code>, maintain their own state in the DOM as the user types. With React, you can move this mutatable state into a React component's <code>state</code>. The user's input becomes part of the application <code>state</code>, so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form.",
        "<hr>",
        "The code editor has the skeleton of a component called <code>ControlledInput</code> to create a controlled <code>input</code> element. The component's <code>state</code> is already initialized with an <code>input</code> property that holds an empty string. This value represents the text a user types into the <code>input</code> field.",
        "First, create a method called <code>handleChange()</code> that has a parameter called <code>event</code>. When the method is called, it receives an <code>event</code> object that contains a string of text from the <code>input</code> element. You can access this string with <code>event.target.value</code> inside the method. Update the <code>input</code> property of the component's <code>state</code> with this new string.",
        "In the render method, create the <code>input</code> element above the <code>h4</code> tag. Add a <code>value</code> attribute which is equal to the <code>input</code> property of the component's <code>state</code>. Then add an <code>onChange()</code> event handler set to the <code>handleChange()</code> method.",
        "When you type in the input box, that text is processed by the <code>handleChange()</code> method, set as the <code>input</code> property in the local <code>state</code>, and rendered as the value in the <code>input</code> box on the page. The component <code>state</code> is the single source of truth regarding the input data.",
        "Last but not least, don't forget to add the necessary bindings in the constructor."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    // change code below this line\n\n    // change code above this line\n  }\n  // change code below this line\n\n  // change code above this line\n  render() {\n    return (\n      <div>\n        { /* change code below this line */}\n\n        { /* change code above this line */}\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<ControlledInput />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>ControlledInput</code> should return a <code>div</code> element which contains an <code>input</code> and a <code>p</code> tag.",
          "testString":
            "assert(Enzyme.mount(React.createElement(ControlledInput)).find('div').children().find('input').length === 1 && Enzyme.mount(React.createElement(ControlledInput)).find('div').children().find('p').length === 1, '<code>ControlledInput</code> should return a <code>div</code> element which contains an <code>input</code> and a <code>p</code> tag.');"
        },
        {
          "text":
            "The state of <code>ControlledInput</code> should initialize with an <code>input</code> property set to an empty string.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(ControlledInput)).state('input'), '', 'The state of <code>ControlledInput</code> should initialize with an <code>input</code> property set to an empty string.');"
        },
        {
          "text":
            "Typing in the input element should update the state and the value of the input, and the <code>p</code> element should render this state as you type.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(ControlledInput)); const _1 = () => { mockedComponent.setState({ input: '' }); return waitForIt(() => mockedComponent.state('input'))}; const _2 = () => { mockedComponent.find('input').simulate('change', { target: { value: 'TestInput' }}); return waitForIt(() => ({ state: mockedComponent.state('input'), text: mockedComponent.find('p').text(), inputVal: mockedComponent.find('input').props().value }))}; const before = await _1(); const after = await _2(); assert(before === '' && after.state === 'TestInput' && after.text === 'TestInput' && after.inputVal === 'TestInput', 'Typing in the input element should update the state and the value of the input, and the <code>p</code> element should render this state as you type.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Controlled Input",
      "dashedName": "create-a-controlled-input",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036179",
      "description": [
        "The last challenge showed that React can control the internal state for certain elements like <code>input</code> and <code>textarea</code>, which makes them controlled components. This applies to other form elements as well, including the regular HTML <code>form</code> element.",
        "<hr>",
        "The <code>MyForm</code> component is set up with an empty <code>form</code> with a submit handler. The submit handler will be called when the form is submitted.",
        "We've added a button which submits the form. You can see it has the <code>type</code> set to <code>submit</code> indicating it is the button controlling the form. Add the <code>input</code> element in the <code>form</code> and set its <code>value</code> and <code>onChange()</code> attributes like the last challenge. You should then complete the <code>handleSubmit</code> method so that it sets the component state property <code>submit</code> to the current input value in the local <code>state</code>.",
        "<strong>Note:</strong>&nbsp; You also must call <code>event.preventDefault()</code> in the submit handler, to prevent the default form submit behavior which will refresh the web page.",
        "Finally, create an <code>h1</code> tag after the <code>form</code> which renders the <code>submit</code> value from the component's <code>state</code>. You can then type in the form and click the button (or press enter), and you should see your input rendered to the page."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    // change code below this line\n\n    // change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          { /* change code below this line */ }\n\n          { /* change code above this line */ }\n          <button type='submit'>Submit!</button>\n        </form>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyForm />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyForm</code> should return a <code>div</code> element which contains a <code>form</code> and an <code>h1</code> tag. The form should include an <code>input</code> and a <code>button</code>.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyForm)); return (mockedComponent.find('div').children().find('form').length === 1 && mockedComponent.find('div').children().find('h1').length === 1 && mockedComponent.find('form').children().find('input').length === 1 && mockedComponent.find('form').children().find('button').length === 1) })(), '<code>MyForm</code> should return a <code>div</code> element which contains a <code>form</code> and an <code>h1</code> tag. The form should include an <code>input</code> and a <code>button</code>.');"
        },
        {
          "text":
            "The state of <code>MyForm</code> should initialize with <code>input</code> and <code>submit</code> properties, both set to empty strings.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MyForm)).state('input') === '' && Enzyme.mount(React.createElement(MyForm)).state('submit') === '', 'The state of <code>MyForm</code> should initialize with <code>input</code> and <code>submit</code> properties, both set to empty strings.');"
        },
        {
          "text":
            "Typing in the <code>input</code> element should update the <code>input</code> property of the component&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () => { mockedComponent.setState({ input: '' }); return waitForIt(() => mockedComponent.state('input'))}; const _2 = () => { mockedComponent.find('input').simulate('change', { target: { value: 'TestInput' }}); return waitForIt(() => ({ state: mockedComponent.state('input'), inputVal: mockedComponent.find('input').props().value }))}; const before = await _1(); const after = await _2(); assert(before === '' && after.state === 'TestInput' && after.inputVal === 'TestInput', 'Typing in the <code>input</code> element should update the <code>input</code> property of the component&apos;s state.'); }; "
        },
        {
          "text":
            "Submitting the form should run <code>handleSubmit</code> which should set the <code>submit</code> property in state equal to the current input.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () => { mockedComponent.setState({ input: '' }); mockedComponent.setState({submit: ''}); mockedComponent.find('input').simulate('change', {target: {value: 'SubmitInput'}}); return waitForIt(() => mockedComponent.state('submit'))}; const _2 = () => { mockedComponent.find('form').simulate('submit'); return waitForIt(() => mockedComponent.state('submit'))}; const before = await _1(); const after = await _2(); assert(before === '' && after === 'SubmitInput', 'Submitting the form should run <code>handleSubmit</code> which should set the <code>submit</code> property in state equal to the current input.'); };"
        },
        {
          "text":
            "The <code>h1</code> header should render the value of the <code>submit</code> field from the component&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyForm)); const _1 = () => { mockedComponent.setState({ input: '' }); mockedComponent.setState({submit: ''}); mockedComponent.find('input').simulate('change', {target: {value: 'TestInput'}}); return waitForIt(() => mockedComponent.find('h1').text())}; const _2 = () => { mockedComponent.find('form').simulate('submit'); return waitForIt(() => mockedComponent.find('h1').text())}; const before = await _1(); const after = await _2(); assert(before === '' && after === 'TestInput', 'The <code>h1</code> header should render the value of the <code>submit</code> field from the component&apos;s state.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Controlled Form",
      "dashedName": "create-a-controlled-form",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617a",
      "description": [
        "You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. You may be wondering where those props come from. A common pattern is to have a stateful component containing the <code>state</code> important to your app, that then renders child components. You want these components to have access to some pieces of that <code>state</code>, which are passed in as props.",
        "For example, maybe you have an <code>App</code> component that renders a <code>Navbar</code>, among other components. In your <code>App</code>, you have <code>state</code> that contains a lot of user information, but the <code>Navbar</code> only needs access to the user's username so it can display it. You pass that piece of <code>state</code> to the <code>Navbar</code> component as a prop.",
        "This pattern illustrates some important paradigms in React. The first is <em>unidirectional data flow</em>. State flows in one direction down the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage.",
        "<hr>",
        "The <code>MyApp</code> component is stateful and renders a <code>Navbar</code> component as a child. Pass the <code>name</code> property in its <code>state</code> down to the child component, then show the <code>name</code> in the <code>h1</code> tag that's part of the <code>Navbar</code> render method."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         <Navbar /* your code here */ />\n       </div>\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      <h1>Hello, my name is: /* your code here */ </h1>\n    </div>\n    );\n  }\n};",
          "tail": "ReactDOM.render(<MyApp />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>MyApp</code> component should render with a <code>Navbar</code> component inside.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('MyApp').length === 1 && mockedComponent.find('Navbar').length === 1; })(), 'The <code>MyApp</code> component should render with a <code>Navbar</code> component inside.');"
        },
        {
          "text":
            "The <code>Navbar</code> component should receive the <code>MyApp</code> state property <code>name</code> as props.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const setState = () => { mockedComponent.setState({name: 'TestName'}); return waitForIt(() => mockedComponent.find('Navbar').props() )}; const navProps = await setState(); assert(navProps.name === 'TestName', 'The <code>Navbar</code> component should receive the <code>MyApp</code> state property <code>name</code> as props.'); }; "
        },
        {
          "text":
            "The <code>h1</code> element in <code>Navbar</code> should render the <code>name</code> prop.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const navH1Before = mockedComponent.find('Navbar').find('h1').text(); const setState = () => { mockedComponent.setState({name: 'TestName'}); return waitForIt(() => mockedComponent.find('Navbar').find('h1').text() )}; const navH1After = await setState(); assert(new RegExp('TestName').test(navH1After) && navH1After !== navH1Before, 'The <code>h1</code> element in <code>Navbar</code> should render the <code>name</code> prop.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Pass State as Props to Child Components",
      "dashedName": "pass-state-as-props-to-child-components",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617b",
      "description": [
        "You can pass <code>state</code> as props to child components, but you're not limited to passing data. You can also pass handler functions or any method that's defined on a React component to a child component. This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. It's assigned a name and you have access to that method name under <code>this.props</code> in the child component.",
        "<hr>",
        "There are three components outlined in the code editor. The <code>MyApp</code> component is the parent that will render the <code>GetInput</code> and <code>RenderInput</code> child components. Add the <code>GetInput</code> component to the render method in <code>MyApp</code>, then pass it a prop called <code>input</code> assigned to <code>inputValue</code> from <code>MyApp</code>&apos;s <code>state</code>. Also create a prop called <code>handleChange</code> and pass the input handler <code>handleChange</code> to it.",
        "Next, add <code>RenderInput</code> to the render method in <code>MyApp</code>, then create a prop called <code>input</code> and pass the <code>inputValue</code> from <code>state</code> to it. Once you are finished you will be able to type in the <code>input</code> field in the <code>GetInput</code> component, which then calls the handler method in its parent via props. This updates the input in the <code>state</code> of the parent, which is passed as props to both children. Observe how the data flows between the components and how the single source of truth remains the <code>state</code> of the parent component. Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};",
          "tail": "ReactDOM.render(<MyApp />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The <code>MyApp</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('MyApp').length === 1; })(), 'The <code>MyApp</code> component should render.');"
        },
        {
          "text": "The <code>GetInput</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('GetInput').length === 1; })(), 'The <code>GetInput</code> component should render.');"
        },
        {
          "text": "The <code>RenderInput</code> component should render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyApp)); return mockedComponent.find('RenderInput').length === 1; })(), 'The <code>RenderInput</code> component should render.');"
        },
        {
          "text":
            "The <code>GetInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props and contain an <code>input</code> element which modifies <code>MyApp</code> state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const state_1 = () => { mockedComponent.setState({inputValue: ''}); return waitForIt(() => mockedComponent.state() )}; const state_2 = () => { mockedComponent.find('input').simulate('change', {target: {value: 'TestInput'}}); return waitForIt(() => mockedComponent.state() )}; const updated_1 = await state_1(); const updated_2 = await state_2(); assert(updated_1.inputValue === '' && updated_2.inputValue === 'TestInput', 'The <code>GetInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props and contain an <code>input</code> element which modifies <code>MyApp</code> state.'); }; "
        },
        {
          "text":
            "The <code>RenderInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyApp)); const state_1 = () => { mockedComponent.setState({inputValue: 'TestName'}); return waitForIt(() => mockedComponent )}; const updated_1 = await state_1(); assert(updated_1.find('p').text().includes('TestName'), 'The <code>RenderInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Pass a Callback as Props",
      "dashedName": "pass-a-callback-as-props",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617c",
      "description": [
        "React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods:",
        "<code>componentWillMount()</code>",
        "<code>componentDidMount()</code>",
        "<code>componentWillReceiveProps()</code>",
        "<code>shouldComponentUpdate()</code>",
        "<code>componentWillUpdate()</code>",
        "<code>componentDidUpdate()</code>",
        "<code>componentWillUnmount()</code>",
        "The next several lessons will cover some of the basic use cases for these lifecycle methods.",
        "<hr>",
        "The <code>componentWillMount()</code> method is called before the <code>render()</code> method when a component is being mounted to the DOM. Log something to the console within <code>componentWillMount()</code> - you may want to have your browser console open to see the output."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // change code below this line\n\n    // change code above this line\n  }\n  render() {\n    return <div />\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should render a <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').length === 1; })(), '<code>MyComponent</code> should render a <code>div</code> element.');"
        },
        {
          "text":
            "<code>console.log</code> should be called in <code>componentWillMount</code>.",
          "testString":
            "assert((function() { const lifecycle = React.createElement(MyComponent).type.prototype.componentWillMount.toString().replace(/ /g,''); return lifecycle.includes('console.log('); })(), '<code>console.log</code> should be called in <code>componentWillMount</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use the Lifecycle Method componentWillMount",
      "dashedName": "use-the-lifecycle-method-componentwillmount",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617d",
      "description": [
        "Most web developers, at some point, need to call an API endpoint to retrieve data. If you're working with React, it's important to know where to perform this action.",
        "The best practice with React is to place API calls or any calls to your server in the lifecycle method <code>componentDidMount()</code>. This method is called after a component is mounted to the DOM. Any calls to <code>setState()</code> here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.",
        "<hr>",
        "There is a mock API call in <code>componentDidMount()</code>. It sets state after 2.5 seconds to simulate calling a server to retrieve data. This example requests the current total active users for a site. In the render method, render the value of <code>activeUsers</code> in the <code>h1</code>. Watch what happens in the preview, and feel free to change the timeout to see the different effects."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout( () => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Active Users: { /* change code here */ }</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return (mockedComponent.find('div').length === 1 && mockedComponent.find('h1').length === 1); })(), '<code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.');"
        },
        {
          "text":
            "Component state should be updated with a timeout function in <code>componentDidMount</code>.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return new RegExp('setTimeout(.|\\n)+setState(.|\\n)+activeUsers').test(String(mockedComponent.instance().componentDidMount)); })(), 'Component state should be updated with a timeout function in <code>componentDidMount</code>.');"
        },
        {
          "text":
            "The <code>h1</code> tag should render the <code>activeUsers</code> value from <code>MyComponent</code>&apos;s state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ activeUsers: 1237 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ activeUsers: 1000 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); assert(new RegExp('1237').test(firstValue) && new RegExp('1000').test(secondValue), 'The <code>h1</code> tag should render the <code>activeUsers</code> value from <code>MyComponent</code>&apos;s state.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use the Lifecycle Method componentDidMount",
      "dashedName": "use-the-lifecycle-method-componentdidmount",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617e",
      "description": [
        "The <code>componentDidMount()</code> method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.",
        "You've already been using some of these synthetic event handlers such as <code>onClick()</code>. React's synthetic event system is great to use for most interactions you'll manage on DOM elements. However, if you want to attach an event handler to the document or window objects, you have to do this directly.",
        "<hr>",
        "Attach an event listener in the <code>componentDidMount()</code> method for <code>keydown</code> events and have these events trigger the callback <code>handleKeyPress()</code>. You can use <code>document.addEventListener()</code> which takes the event (in quotes) as the first argument and the callback as the second argument.",
        "Then, in <code>componentWillUnmount()</code>, remove this same event listener. You can pass the same arguments to <code>document.removeEventListener()</code>. It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed. Removing event listeners is an example of one such clean up action."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // change code below this line\n  componentDidMount() {\n\n  }\n  componentWillUnmount() {\n\n  }\n  // change code above this line\n  handleEnter() {\n    this.setState({\n      message: this.state.message + 'You pressed the enter key! '\n    });\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('div').children().find('h1').length === 1; })(), '<code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.');"
        },
        {
          "text":
            "A keydown listener should be attached to the document in <code>componentDidMount</code>.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const didMountString = mockedComponent.instance().componentDidMount.toString(); return new RegExp('document\\.addEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this\\.handleKeyPress').test(didMountString); })(), 'A keydown listener should be attached to the document in <code>componentDidMount</code>.');"
        },
        {
          "text":
            "The keydown listener should be removed from the document in <code>componentWillUnmount</code>.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const willUnmountString = mockedComponent.instance().componentWillUnmount.toString(); return new RegExp('document\\.removeEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this\\.handleKeyPress').test(willUnmountString); })(), 'The keydown listener should be removed from the document in <code>componentWillUnmount</code>.');"
        },
        {
          "text":
            "Once the component has mounted, pressing <code>enter</code> should update its state and the rendered <code>h1</code> tag.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const beforeState = mockedComponent.state('message'); const beforeText = mockedComponent.find('h1').text(); const pressEnterKey = () => { mockedComponent.instance().handleKeyPress({ keyCode: 13 }); return waitForIt(() => { mockedComponent.update(); return { state: mockedComponent.state('message'), text: mockedComponent.find('h1').text()}; });}; const afterKeyPress = await pressEnterKey(); assert(beforeState !== afterKeyPress.state && beforeText !== afterKeyPress.text, 'Once the component has mounted, pressing <code>enter</code> should update its state and the rendered <code>h1</code> tag.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Add Event Listeners",
      "dashedName": "add-event-listeners",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403617f",
      "description": [
        "Another lifecycle method is <code>componentWillReceiveProps()</code> which is called whenever a component is receiving new props. This method receives the new props as an argument, which is usually written as <code>nextProps</code>. You can use this argument and compare with <code>this.props</code> and perform actions before the component updates. For example, you may call <code>setState()</code> locally before the update is processed.",
        "Another method is <code>componentDidUpdate()</code>, and is called immediately after a component re-renders. Note that rendering and mounting are considered different things in the component lifecycle. When a page first loads, all components are mounted and this is where methods like <code>componentWillMount()</code> and <code>componentDidMount()</code> are called. After this, as state changes, components re-render themselves. The next challenge covers this in more detail.",
        "<hr>",
        "The child component <code>Dialog</code> receives <code>message</code> props from its parent, the <code>Controller</code> component. Write the <code>componentWillReceiveProps()</code> method in the <code>Dialog</code> component and have it log <code>this.props</code> and <code>nextProps</code> to the console. You'll need to pass <code>nextProps</code> as an argument to this method and although it's possible to name it anything, name it <code>nextProps</code> here.",
        "Next, add <code>componentDidUpdate()</code> in the <code>Dialog</code> component, and log a statement that says the component has updated. This method works similar to <code>componentWillUpdate()</code>, which is provided for you. Now click the button to change the message and watch your browser console. The order of the console statements show the order the methods are called.",
        "<strong>Note:</strong>&nbsp;You'll need to write the lifecycle methods as normal functions and not as arrow functions to pass the tests (there is also no advantage to writing lifecycle methods as arrow functions)."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class Dialog extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillUpdate() {\n    console.log('Component is about to update...');\n  }\n  // change code below this line\n\n  // change code above this line\n  render() {\n    return <h1>{this.props.message}</h1>\n  }\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: 'First Message'\n    };\n    this.changeMessage = this.changeMessage.bind(this);\n  }\n  changeMessage() {\n    this.setState({\n      message: 'Second Message'\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.changeMessage}>Update</button>\n        <Dialog message={this.state.message}/>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<Controller />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>Controller</code> component should render the <code>Dialog</code> component as a child.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Controller)); return mockedComponent.find('Controller').length === 1 && mockedComponent.find('Dialog').length === 1; })(), 'The <code>Controller</code> component should render the <code>Dialog</code> component as a child.');"
        },
        {
          "text":
            "The <code>componentWillReceiveProps</code> method in the <code>Dialog</code> component should log <code>this.props</code> to the console.",
          "testString":
            "assert((function() { const lifecycleChild = React.createElement(Dialog).type.prototype.componentWillReceiveProps.toString().replace(/ /g,''); return lifecycleChild.includes('console.log') && lifecycleChild.includes('this.props') })(), 'The <code>componentWillReceiveProps</code> method in the <code>Dialog</code> component should log <code>this.props</code> to the console.');"
        },
        {
          "text":
            "The <code>componentWillReceiveProps</code> method in the <code>Dialog</code> component should log <code>nextProps</code> to the console.",
          "testString":
            "assert((function() { const lifecycleChild = React.createElement(Dialog).type.prototype.componentWillReceiveProps.toString().replace(/ /g,''); const nextPropsAsParameterTest = /componentWillReceiveProps(| *?= *?)(\\(|)nextProps(\\)|)( *?=> *?{| *?{|{)/; const nextPropsInConsoleLogTest = /console\\.log\\(.*?nextProps\\b.*?\\)/; return ( lifecycleChild.includes('console.log') && nextPropsInConsoleLogTest.test(lifecycleChild) && nextPropsAsParameterTest.test(lifecycleChild) ); })(), 'The <code>componentWillReceiveProps</code> method in the <code>Dialog</code> component should log <code>nextProps</code> to the console.');"
        },
        {
          "text":
            "The <code>Dialog</code> component should call the <code>componentDidUpdate</code> method and log a message to the console.",
          "testString":
            "assert((function() { const lifecycleChild = React.createElement(Dialog).type.prototype.componentDidUpdate.toString().replace(/ /g,''); return lifecycleChild.length !== 'undefined' && lifecycleChild.includes('console.log'); })(), 'The <code>Dialog</code> component should call the <code>componentDidUpdate</code> method and log a message to the console.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Manage Updates with Lifecycle Methods",
      "dashedName": "manage-updates-with-lifecycle-methods",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036180",
      "description": [
        "So far, if any component receives new <code>state</code> or new <code>props</code>, it re-renders itself and all its children. This is usually okay. But React provides a lifecycle method you can call when child components receive new <code>state</code> or <code>props</code>, and declare specifically if the components should update or not. The method is <code>shouldComponentUpdate()</code>, and it takes <code>nextProps</code> and <code>nextState</code> as parameters.",
        "This method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new <code>props</code>, even if the <code>props</code> haven't changed. You can use <code>shouldComponentUpdate()</code> to prevent this by comparing the <code>props</code>. The method must return a <code>boolean</code> value that tells React whether or not to update the component. You can compare the current props (<code>this.props</code>) to the next props (<code>nextProps</code>) to determine if you need to update or not, and return <code>true</code> or <code>false</code> accordingly.",
        "<hr>",
        "The <code>shouldComponentUpdate()</code> method is added in a component called <code>OnlyEvens</code>. Currently, this method returns <code>true</code> so <code>OnlyEvens</code> re-renders every time it receives new <code>props</code>. Modify the method so <code>OnlyEvens</code> updates only if the <code>value</code> of its new props is even. Click the <code>Add</code> button and watch the order of events in your browser's console as the other lifecycle hooks are triggered."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n     // change code below this line\n    return true;\n     // change code above this line\n  }\n  componentWillReceiveProps(nextProps) {\n    console.log('Receiving new props...');\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>\n  }\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value}/>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<Controller />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>Controller</code> component should render the <code>OnlyEvens</code> component as a child.",
          "testString":
            "assert((() => { const mockedComponent = Enzyme.mount(React.createElement(Controller)); return mockedComponent.find('Controller').length === 1 && mockedComponent.find('OnlyEvens').length === 1; })(), 'The <code>Controller</code> component should render the <code>OnlyEvens</code> component as a child.');"
        },
        {
          "text":
            "The <code>shouldComponentUpdate</code> method should be defined on the <code>OnlyEvens</code> component.",
          "testString":
            "assert((() => { const child = React.createElement(OnlyEvens).type.prototype.shouldComponentUpdate.toString().replace(/s/g,''); return child !== 'undefined'; })(), 'The <code>shouldComponentUpdate</code> method should be defined on the <code>OnlyEvens</code> component.');"
        },
        {
          "text":
            "The <code>OnlyEvens</code> component should return an <code>h1</code> tag which renders the value of <code>this.props.value</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 1000 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const second = () => { mockedComponent.setState({ value: 10 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>', 'The <code>OnlyEvens</code> component should return an <code>h1</code> tag which renders the value of <code>this.props.value</code>.'); }; "
        },
        {
          "text":
            "<code>OnlyEvens</code> should re-render only when <code>nextProps.value</code> is even.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 8 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ value: 7 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const third = () => { mockedComponent.setState({ value: 42 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(firstValue === '8' && secondValue === '8' && thirdValue === '42', '<code>OnlyEvens</code> should re-render only when <code>nextProps.value</code> is even.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Optimize ReRenders with shouldComponentUpdate",
      "dashedName": "optimize-rerenders-with-shouldcomponentupdate",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036181",
      "description": [
        "There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those JSX elements you create in React. You likely know that it won't be exactly the same as working with HTML because of <a target=\"_blank\" href=\"define-an-html-class-in-jsx\"> the way you apply classes to JSX elements</a>.",
        "If you import styles from a stylesheet, it isn't much different at all. You apply a class to your JSX element using the <code>className</code> attribute, and apply styles to the class in your stylesheet. Another option is to apply <strong><em>inline</em></strong> styles, which are very common in ReactJS development.",
        "You apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:",
        "<code>&lt;div style=\"color: yellow; font-size: 16px\"&gt;Mellow Yellow&lt;/div&gt;</code>",
        "JSX elements use the <code>style</code> attribute, but because of the way JSX is transpiled, you can't set the value to a <code>string</code>. Instead, you set it equal to a JavaScript <code>object</code>. Here's an example:",
        "<code>&lt;div style={{color: \"yellow\", fontSize: 16}}&gt;Mellow Yellow&lt;/div&gt;</code>",
        "Notice how we camelCase the \"fontSize\" property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML.",
        "<hr>",
        "Add a <code>style</code> attribute to the <code>div</code> in the code editor to give the text a color of red and font size of 72px.",
        "Note that you can optionally set the font size to be a number, omitting the units \"px\", or write it as \"72px\"."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nclass Colorful extends React.Component {\n  render() {\n    return (\n      <div>Big Red</div>\n    );\n  }\n};\n",
          "tail":
            "ReactDOM.render(<Colorful />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "The component should render a <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return mockedComponent.children().type() === 'div'; })(), 'The component should render a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> element should have a color of <code>red</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return mockedComponent.children().props().style.color === 'red'; })(), 'The <code>div</code> element should have a color of <code>red</code>.');"
        },
        {
          "text":
            "The <code>div</code> element should have a font size of <code>72px</code>.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(Colorful)); return (mockedComponent.children().props().style.fontSize === 72 || mockedComponent.children().props().style.fontSize === '72' || mockedComponent.children().props().style.fontSize === '72px'); })(), 'The <code>div</code> element should have a font size of <code>72px</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Introducing Inline Styles",
      "dashedName": "introducing-inline-styles",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036182",
      "description": [
        "You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the <code>style</code> attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with <code>fontSize</code> instead of <code>font-size</code>. Hyphenated words like <code>font-size</code> are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.",
        "All property value length units (like <code>height</code>, <code>width</code>, and <code>fontSize</code>) are assumed to be in <code>px</code> unless otherwise specified. If you want to use <code>em</code>, for example, you wrap the value and the units in quotes, like <code>{fontSize: \"4em\"}</code>. Other than the length values that default to <code>px</code>, all other property values should be wrapped in quotes.",
        "<hr>",
        "If you have a large set of styles, you can assign a style <code>object</code> to a constant to keep your code organized. Uncomment the <code>styles</code> constant and declare an <code>object</code> with three style properties and their values. Give the <code>div</code> a color of <code>\"purple\"</code>, a font-size of <code>40</code>, and a border of <code>\"2px solid purple\"</code>. Then set the <code>style</code> attribute equal to the <code>styles</code> constant."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\n// const styles =\n// change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // change code above this line\n  }\n};\n",
          "tail":
            "ReactDOM.render(<Colorful />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>styles</code> variable should be an <code>object</code> with three properties.",
          "testString":
            "assert(Object.keys(styles).length === 3, 'The <code>styles</code> variable should be an <code>object</code> with three properties.');"
        },
        {
          "text":
            "The <code>styles</code> variable should have a <code>color</code> property set to a value of <code>purple</code>.",
          "testString":
            "assert(styles.color === 'purple', 'The <code>styles</code> variable should have a <code>color</code> property set to a value of <code>purple</code>.');"
        },
        {
          "text":
            "The <code>styles</code> variable should have a <code>fontSize</code> property set to a value of <code>40</code>.",
          "testString":
            "assert(styles.fontSize === 40, 'The <code>styles</code> variable should have a <code>fontSize</code> property set to a value of <code>40</code>.');"
        },
        {
          "text":
            "The <code>styles</code> variable should have a <code>border</code> property set to a value of <code>2px solid purple</code>.",
          "testString":
            "assert(styles.border === \"2px solid purple\", 'The <code>styles</code> variable should have a <code>border</code> property set to a value of <code>2px solid purple</code>.');"
        },
        {
          "text": "The component should render a <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return mockedComponent.type() === 'div'; })(), 'The component should render a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>div</code> element should have its styles defined by the <code>styles</code> object.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return (mockedComponent.props().style.color === \"purple\" && mockedComponent.props().style.fontSize === 40 && mockedComponent.props().style.border === \"2px solid purple\"); })(), 'The <code>div</code> element should have its styles defined by the <code>styles</code> object.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Add Inline Styles in React",
      "dashedName": "add-inline-styles-in-react",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036183",
      "description": [
        "In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, <code>{ }</code>, for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components.",
        "You can also write JavaScript directly in your <code>render</code> methods, before the <code>return</code> statement, <strong><em>without</em></strong> inserting it inside of curly braces. This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code <em>inside</em> the <code>return</code> statement, you place the variable name inside curly braces.",
        "<hr>",
        "In the code provided, the <code>render</code> method has an array that contains 20 phrases to represent the answers found in the classic 1980's Magic Eight Ball toy. The button click event is bound to the <code>ask</code> method, so each time the button is clicked a random number will be generated and stored as the <code>randomIndex</code> in state. On line 52, delete the string <code>\"change me!\"</code> and reassign the <code>answer</code> const so your code randomly accesses a different index of the <code>possibleAnswers</code> array each time the component updates. Finally, insert the <code>answer</code> const inside the <code>p</code> tags."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    }\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt', \n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      'Don\\'t count on it', \n      'My reply is no',\n      'My sources say no',\n      'Most likely',\n      'Outlook not so good',\n      'Very doubtful'\n    ];\n    const answer = 'change me!' // << change code here\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle} /><br />\n        <button onClick={this.ask}>\n          Ask the Magic Eight Ball!\n        </button><br />\n        <h3>Answer:</h3>\n        <p>\n          { /* change code below this line */ }\n\n          { /* change code above this line */ }\n        </p>\n      </div>\n    );\n  }\n};",
          "tail":
            "var possibleAnswers = [ 'It is certain', 'It is decidedly so', 'Without a doubt', 'Yes, definitely', 'You may rely on it', 'As I see it, yes', 'Outlook good', 'Yes', 'Signs point to yes', 'Reply hazy try again', 'Ask again later', 'Better not tell you now', 'Cannot predict now', 'Concentrate and ask again', 'Don\\'t count on it', 'My reply is no', 'My sources say no', 'Outlook not so good','Very doubtful', 'Most likely' ];\nReactDOM.render(<MagicEightBall />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>MagicEightBall</code> component should exist and should render to the page.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MagicEightBall)).find('MagicEightBall').length, 1, 'The <code>MagicEightBall</code> component should exist and should render to the page.');"
        },
        {
          "text":
            "<code>MagicEightBall</code>&apos;s first child should be an <code>input</code> element.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MagicEightBall)).children().childAt(0).name(), 'input', '<code>MagicEightBall</code>&apos;s first child should be an <code>input</code> element.');"
        },
        {
          "text":
            "<code>MagicEightBall</code>&apos;s third child should be a <code>button</code> element.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MagicEightBall)).children().childAt(2).name(), 'button', '<code>MagicEightBall</code>&apos;s third child should be a <code>button</code> element.');"
        },
        {
          "text":
            "<code>MagicEightBall</code>&apos;s state should be initialized with a property of <code>userInput</code> and a property of <code>randomIndex</code> both set to a value of an empty string.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MagicEightBall)).state('randomIndex') === '' && Enzyme.mount(React.createElement(MagicEightBall)).state('userInput') === '', '<code>MagicEightBall</code>&apos;s state should be initialized with a property of <code>userInput</code> and a property of <code>randomIndex</code> both set to a value of an empty string.');"
        },
        {
          "text":
            "When <code>MagicEightBall</code> is first mounted to the DOM, it should return an empty <code>p</code> element.",
          "testString":
            "assert(Enzyme.mount(React.createElement(MagicEightBall)).find('p').length === 1 && Enzyme.mount(React.createElement(MagicEightBall)).find('p').text() === '', 'When <code>MagicEightBall</code> is first mounted to the DOM, it should return an empty <code>p</code> element.');"
        },
        {
          "text":
            "When text is entered into the <code>input</code> element and the button is clicked, the <code>MagicEightBall</code> component should return a <code>p</code> element that contains a random element from the <code>possibleAnswers</code> array.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const comp = Enzyme.mount(React.createElement(MagicEightBall)); const simulate = () => { comp.find('input').simulate('change', { target: { value: 'test?' }}); comp.find('button').simulate('click'); }; const result = () => comp.find('p').text(); const _1 = () => { simulate(); return waitForIt(() => result()) }; const _2 = () => { simulate(); return waitForIt(() => result()) }; const _3 = () => { simulate(); return waitForIt(() => result()) }; const _4 = () => { simulate(); return waitForIt(() => result()) }; const _5 = () => { simulate(); return waitForIt(() => result()) }; const _6 = () => { simulate(); return waitForIt(() => result()) }; const _7 = () => { simulate(); return waitForIt(() => result()) }; const _8 = () => { simulate(); return waitForIt(() => result()) }; const _9 = () => { simulate(); return waitForIt(() => result()) }; const _10 = () => { simulate(); return waitForIt(() => result()) }; const _1_val = await _1(); const _2_val = await _2(); const _3_val = await _3(); const _4_val = await _4(); const _5_val = await _5(); const _6_val = await _6(); const _7_val = await _7(); const _8_val = await _8(); const _9_val = await _9(); const _10_val = await _10(); const actualAnswers = [_1_val, _2_val, _3_val, _4_val, _5_val, _6_val, _7_val, _8_val, _9_val, _10_val]; const hasIndex = actualAnswers.filter((answer, i) => possibleAnswers.indexOf(answer) !== -1); const notAllEqual = new Set(actualAnswers); assert(notAllEqual.size > 1 && hasIndex.length === 10, 'When text is entered into the <code>input</code> element and the button is clicked, the <code>MagicEightBall</code> component should return a <code>p</code> element that contains a random element from the <code>possibleAnswers</code> array.');}"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Advanced JavaScript in React Render Method",
      "dashedName": "use-advanced-javascript-in-react-render-method",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036184",
      "description": [
        "Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders, when it's false, it's a different view. You can do this with a standard <code>if/else</code> statement in the <code>render()</code> method of a React component.",
        "<hr>",
        "MyComponent contains a <code>boolean</code> in its state which tracks whether you want to display some element in the UI or not. The <code>button</code> toggles the state of this value. Currently, it renders the same UI every time. Rewrite the <code>render()</code> method with an <code>if/else</code> statement so that if <code>display</code> is <code>true</code>, you return the current markup. Otherwise, return the markup without the <code>h1</code> element.",
        "<strong>Note:</strong>&nbsp;You must write an <code>if/else</code> to pass the tests, use of the ternary operator will not pass here."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState({\n      display: !this.state.display\n    });\n  }\n  render() {\n    // change code below this line\n\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "<code>MyComponent</code> should exist and render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length === 1; })(), '<code>MyComponent</code> should exist and render.');"
        },
        {
          "text":
            "When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: true}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 2 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 1, 'When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.'); }; "
        },
        {
          "text":
            "When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: false}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 1 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 0, 'When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.'); }; "
        },
        {
          "text":
            "The render method should use an <code>if/else</code> statement to check the condition of <code>this.state.display</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('if') && getUserInput('index').includes('else'), 'The render method should use an <code>if/else</code> statement to check the condition of <code>this.state.display</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render with an IfElse Condition",
      "dashedName": "render-with-an-ifelse-condition",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036185",
      "description": [
        "The if/else statements worked in the last challenge, but there's a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of <code>else if</code> statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the <code>&&</code> logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is <code>true</code>, and if it is, return some markup. Here's an example:",
        "<code>{condition && &lt;p&gt;markup&lt;/p&gt;}</code>",
        "If the <code>condition</code> is <code>true</code>, the markup will be returned. If the condition is <code>false</code>, the operation will immediately return <code>false</code> after evaluating the <code>condition</code> and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing <code>&&</code> after each one. This allows you to handle more complex conditional logic in your <code>render()</code> method without repeating a lot of code.",
        "<hr>",
        "Solve the previous example again, so the <code>h1</code> only renders if <code>display</code> is <code>true</code>, but use the <code>&&</code> logical operator instead of an <code>if/else</code> statement."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState({\n      display: !this.state.display\n    });\n  }\n  render() {\n    // change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text": "<code>MyComponent</code> should exist and render.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length; })(), '<code>MyComponent</code> should exist and render.');"
        },
        {
          "text":
            "When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: true}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(updated.find('div').length === 1 && updated.find('div').children().length === 2 && updated.find('button').length === 1 && updated.find('h1').length === 1, 'When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.'); }; "
        },
        {
          "text":
            "When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: false}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(updated.find('div').length === 1 && updated.find('div').children().length === 1 && updated.find('button').length === 1 && updated.find('h1').length === 0, 'When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.'); }; "
        },
        {
          "text":
            "The render method should use the && logical operator to check the condition of this.state.display.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('&&'), 'The render method should use the && logical operator to check the condition of this.state.display.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use  for a More Concise Conditional",
      "dashedName": "use--for-a-more-concise-conditional",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036187",
      "description": [
        "Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the <em><strong>ternary operator</strong></em>. The ternary operator is often utilized as a shortcut for <code>if/else</code> statements in JavaScript. They're not quite as robust as traditional <code>if/else</code> statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, <code>if/else</code> statements can't be inserted directly into JSX code. You might have noticed this a couple challenges ago &mdash; when an <code>if/else</code> statement was required, it was always <em>outside</em> the <code>return</code> statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:",
        "<blockquote>condition ? expressionIfTrue : expressionIfFalse</blockquote>",
        "<hr>",
        "The code editor has three constants defined within the <code>CheckUserAge</code> component's <code>render()</code> method. They are called <code>buttonOne</code>, <code>buttonTwo</code>, and <code>buttonThree</code>. Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of <code>CheckUserAge</code> with <code>input</code> and <code>userAge</code> both set to values of an empty string.",
        "Once the component is rendering information to the page, users should have a way to interact with it. Within the component's <code>return</code> statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, <code>buttonOne</code>, to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than <code>18</code>, render <code>buttonThree</code>. If a user enters a number greater than or equal to <code>18</code>, render <code>buttonTwo</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nconst inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // change code below this line\n\n    // change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState({\n      userAge: this.state.input\n    });\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type=\"number\"\n          value={this.state.input}\n          onChange={this.handleChange} /><br />\n        {\n          /* change code here */\n        }\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<CheckUserAge />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>CheckUserAge</code> component should render with a single <code>input</code> element and a single <code>button</code> element.",
          "testString":
            "assert(Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('input').length === 1 && Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('button').length === 1, 'The <code>CheckUserAge</code> component should render with a single <code>input</code> element and a single <code>button</code> element.');"
        },
        {
          "text":
            "The <code>CheckUserAge</code> component&apos;s state should be initialized with a property of <code>userAge</code> and a property of <code>input</code>, both set to a value of an empty string.",
          "testString":
            "assert(Enzyme.mount(React.createElement(CheckUserAge)).state().input === '' && Enzyme.mount(React.createElement(CheckUserAge)).state().userAge === '', 'The <code>CheckUserAge</code> component&apos;s state should be initialized with a property of <code>userAge</code> and a property of <code>input</code>, both set to a value of an empty string.');"
        },
        {
          "text":
            "When the <code>CheckUserAge</code> component is first rendered to the DOM, the <code>button</code>&apos;s inner text should be Submit.",
          "testString":
            "assert(Enzyme.mount(React.createElement(CheckUserAge)).find('button').text() === 'Submit', 'When the <code>CheckUserAge</code> component is first rendered to the DOM, the <code>button</code>&apos;s inner text should be Submit.');"
        },
        {
          "text":
            "When a number of less than 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>&apos;s inner text should read <code>You Shall Not Pass</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const initialButton = mockedComponent.find('button').text(); const enter3AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '3' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const enter17AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '17' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const userAge3 = await enter3AndClickButton(); const userAge17 = await enter17AndClickButton(); assert(initialButton === 'Submit' && userAge3 === 'You Shall Not Pass' && userAge17 === 'You Shall Not Pass', 'When a number of less than 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>&apos;s inner text should read <code>You Shall Not Pass</code>.'); }; "
        },
        {
          "text":
            "When a number greater than or equal to 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>&apos;s inner text should read <code>You May Enter</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const initialButton = mockedComponent.find('button').text(); const enter18AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '18' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const enter35AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '35' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const userAge18 = await enter18AndClickButton(); const userAge35 = await enter35AndClickButton(); assert(initialButton === 'Submit' && userAge18 === 'You May Enter' && userAge35 === 'You May Enter', 'When a number greater than or equal to 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>&apos;s inner text should read <code>You May Enter</code>.'); }; "
        },
        {
          "text":
            "Once a number has been submitted, and the value of the <code>input</code> is once again changed, the <code>button</code> should return to reading <code>Submit</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge)); const enter18AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '18' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const changeInputDontClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '5' }}); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const enter10AndClickButton = () => { mockedComponent.find('input').simulate('change', {target: { value: '10' }}); mockedComponent.find('button').simulate('click'); return waitForIt(() => { mockedComponent.update(); return mockedComponent.find('button').text(); }); }; const userAge18 = await enter18AndClickButton(); const changeInput1 = await changeInputDontClickButton(); const userAge10 = await enter10AndClickButton(); const changeInput2 = await changeInputDontClickButton(); assert(userAge18 === 'You May Enter' && changeInput1 === 'Submit' && userAge10 === 'You Shall Not Pass' && changeInput2 === 'Submit', 'Once a number has been submitted, and the value of the <code>input</code> is once again changed, the <code>button</code> should return to reading <code>Submit</code>.'); }; "
        },
        {
          "text":
            "Your code should not contain any <code>if/else</code> statements.",
          "testString":
            "assert(new RegExp(/(\\s|;)if(\\s|\\()/).test(Enzyme.mount(React.createElement(CheckUserAge)).instance().render.toString()) === false, 'Your code should not contain any <code>if/else</code> statements.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use a Ternary Expression for Conditional Rendering",
      "dashedName": "use-a-ternary-expression-for-conditional-rendering",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036188",
      "description": [
        "So far, you've seen how to use <code>if/else</code>, <code>&&,</code> <code>null</code> and the ternary operator (<code>condition ? expressionIfTrue : expressionIfFalse</code>) to make conditional decisions about what to render and when. However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props. Using props to conditionally render code is very common with React developers &mdash; that is, they use the value of a given prop to automatically make decisions about what to render.",
        "In this challenge, you'll set up a child component to make rendering decisions based on props. You'll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context.",
        "<hr>",
        "The code editor has two components that are partially defined for you: a parent called <code>GameOfChance</code>, and a child called <code>Results</code>. They are used to create a simple game where the user presses a button to see if they win or lose.",
        "First, you'll need a simple expression that randomly returns a different value every time it is run. You can use <code>Math.random()</code>. This method returns a value between <code>0</code> (inclusive) and <code>1</code> (exclusive) each time it is called. So for 50/50 odds, use <code>Math.random() > .5</code> in your expression. Statistically speaking, this expression will return <code>true</code> 50% of the time, and <code>false</code> the other 50%. On line 30, replace the comment with this expression to complete the variable declaration.",
        "Now you have an expression that you can use to make a randomized decision in the code. Next you need to implement this. Render the <code>Results</code> component as a child of <code>GameOfChance</code>, and pass in <code>expression</code> as a prop called <code>fiftyFifty</code>. In the <code>Results</code> component, write a ternary expression to render the text <code>\"You win!\"</code> or <code>\"You lose!\"</code> based on the <code>fiftyFifty</code> prop that's being passed in from <code>GameOfChance</code>. Finally, make sure the <code>handleClick()</code> method is correctly counting each turn so the user knows how many times they've played. This also serves to let the user know the component has actually updated in case they win or lose twice in a row."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <h1>\n      {\n        /* change code here */\n      }\n      </h1>\n    )\n  };\n};\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      counter: 0 // change code here\n    });\n  }\n  render() {\n    let expression = null; // change code here\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        { /* change code below this line */ }\n\n        { /* change code above this line */ }\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<GameOfChance />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>GameOfChance</code> component should exist and render to the page.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(GameOfChance)).find('GameOfChance').length, 1, 'The <code>GameOfChance</code> component should exist and render to the page.');"
        },
        {
          "text":
            "<code>GameOfChance</code> should return a single <code>button</code> element.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(GameOfChance)).find('button').length, 1, '<code>GameOfChance</code> should return a single <code>button</code> element.');"
        },
        {
          "text":
            "<code>GameOfChance</code> should return a single instance of the <code>Results</code> component, which has a prop called <code>fiftyFifty</code>.",
          "testString":
            "assert(Enzyme.mount(React.createElement(GameOfChance)).find('Results').length === 1 && Enzyme.mount(React.createElement(GameOfChance)).find('Results').props().hasOwnProperty('fiftyFifty') === true, '<code>GameOfChance</code> should return a single instance of the <code>Results</code> component, which has a prop called <code>fiftyFifty</code>.');"
        },
        {
          "text":
            "<code>GameOfChance</code> state should be initialized with a property of <code>counter</code> set to a value of <code>1</code>.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(GameOfChance)).state().counter, 1, '<code>GameOfChance</code> state should be initialized with a property of <code>counter</code> set to a value of <code>1</code>.');"
        },
        {
          "text":
            "When the <code>GameOfChance</code> component is first rendered to the DOM, a <code>p</code> element should be returned with the inner text of <code>Turn: 1</code>.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(GameOfChance)).find('p').text(), 'Turn: 1', 'When the <code>GameOfChance</code> component is first rendered to the DOM, a <code>p</code> element should be returned with the inner text of <code>Turn: 1</code>.');"
        },
        {
          "text":
            "Each time the button is clicked, the counter state should be incremented by a value of 1, and a single <code>p</code> element should be rendered to the DOM that contains the text \"Turn: N\", where N is the value of the counter state.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const comp = Enzyme.mount(React.createElement(GameOfChance)); const simulate = () => { comp.find('button').simulate('click'); };const result = () => ({ count: comp.state('counter'), text: comp.find('p').text() });const _1 = () => { simulate(); return waitForIt(() => result())}; const _2 = () => { simulate(); return waitForIt(() => result())}; const _3 = () => { simulate(); return waitForIt(() => result())}; const _4 = () => { simulate(); return waitForIt(() => result())}; const _5 = () => { simulate(); return waitForIt(() => result())}; const _1_val = await _1(); const _2_val = await _2(); const _3_val = await _3(); const _4_val = await _4(); const _5_val = await _5(); assert(_1_val.count === 2 && _1_val.text === 'Turn: 2' && _2_val.count === 3 && _2_val.text === 'Turn: 3' && _3_val.count === 4 && _3_val.text === 'Turn: 4' && _4_val.count === 5 && _4_val.text === 'Turn: 5' && _5_val.count === 6 && _5_val.text === 'Turn: 6', 'Each time the button is clicked, the counter state should be incremented by a value of 1, and a single <code>p</code> element should be rendered to the DOM that contains the text \"Turn: N\", where N is the value of the counter state.'); }; "
        },
        {
          "text":
            "When the <code>GameOfChance</code> component is first mounted to the DOM and each time the button is clicked thereafter, a single <code>h1</code> element should be returned that randomly renders either <code>You Win!</code> or <code>You Lose!</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const comp = Enzyme.mount(React.createElement(GameOfChance)); const simulate = () => { comp.find('button').simulate('click'); };const result = () => ({ h1: comp.find('h1').length, text: comp.find('h1').text() });const _1 = result(); const _2 = () => { simulate(); return waitForIt(() => result())}; const _3 = () => { simulate(); return waitForIt(() => result())}; const _4 = () => { simulate(); return waitForIt(() => result())}; const _5 = () => { simulate(); return waitForIt(() => result())}; const _6 = () => { simulate(); return waitForIt(() => result())}; const _7 = () => { simulate(); return waitForIt(() => result())}; const _8 = () => { simulate(); return waitForIt(() => result())}; const _9 = () => { simulate(); return waitForIt(() => result())}; const _10 = () => { simulate(); return waitForIt(() => result())}; const _2_val = await _2(); const _3_val = await _3(); const _4_val = await _4(); const _5_val = await _5(); const _6_val = await _6(); const _7_val = await _7(); const _8_val = await _8(); const _9_val = await _9(); const _10_val = await _10(); const __text = new Set([_1.text, _2_val.text, _3_val.text, _4_val.text, _5_val.text, _6_val.text, _7_val.text, _8_val.text, _9_val.text, _10_val.text]); const __h1 = new Set([_1.h1, _2_val.h1, _3_val.h1, _4_val.h1, _5_val.h1, _6_val.h1, _7_val.h1, _8_val.h1, _9_val.h1, _10_val.h1]); assert(__text.size === 2 && __h1.size === 1, 'When the <code>GameOfChance</code> component is first mounted to the DOM and each time the button is clicked thereafter, a single <code>h1</code> element should be returned that randomly renders either <code>You Win!</code> or <code>You Lose!</code>.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render Conditionally from Props",
      "dashedName": "render-conditionally-from-props",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d4036189",
      "description": [
        "At this point, you've seen several applications of conditional rendering and the use of inline styles. Here's one more example that combines both of these topics. You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.",
        "This paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, you describe how the UI should look as a function of the application's state. There is a clear flow of information that only moves in one direction. This is the preferred method when writing applications with React.",
        "<hr>",
        "The code editor has a simple controlled input component with a styled border. You want to style this border red if the user types more than 15 characters of text in the input box. Add a condition to check for this and, if the condition is valid, set the input border style to <code>3px solid red</code>. You can try it out by entering text in the input."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nclass GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // change code below this line\n\n    // change code above this line\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<GateKeeper />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>GateKeeper</code> component should render a <code>div</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.find('div').length === 1; })(), 'The <code>GateKeeper</code> component should render a <code>div</code> element.');"
        },
        {
          "text":
            "The <code>GateKeeper</code> component should be initialized with a state key <code>input</code> set to an empty string.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.state().input === ''; })(), 'The <code>GateKeeper</code> component should be initialized with a state key <code>input</code> set to an empty string.');"
        },
        {
          "text":
            "The <code>GateKeeper</code> component should render an <code>h3</code> tag and an <code>input</code> tag.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.find('h3').length === 1 && mockedComponent.find('input').length === 1; })(), 'The <code>GateKeeper</code> component should render an <code>h3</code> tag and an <code>input</code> tag.');"
        },
        {
          "text":
            "The <code>input</code> tag should initially have a style of <code>1px solid black</code> for the <code>border</code> property.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); return mockedComponent.find('input').props().style.border === '1px solid black'; })(), 'The <code>input</code> tag should initially have a style of <code>1px solid black</code> for the <code>border</code> property.');"
        },
        {
          "text":
            "The <code>input</code> tag should be styled with a border of <code>3px solid red</code> if the input value in state is longer than 15 characters.",
          "testString":
            "async () => {  const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const mockedComponent = Enzyme.mount(React.createElement(GateKeeper)); const simulateChange = (el, value) => el.simulate('change', {target: {value}}); let initialStyle = mockedComponent.find('input').props().style.border; const state_1 = () => { mockedComponent.setState({input: 'this is 15 char' }); return waitForIt(() => mockedComponent.find('input').props().style.border )}; const state_2 = () => { mockedComponent.setState({input: 'A very long string longer than 15 characters.' }); return waitForIt(() => mockedComponent.find('input').props().style.border )}; const style_1 = await state_1(); const style_2 = await state_2(); assert(initialStyle === '1px solid black' && style_1 === '1px solid black' && style_2 === '3px solid red', 'The <code>input</code> tag should be styled with a border of <code>3px solid red</code> if the input value in state is longer than 15 characters.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Change Inline CSS Conditionally Based on Component State",
      "dashedName": "change-inline-css-conditionally-based-on-component-state",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403618a",
      "description": [
        "Conditional rendering is useful, but you may need your components to render an unknown number of elements. Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. Programmers need to write their code to correctly handle that unknown state ahead of time. Using <code>Array.map()</code> in React illustrates this concept.",
        "For example, you create a simple \"To Do List\" app. As the programmer, you have no way of knowing how many items a user might have on their list. You need to set up your component to <em><strong>dynamically render</strong></em> the correct number of list elements long before someone using the program decides that today is laundry day. ",
        "<hr>",
        "The code editor has most of the <code>MyToDoList</code> component set up. Some of this code should look familiar if you completed the controlled form challenge. You'll notice a <code>textarea</code> and a <code>button</code>, along with a couple of methods that track their states, but nothing is rendered to the page yet.",
        "Inside the <code>constructor</code>, create a <code>this.state</code> object and define two states: <code>userInput</code> should be initialized as an empty string, and <code>toDoList</code> should be initialized as an empty array. Next, delete the comment in the <code>render()</code> method next to the <code>items</code> variable. In its place, map over the <code>toDoList</code> array stored in the component's internal state and dynamically render a <code>li</code> for each item. Try entering the string <code>eat, code, sleep, repeat</code> into the <code>textarea</code>, then click the button and see what happens.",
        "<strong>Note:</strong>&nbsp;You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique <code>key</code> attribute. Don't worry, this is the topic of the next challenge."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // change code below this line\n\n    // change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = null; // change code here\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder=\"Separate Items With Commas\" /><br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>\n          {items}\n        </ul>\n      </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyToDoList />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The MyToDoList component should exist and render to the page.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return mockedComponent.find('MyToDoList').length === 1; })(), 'The MyToDoList component should exist and render to the page.');"
        },
        {
          "text":
            "The first child of <code>MyToDoList</code> should be a <code>textarea</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return mockedComponent.find('MyToDoList').children().childAt(0).type() === 'textarea'; })(), 'The first child of <code>MyToDoList</code> should be a <code>textarea</code> element.');"
        },
        {
          "text":
            "The third child of <code>MyToDoList</code> should be a <code>button</code> element.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); return mockedComponent.find('MyToDoList').children().childAt(2).type() === 'button'; })(), 'The third child of <code>MyToDoList</code> should be a <code>button</code> element.');"
        },
        {
          "text":
            "The state of <code>MyToDoList</code> should be initialized with <code>toDoList</code> as an empty array.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const initialState = mockedComponent.state(); return Array.isArray(initialState.toDoList) === true && initialState.toDoList.length === 0; })(), 'The state of <code>MyToDoList</code> should be initialized with <code>toDoList</code> as an empty array.');"
        },
        {
          "text":
            "The state of <code>MyToDoList</code> should be initialized with <code>userInput</code> as an empty string.",
          "testString":
            "assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const initialState = mockedComponent.state(); return typeof initialState.userInput === 'string' && initialState.userInput.length === 0; })(), 'The state of <code>MyToDoList</code> should be initialized with <code>userInput</code> as an empty string.');"
        },
        {
          "text":
            "When the <code>Create List</code> button is clicked, the <code>MyToDoList</code> component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the <code>textarea</code> element.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const mockedComponent = Enzyme.mount(React.createElement(MyToDoList)); const simulateChange = (el, value) => el.simulate('change', {target: {value}}); const state_1 = () => { return waitForIt(() => mockedComponent.find('ul').find('li'))}; const setInput = () => { return waitForIt(() => simulateChange(mockedComponent.find('textarea'), \"testA, testB, testC\"))}; const click = () => { return waitForIt(() => mockedComponent.find('button').simulate('click'))}; const state_2 = () => { return waitForIt(() => { const nodes = mockedComponent.find('ul').find('li'); return { nodes, text: nodes.reduce((t, n) => t + n.text(), '') }; })}; const setInput_2 = () => { return waitForIt(() => simulateChange(mockedComponent.find('textarea'), \"t1, t2, t3, t4, t5, t6\"))}; const click_1 = () => { return waitForIt(() => mockedComponent.find('button').simulate('click'))}; const state_3 = () => { return waitForIt(() => { const nodes = mockedComponent.find('ul').find('li'); return { nodes, text: nodes.reduce((t, n) => t + n.text(), '') }; })}; const awaited_state_1 = await state_1(); const awaited_setInput = await setInput(); const awaited_click = await click(); const awaited_state_2 = await state_2(); const awaited_setInput_2 = await setInput_2(); const awaited_click_1 = await click_1(); const awaited_state_3 = await state_3(); assert(awaited_state_1.length === 0 && awaited_state_2.nodes.length === 3 && awaited_state_3.nodes.length === 6 && awaited_state_2.text === 'testA testB testC' && awaited_state_3.text === 't1 t2 t3 t4 t5 t6', 'When the <code>Create List</code> button is clicked, the <code>MyToDoList</code> component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the <code>textarea</code> element.'); }; "
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Arraymap to Dynamically Render Elements",
      "dashedName": "use-arraymap-to-dynamically-render-elements",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403618b",
      "description": [
        "The last challenge showed how the <code>map</code> method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a <code>key</code> attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way. Note that keys only need to be unique between sibling elements, they don't need to be globally unique in your application.",
        "<hr>",
        "The code editor has an array with some front end frameworks and a stateless functional component named <code>Frameworks()</code>. <code>Frameworks()</code> needs to map the array to an unordered list, much like in the last challenge. Finish writing the <code>map</code> callback to return an <code>li</code> element for each framework in the <code>frontEndFrameworks</code> array. This time, make sure to give each <code>li</code> a <code>key</code> attribute, set to a unique value.",
        "Normally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "\nconst frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // change code here\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};",
          "tail":
            "ReactDOM.render(<Frameworks />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>Frameworks</code> component should exist and render to the page.",
          "testString":
            "assert(Enzyme.mount(React.createElement(Frameworks)).find('Frameworks').length === 1, 'The <code>Frameworks</code> component should exist and render to the page.');"
        },
        {
          "text":
            "<code>Frameworks</code> should render an <code>h1</code> element.",
          "testString":
            "assert(Enzyme.mount(React.createElement(Frameworks)).find('h1').length === 1, '<code>Frameworks</code> should render an <code>h1</code> element.');"
        },
        {
          "text":
            "<code>Frameworks</code> should render a <code>ul</code> element.",
          "testString":
            "assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').length === 1, '<code>Frameworks</code> should render a <code>ul</code> element.');"
        },
        {
          "text":
            "The <code>ul</code> tag should render 6 child <code>li</code> elements.",
          "testString":
            "assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').children().length === 6 && Enzyme.mount(React.createElement(Frameworks)).find('ul').childAt(0).name() === 'li' && Enzyme.mount(React.createElement(Frameworks)).find('li').length === 6, 'The <code>ul</code> tag should render 6 child <code>li</code> elements.');"
        },
        {
          "text":
            "Each list item element should have a unique <code>key</code> attribute.",
          "testString":
            "assert((() => { const ul = Enzyme.mount(React.createElement(Frameworks)).find('ul'); const keys = new Set([ ul.childAt(0).key(), ul.childAt(1).key(), ul.childAt(2).key(), ul.childAt(3).key(), ul.childAt(4).key(), ul.childAt(5).key(), ]); return keys.size === 6; })(), 'Each list item element should have a unique <code>key</code> attribute.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Give Sibling Elements a Unique Key Attribute",
      "dashedName": "give-sibling-elements-a-unique-key-attribute",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403618c",
      "description": [
        "The <code>map</code> array method is a powerful tool that you will use often when working with React. Another method related to <code>map</code> is <code>filter</code>, which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property <code>online</code> which can be set to <code>true</code> or <code>false</code>, you can filter only those users that are online by writing:",
        "<code>let onlineUsers = users.filter(user => user.online);</code>",
        "<hr>",
        "In the code editor, <code>MyComponent</code>&apos;s <code>state</code> is initialized with an array of users. Some users are online and some aren't. Filter the array so you see only the users who are online. To do this, first use <code>filter</code> to return a new array containing only the users whose <code>online</code> property is <code>true</code>. Then, in the <code>renderOnline</code> variable, map over the filtered array, and return a <code>li</code> element for each user that contains the text of their <code>username</code>. Be sure to include a unique <code>key</code> as well, like in the last challenges."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    }\n  }\n  render() {\n    const usersOnline = null; // change code here\n    const renderOnline = null; // change code here\n    return (\n       <div>\n         <h1>Current Online Users:</h1>\n         <ul>\n           {renderOnline}\n         </ul>\n       </div>\n    );\n  }\n};",
          "tail":
            "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
          "head": ""
        }
      },
      "tests": [
        {
          "text":
            "<code>MyComponent</code> should exist and render to the page.",
          "testString":
            "assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).find('MyComponent').length, 1, '<code>MyComponent</code> should exist and render to the page.');"
        },
        {
          "text":
            "<code>MyComponent</code>&apos;s state should be initialized to an array of six users.\")",
          "testString":
            "assert(Array.isArray(Enzyme.mount(React.createElement(MyComponent)).state('users')) === true && Enzyme.mount(React.createElement(MyComponent)).state('users').length === 6, \"<code>MyComponent</code>&apos;s state should be initialized to an array of six users.\");"
        },
        {
          "text":
            "<code>MyComponent</code> should return a <code>div</code>, an <code>h1</code>, and then an unordered list containing <code>li</code> elements for every user whose online status is set to <code>true</code>.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const comp = Enzyme.mount(React.createElement(MyComponent)); const users = (bool) => ({users:[ { username: 'Jeff', online: bool }, { username: 'Alan', online: bool }, { username: 'Mary', online: bool }, { username: 'Jim', online: bool   }, { username: 'Laura', online: bool } ]}); const result = () => comp.find('li').length; const _1 = result(); const _2 = () => { comp.setState(users(true)); return waitForIt(() => result()) }; const _3 = () => { comp.setState(users(false)); return waitForIt(() => result()) }; const _4 = () => { comp.setState({ users: [] }); return waitForIt(() => result()) }; const _2_val = await _2(); const _3_val = await _3(); const _4_val = await _4(); assert(comp.find('div').length === 1 && comp.find('h1').length === 1 && comp.find('ul').length === 1 && _1 === 4 && _2_val === 5 && _3_val === 0 && _4_val === 0, '<code>MyComponent</code> should return a <code>div</code>, an <code>h1</code>, and then an unordered list containing <code>li</code> elements for every user whose online status is set to <code>true</code>.'); }; "
        },
        {
          "text":
            "<code>MyComponent</code> should render <code>li</code> elements that contain the username of each online user.",
          "testString":
            "async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const comp = Enzyme.mount(React.createElement(MyComponent)); const users = (bool) => ({users:[ { username: 'Jeff', online: bool }, { username: 'Alan', online: bool }, { username: 'Mary', online: bool }, { username: 'Jim', online: bool   }, { username: 'Laura', online: bool } ]}); const ul = () => { comp.setState(users(true)); return waitForIt(() => comp.find('ul').html()) }; const html = await ul(); assert(html === '<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>', '<code>MyComponent</code> should render <code>li</code> elements that contain the username of each online user.'); }; "
        },
        {
          "text":
            "Each list item element should have a unique <code>key</code> attribute.",
          "testString":
            "assert((() => { const ul = Enzyme.mount(React.createElement(MyComponent)).find('ul'); console.log(ul.debug()); const keys = new Set([ ul.childAt(0).key(), ul.childAt(1).key(), ul.childAt(2).key(), ul.childAt(3).key() ]); return keys.size === 4; })(), 'Each list item element should have a unique <code>key</code> attribute.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Arrayfilter to Dynamically Filter an Array",
      "dashedName": "use-arrayfilter-to-dynamically-filter-an-array",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403618d",
      "description": [
        "So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a <code>renderToString()</code> method you can use for this purpose.",
        "There are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load.",
        "<hr>",
        "The <code>renderToString()</code> method is provided on <code>ReactDOMServer</code>, which is available here as a global object. The method takes one argument which is a React element. Use this to render <code>App</code> to a string."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head":
            "var ReactDOMServer = { renderToString(x) { return null; } };",
          "contents":
            "\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// change code below this line\n",
          "tail": "ReactDOM.render(<App />, document.getElementById('root'))"
        }
      },
      "tests": [
        {
          "text":
            "The <code>App</code> component should render to a string using <code>ReactDOMServer.renderToString</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').replace(/ /g,'').includes('ReactDOMServer.renderToString(<App/>)') && Enzyme.mount(React.createElement(App)).children().name() === 'div', 'The <code>App</code> component should render to a string using <code>ReactDOMServer.renderToString</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Render React on the Server with renderToString",
      "dashedName": "render-react-on-the-server-with-rendertostring",
      "template":
        "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>"
    },
    {
      "id": "5a24c314108439a4d403614b",
      "description": [
        "Redux is a state management framework that can be used with a number of different web technologies, including React.",
        "In Redux, there is a single state object that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux <code>store</code>. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.",
        "This also means that any time any piece of your app wants to update state, it <strong>must</strong> do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.",
        "<hr>",
        "The Redux <code>store</code> is an object which holds and manages application <code>state</code>. There is a method called <code>createStore()</code> on the Redux object, which you use to create the Redux <code>store</code>. This method takes a <code>reducer</code> function as a required argument. The <code>reducer</code> function is covered in a later challenge, and is already defined for you in the code editor. It simply takes <code>state</code> as an argument and returns <code>state</code>.",
        "Declare a <code>store</code> variable and assign it to the <code>createStore()</code> method, passing in the <code>reducer</code> as an argument.",
        "<strong>Note:</strong>&nbsp;The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of <code>5</code>. If you're not familiar with default arguments, you can refer to the <a target=\"_blank\" href=\"http://beta.freecodecamp.com/en/challenges/es6/set-default-parameters-for-your-functions\">ES6 section in the Beta Curriculum</a> which covers this topic."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const reducer = (state = 5) => {\n  return state;\n}\n\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:\n\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text": "The redux store exists.",
          "testString":
            "assert(typeof store.getState === 'function', 'The redux store exists.');"
        },
        {
          "text": "The redux store has a value of 5 for the state.",
          "testString":
            "assert(store.getState()=== 5, 'The redux store has a value of 5 for the state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Create a Redux Store",
      "dashedName": "create-a-redux-store"
    },
    {
      "id": "5a24c314108439a4d403614c",
      "description": [
        "The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current <code>state</code> held in the Redux store object with the <code>getState()</code> method.",
        "<hr>",
        "The code from the previous challenge is re-written more concisely in the code editor. Use <code>store.getState()</code> to retrieve the <code>state</code> from the <code>store</code>, and assign this to a new variable <code>currentState</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The redux store should have a value of 5 for the initial state.",
          "testString":
            "assert(store.getState()===5, 'The redux store should have a value of 5 for the initial state.');"
        },
        {
          "text":
            "A variable <code>currentState</code> should exist and should be assigned the current state of the Redux store.",
          "testString":
            "getUserInput => assert(currentState === 5 && getUserInput('index').includes('store.getState()'), 'A variable <code>currentState</code> should exist and should be assigned the current state of the Redux store.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Get State from the Redux Store",
      "dashedName": "get-state-from-the-redux-store"
    },
    {
      "id": "5a24c314108439a4d403614d",
      "description": [
        "Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a <code>type</code> property that specifies the 'type' of action that occurred.",
        "Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred.",
        "<hr>",
        "Writing a Redux action is as simple as declaring an object with a type property. Declare an object <code>action</code> and give it a property <code>type</code> set to the string <code>'LOGIN'</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": "// Define an action here:\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text": "An action object should exist.",
          "testString":
            "assert((function() { return typeof action === 'object' })(), 'An action object should exist.');"
        },
        {
          "text":
            "The action should have a key property type with value <code>LOGIN</code>.",
          "testString":
            "assert((function() { return action.type === 'LOGIN' })(), 'The action should have a key property type with value <code>LOGIN</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Define a Redux Action",
      "dashedName": "define-a-redux-action"
    },
    {
      "id": "5a24c314108439a4d403614e",
      "description": [
        "After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.",
        "<hr>",
        "Define a function named <code>actionCreator()</code> that returns the <code>action</code> object when called."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const action = {\n  type: 'LOGIN'\n}\n// Define an action creator here:\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text": "The function <code>actionCreator</code> should exist.",
          "testString":
            "assert(typeof actionCreator === 'function', 'The function <code>actionCreator</code> should exist.');"
        },
        {
          "text":
            "Running the <code>actionCreator</code> function should return the action object.",
          "testString":
            "assert(typeof action === 'object', 'Running the <code>actionCreator</code> function should return the action object.');"
        },
        {
          "text":
            "The returned action should have a key property type with value <code>LOGIN</code>.",
          "testString":
            "assert(action.type === 'LOGIN', 'The returned action should have a key property type with value <code>LOGIN</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Define an Action Creator",
      "dashedName": "define-an-action-creator"
    },
    {
      "id": "5a24c314108439a4d403614f",
      "description": [
        "<code>dispatch</code> method is what you use to dispatch actions to the Redux store. Calling <code>store.dispatch()</code> and passing the value returned from an action creator sends an action back to the store.",
        "Recall that action creators return an object with a type property that specifies the action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent, and both dispatch the action of type <code>LOGIN</code>:",
        "<blockquote>store.dispatch(actionCreator());<br>store.dispatch({ type: 'LOGIN' });</blockquote>",
        "<hr>",
        "The Redux store in the code editor has an initialized state that's an object containing a <code>login</code> property currently set to <code>false</code>. There's also an action creator called <code>loginAction()</code> which returns an action of type <code>LOGIN</code>. Dispatch the <code>LOGIN</code> action to the Redux store by calling the <code>dispatch</code> method, and pass in the action created by <code>loginAction()</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\n// Dispatch the action here:\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "Calling the function <code>loginAction</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.",
          "testString":
            "assert(loginAction().type === 'LOGIN', 'Calling the function <code>loginAction</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.');"
        },
        {
          "text":
            "The store should be initialized with an object with property <code>login</code> set to <code>false</code>.",
          "testString":
            "assert(store.getState().login === false, 'The store should be initialized with an object with property <code>login</code> set to <code>false</code>.');"
        },
        {
          "text":
            "The <code>store.dispatch()</code> method should be used to dispatch an action of type <code>LOGIN</code>.",
          "testString":
            "getUserInput => assert((function() {  let noWhiteSpace = getUserInput('index').replace(/\\s/g,''); return noWhiteSpace.includes('store.dispatch(loginAction())') || noWhiteSpace.includes('store.dispatch({type: \\'LOGIN\\'})') === true })(), 'The <code>store.dispatch()</code> method should be used to dispatch an action of type <code>LOGIN</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Dispatch an Action Event",
      "dashedName": "dispatch-an-action-event"
    },
    {
      "id": "5a24c314108439a4d4036150",
      "description": [
        "After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a <code>reducer</code> function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A <code>reducer</code> takes <code>state</code> and <code>action</code> as arguments, and it always returns a new <code>state</code>. It is important to see that this is the <strong>only</strong> role of the reducer. It has no side effects &mdash; it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.",
        "Another key principle in Redux is that <code>state</code> is read-only. In other words, the <code>reducer</code> function must <strong>always</strong> return a new copy of <code>state</code> and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You'll practice this in later challenges.",
        "<hr>",
        "The code editor has the previous example as well as the start of a <code>reducer</code> function for you. Fill in the body of the <code>reducer</code> function so that if it receives an action of type <code>'LOGIN'</code> it returns a state object with <code>login</code> set to <code>true</code>. Otherwise, it returns the current <code>state</code>. Note that the current <code>state</code> and the dispatched <code>action</code> are passed to the reducer, so you can access the action's type directly with <code>action.type</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n  // change code below this line\n\n  // change code above this line\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "Calling the function <code>loginAction</code> should return an object with type property set to the string <code>LOGIN</code>.",
          "testString":
            "assert(loginAction().type === 'LOGIN', 'Calling the function <code>loginAction</code> should return an object with type property set to the string <code>LOGIN</code>.');"
        },
        {
          "text":
            "The store should be initialized with an object with property <code>login</code> set to <code>false</code>.",
          "testString":
            "assert(store.getState().login === false, 'The store should be initialized with an object with property <code>login</code> set to <code>false</code>.');"
        },
        {
          "text":
            "Dispatching <code>loginAction</code> should update the <code>login</code> property in the store state to <code>true</code>.",
          "testString":
            "assert((function() {  const initialState = store.getState(); store.dispatch(loginAction()); const afterState = store.getState(); return initialState.login === false && afterState.login === true })(), 'Dispatching <code>loginAction</code> should update the <code>login</code> property in the store state to <code>true</code>.');"
        },
        {
          "text":
            "If the action is not of type <code>LOGIN</code>, the store should return the current state.",
          "testString":
            "assert((function() { store.dispatch({type: '__TEST__ACTION__'}); let afterTest = store.getState(); return typeof afterTest === 'object' && afterTest.hasOwnProperty('login') })(), 'If the action is not of type <code>LOGIN</code>, the store should return the current state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Handle an Action in the Store",
      "dashedName": "handle-an-action-in-the-store"
    },
    {
      "id": "5a24c314108439a4d4036151",
      "description": [
        "You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property <code>authenticated</code>. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.",
        "<hr>",
        "The code editor has a store, actions, and action creators set up for you. Fill in the <code>reducer</code> function to handle multiple authentication actions. Use a JavaScript <code>switch</code> statement in the <code>reducer</code> to respond to different action events. This is a standard pattern in writing Redux reducers. The switch statement should switch over <code>action.type</code> and return the appropriate authentication state.",
        "<strong>Note:</strong>&nbsp;At this point, don't worry about state immutability, since it is small and simple in this example. For each action, you can return a new object &mdash; for example, <code>{authenticated: true}</code>. Also, don't forget to write a <code>default</code> case in your switch statement that returns the current <code>state</code>. This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer. In such a case, you want to make sure that you return the current <code>state</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  // change code below this line\n\n  // change code above this line\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "Calling the function <code>loginUser</code> should return an object with type property set to the string <code>LOGIN</code>.",
          "testString":
            "assert(loginUser().type === 'LOGIN', 'Calling the function <code>loginUser</code> should return an object with type property set to the string <code>LOGIN</code>.');"
        },
        {
          "text":
            "Calling the function <code>logoutUser</code> should return an object with type property set to the string <code>LOGOUT</code>.",
          "testString":
            "assert(logoutUser().type === 'LOGOUT', 'Calling the function <code>logoutUser</code> should return an object with type property set to the string <code>LOGOUT</code>.');"
        },
        {
          "text":
            "The store should be initialized with an object with an <code>authenticated</code> property set to <code>false</code>.",
          "testString":
            "assert(store.getState().authenticated === false, 'The store should be initialized with an object with an <code>authenticated</code> property set to <code>false</code>.');"
        },
        {
          "text":
            "Dispatching <code>loginUser</code> should update the <code>authenticated</code> property in the store state to <code>true</code>.",
          "testString":
            "assert((function() {  const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return initialState.authenticated === false && afterLogin.authenticated === true })(), 'Dispatching <code>loginUser</code> should update the <code>authenticated</code> property in the store state to <code>true</code>.');"
        },
        {
          "text":
            "Dispatching <code>logoutUser</code> should update the <code>authenticated</code> property in the store state to <code>false</code>.",
          "testString":
            "assert((function() {  store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return loggedIn.authenticated === true && afterLogout.authenticated === false  })(), 'Dispatching <code>logoutUser</code> should update the <code>authenticated</code> property in the store state to <code>false</code>.');"
        },
        {
          "text":
            "The <code>authReducer</code> function should handle multiple action types with a <code>switch</code> statement.",
          "testString":
            "getUserInput => assert( getUserInput('index').toString().includes('switch') && getUserInput('index').toString().includes('case') && getUserInput('index').toString().includes('default'), 'The <code>authReducer</code> function should handle multiple action types with a <code>switch</code> statement.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use a Switch Statement to Handle Multiple Actions",
      "dashedName": "use-a-switch-statement-to-handle-multiple-actions"
    },
    {
      "id": "5a24c314108439a4d4036152",
      "description": [
        "A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.",
        "<hr>",
        "Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.",
        "<strong>Note:</strong>&nbsp;It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "// change code below this line\n\n// change code above this line\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case 'LOGIN':\n      return {\n        authenticated: true\n      }\n\n    case 'LOGOUT':\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.",
          "testString":
            "assert(loginUser().type === 'LOGIN', 'Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.');"
        },
        {
          "text":
            "Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.",
          "testString":
            "assert(logoutUser().type === 'LOGOUT', 'Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.');"
        },
        {
          "text":
            "The store should be initialized with an object with property <code>login</code> set to <code>false</code>.",
          "testString":
            "assert(store.getState().authenticated === false, 'The store should be initialized with an object with property <code>login</code> set to <code>false</code>.');"
        },
        {
          "text":
            "Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.",
          "testString":
            "assert((function() {  const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return initialState.authenticated === false && afterLogin.authenticated === true })(), 'Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.');"
        },
        {
          "text":
            "Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.",
          "testString":
            "assert((function() {  store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return loggedIn.authenticated === true && afterLogout.authenticated === false })(), 'Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.');"
        },
        {
          "text":
            "The <code>authReducer</code> function should handle multiple action types with a switch statement.",
          "testString":
            "getUserInput => assert((function() { return typeof authReducer === 'function' && getUserInput('index').toString().includes('switch') && getUserInput('index').toString().includes('case') && getUserInput('index').toString().includes('default') })(), 'The <code>authReducer</code> function should handle multiple action types with a switch statement.');"
        },
        {
          "text":
            "<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.",
          "testString":
            "getUserInput => assert((function() {  const noWhiteSpace = getUserInput('index').toString().replace(/\\s/g,''); return (noWhiteSpace.includes('constLOGIN=\\'LOGIN\\'') || noWhiteSpace.includes('constLOGIN=\"LOGIN\"')) && (noWhiteSpace.includes('constLOGOUT=\\'LOGOUT\\'') || noWhiteSpace.includes('constLOGOUT=\"LOGOUT\"')) })(), '<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.');"
        },
        {
          "text":
            "The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.",
          "testString":
            "getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').toString().replace(/\\s/g,''); return noWhiteSpace.includes('caseLOGIN:') && noWhiteSpace.includes('caseLOGOUT:') && noWhiteSpace.includes('type:LOGIN') && noWhiteSpace.includes('type:LOGOUT') })(), 'The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use const for Action Types",
      "dashedName": "use-const-for-action-types"
    },
    {
      "id": "5a24c314108439a4d4036153",
      "description": [
        "Another method you have access to on the Redux <code>store</code> object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.",
        "<hr>",
        "Write a callback function that increments the global variable <code>count</code> every time the store receives an action, and pass this function in to the <code>store.subscribe()</code> method. You'll see that <code>store.dispatch()</code> is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "head": "count = 0;",
          "contents":
            "const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// global count variable:\nlet count = 0;\n\n// change code below this line\n\n// change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.",
          "testString":
            "assert((function() { const initialState = store.getState(); store.dispatch({ type: 'ADD' }); const newState = store.getState(); return newState === (initialState + 1); })(), 'Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.');"
        },
        {
          "text":
            "There should be a listener function subscribed to the store using <code>store.subscribe</code>.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('store.subscribe('), 'There should be a listener function subscribed to the store using <code>store.subscribe</code>.');"
        },
        {
          "text":
            "The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.",
          "testString":
            "assert(store.getState() === count, 'The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Register a Store Listener",
      "dashedName": "register-a-store-listener"
    },
    {
      "id": "5a24c314108439a4d4036154",
      "description": [
        "When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux <code>createStore()</code> method.",
        "In order to let us combine multiple reducers together, Redux provides the <code>combineReducers()</code> method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.",
        "Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the <code>combineReducers()</code> method like this:",
        "<blockquote>const rootReducer = Redux.combineReducers({<br>  auth: authenticationReducer,<br>  notes: notesReducer<br>});</blockquote>",
        "Now, the key <code>notes</code> will contain all of the state associated with our notes and handled by our <code>notesReducer</code>. This is how multiple reducers can be composed to manage more complex application state. In this example, the state held in the Redux store would then be a single object containing <code>auth</code> and <code>notes</code> properties.",
        "<hr>",
        "There are <code>counterReducer()</code> and <code>authReducer()</code> functions provided in the code editor, along with a Redux store. Finish writing the <code>rootReducer()</code> function using the <code>Redux.combineReducers()</code> method. Assign <code>counterReducer</code> to a key called <code>count</code> and <code>authReducer</code> to a key called <code>auth</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = // define the root reducer here\n\nconst store = Redux.createStore(rootReducer);\n",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>counterReducer</code> should increment and decrement the <code>state</code>.",
          "testString":
            "assert((function() { const initalState = store.getState().count; store.dispatch({type: INCREMENT}); store.dispatch({type: INCREMENT}); const firstState = store.getState().count; store.dispatch({type: DECREMENT}); const secondState = store.getState().count; return firstState === initalState + 2 && secondState === firstState - 1  })(), 'The <code>counterReducer</code> should increment and decrement the <code>state</code>.');"
        },
        {
          "text":
            "The <code>authReducer</code> should toggle the <code>state</code> of <code>authenticated</code> between <code>true</code> and <code>false</code>.",
          "testString":
            "assert((function() {  store.dispatch({type: LOGIN}); const loggedIn = store.getState().auth.authenticated; store.dispatch({type: LOGOUT}); const loggedOut = store.getState().auth.authenticated; return loggedIn === true && loggedOut === false  })(), 'The <code>authReducer</code> should toggle the <code>state</code> of <code>authenticated</code> between <code>true</code> and <code>false</code>.');"
        },
        {
          "text":
            "The store <code>state</code> should have two keys: <code>count</code>, which holds a number, and <code>auth</code>, which holds an object. The <code>auth</code> object should have a property of <code>authenticated</code>, which holds a boolean.",
          "testString":
            "assert((function() { const state = store.getState(); return typeof state.auth === 'object' && typeof state.auth.authenticated === 'boolean' && typeof state.count === 'number' })(), 'The store <code>state</code> should have two keys: <code>count</code>, which holds a number, and <code>auth</code>, which holds an object. The <code>auth</code> object should have a property of <code>authenticated</code>, which holds a boolean.');"
        },
        {
          "text":
            "The <code>rootReducer</code> should be a function that combines the <code>counterReducer</code> and the <code>authReducer</code>.",
          "testString":
            "getUserInput => assert((function() {  const noWhiteSpace = getUserInput('index').replace(/\\s/g,''); return typeof rootReducer === 'function' && noWhiteSpace.includes('Redux.combineReducers')  })(), 'The <code>rootReducer</code> should be a function that combines the <code>counterReducer</code> and the <code>authReducer</code>.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Combine Multiple Reducers",
      "dashedName": "combine-multiple-reducers"
    },
    {
      "id": "5a24c314108439a4d4036155",
      "description": [
        "By now you've learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a <code>type</code>. You can also send specific data along with your actions. In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data.",
        "<hr>",
        "There's a basic <code>notesReducer()</code> and an <code>addNoteText()</code> action creator defined in the code editor. Finish the body of the <code>addNoteText()</code> function so that it returns an <code>action</code> object. The object should include a <code>type</code> property with a value of <code>ADD_NOTE</code>, and also a <code>text</code> property set to the <code>note</code> data that's passed into the action creator. When you call the action creator, you'll pass in specific note information that you can access for the object.",
        "Next, finish writing the <code>switch</code> statement in the <code>notesReducer()</code>. You need to add a case that handles the <code>addNoteText()</code> actions. This case should be triggered whenever there is an action of type <code>ADD_NOTE</code> and it should return the <code>text</code> property on the incoming <code>action</code> as the new <code>state</code>.",
        "The action is dispatched at the bottom of the code. Once you're finished, run the code and watch the console. That's all it takes to send action-specific data to the store and use it when you update store <code>state</code>."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // change code below this line\n\n    // change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // change code below this line\n\n  // change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello!'));\nconsole.log(store.getState());",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The action creator <code>addNoteText</code> should return an object with keys <code>type</code> and <code>text</code>.",
          "testString":
            "assert((function() { const addNoteFn = addNoteText('__TEST__NOTE'); return addNoteFn.type === ADD_NOTE && addNoteFn.text === '__TEST__NOTE' })(), 'The action creator <code>addNoteText</code> should return an object with keys <code>type</code> and <code>text</code>.');"
        },
        {
          "text":
            "Dispatching an action of type <code>ADD_NOTE</code> with the <code>addNoteText</code> action creator should update the <code>state</code> to the string passed to the action creator.",
          "testString":
            "assert((function() { const initialState = store.getState(); store.dispatch(addNoteText('__TEST__NOTE')); const newState = store.getState(); return initialState !== newState && newState === '__TEST__NOTE' })(), 'Dispatching an action of type <code>ADD_NOTE</code> with the <code>addNoteText</code> action creator should update the <code>state</code> to the string passed to the action creator.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Send Action Data to the Store",
      "dashedName": "send-action-data-to-the-store"
    },
    {
      "id": "5a24c314108439a4d4036156",
      "description": [
        "So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here's a brief description how to use this with Redux.",
        "To include Redux Thunk middleware, you pass it as an argument to <code>Redux.applyMiddleware()</code>. This statement is then provided as a second optional parameter to the <code>createStore()</code> function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes <code>dispatch</code> as an argument. Within this function, you can dispatch actions and perform asynchronous requests.",
        "In this example, an asynchronous request is simulated with a <code>setTimeout()</code> call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed.",
        "Remember that you're passing <code>dispatch</code> as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.",
        "<hr>",
        "Write both dispatches in the <code>handleAsync()</code> action creator. Dispatch <code>requestingData()</code> before the <code>setTimeout()</code> (the simulated API call). Then, after you receive the (pretend) data, dispatch the <code>receivedData()</code> action, passing in this data. Now you know how to handle asynchronous actions in Redux. Everything else continues to behave as before."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    // dispatch request action here\n\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      // dispatch received data action here\n\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The <code>requestingData</code> action creator should return an object of type equal to the value of <code>REQUESTING_DATA</code>.",
          "testString":
            "assert(requestingData().type === REQUESTING_DATA, 'The <code>requestingData</code> action creator should return an object of type equal to the value of <code>REQUESTING_DATA</code>.');"
        },
        {
          "text":
            "The <code>receivedData</code> action creator should return an object of type equal to the value of <code>RECEIVED_DATA</code>.",
          "testString":
            "assert(receivedData('data').type === RECEIVED_DATA, 'The <code>receivedData</code> action creator should return an object of type equal to the value of <code>RECEIVED_DATA</code>.');"
        },
        {
          "text": "<code>asyncDataReducer</code> should be a function.",
          "testString":
            "assert(typeof asyncDataReducer === 'function', '<code>asyncDataReducer</code> should be a function.');"
        },
        {
          "text":
            "Dispatching the requestingData action creator should update the store <code>state</code> property of fetching to <code>true</code>.",
          "testString":
            "assert((function() { const initialState = store.getState(); store.dispatch(requestingData()); const reqState = store.getState(); return initialState.fetching === false && reqState.fetching === true })(), 'Dispatching the requestingData action creator should update the store <code>state</code> property of fetching to <code>true</code>.');"
        },
        {
          "text":
            "Dispatching <code>handleAsync</code> should dispatch the data request action and then dispatch the received data action after a delay.",
          "testString":
            "assert((function() { const noWhiteSpace = handleAsync.toString().replace(/\\s/g,''); return noWhiteSpace.includes('dispatch(requestingData())') === true && noWhiteSpace.includes('dispatch(receivedData(data))') === true })(), 'Dispatching <code>handleAsync</code> should dispatch the data request action and then dispatch the received data action after a delay.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use Middleware to Handle Asynchronous Actions",
      "dashedName": "use-middleware-to-handle-asynchronous-actions"
    },
    {
      "id": "5a24c314108439a4d4036157",
      "description": [
        "Now you've learned all the core principles of Redux! You've seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You've even seen how to manage complex state with reducer composition and handle asynchronous actions. These examples are simplistic, but these concepts are the core principles of Redux. If you understand them well, you're ready to start building your own Redux app. The next challenges cover some of the details regarding <code>state</code> immutability, but first, here's a review of everything you've learned so far.",
        "<hr>",
        "In this lesson, you'll implement a simple counter with Redux from scratch. The basics are provided in the code editor, but you'll have to fill in the details! Use the names that are provided and define <code>incAction</code> and <code>decAction</code> action creators, the <code>counterReducer()</code>, <code>INCREMENT</code> and <code>DECREMENT</code> action types, and finally the Redux <code>store</code>. Once you're finished you should be able to dispatch <code>INCREMENT</code> or <code>DECREMENT</code> actions to increment or decrement the state held in the <code>store</code>. Good luck building your first Redux app!"
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const INCREMENT = null; // define a constant for increment action types\nconst DECREMENT = null; // define a constant for decrement action types\n\nconst counterReducer = null; // define the counter reducer which will increment or decrement the state based on the action it receives\n\nconst incAction = null; // define an action creator for incrementing\n\nconst decAction = null; // define an action creator for decrementing\n\nconst store = null; // define the Redux store here, passing in your reducers",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The action creator <code>incAction</code> should return an action object with <code>type</code> equal to the value of <code>INCREMENT</code>",
          "testString":
            "assert(incAction().type ===INCREMENT, 'The action creator <code>incAction</code> should return an action object with <code>type</code> equal to the value of <code>INCREMENT</code>');"
        },
        {
          "text":
            "The action creator <code>decAction</code> should return an action object with <code>type</code> equal to the value of <code>DECREMENT</code>",
          "testString":
            "assert(decAction().type === DECREMENT, 'The action creator <code>decAction</code> should return an action object with <code>type</code> equal to the value of <code>DECREMENT</code>');"
        },
        {
          "text":
            "The Redux store should initialize with a <code>state</code> of 0.",
          "testString":
            "assert(store.getState() === 0, 'The Redux store should initialize with a <code>state</code> of 0.');"
        },
        {
          "text":
            "Dispatching <code>incAction</code> on the Redux store should increment the <code>state</code> by 1.",
          "testString":
            "assert((function() { const initialState = store.getState(); store.dispatch(incAction()); const incState = store.getState(); return initialState + 1 === incState })(), 'Dispatching <code>incAction</code> on the Redux store should increment the <code>state</code> by 1.');"
        },
        {
          "text":
            "Dispatching <code>decAction</code> on the Redux store should decrement the <code>state</code> by 1.",
          "testString":
            "assert((function() { const initialState = store.getState(); store.dispatch(decAction()); const decState = store.getState(); return initialState - 1 === decState })(), 'Dispatching <code>decAction</code> on the Redux store should decrement the <code>state</code> by 1.');"
        },
        {
          "text": "<code>counterReducer</code> should be a function",
          "testString":
            "assert(typeof counterReducer === 'function', '<code>counterReducer</code> should be a function');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Write a Counter with Redux",
      "dashedName": "write-a-counter-with-redux"
    },
    {
      "id": "5a24c314108439a4d4036158",
      "description": [
        "These final challenges describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify state directly, instead, you return a new copy of state.",
        "If you took a snapshot of the state of a Redux app over time, you would see something like <code>state 1</code>, <code>state 2</code>, <code>state 3</code>,<code>state 4</code>, <code>...</code> and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.",
        "Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a <code>string</code>, <code>number</code>, <code>array</code>, or <code>object</code>. Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An <code>array</code> or <code>object</code>, however, is mutable. In practice, your state will probably consist of an <code>array</code> or <code>object</code>, as these are useful data structures for representing many types of information.",
        "<hr>",
        "There is a <code>store</code> and <code>reducer</code> in the code editor for managing to-do items. Finish writing the <code>ADD_TO_DO</code> case in the reducer to append a new to-do to the state. There are a few ways to accomplish this with standard JavaScript or ES6. See if you can find a way to return a new array with the item from <code>action.todo</code> appended to the end."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const ADD_TO_DO = 'ADD_TO_DO';\n\n// A list of strings representing tasks to do:\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      // don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\n// an example todo argument would be 'Learn React',\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The Redux store should exist and initialize with a state equal to the <code>todos</code> array in the code editor.",
          "testString":
            "assert((function() { const todos = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code' ]; const initialState = store.getState(); return Array.isArray(initialState) && initialState.join(',') === todos.join(','); })(), 'The Redux store should exist and initialize with a state equal to the <code>todos</code> array in the code editor.');"
        },
        {
          "text":
            "<code>addToDo</code> and <code>immutableReducer</code> both should be functions.",
          "testString":
            "assert(typeof addToDo === 'function' && typeof immutableReducer === 'function', '<code>addToDo</code> and <code>immutableReducer</code> both should be functions.');"
        },
        {
          "text":
            "Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.",
          "testString":
            "assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(addToDo('__TEST__TO__DO__')); const finalState = store.getState(); const expectedState = [ 'Go to the store', 'Clean the house', 'Cook dinner', 'Learn to code', '__TEST__TO__DO__' ]; return( isFrozen && DeepEqual(finalState, expectedState)); })(), 'Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Never Mutate State",
      "dashedName": "never-mutate-state"
    },
    {
      "id": "5a24c314108439a4d4036159",
      "description": [
        "One solution from ES6 to help enforce state immutability in Redux is the spread operator: <code>...</code>. The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. This is relatively new, but commonly used syntax. For example, if you have an array <code>myArray</code> and write:",
        "<code>let newArray = [...myArray];</code>",
        "<code>newArray</code> is now a clone of <code>myArray</code>. Both arrays still exist separately in memory. If you perform a mutation like <code>newArray.push(5)</code>, <code>myArray</code> doesn't change. The <code>...</code> effectively <i>spreads</i> out the values in <code>myArray</code> into a new array. To clone an array but add additional values in the new array, you could write <code>[...myArray, 'new value']</code>. This would return a new array composed of the values in <code>myArray</code> and the string <code>'new value'</code> as the last value. The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow copy of the array. That is to say, it only provides immutable array operations for one-dimensional arrays.",
        "<hr>",
        "Use the spread operator to return a new copy of state when a to-do is added."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      // don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The Redux store should exist and initialize with a state equal to <code>[Do not mutate state!]</code>.",
          "testString":
            "assert((function() { const initialState = store.getState(); return ( Array.isArray(initialState) === true && initialState[0] === 'Do not mutate state!'); })(), 'The Redux store should exist and initialize with a state equal to <code>[Do not mutate state!]</code>.');"
        },
        {
          "text":
            "<code>addToDo</code> and <code>immutableReducer</code> both should be functions.",
          "testString":
            "assert(typeof addToDo === 'function' && typeof immutableReducer === 'function', '<code>addToDo</code> and <code>immutableReducer</code> both should be functions.');"
        },
        {
          "text":
            "Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.",
          "testString":
            "assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(addToDo('__TEST__TO__DO__')); const finalState = store.getState(); const expectedState = [ 'Do not mutate state!', '__TEST__TO__DO__' ]; return( isFrozen && DeepEqual(finalState, expectedState)); })(), 'Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.');"
        },
        {
          "text": "The spread operator should be used to return new state.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('...state'), 'The spread operator should be used to return new state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Use the Spread Operator on Arrays",
      "dashedName": "use-the-spread-operator-on-arrays"
    },
    {
      "id": "5a24c314108439a4d403615a",
      "description": [
        "Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include <code>slice()</code> and <code>concat()</code>.",
        "<hr>",
        "The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The Redux store should exist and initialize with a state equal to <code>[0,1,2,3,4,5]</code>",
          "testString":
            "assert((function() { const initialState = store.getState(); return (Array.isArray(initialState) === true && DeepEqual(initialState, [0, 1, 2, 3, 4, 5])); })(), 'The Redux store should exist and initialize with a state equal to <code>[0,1,2,3,4,5]</code>');"
        },
        {
          "text":
            "<code>removeItem</code> and <code>immutableReducer</code> both should be functions.",
          "testString":
            "assert(typeof removeItem === 'function' && typeof immutableReducer === 'function', '<code>removeItem</code> and <code>immutableReducer</code> both should be functions.');"
        },
        {
          "text":
            "Dispatching the <code>removeItem</code> action creator should remove items from the state and should NOT mutate state.",
          "testString":
            "assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(removeItem(3)); const state_1 = store.getState(); store.dispatch(removeItem(2)); const state_2 = store.getState(); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); const state_3 = store.getState(); return isFrozen && DeepEqual(state_1, [0, 1, 2, 4, 5]) && DeepEqual(state_2, [0, 1, 4, 5]) && DeepEqual(state_3, [5]); })(), 'Dispatching the <code>removeItem</code> action creator should remove items from the state and should NOT mutate state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Remove an Item from an Array",
      "dashedName": "remove-an-item-from-an-array"
    },
    {
      "id": "5a24c314108439a4d403615b",
      "description": [
        "The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an <code>object</code>, too. A useful tool for handling objects is the <code>Object.assign()</code> utility. <code>Object.assign()</code> takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy. Here's an example:",
        "<code>const newObject = Object.assign({}, obj1, obj2);</code>",
        "This creates <code>newObject</code> as a new <code>object</code>, which contains the properties that currently exist in <code>obj1</code> and <code>obj2</code>.",
        "<hr>",
        "The Redux state and actions were modified to handle an <code>object</code> for the <code>state</code>. Edit the code to return a new <code>state</code> object for actions with type <code>ONLINE</code>, which set the <code>status</code> property to the string <code>online</code>. Try to use <code>Object.assign()</code> to complete the challenge."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents":
            "const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      // don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);",
          "head": "",
          "tail": ""
        }
      },
      "tests": [
        {
          "text":
            "The Redux store should exist and initialize with a state that is equivalent to the <code>defaultState</code> object declared on line 1.",
          "testString":
            "assert((function() { const expectedState = { user: 'CamperBot', status: 'offline', friends: '732,982', community: 'freeCodeCamp' }; const initialState = store.getState(); return DeepEqual(expectedState, initialState); })(), 'The Redux store should exist and initialize with a state that is equivalent to the <code>defaultState</code> object declared on line 1.');"
        },
        {
          "text":
            "<code>wakeUp</code> and <code>immutableReducer</code> both should be functions.",
          "testString":
            "assert(typeof wakeUp === 'function' && typeof immutableReducer === 'function', '<code>wakeUp</code> and <code>immutableReducer</code> both should be functions.');"
        },
        {
          "text":
            "Dispatching an action of type <code>ONLINE</code> should update the property <code>status</code> in state to <code>online</code> and should NOT mutate state.",
          "testString":
            "assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch({type: 'ONLINE'}); const finalState = store.getState(); const expectedState = { user: 'CamperBot', status: 'online', friends: '732,982', community: 'freeCodeCamp' }; return isFrozen && DeepEqual(finalState, expectedState); })(), 'Dispatching an action of type <code>ONLINE</code> should update the property <code>status</code> in state to <code>online</code> and should NOT mutate state.');"
        },
        {
          "text":
            "<code>Object.assign</code> should be used to return new state.",
          "testString":
            "getUserInput => assert(getUserInput('index').includes('Object.assign'), '<code>Object.assign</code> should be used to return new state.');"
        }
      ],
      "challengeType": 6,
      "isRequired": false,
      "name": "Copy an Object with Objectassign",
      "dashedName": "copy-an-object-with-objectassign"
    },
    {
      "id": "587d7dbd367417b2b2512bb4",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "One feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.",
        "In JavaScript, variables are defined using the <code>let</code> and <code>const</code> keywords. In Sass, variables start with a <code>$</code> followed by the variable name.",
        "Here are a couple examples:",
        "<blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote>",
        "One example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value.",
        "<hr>",
        "Create a variable <code>$text-color</code> and set it to red. Then change the value of the <code>color</code> property for the <code>.blog-post</code> and <code>h2</code> to the <code>$text-color</code> variable."
      ],
      "tests": [
        {
          "text":
            "Your code should have a Sass variable declared for <code>$text-color</code> with a value of red.",
          "testString":
            "assert(code.match(/\\$text-color:\\s*?red;/g), 'Your code should have a Sass variable declared for <code>$text-color</code> with a value of red.');"
        },
        {
          "text":
            "Your code should use the <code>$text-color</code> variable to change the <code>color</code> for the <code>.blog-post</code> and <code>h2</code> items.",
          "testString":
            "assert(code.match(/color:\\s*?\\$text-color;/g), 'Your code should use the <code>$text-color</code> variable to change the <code>color</code> for the <code>.blog-post</code> and <code>h2</code> items.');"
        },
        {
          "text":
            "Your <code>.blog-post</code> element should have a </code>color</code> of red.",
          "testString":
            "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)', 'Your <code>.blog-post</code> element should have a </code>color</code> of red.');"
        },
        {
          "text":
            "Your <code>h2</code> elements should have a </code>color</code> of red.",
          "testString":
            "assert($('h2').css('color') == 'rgb(255, 0, 0)', 'Your <code>h2</code> elements should have a </code>color</code> of red.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  .header{\n    text-align: center;\n  }\n  .blog-post, h2 {\n    color: red;\n  }\n</style>\n\n<h1 class=\"header\">Learn Sass</h1>\n<div class=\"blog-post\">\n  <h2>Some random title</h2>\n  <p>This is a paragraph with some random text in it</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Header #2</h2>\n  <p>Here is some more random text.</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Here is another header</h2>\n  <p>Even more random text within a paragraph</p>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Store Data with Sass Variables",
      "dashedName": "store-data-with-sass-variables"
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass allows <code>nesting</code> of CSS rules, which is a useful way of organizing a style sheet.",
        "Normally, each element is targeted on a different line to style it, like so:",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote>",
        "For a large project, the CSS file will have many lines and rules. This is where <code>nesting</code> can help organize your code by placing child style rules within the respective parent elements:",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote>",
        "<hr>",
        "Use the <code>nesting</code> technique shown above to re-organize the CSS rules for both children of <code>.blog-post</code> element. For testing purposes, the <code>h1</code> should come before the <code>p</code> element."
      ],
      "tests": [
        {
          "text":
            "Your code should re-organize the CSS rules so the <code>h1</code> and <code>p</code> are nested in the <code>.blog-post</code> parent element.",
          "testString":
            "assert(code.match(/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi), 'Your code should re-organize the CSS rules so the <code>h1</code> and <code>p</code> are nested in the <code>.blog-post</code> parent element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  .blog-post {\n    \n  }\n  h1 {\n    text-align: center;\n    color: blue;\n  }\n  p {\n    font-size: 20px;\n  }\n</style>\n\n<div class=\"blog-post\">\n  <h1>Blog Title</h1>\n  <p>This is a paragraph</p>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Nest CSS with Sass",
      "dashedName": "nest-css-with-sass"
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "In Sass, a <code>mixin</code> is a group of CSS declarations that can be reused throughout the style sheet.",
        "Newer CSS features take time before they are fully adopted and ready to use in all browsers. As features are added to browsers, CSS rules using them may need vendor prefixes. Consider \"box-shadow\":",
        "<blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote>",
        "It's a lot of typing to re-write this rule for all the elements that have a <code>box-shadow</code>, or to change each value to test different effects.",
        "<code>Mixins</code> are like functions for CSS. Here is how to write one:",
        "<blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote>",
        "The definition starts with <code>@mixin</code> followed by a custom name. The parameters (the <code>$x</code>, <code>$y</code>, <code>$blur</code>, and <code>$c</code> in the example above) are optional.",
        "Now any time a <code>box-shadow</code> rule is needed, only a single line calling the <code>mixin</code> replaces having to type all the vendor prefixes. A <code>mixin</code> is called with the <code>@include</code> directive:",
        "<blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote>",
        "<hr>",
        "Write a <code>mixin</code> for <code>border-radius</code> and give it a <code>$radius</code> parameter. It should use all the vendor prefixes from the example. Then use the <code>border-radius</code> <code>mixin</code> to give the <code>#awesome</code> element a border radius of 15px."
      ],
      "tests": [
        {
          "text":
            "Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.",
          "testString":
            "assert(code.match(/@mixin\\s+?border-radius\\(\\s*?\\$radius\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.');"
        },
        {
          "text":
            "Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString":
            "assert(code.match(/-webkit-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text":
            "Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString":
            "assert(code.match(/-moz-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text":
            "Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString":
            "assert(code.match(/-ms-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text":
            "Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.",
          "testString":
            "assert(code.match(/border-radius:\\s*?\\$radius;/gi).length == 4, 'Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.');"
        },
        {
          "text":
            "Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.",
          "testString":
            "assert(code.match(/@include\\s+?border-radius\\(\\s*?15px\\s*?\\);/gi), 'Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  \n  #awesome {\n    width: 150px;\n    height: 150px;\n    background-color: green;\n    \n  }\n</style>\n\n<div id=\"awesome\"></div>\n  ",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create Reusable CSS with Mixins",
      "dashedName": "create-reusable-css-with-mixins"
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@if</code> directive in Sass is useful to test for a specific case - it works just like the <code>if</code> statement in JavaScript</code>.",
        "<blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "And just like in JavaScript, <code>@else if</code> and <code>@else</code> test for more conditions:",
        "<blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "Create a <code>mixin</code> called <code>border-stroke</code> that takes a parameter <code>$val</code>. The <code>mixin</code> should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code>:",
        "<blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote>"
      ],
      "tests": [
        {
          "text":
            "Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.",
          "testString":
            "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.');"
        },
        {
          "text":
            "Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.",
          "testString":
            "assert(code.match(/@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.');"
        },
        {
          "text":
            "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.",
          "testString":
            "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.');"
        },
        {
          "text":
            "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.",
          "testString":
            "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.');"
        },
        {
          "text":
            "Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.",
          "testString":
            "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  \n  #box {\n    width: 150px;\n    height: 150px;\n    background-color: red;\n    @include border-stroke(medium);\n  }  \n</style>\n\n<div id=\"box\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use if and else to Add Logic To Your Styles",
      "dashedName": "use-if-and-else-to-add-logic-to-your-styles"
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@for</code> directive adds styles in a loop, very similar to a <code>for</code> loop in JavaScript.",
        "<code>@for</code> is used in two ways: \"start through end\" or \"start to end\". The main difference is that \"start to end\" <em>excludes</em> the end number, and \"start through end\" <em>includes</em> the end number.",
        "Here's a start <b>through</b> end example:",
        "<blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote>",
        "The <code>#{$i}</code> part is the syntax to combine a variable (<code>i</code>) with text to make a string. When the Sass file is converted to CSS, it looks like this:",
        "<blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>...<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote>",
        "This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.",
        "<hr>",
        "Write a <code>@for</code> directive that takes a variable <code>$j</code> that goes from 1 <b>to</b> 6.",
        "It should create 5 classes called <code>.text-1</code> to <code>.text-5</code> where each has a <code>font-size</code> set to 10px multiplied by the index."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@for</code> directive.",
          "testString":
            "assert(code.match(/@for /g), 'Your code should use the <code>@for</code> directive.');"
        },
        {
          "text":
            "Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.",
          "testString":
            "assert($('.text-1').css('font-size') == '10px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text":
            "Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.",
          "testString":
            "assert($('.text-2').css('font-size') == '20px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text":
            "Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.",
          "testString":
            "assert($('.text-3').css('font-size') == '30px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text":
            "Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.",
          "testString":
            "assert($('.text-4').css('font-size') == '40px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text":
            "Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.",
          "testString":
            "assert($('.text-5').css('font-size') == '50px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  \n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use for to Create a Sass Loop",
      "dashedName": "use-for-to-create-a-sass-loop"
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The last challenge showed how the <code>@for</code> directive uses a starting and ending value to loop a certain number of times. Sass also offers the <code>@each</code> directive which loops over each item in a list or map.",
        "On each iteration, the variable gets assigned to the current value from the list or map.",
        "<blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "A map has slightly different syntax. Here's an example:",
        "<blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "Note that the <code>$key</code> variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have <code>color1</code>, <code>color2</code>... in it.",
        "Both of the above code examples are converted into the following CSS:",
        "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote>",
        "<hr>",
        "Write an <code>@each</code> directive that goes through a list: <code>blue, black, red</code> and assigns each variable to a <code>.color-bg</code> class, where the \"color\" part changes for each item.",
        "Each class should set the <code>background-color</code> the respective color."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@each</code> directive.",
          "testString":
            "assert(code.match(/@each /g), 'Your code should use the <code>@each</code> directive.');"
        },
        {
          "text":
            "Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.",
          "testString":
            "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)', 'Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.');"
        },
        {
          "text":
            "Your <code>.black-bg</code> class should have a <code>background-color</code> of black.",
          "testString":
            "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)', 'Your <code>.black-bg</code> class should have a <code>background-color</code> of black.');"
        },
        {
          "text":
            "Your <code>.red-bg</code> class should have a <code>background-color</code> of red.",
          "testString":
            "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)', 'Your <code>.red-bg</code> class should have a <code>background-color</code> of red.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  \n  div {\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div class=\"blue-bg\"></div>\n<div class=\"black-bg\"></div>\n<div class=\"red-bg\"></div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use each to Map Over Items in a List",
      "dashedName": "use-each-to-map-over-items-in-a-list"
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@while</code> directive is an option with similar functionality to the JavaScript <code>while</code> loop. It creates CSS rules until a condition is met.",
        "The <code>@for</code> challenge gave an example to create a simple grid system. This can also work with <code>@while</code>.",
        "<blockquote>$x: 1;<br>@while $x < 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote>",
        "First, define a variable <code>$x</code> and set it to 1. Next, use the <code>@while</code> directive to create the grid system <i>while</i> <code>$x</code> is less than 13.",
        "After setting the CSS rule for <code>width</code>, <code>$x</code> is incremented by 1 to avoid an infinite loop.",
        "<hr>",
        "Use <code>@while</code> to create a series of classes with different <code>font-sizes</code>.",
        "There should be 10 different classes from <code>text-1</code> to <code>text-10</code>. Then set <code>font-size</code> to 5px multiplied by the current index number. Make sure to avoid an infinite loop!"
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@while</code> directive.",
          "testString":
            "assert(code.match(/@while /g), 'Your code should use the <code>@while</code> directive.');"
        },
        {
          "text": "Your code should set an index variable to 1 to start.",
          "testString":
            "assert(code.match(/\\$.*:\\s*?1;/gi), 'Your code should set an index variable to 1 to start.');"
        },
        {
          "text": "Your code should increment the counter variable.",
          "testString":
            "assert(code.match(/\\$(.*):\\s*?\\$\\1\\s*?\\+\\s*?1;/gi), 'Your code should increment the counter variable.');"
        },
        {
          "text":
            "Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.",
          "testString":
            "assert($('.text-1').css('font-size') == '5px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.');"
        },
        {
          "text":
            "Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.",
          "testString":
            "assert($('.text-2').css('font-size') == '10px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text":
            "Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.",
          "testString":
            "assert($('.text-3').css('font-size') == '15px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.');"
        },
        {
          "text":
            "Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.",
          "testString":
            "assert($('.text-4').css('font-size') == '20px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text":
            "Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.",
          "testString":
            "assert($('.text-5').css('font-size') == '25px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.');"
        },
        {
          "text":
            "Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.",
          "testString":
            "assert($('.text-6').css('font-size') == '30px', 'Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text":
            "Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.",
          "testString":
            "assert($('.text-7').css('font-size') == '35px', 'Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.');"
        },
        {
          "text":
            "Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.",
          "testString":
            "assert($('.text-8').css('font-size') == '40px', 'Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text":
            "Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.",
          "testString":
            "assert($('.text-9').css('font-size') == '45px', 'Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.');"
        },
        {
          "text":
            "Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.",
          "testString":
            "assert($('.text-10').css('font-size') == '50px', 'Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  \n  \n  \n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>\n<p class=\"text-6\">Hello</p>\n<p class=\"text-7\">Hello</p>\n<p class=\"text-8\">Hello</p>\n<p class=\"text-9\">Hello</p>\n<p class=\"text-10\">Hello</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Apply a Style Until a Condition is Met with while",
      "dashedName": "apply-a-style-until-a-condition-is-met-with-while"
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "<code>Partials</code> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.",
        "Names for <code>partials</code> start with the underscore (<code>_</code>) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the <code>.scss</code> file extension. To bring the code in the <code>partial</code> into another Sass file, use the <code>@import</code> directive.",
        "For example, if all your <code>mixins</code> are saved in a <code>partial</code> named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:",
        "<blockquote>// In the main.scss file<br><br>@import 'mixins'</blockquote>",
        "Note that the underscore is not needed in the <code>import</code> statement - Sass understands it is a <code>partial</code>. Once a <code>partial</code> is imported into a file, all variables, <code>mixins</code>, and other code are available to use.",
        "<hr>",
        "Write an <code>@import</code> statement to import a <code>partial</code> named <code>_variables.scss</code> into the main.scss file."
      ],
      "tests": [
        {
          "text":
            "Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.",
          "testString":
            "assert(code.match(/@import\\s+?('|\")variables\\1/gi), 'Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": "// The main.scss file\n\n\n\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Split Your Styles into Smaller Chunks with Partials",
      "dashedName": "split-your-styles-into-smaller-chunks-with-partials"
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "required": [
        {
          "src":
            "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass has a feature called <code>extend</code> that makes it easy to borrow the CSS rules from one element and build upon them in another.",
        "For example, the below block of CSS rules style a <code>.panel</code> class. It has a <code>background-color</code>, <code>height</code> and <code>border</code>.",
        "<blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote>",
        "Now you want another panel called <code>.big-panel</code>. It has the same base properties as <code>.panel</code>, but also needs a <code>width</code> and <code>font-size</code>.",
        "It's possible to copy and paste the initial CSS rules from <code>.panel</code>, but the code becomes repetitive as you add more types of panels.",
        "The <code>extend</code> directive is a simple way to reuse the rules written for one element, then add more for another:",
        "<blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote>",
        "The <code>.big-panel</code> will have the same properties as <code>.panel</code> in addition to the new styles.",
        "<hr>",
        "Make a class <code>.info-important</code> that extends <code>.info</code> and also has a <code>background-color</code> set to magenta."
      ],
      "tests": [
        {
          "text":
            "Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.",
          "testString":
            "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi), 'Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.');"
        },
        {
          "text":
            "Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.",
          "testString":
            "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi), 'Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style type='text/sass'>\n  h3{\n    text-align: center;\n  }\n  .info{\n    width: 200px;\n    border: 1px solid black;\n    margin: 0 auto;\n  }\n  \n  \n  \n  \n</style>\n<h3>Posts</h3>\n<div class=\"info-important\">\n  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>\n</div>\n\n<div class=\"info\">\n  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Extend One Set of CSS Styles to Another Element",
      "dashedName": "extend-one-set-of-css-styles-to-another-element"
    },
    {
      "id": "bd7168d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/GrZVaM' target='_blank'>https://codepen.io/freeCodeCamp/full/GrZVaM</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.",
        "<strong>User Story #1:</strong> My chart should have a title with a corresponding <code>id=\"title\"</code>.",
        "<strong>User Story #2:</strong> My chart should have a <code>g</code> element x-axis with a corresponding <code>id=\"x-axis\"</code>.",
        "<strong>User Story #3:</strong> My chart should have a <code>g</code> element y-axis with a corresponding <code>id=\"y-axis\"</code>.",
        "<strong>User Story #4:</strong> Both axes should contain multiple tick labels, each with the corresponding <code>class=\"tick\"</code>.",
        "<strong>User Story #5:</strong> My chart should have a <code>rect</code> element for each data point with a corresponding <code>class=\"bar\"</code> displaying the data.",
        "<strong>User Story #6:</strong> Each bar should have the properties <code>data-date</code> and <code>data-gdp</code> containing date and GDP values.",
        "<strong>User Story #7:</strong> The bar elements' <code>data-date</code> properties should match the order of the provided data.",
        "<strong>User Story #8:</strong> The bar elements' <code>data-gdp</code> properties should match the order of the provided data.",
        "<strong>User Story #9:</strong> Each bar element's height should accurately represent the data's corresponding GDP.",
        "<strong>User Story #10:</strong> The <code>data-date</code> attribute and its corresponding bar element should align with the corresponding value on the x-axis.",
        "<strong>User Story #11:</strong> The <code>data-gdp</code> attribute and its corresponding bar element should align with the corresponding value on the y-axis.",
        "<strong>User Story #12:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.",
        "<strong>User Story #13:</strong> My tooltip should have a <code>data-date</code> property that corresponds to the <code>data-date</code> of the active area.",
        "Here is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json</code>",
        "You can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>.",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Visualize Data with a Bar Chart",
      "dashedName": "visualize-data-with-a-bar-chart"
    },
    {
      "id": "bd7178d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/bgpXyK' target='_blank'>https://codepen.io/freeCodeCamp/full/bgpXyK</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.",
        "<strong>User Story #1:</strong> I can see a title element that has a corresponding <code>id=\"title\"</code>.",
        "<strong>User Story #2:</strong> I can see an x-axis that has a corresponding <code>id=\"x-axis\"</code>.",
        "<strong>User Story #3:</strong> I can see a y-axis that has a corresponding <code>id=\"y-axis\"</code>.",
        "<strong>User Story #4:</strong> I can see dots, that each have a class of <code>dot</code>, which represent the data being plotted.",
        "<strong>User Story #5:</strong> Each dot should have the properties <code>data-xvalue</code> and <code>data-yvalue</code> containing their corresponding x and y values.",
        "<strong>User Story #6:</strong> The <code>data-xvalue</code> and <code>data-yvalue</code> of each dot should be within the range of the actual data and in the correct data format. For <code>data-xvalue</code>, integers (full years) or Date objects are acceptable for test evaluation. For <code>data-yvalue</code> (minutes), use Date objects.",
        "<strong>User Story #7:</strong> The <code>data-xvalue</code> and its corresponding dot should align with the corresponding point/value on the x-axis.",
        "<strong>User Story #8:</strong> The <code>data-yvalue</code> and its corresponding dot should align with the corresponding point/value on the y-axis.",
        "<strong>User Story #9:</strong> I can see multiple tick labels on the y-axis with <code>%M:%S</code> time format.",
        "<strong>User Story #10:</strong> I can see multiple tick labels on the x-axis that show the year.",
        "<strong>User Story #11:</strong> I can see that the range of the x-axis labels are within the range of the actual x-axis data.",
        "<strong>User Story #12:</strong> I can see that the range of the y-axis labels are within the range of the actual y-axis data.",
        "<strong>User Story #13:</strong> I can see a legend containing descriptive text that has <code>id=\"legend\"</code>.",
        "<strong>User Story #14:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.",
        "<strong>User Story #15:</strong> My tooltip should have a <code>data-year</code> property that corresponds to the <code>data-xvalue</code> of the active area.",
        "Here is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json</code>",
        "You can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Visualize Data with a Scatterplot Graph",
      "dashedName": "visualize-data-with-a-scatterplot-graph"
    },
    {
      "id": "bd7188d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/JEXgeY' target='_blank'>https://codepen.io/freeCodeCamp/full/JEXgeY</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.",
        "<strong>User Story #1:</strong> My heat map should have a title with a corresponding <code>id=\"title\"</code>.",
        "<strong>User Story #2:</strong> My heat map should have a description with a corresponding <code>id=\"description\"</code>.",
        "<strong>User Story #3:</strong> My heat map should have an x-axis with a corresponding <code>id=\"x-axis\"</code>.",
        "<strong>User Story #4:</strong> My heat map should have a y-axis with a corresponding <code>id=\"y-axis\"</code>.",
        "<strong>User Story #5:</strong> My heat map should have <code>rect</code> elements with a <code>class=\"cell\"</code> that represent the data.",
        "<strong>User Story #6:</strong> There should be at least 4 different fill colors used for the cells.",
        "<strong>User Story #7:</strong> Each cell will have the properties <code>data-month</code>, <code>data-year</code>, <code>data-temp</code> containing their corresponding month, year, and temperature values.",
        "<strong>User Story #8:</strong> The <code>data-month</code>, <code>data-year</code> of each cell should be within the range of the data.",
        "<strong>User Story #9:</strong> My heat map should have cells that align with the corresponding month on the y-axis.",
        "<strong>User Story #10:</strong> My heat map should have cells that align with the corresponding year on the x-axis.",
        "<strong>User Story #11:</strong> My heat map should have multiple tick labels on the y-axis with the full month name.",
        "<strong>User Story #12:</strong> My heat map should have multiple tick labels on the x-axis with the years between 1754 and 2015.",
        "<strong>User Story #13:</strong> My heat map should have a legend with a corresponding <code>id=\"legend\"</code>.",
        "<strong>User Story #14:</strong> My legend should contain <code>rect</code> elements.",
        "<strong>User Story #15:</strong> The <code>rect</code> elements in the legend should use at least 4 different fill colors.",
        "<strong>User Story #16:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.",
        "<strong>User Story #16:</strong> My tooltip should have a <code>data-year</code> property that corresponds to the <code>data-year</code> of the active area.",
        "Here is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json</code>",
        "You can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Visualize Data with a Heat Map",
      "dashedName": "visualize-data-with-a-heat-map"
    },
    {
      "id": "587d7fa6367417b2b2512bbf",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/EZKqza' target='_blank'>https://codepen.io/freeCodeCamp/full/EZKqza</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.",
        "<strong>User Story #1:</strong> My choropleth should have a title with a corresponding <code>id=\"title\"</code>.",
        "<strong>User Story #2:</strong> My choropleth should have a description element with a corresponding <code>id=\"description\"</code>.",
        "<strong>User Story #3:</strong> My choropleth should have counties with a corresponding <code>class=\"county\"</code> that represent the data.",
        "<strong>User Story #4:</strong> There should be at least 4 different fill colors used for the counties.",
        "<strong>User Story #5:</strong> My counties should each have <code>data-fips</code> and <code>data-education</code> properties containing their corresponding fips and education values.",
        "<strong>User Story #6:</strong> My choropleth should have a county for each provided data point.",
        "<strong>User Story #7:</strong> The counties should have data-fips and data-education values that match the sample data.",
        "<strong>User Story #8:</strong> My choropleth should have a legend with a corresponding <code>id=\"legend\"</code>.",
        "<strong>User Story #9:</strong> There should be at least 4 different fill colors used for the legend.",
        "<strong>User Story #10:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.",
        "<strong>User Story #11:</strong> My tooltip should have a <code>data-education</code> property that corresponds to the <code>data-education</code> of the active area.",
        "Here are the datasets you will need to complete this project:<br><ul><li><strong>US Education Data: </strong><code>https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/for_user_education.json</code></li><li><strong>US County Data: </strong><code>https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json</code></li></ul>",
        "You can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Visualize Data with a Choropleth Map",
      "dashedName": "visualize-data-with-a-choropleth-map"
    },
    {
      "id": "587d7fa6367417b2b2512bc0",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/KaNGNR' target='_blank'>https://codepen.io/freeCodeCamp/full/KaNGNR</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.",
        "You can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.",
        "<strong>User Story #1:</strong> My tree map should have a title with a corresponding <code>id=\"title\"</code>.",
        "<strong>User Story #2:</strong> My tree map should have a description with a corresponding <code>id=\"description\"</code>.",
        "<strong>User Story #3:</strong> My tree map should have <code>rect</code> elements with a corresponding <code>class=\"tile\"</code> that represent the data.",
        "<strong>User Story #4:</strong> There should be at least 2 different fill colors used for the tiles.",
        "<strong>User Story #5:</strong> Each tile should have the properties <code>data-name</code>, <code>data-category</code>, and <code>data-value</code> containing their corresponding name, category, and value.",
        "<strong>User Story #6:</strong> The area of each tile should correspond to the data-value amount: tiles with a larger data-value should have a bigger area.",
        "<strong>User Story #7:</strong> My tree map should have a legend with corresponding <code>id=\"legend\"</code>.",
        "<strong>User Story #8:</strong> My legend should have <code>rect</code> elements with a corresponding <code>class=\"legend-item\"</code>.",
        "<strong>User Story #9:</strong> The <code>rect</code> elements in the legend should use at least 2 different fill colors.",
        "<strong>User Story #10:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.",
        "<strong>User Story #11:</strong> My tooltip should have a <code>data-value</code> property that corresponds to the <code>data-value</code> of the active area.",
        "For this project you can use any of the following datasets:<br><ul><li><strong>Kickstarter Pledges:</strong> <code>https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/kickstarter-funding-data.json</code></li><li><strong>Movie Sales:</strong> <code>https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/movie-data.json</code></li><li><strong>Video Game Sales:</strong> <code>https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/video-game-sales-data.json</code></li></ul>",
        "You can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>",
        "Once you're done, submit the URL to your working project with all its tests passing.",
        "Remember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 3,
      "name": "Visualize Data with a Treemap Diagram",
      "dashedName": "visualize-data-with-a-treemap-diagram"
    },
    {
      "id": "587d7fa6367417b2b2512bc2",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 has several methods that let you add and change elements in your document.",
        "The <code>select()</code> method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:",
        "<code>const anchor = d3.select(\"a\");</code>",
        "The above example finds the first anchor tag on the page and saves an HTML node for it in the variable <code>anchor</code>. You can use the selection with other methods. The \"d3\" part of the example is a reference to the D3 object, which is how you access D3 methods.",
        "Two other useful methods are <code>append()</code> and <code>text()</code>.",
        "The <code>append()</code> method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.",
        "The <code>text()</code> method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.",
        "Here's an example that selects an unordered list, appends a list item, and adds text:",
        "<blockquote>d3.select(\"ul\")<br>    .append(\"li\")<br>    .text(\"Very important item\");</blockquote>",
        "D3 allows you to chain several methods together with periods to perform a number of actions in a row.",
        "<hr>",
        "Use the <code>select</code> method to select the <code>body</code> tag in the document. Then <code>append</code> an <code>h1</code> tag to it, and add the text \"Learning D3\" into the <code>h1</code> element."
      ],
      "tests": [
        {
          "text":
            "The <code>body</code> should have one <code>h1</code> element.",
          "testString":
            "assert($('body').children('h1').length == 1, 'The <code>body</code> should have one <code>h1</code> element.');"
        },
        {
          "text":
            "The <code>h1</code> element should have the text \"Learning D3\" in it.",
          "testString":
            "assert($('h1').text() == \"Learning D3\", 'The <code>h1</code> element should have the text \"Learning D3\" in it.');"
        },
        {
          "text": "Your code should access the <code>d3</code> object.",
          "testString":
            "assert(code.match(/d3/g), 'Your code should access the <code>d3</code> object.');"
        },
        {
          "text": "Your code should use the <code>select</code> method.",
          "testString":
            "assert(code.match(/\\.select/g), 'Your code should use the <code>select</code> method.');"
        },
        {
          "text": "Your code should use the <code>append</code> method.",
          "testString":
            "assert(code.match(/\\.append/g), 'Your code should use the <code>append</code> method.');"
        },
        {
          "text": "Your code should use the <code>text</code> method.",
          "testString":
            "assert(code.match(/\\.text/g), 'Your code should use the <code>text</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    // Add your code below this line\n    \n    \n    \n    // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Document Elements with D3",
      "dashedName": "add-document-elements-with-d3"
    },
    {
      "id": "587d7fa6367417b2b2512bc3",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 also has the <code>selectAll()</code> method to select a group of elements. It returns an array of HTML nodes for all the items in the document that match the input string. Here's an example to select all the anchor tags in a document:",
        "<code>const anchors = d3.selectAll(\"a\");</code>",
        "Like the <code>select()</code> method, <code>selectAll()</code> supports method chaining, and you can use it with other methods.",
        "<hr>",
        "Select all of the <code>li</code> tags in the document, and change their text to \"list item\" by chaining the <code>.text()</code> method."
      ],
      "tests": [
        {
          "text":
            "There should be 3 <code>li</code> elements on the page, and the text in each one should say \"list item\". Capitalization and spacing should match exactly.",
          "testString":
            "assert($('li').text().match(/list item/g).length == 3, 'There should be 3 <code>li</code> elements on the page, and the text in each one should say \"list item\". Capitalization and spacing should match exactly.');"
        },
        {
          "text": "Your code should access the <code>d3</code> object.",
          "testString":
            "assert(code.match(/d3/g), 'Your code should access the <code>d3</code> object.');"
        },
        {
          "text": "Your code should use the <code>selectAll</code> method.",
          "testString":
            "assert(code.match(/\\.selectAll/g), 'Your code should use the <code>selectAll</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <ul>\n    <li>Example</li>\n    <li>Example</li>\n    <li>Example</li>\n  </ul>\n  <script>\n    // Add your code below this line\n    \n    \n    \n    // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Select a Group of Elements with D3",
      "dashedName": "select-a-group-of-elements-with-d3"
    },
    {
      "id": "587d7fa7367417b2b2512bc4",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The D3 library focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page. Data comes in many formats, but this challenge uses a simple array of numbers.",
        "The first step is to make D3 aware of the data. The <code>data()</code> method is used on a selection of DOM elements to attach the data to those elements. The data set is passed as an argument to the method.",
        "A common workflow pattern is to create a new element in the document for each piece of data in the set. D3 has the <code>enter()</code> method for this purpose.",
        "When <code>enter()</code> is combined with the <code>data()</code> method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.",
        "Here is an example that selects a <code>ul</code> element and creates a new list item based on the number of entries in the array:",
        "<blockquote>&lt;body&gt;<br>  &lt;ul&gt;&lt;/ul&gt;<br>  &lt;script&gt;<br>    const dataset = [\"a\", \"b\", \"c\"];<br>    d3.select(\"ul\").selectAll(\"li\")<br>      .data(dataset)<br>      .enter()<br>      .append(\"li\")<br>      .text(\"New item\");<br>  &lt;/script&gt;<br>&lt;/body&gt;</blockquote>",
        "It may seem confusing to select elements that don't exist yet. This code is telling D3 to first select the <code>ul</code> on the page. Next, select all list items, which returns an empty selection. Then the <code>data()</code> method reviews the dataset and runs the following code three times, once for each item in the array. The <code>enter()</code> method sees there are no <code>li</code> elements on the page, but it needs 3 (one for each piece of data in <code>dataset</code>). New <code>li</code> elements are appended to the <code>ul</code> and have the text \"New item\".",
        "<hr>",
        "Select the <code>body</code> node, then select all <code>h2</code> elements. Have D3 create and append an <code>h2</code> tag for each item in the <code>dataset</code> array. The text in the <code>h2</code> should say \"New Title\". Your code should use the <code>data()</code> and <code>enter()</code> methods."
      ],
      "tests": [
        {
          "text": "Your document should have 9 <code>h2</code> elements.",
          "testString":
            "assert($('h2').length == 9, 'Your document should have 9 <code>h2</code> elements.');"
        },
        {
          "text":
            "The text in the <code>h2</code> elements should say \"New Title\". The capitalization and spacing should match exactly.",
          "testString":
            "assert($('h2').text().match(/New Title/g).length == 9, 'The text in the <code>h2</code> elements should say \"New Title\". The capitalization and spacing should match exactly.');"
        },
        {
          "text": "Your code should use the <code>data()</code> method.",
          "testString":
            "assert(code.match(/\\.data/g), 'Your code should use the <code>data()</code> method.');"
        },
        {
          "text": "Your code should use the <code>enter()</code> method.",
          "testString":
            "assert(code.match(/\\.enter/g), 'Your code should use the <code>enter()</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    // Add your code below this line\n    \n    \n    \n    // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Work with Data in D3",
      "dashedName": "work-with-data-in-d3"
    },
    {
      "id": "587d7fa7367417b2b2512bc5",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last two challenges cover the basics of displaying data dynamically with D3 using the <code>data()</code> and <code>enter()</code> methods. These methods take a data set and, together with the <code>append()</code> method, create a new DOM element for each entry in the data set.",
        "In the previous challenge, you created a new <code>h2</code> element for each item in the <code>dataset</code> array, but they all contained the same text, \"New Title\". This is because you have not made use of the data that is bound to each of the <code>h2</code> elements.",
        "The D3 <code>text()</code> method can take a string or a callback function as an argument:",
        "<code>selection.text((d) => d)</code>",
        "In the example above, the parameter <code>d</code> refers to a single entry in the dataset that a selection is bound to.",
        "Using the current example as context, the first <code>h2</code> element is bound to 12, the second <code>h2</code> element is bound to 31, the third <code>h2</code> element is bound to 22, and so on.",
        "<hr>",
        "Change the <code>text()</code> method so that each <code>h2</code> element displays the corresponding value from the <code>dataset</code> array with a single space and \"USD\". For example, the first heading should be \"12 USD\"."
      ],
      "tests": [
        {
          "text": "The first <code>h2</code> should have the text \"12 USD\".",
          "testString":
            "assert($('h2').eq(0).text() == \"12 USD\", 'The first <code>h2</code> should have the text \"12 USD\".');"
        },
        {
          "text": "The second <code>h2</code> should have the text \"31 USD\".",
          "testString":
            "assert($('h2').eq(1).text() == \"31 USD\", 'The second <code>h2</code> should have the text \"31 USD\".');"
        },
        {
          "text": "The third <code>h2</code> should have the text \"22 USD\".",
          "testString":
            "assert($('h2').eq(2).text() == \"22 USD\", 'The third <code>h2</code> should have the text \"22 USD\".');"
        },
        {
          "text": "The fourth <code>h2</code> should have the text \"17 USD\".",
          "testString":
            "assert($('h2').eq(3).text() == \"17 USD\", 'The fourth <code>h2</code> should have the text \"17 USD\".');"
        },
        {
          "text": "The fifth <code>h2</code> should have the text \"25 USD\".",
          "testString":
            "assert($('h2').eq(4).text() == \"25 USD\", 'The fifth <code>h2</code> should have the text \"25 USD\".');"
        },
        {
          "text": "The sixth <code>h2</code> should have the text \"18 USD\".",
          "testString":
            "assert($('h2').eq(5).text() == \"18 USD\", 'The sixth <code>h2</code> should have the text \"18 USD\".');"
        },
        {
          "text":
            "The seventh <code>h2</code> should have the text \"29 USD\".",
          "testString":
            "assert($('h2').eq(6).text() == \"29 USD\", 'The seventh <code>h2</code> should have the text \"29 USD\".');"
        },
        {
          "text": "The eighth <code>h2</code> should have the text \"14 USD\".",
          "testString":
            "assert($('h2').eq(7).text() == \"14 USD\", 'The eighth <code>h2</code> should have the text \"14 USD\".');"
        },
        {
          "text": "The ninth <code>h2</code> should have the text \"9 USD\".",
          "testString":
            "assert($('h2').eq(8).text() == \"9 USD\", 'The ninth <code>h2</code> should have the text \"9 USD\".');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"h2\")\n      .data(dataset)\n      .enter()\n      .append(\"h2\")\n      // Add your code below this line\n      \n      .text(\"New Title\");\n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Work with Dynamic Data in D3",
      "dashedName": "work-with-dynamic-data-in-d3"
    },
    {
      "id": "587d7fa7367417b2b2512bc6",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 lets you add inline CSS styles on dynamic elements with the <code>style()</code> method.",
        "The <code>style()</code> method takes a comma-separated key-value pair as an argument. Here's an example to set the selection's text color to blue:",
        "<code>selection.style(\"color\",\"blue\");</code>",
        "<hr>",
        "Add the <code>style()</code> method to the code in the editor to make all the displayed text have a <code>font-family</code> of <code>verdana</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>h2</code> elements should have a <code>font-family</code> of verdana.",
          "testString":
            "assert($('h2').css('font-family') == 'verdana', 'Your <code>h2</code> elements should have a <code>font-family</code> of verdana.');"
        },
        {
          "text": "Your code should use the <code>style()</code> method.",
          "testString":
            "assert(code.match(/\\.style/g), 'Your code should use the <code>style()</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"h2\")\n      .data(dataset)\n      .enter()\n      .append(\"h2\")\n      .text((d) => (d + \" USD\"))\n      // Add your code below this line\n      \n      \n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Inline Styling to Elements",
      "dashedName": "add-inline-styling-to-elements"
    },
    {
      "id": "587d7fa7367417b2b2512bc7",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 is about visualization and presentation of data. It's likely you'll want to change the styling of elements based on the data. You can use a callback function in the <code>style()</code> method to change the styling for different elements.",
        "For example, you may want to color a data point blue if has a value less than 20, and red otherwise. You can use a callback function in the <code>style()</code> method and include the conditional logic. The callback function uses the <code>d</code> parameter to represent the data point:",
        "<blockquote>selection.style(\"color\", (d) => {<br>  /* Logic that returns the color based on a condition */<br>});</blockquote>",
        "The <code>style()</code> method is not limited to setting the <code>color</code> - it can be used with other CSS properties as well.",
        "<hr>",
        "Add the <code>style()</code> method to the code in the editor to set the <code>color</code> of the <code>h2</code> elements conditionally. Write the callback function so if the data value is less than 20, it returns \"red\", otherwise it returns \"green\".",
        "<strong>Note</strong><br>You can use if-else logic, or the ternary operator."
      ],
      "tests": [
        {
          "text":
            "The first <code>h2</code> should have a <code>color</code> of red.",
          "testString":
            "assert($('h2').eq(0).css('color') == \"rgb(255, 0, 0)\", 'The first <code>h2</code> should have a <code>color</code> of red.');"
        },
        {
          "text":
            "The second <code>h2</code> should have a <code>color</code> of green.",
          "testString":
            "assert($('h2').eq(1).css('color') == \"rgb(0, 128, 0)\", 'The second <code>h2</code> should have a <code>color</code> of green.');"
        },
        {
          "text":
            "The third <code>h2</code> should have a <code>color</code> of green.",
          "testString":
            "assert($('h2').eq(2).css('color') == \"rgb(0, 128, 0)\", 'The third <code>h2</code> should have a <code>color</code> of green.');"
        },
        {
          "text":
            "The fourth <code>h2</code> should have a <code>color</code> of red.",
          "testString":
            "assert($('h2').eq(3).css('color') == \"rgb(255, 0, 0)\", 'The fourth <code>h2</code> should have a <code>color</code> of red.');"
        },
        {
          "text":
            "The fifth <code>h2</code> should have a <code>color</code> of green.",
          "testString":
            "assert($('h2').eq(4).css('color') == \"rgb(0, 128, 0)\", 'The fifth <code>h2</code> should have a <code>color</code> of green.');"
        },
        {
          "text":
            "The sixth <code>h2</code> should have a <code>color</code> of red.",
          "testString":
            "assert($('h2').eq(5).css('color') == \"rgb(255, 0, 0)\", 'The sixth <code>h2</code> should have a <code>color</code> of red.');"
        },
        {
          "text":
            "The seventh <code>h2</code> should have a <code>color</code> of green.",
          "testString":
            "assert($('h2').eq(6).css('color') == \"rgb(0, 128, 0)\", 'The seventh <code>h2</code> should have a <code>color</code> of green.');"
        },
        {
          "text":
            "The eighth <code>h2</code> should have a <code>color</code> of red.",
          "testString":
            "assert($('h2').eq(7).css('color') == \"rgb(255, 0, 0)\", 'The eighth <code>h2</code> should have a <code>color</code> of red.');"
        },
        {
          "text":
            "The ninth <code>h2</code> should have a <code>color</code> of red.",
          "testString":
            "assert($('h2').eq(8).css('color') == \"rgb(255, 0, 0)\", 'The ninth <code>h2</code> should have a <code>color</code> of red.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"h2\")\n      .data(dataset)\n      .enter()\n      .append(\"h2\")\n      .text((d) => (d + \" USD\"))\n      // Add your code below this line\n      \n      \n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change Styles Based on Data",
      "dashedName": "change-styles-based-on-data"
    },
    {
      "id": "587d7fa7367417b2b2512bc8",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "Using a lot of inline styles on HTML elements gets hard to manage, even for smaller apps. It's easier to add a class to elements and style that class one time using CSS rules. D3 has the <code>attr()</code> method to add any HTML attribute to an element, including a class name.",
        "The <code>attr()</code> method works the same way that <code>style()</code> does. It takes comma-separated values, and can use a callback function. Here's an example to add a class of \"container\" to a selection:",
        "<code>selection.attr(\"class\", \"container\");</code>",
        "<hr>",
        "Add the <code>attr()</code> method to the code in the editor and put a class of <code>bar</code> on the <code>div</code> elements."
      ],
      "tests": [
        {
          "text":
            "Your <code>div</code> elements should have a class of <code>bar</code>.",
          "testString":
            "assert($('div').attr('class') == \"bar\", 'Your <code>div</code> elements should have a class of <code>bar</code>.');"
        },
        {
          "text": "Your code should use the <code>attr()</code> method.",
          "testString":
            "assert(code.match(/\\.attr/g), 'Your code should use the <code>attr()</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .bar {\n    width: 25px;\n    height: 100px;\n    display: inline-block;\n    background-color: blue;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"div\")\n      .data(dataset)\n      .enter()\n      .append(\"div\")\n      // Add your code below this line\n      \n      \n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Classes with D3",
      "dashedName": "add-classes-with-d3"
    },
    {
      "id": "587d7fa8367417b2b2512bc9",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The previous challenges covered how to display data from an array and how to add CSS classes. You can combine these lessons to create a simple bar chart. There are two steps to this:",
        "1) Create a <code>div</code> for each data point in the array",
        "2) Give each <code>div</code> a dynamic height, using a callback function in the <code>style()</code> method that sets height equal to the data value",
        "Recall the format to set a style using a callback function:",
        "<code>selection.style(\"cssProperty\", (d) => d)</code>",
        "<hr>",
        "Add the <code>style()</code> method to the code in the editor to set the <code>height</code> property for each element. Use a callback function to return the value of the data point with the string \"px\" added to it."
      ],
      "tests": [
        {
          "text":
            "The first <code>div</code> should have a <code>height</code> of 12 pixels.",
          "testString":
            "assert($('div').eq(0).css('height') == '12px', 'The first <code>div</code> should have a <code>height</code> of 12 pixels.');"
        },
        {
          "text":
            "The second <code>div</code> should have a <code>height</code> of 31 pixels.",
          "testString":
            "assert($('div').eq(1).css('height') == '31px', 'The second <code>div</code> should have a <code>height</code> of 31 pixels.');"
        },
        {
          "text":
            "The third <code>div</code> should have a <code>height</code> of 22 pixels.",
          "testString":
            "assert($('div').eq(2).css('height') == '22px', 'The third <code>div</code> should have a <code>height</code> of 22 pixels.');"
        },
        {
          "text":
            "The fourth <code>div</code> should have a <code>height</code> of 17 pixels.",
          "testString":
            "assert($('div').eq(3).css('height') == '17px', 'The fourth <code>div</code> should have a <code>height</code> of 17 pixels.');"
        },
        {
          "text":
            "The fifth <code>div</code> should have a <code>height</code> of 25 pixels.",
          "testString":
            "assert($('div').eq(4).css('height') == '25px', 'The fifth <code>div</code> should have a <code>height</code> of 25 pixels.');"
        },
        {
          "text":
            "The sixth <code>div</code> should have a <code>height</code> of 18 pixels.",
          "testString":
            "assert($('div').eq(5).css('height') == '18px', 'The sixth <code>div</code> should have a <code>height</code> of 18 pixels.');"
        },
        {
          "text":
            "The seventh <code>div</code> should have a <code>height</code> of 29 pixels.",
          "testString":
            "assert($('div').eq(6).css('height') == '29px', 'The seventh <code>div</code> should have a <code>height</code> of 29 pixels.');"
        },
        {
          "text":
            "The eighth <code>div</code> should have a <code>height</code> of 14 pixels.",
          "testString":
            "assert($('div').eq(7).css('height') == '14px', 'The eighth <code>div</code> should have a <code>height</code> of 14 pixels.');"
        },
        {
          "text":
            "The ninth <code>div</code> should have a <code>height</code> of 9 pixels.",
          "testString":
            "assert($('div').eq(8).css('height') == '9px', 'The ninth <code>div</code> should have a <code>height</code> of 9 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .bar {\n    width: 25px;\n    height: 100px;\n    display: inline-block;\n    background-color: blue;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"div\")\n      .data(dataset)\n      .enter()\n      .append(\"div\")\n      .attr(\"class\", \"bar\")\n      // Add your code below this line\n      \n      \n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Update the Height of an Element Dynamically",
      "dashedName": "update-the-height-of-an-element-dynamically"
    },
    {
      "id": "587d7fa8367417b2b2512bca",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last challenge created a bar chart, but there are a couple of formatting changes that could improve it:",
        "1) Add space between each bar to visually separate them, which is done by adding a margin to the CSS for the <code>bar</code> class",
        "2) Increase the height of the bars to better show the difference in values, which is done by multiplying the value by a number to scale the height",
        "<hr>",
        "First, add a <code>margin</code> of 2px to the <code>bar</code> class in the <code>style</code> tag. Next, change the callback function in the <code>style()</code> method so it returns a value 10 times the original data value (plus the \"px\").",
        "<strong>Note</strong><br>Multiplying each data point by the <em>same</em> constant only alters the scale. It's like zooming in, and it doesn't change the meaning of the underlying data."
      ],
      "tests": [
        {
          "text":
            "The first <code>div</code> should have a <code>height</code> of 120 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(0).css('height') == '120px' && $('div').eq(0).css('margin-right') == '2px', 'The first <code>div</code> should have a <code>height</code> of 120 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The second <code>div</code> should have a <code>height</code> of 310 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(1).css('height') == '310px' && $('div').eq(1).css('margin-right') == '2px', 'The second <code>div</code> should have a <code>height</code> of 310 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The third <code>div</code> should have a <code>height</code> of 220 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(2).css('height') == '220px' && $('div').eq(2).css('margin-right') == '2px', 'The third <code>div</code> should have a <code>height</code> of 220 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The fourth <code>div</code> should have a <code>height</code> of 170 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(3).css('height') == '170px' && $('div').eq(3).css('margin-right') == '2px', 'The fourth <code>div</code> should have a <code>height</code> of 170 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The fifth <code>div</code> should have a <code>height</code> of 250 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(4).css('height') == '250px' && $('div').eq(4).css('margin-right') == '2px', 'The fifth <code>div</code> should have a <code>height</code> of 250 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The sixth <code>div</code> should have a <code>height</code> of 180 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(5).css('height') == '180px' && $('div').eq(5).css('margin-right') == '2px', 'The sixth <code>div</code> should have a <code>height</code> of 180 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The seventh <code>div</code> should have a <code>height</code> of 290 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(6).css('height') == '290px' && $('div').eq(6).css('margin-right') == '2px', 'The seventh <code>div</code> should have a <code>height</code> of 290 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The eighth <code>div</code> should have a <code>height</code> of 140 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(7).css('height') == '140px' && $('div').eq(7).css('margin-right') == '2px', 'The eighth <code>div</code> should have a <code>height</code> of 140 pixels and a <code>margin</code> of 2 pixels.');"
        },
        {
          "text":
            "The ninth <code>div</code> should have a <code>height</code> of 90 pixels and a <code>margin</code> of 2 pixels.",
          "testString":
            "assert($('div').eq(8).css('height') == '90px' && $('div').eq(8).css('margin-right') == '2px', 'The ninth <code>div</code> should have a <code>height</code> of 90 pixels and a <code>margin</code> of 2 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .bar {\n    width: 25px;\n    height: 100px;\n    /* Add your code below this line */\n    \n    /* Add your code above this line */\n    display: inline-block;\n    background-color: blue;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    d3.select(\"body\").selectAll(\"div\")\n      .data(dataset)\n      .enter()\n      .append(\"div\")\n      .attr(\"class\", \"bar\")\n      // Add your code below this line\n      .style(\"height\", (d) => (d + \"px\"))\n      \n      // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the Presentation of a Bar Chart",
      "dashedName": "change-the-presentation-of-a-bar-chart"
    },
    {
      "id": "587d7fa8367417b2b2512bcb",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "SVG stands for <code>Scalable Vector Graphics</code>.",
        "Here \"scalable\" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.",
        "SVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML <code>svg</code> tag.",
        "CSS can be scalable when styles use relative units (such as <code>vh</code>, <code>vw</code>, or percentages), but using SVG is more flexible to build data visualizations.",
        "<hr>",
        "Add an <code>svg</code> node to the <code>body</code> using <code>append()</code>. Give it a <code>width</code> attribute set to the provided <code>w</code> constant and a <code>height</code> attribute set to the provided <code>h</code> constant using the <code>attr()</code> method for each. You'll see it in the output because there's a <code>background-color</code> of pink applied to it in the <code>style</code> tag.",
        "<strong>Note</strong><br>Width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is."
      ],
      "tests": [
        {
          "text": "Your document should have 1 <code>svg</code> element.",
          "testString":
            "assert($('svg').length == 1, 'Your document should have 1 <code>svg</code> element.');"
        },
        {
          "text":
            "The <code>svg</code> element should have a <code>width</code> attribute set to 500.",
          "testString":
            "assert($('svg').attr('width') == '500', 'The <code>svg</code> element should have a <code>width</code> attribute set to 500.');"
        },
        {
          "text":
            "The <code>svg</code> element should have a <code>height</code> attribute set to 100.",
          "testString":
            "assert($('svg').attr('height') == '100', 'The <code>svg</code> element should have a <code>height</code> attribute set to 100.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  svg {\n    background-color: pink;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  // Add your code below this line\n                  \n                  \n                  \n                  // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn About SVG in D3",
      "dashedName": "learn-about-svg-in-d3"
    },
    {
      "id": "587d7fa8367417b2b2512bcc",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last challenge created an <code>svg</code> element with a given width and height, which was visible because it had a <code>background-color</code> applied to it in the <code>style</code> tag. The code made space for the given width and height.",
        "The next step is to create a shape to put in the <code>svg</code> area. There are a number of supported shapes in SVG, such as rectangles and circles. They are used to display data. For example, a rectangle (<code>&lt;rect&gt;</code>) SVG shape could create a bar in a bar chart.",
        "When you place a shape into the <code>svg</code> area, you can specify where it goes with <code>x</code> and <code>y</code> coordinates. The origin point of (0, 0) is in the upper-left corner. Positive vales for <code>x</code> push the shape to the right, and positive values for <code>y</code> push the shape down from the origin point.",
        "To place a shape in the middle of the 500 (width) x 100 (height) <code>svg</code> from last challenge, the <code>x</code> coordinate would be 250 and the <code>y</code> coordinate would be 50.",
        "An SVG <code>rect</code> has four attributes. There are the <code>x</code> and <code>y</code> coordinates for where it is placed in the <code>svg</code> area. It also has a <code>height</code> and <code>width</code> to specify the size.",
        "<hr>",
        "Add a <code>rect</code> shape to the <code>svg</code> using <code>append()</code>, and give it a <code>width</code> attribute of 25 and <code>height</code> attribute of 100. Also, give the <code>rect</code> <code>x</code> and <code>y</code> attributes each set to 0."
      ],
      "tests": [
        {
          "text": "Your document should have 1 <code>rect</code> element.",
          "testString":
            "assert($('rect').length == 1, 'Your document should have 1 <code>rect</code> element.');"
        },
        {
          "text":
            "The <code>rect</code> element should have a <code>width</code> attribute set to 25.",
          "testString":
            "assert($('rect').attr('width') == '25', 'The <code>rect</code> element should have a <code>width</code> attribute set to 25.');"
        },
        {
          "text":
            "The <code>rect</code> element should have a <code>height</code> attribute set to 100.",
          "testString":
            "assert($('rect').attr('height') == '100', 'The <code>rect</code> element should have a <code>height</code> attribute set to 100.');"
        },
        {
          "text":
            "The <code>rect</code> element should have an <code>x</code> attribute set to 0.",
          "testString":
            "assert($('rect').attr('x') == '0', 'The <code>rect</code> element should have an <code>x</code> attribute set to 0.');"
        },
        {
          "text":
            "The <code>rect</code> element should have a <code>y</code> attribute set to 0.",
          "testString":
            "assert($('rect').attr('y') == '0', 'The <code>rect</code> element should have a <code>y</code> attribute set to 0.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h)\n                  // Add your code below this line\n                  \n                  \n                  \n                  // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Display Shapes with SVG",
      "dashedName": "display-shapes-with-svg"
    },
    {
      "id": "587d7fa8367417b2b2512bcd",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last challenge added only one rectangle to the <code>svg</code> element to represent a bar. Here, you'll combine what you've learned so far about <code>data()</code>, <code>enter()</code>, and SVG shapes to create and append a rectangle for each data point in <code>dataset</code>.",
        "A previous challenge showed the format for how to create and append a <code>div</code> for each item in <code>dataset</code>:",
        "<blockquote>d3.select(\"body\").selectAll(\"div\")<br>  .data(dataset)<br>  .enter()<br>  .append(\"div\")</blockquote>",
        "There are a few differences working with <code>rect</code> elements instead of <code>divs</code>. The <code>rects</code> must be appended to an <code>svg</code> element, not directly to the <code>body</code>. Also, you need to tell D3 where to place each <code>rect</code> within the <code>svg</code> area. The bar placement will be covered in the next challenge.",
        "<hr>",
        "Use the <code>data()</code>, <code>enter()</code>, and <code>append()</code> methods to create and append a <code>rect</code> for each item in <code>dataset</code>. The bars should display all on top of each other, this will be fixed in the next challenge."
      ],
      "tests": [
        {
          "text": "Your document should have 9 <code>rect</code> elements.",
          "testString":
            "assert($('rect').length == 9, 'Your document should have 9 <code>rect</code> elements.');"
        },
        {
          "text": "Your code should use the <code>data()</code> method.",
          "testString":
            "assert(code.match(/\\.data/g), 'Your code should use the <code>data()</code> method.');"
        },
        {
          "text": "Your code should use the <code>enter()</code> method.",
          "testString":
            "assert(code.match(/\\.enter/g), 'Your code should use the <code>enter()</code> method.');"
        },
        {
          "text": "Your code should use the <code>append()</code> method.",
          "testString":
            "assert(code.match(/\\.append/g), 'Your code should use the <code>append()</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n       .attr(\"x\", 0)\n       .attr(\"y\", 0)\n       .attr(\"width\", 25)\n       .attr(\"height\", 100);\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Bar for Each Data Point in the Set",
      "dashedName": "create-a-bar-for-each-data-point-in-the-set"
    },
    {
      "id": "587d7fa9367417b2b2512bce",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last challenge created and appended a rectangle to the <code>svg</code> element for each point in <code>dataset</code> to represent a bar. Unfortunately, they were all stacked on top of each other.",
        "The placement of a rectangle is handled by the <code>x</code> and <code>y</code> attributes. They tell D3 where to start drawing the shape in the <code>svg</code> area. The last challenge set them each to 0, so every bar was placed in the upper-left corner.",
        "For a bar chart, all of the bars should sit on the same vertical level, which means the <code>y</code> value stays the same (at 0) for all bars. The <code>x</code> value, however, needs to change as you add new bars. Remember that larger <code>x</code> values push items farther to the right. As you go through the array elements in <code>dataset</code>, the x value should increase.",
        "The <code>attr()</code> method in D3 accepts a callback function to dynamically set that attribute. The callback function takes two arguments, one for the data point itself (usually <code>d</code>) and one for the index of the data point in the array. The second argument for the index is optional. Here's the format:",
        "<blockquote>selection.attr(\"property\", (d, i) => {<br>  /* <br>  * d is the data point value<br>  * i is the index of the data point in the array<br>  */<br>})</blockquote>",
        "It's important to note that you do NOT need to write a <code>for</code> loop or use <code>forEach()</code> to iterate over the items in the data set. Recall that the <code>data()</code> method parses the data set, and any method that's chained after <code>data()</code> is run once for each item in the data set.",
        "<hr>",
        "Change the <code>x</code> attribute callback function so it returns the index times 30.",
        "<strong>Note</strong><br>Each bar has a width of 25, so increasing each <code>x</code> value by 30 adds some space between the bars. Any value greater than 25 would work in this example."
      ],
      "tests": [
        {
          "text":
            "The first <code>rect</code> should have an <code>x</code> value of 0.",
          "testString":
            "assert($('rect').eq(0).attr('x') == '0', 'The first <code>rect</code> should have an <code>x</code> value of 0.');"
        },
        {
          "text":
            "The second <code>rect</code> should have an <code>x</code> value of 30.",
          "testString":
            "assert($('rect').eq(1).attr('x') == '30', 'The second <code>rect</code> should have an <code>x</code> value of 30.');"
        },
        {
          "text":
            "The third <code>rect</code> should have an <code>x</code> value of 60.",
          "testString":
            "assert($('rect').eq(2).attr('x') == '60', 'The third <code>rect</code> should have an <code>x</code> value of 60.');"
        },
        {
          "text":
            "The fourth <code>rect</code> should have an <code>x</code> value of 90.",
          "testString":
            "assert($('rect').eq(3).attr('x') == '90', 'The fourth <code>rect</code> should have an <code>x</code> value of 90.');"
        },
        {
          "text":
            "The fifth <code>rect</code> should have an <code>x</code> value of 120.",
          "testString":
            "assert($('rect').eq(4).attr('x') == '120', 'The fifth <code>rect</code> should have an <code>x</code> value of 120.');"
        },
        {
          "text":
            "The sixth <code>rect</code> should have an <code>x</code> value of 150.",
          "testString":
            "assert($('rect').eq(5).attr('x') == '150', 'The sixth <code>rect</code> should have an <code>x</code> value of 150.');"
        },
        {
          "text":
            "The seventh <code>rect</code> should have an <code>x</code> value of 180.",
          "testString":
            "assert($('rect').eq(6).attr('x') == '180', 'The seventh <code>rect</code> should have an <code>x</code> value of 180.');"
        },
        {
          "text":
            "The eighth <code>rect</code> should have an <code>x</code> value of 210.",
          "testString":
            "assert($('rect').eq(7).attr('x') == '210', 'The eighth <code>rect</code> should have an <code>x</code> value of 210.');"
        },
        {
          "text":
            "The ninth <code>rect</code> should have an <code>x</code> value of 240.",
          "testString":
            "assert($('rect').eq(8).attr('x') == '240', 'The ninth <code>rect</code> should have an <code>x</code> value of 240.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => {\n         // Add your code below this line\n         \n         \n         \n         // Add your code above this line\n       })\n       .attr(\"y\", 0)\n       .attr(\"width\", 25)\n       .attr(\"height\", 100);\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Dynamically Set the Coordinates for Each Bar",
      "dashedName": "dynamically-set-the-coordinates-for-each-bar"
    },
    {
      "id": "587d7fa9367417b2b2512bcf",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The height of each bar can be set to the value of the data point in the array, similar to how the <code>x</code> value was set dynamically.",
        "<blockquote>selection.attr(\"property\", (d, i) => {<br>  /* <br>  * d is the data point value<br>  * i is the index of the data point in the array<br>  */<br>})</blockquote>",
        "<hr>",
        "Change the callback function for the <code>height</code> attribute to return the data value times 3.",
        "<strong>Note</strong><br>Remember that multiplying all data points by the same constant scales the data (like zooming in). It helps to see the differences between bar values in this example."
      ],
      "tests": [
        {
          "text":
            "The first <code>rect</code> should have a <code>height</code> of 36.",
          "testString":
            "assert($('rect').eq(0).attr('height') == '36', 'The first <code>rect</code> should have a <code>height</code> of 36.');"
        },
        {
          "text":
            "The second <code>rect</code> should have a <code>height</code> of 93.",
          "testString":
            "assert($('rect').eq(1).attr('height') == '93', 'The second <code>rect</code> should have a <code>height</code> of 93.');"
        },
        {
          "text":
            "The third <code>rect</code> should have a <code>height</code> of 66.",
          "testString":
            "assert($('rect').eq(2).attr('height') == '66', 'The third <code>rect</code> should have a <code>height</code> of 66.');"
        },
        {
          "text":
            "The fourth <code>rect</code> should have a <code>height</code> of 51.",
          "testString":
            "assert($('rect').eq(3).attr('height') == '51', 'The fourth <code>rect</code> should have a <code>height</code> of 51.');"
        },
        {
          "text":
            "The fifth <code>rect</code> should have a <code>height</code> of 75.",
          "testString":
            "assert($('rect').eq(4).attr('height') == '75', 'The fifth <code>rect</code> should have a <code>height</code> of 75.');"
        },
        {
          "text":
            "The sixth <code>rect</code> should have a <code>height</code> of 54.",
          "testString":
            "assert($('rect').eq(5).attr('height') == '54', 'The sixth <code>rect</code> should have a <code>height</code> of 54.');"
        },
        {
          "text":
            "The seventh <code>rect</code> should have a <code>height</code> of 87.",
          "testString":
            "assert($('rect').eq(6).attr('height') == '87', 'The seventh <code>rect</code> should have a <code>height</code> of 87.');"
        },
        {
          "text":
            "The eighth <code>rect</code> should have a <code>height</code> of 42.",
          "testString":
            "assert($('rect').eq(7).attr('height') == '42', 'The eighth <code>rect</code> should have a <code>height</code> of 42.');"
        },
        {
          "text":
            "The ninth <code>rect</code> should have a <code>height</code> of 27.",
          "testString":
            "assert($('rect').eq(8).attr('height') == '27', 'The ninth <code>rect</code> should have a <code>height</code> of 27.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", 0)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => {\n         // Add your code below this line\n         \n         \n         \n         // Add your code above this line\n       });\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Dynamically Change the Height of Each Bar",
      "dashedName": "dynamically-change-the-height-of-each-bar"
    },
    {
      "id": "587d7fa9367417b2b2512bd0",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "You may have noticed the bar chart looked like it's upside-down, or inverted. This is because of how SVG uses (x, y) coordinates.",
        "In SVG, the origin point for the coordinates is in the upper-left corner. An <code>x</code> coordinate of 0 places a shape on the left edge of the SVG area. A <code>y</code> coordinate of 0 places a shape on the top edge of the SVG area. Higher <code>x</code> values push the rectangle to the right. Higher <code>y</code> values push the rectangle down.",
        "To make the bars right-side-up, you need to change the way the <code>y</code> coordinate is calculated. It needs to account for both the height of the bar and the total height of the SVG area.",
        "The height of the SVG area is 100. If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top). To do this, the <code>y</code> coordinate needs a value of 100. If the data point value were 1, you would start with a <code>y</code> coordinate of 100 to set the bar at the bottom. Then you need to account for the height of the bar of 1, so the final <code>y</code> coordinate would be 99.",
        "The <code>y</code> coordinate that is <code>y = heightOfSVG - heightOfBar</code> would place the bars right-side-up.",
        "<hr>",
        "Change the callback function for the <code>y</code> attribute to set the bars right-side-up. Remember that the <code>height</code> of the bar is 3 times the data value <code>d</code>.",
        "<strong>Note</strong><br>In general, the relationship is <code>y = h - m * d</code>, where <code>m</code> is the constant that scales the data points."
      ],
      "tests": [
        {
          "text":
            "The first <code>rect</code> should have a <code>y</code> value of 64.",
          "testString":
            "assert($('rect').eq(0).attr('y') == h - (dataset[0] * 3), 'The first <code>rect</code> should have a <code>y</code> value of 64.');"
        },
        {
          "text":
            "The second <code>rect</code> should have a <code>y</code> value of 7.",
          "testString":
            "assert($('rect').eq(1).attr('y') == h - (dataset[1] * 3), 'The second <code>rect</code> should have a <code>y</code> value of 7.');"
        },
        {
          "text":
            "The third <code>rect</code> should have a <code>y</code> value of 34.",
          "testString":
            "assert($('rect').eq(2).attr('y') == h - (dataset[2] * 3), 'The third <code>rect</code> should have a <code>y</code> value of 34.');"
        },
        {
          "text":
            "The fourth <code>rect</code> should have a <code>y</code> value of 49.",
          "testString":
            "assert($('rect').eq(3).attr('y') == h - (dataset[3] * 3), 'The fourth <code>rect</code> should have a <code>y</code> value of 49.');"
        },
        {
          "text":
            "The fifth <code>rect</code> should have a <code>y</code> value of 25.",
          "testString":
            "assert($('rect').eq(4).attr('y') == h - (dataset[4] * 3), 'The fifth <code>rect</code> should have a <code>y</code> value of 25.');"
        },
        {
          "text":
            "The sixth <code>rect</code> should have a <code>y</code> value of 46.",
          "testString":
            "assert($('rect').eq(5).attr('y') == h - (dataset[5] * 3), 'The sixth <code>rect</code> should have a <code>y</code> value of 46.');"
        },
        {
          "text":
            "The seventh <code>rect</code> should have a <code>y</code> value of 13.",
          "testString":
            "assert($('rect').eq(6).attr('y') == h - (dataset[6] * 3), 'The seventh <code>rect</code> should have a <code>y</code> value of 13.');"
        },
        {
          "text":
            "The eighth <code>rect</code> should have a <code>y</code> value of 58.",
          "testString":
            "assert($('rect').eq(7).attr('y') == h - (dataset[7] * 3), 'The eighth <code>rect</code> should have a <code>y</code> value of 58.');"
        },
        {
          "text":
            "The ninth <code>rect</code> should have a <code>y</code> value of 73.",
          "testString":
            "assert($('rect').eq(8).attr('y') == h - (dataset[8] * 3), 'The ninth <code>rect</code> should have a <code>y</code> value of 73.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => {\n         // Add your code below this line\n         \n         \n         \n         // Add your code above this line\n       })\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => 3 * d);\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Invert SVG Elements",
      "dashedName": "invert-svg-elements"
    },
    {
      "id": "587d7fa9367417b2b2512bd1",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The bars are in the right position, but they are all the same black color. SVG has a way to change the color of the bars.",
        "In SVG, a <code>rect</code> shape is colored with the <code>fill</code> attribute. It supports hex codes, color names, and rgb values, as well as more complex options like gradients and transparency.",
        "<hr>",
        "Add an <code>attr()</code> method to set the \"fill\" of all the bars to the color \"navy\"."
      ],
      "tests": [
        {
          "text": "The bars should all have a <code>fill</code> color of navy.",
          "testString":
            "assert($('rect').css('fill') == \"rgb(0, 0, 128)\", 'The bars should all have a <code>fill</code> color of navy.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - 3 * d)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => 3 * d)\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change the Color of an SVG Element",
      "dashedName": "change-the-color-of-an-svg-element"
    },
    {
      "id": "587d7faa367417b2b2512bd2",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 lets you label a graph element, such as a bar, using the SVG <code>text</code> element.",
        "Like the <code>rect</code> element, a <code>text</code> element needs to have <code>x</code> and <code>y</code> attributes, to place it on the SVG canvas. It also needs to access the data to display those values.",
        "D3 gives you a high level of control over how you label your bars.",
        "<hr>",
        "The code in the editor already binds the data to each new <code>text</code> element. First, append <code>text</code> nodes to the <code>svg</code>. Next, add attributes for the <code>x</code> and <code>y</code> coordinates. They should be calculated the same way as the <code>rect</code> ones, except the <code>y</code> value for the <code>text</code> should make the label sit 3 units higher than the bar. Finally, use the D3 <code>text()</code> method to set the label equal to the data point value.",
        "<strong>Note</strong><br>For the label to sit higher than the bar, decide if the <code>y</code> value for the <code>text</code> should be 3 greater or 3 less than the <code>y</code> value for the bar."
      ],
      "tests": [
        {
          "text":
            "The first <code>text</code> element should have a label of 12 and a <code>y</code> value of 61.",
          "testString":
            "assert($('text').eq(0).text() == '12' && $('text').eq(0).attr('y') == '61', 'The first <code>text</code> element should have a label of 12 and a <code>y</code> value of 61.');"
        },
        {
          "text":
            "The second <code>text</code> element should have a label of 31 and a <code>y</code> value of 4.",
          "testString":
            "assert($('text').eq(1).text() == '31' && $('text').eq(1).attr('y') == '4', 'The second <code>text</code> element should have a label of 31 and a <code>y</code> value of 4.');"
        },
        {
          "text":
            "The third <code>text</code> element should have a label of 22 and a <code>y</code> value of 31.",
          "testString":
            "assert($('text').eq(2).text() == '22' && $('text').eq(2).attr('y') == '31', 'The third <code>text</code> element should have a label of 22 and a <code>y</code> value of 31.');"
        },
        {
          "text":
            "The fourth <code>text</code> element should have a label of 17 and a <code>y</code> value of 46.",
          "testString":
            "assert($('text').eq(3).text() == '17' && $('text').eq(3).attr('y') == '46', 'The fourth <code>text</code> element should have a label of 17 and a <code>y</code> value of 46.');"
        },
        {
          "text":
            "The fifth <code>text</code> element should have a label of 25 and a <code>y</code> value of 22.",
          "testString":
            "assert($('text').eq(4).text() == '25' && $('text').eq(4).attr('y') == '22', 'The fifth <code>text</code> element should have a label of 25 and a <code>y</code> value of 22.');"
        },
        {
          "text":
            "The sixth <code>text</code> element should have a label of 18 and a <code>y</code> value of 43.",
          "testString":
            "assert($('text').eq(5).text() == '18' && $('text').eq(5).attr('y') == '43', 'The sixth <code>text</code> element should have a label of 18 and a <code>y</code> value of 43.');"
        },
        {
          "text":
            "The seventh <code>text</code> element should have a label of 29 and a <code>y</code> value of 10.",
          "testString":
            "assert($('text').eq(6).text() == '29' && $('text').eq(6).attr('y') == '10', 'The seventh <code>text</code> element should have a label of 29 and a <code>y</code> value of 10.');"
        },
        {
          "text":
            "The eighth <code>text</code> element should have a label of 14 and a <code>y</code> value of 55.",
          "testString":
            "assert($('text').eq(7).text() == '14' && $('text').eq(7).attr('y') == '55', 'The eighth <code>text</code> element should have a label of 14 and a <code>y</code> value of 55.');"
        },
        {
          "text":
            "The ninth <code>text</code> element should have a label of 9 and a <code>y</code> value of 70.",
          "testString":
            "assert($('text').eq(8).text() == '9' && $('text').eq(8).attr('y') == '70', 'The ninth <code>text</code> element should have a label of 9 and a <code>y</code> value of 70.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - 3 * d)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => 3 * d)\n       .attr(\"fill\", \"navy\");\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       // Add your code below this line\n       \n       \n       \n       \n       // Add your code above this line\n  </script>\n<body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Labels to D3 Elements",
      "dashedName": "add-labels-to-d3-elements"
    },
    {
      "id": "587d7faa367417b2b2512bd3",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "D3 methods can add styles to the bar labels. The <code>fill</code> attribute sets the color of the text for a <code>text</code> node. The <code>style()</code> method sets CSS rules for other styles, such as \"font-family\" or \"font-size\".",
        "<hr>",
        "Set the <code>font-size</code> of the <code>text</code> elements to 25px, and the color of the text to red."
      ],
      "tests": [
        {
          "text":
            "The labels should all have a <code>fill</code> color of red.",
          "testString":
            "assert($('text').css('fill') == 'rgb(255, 0, 0)', 'The labels should all have a <code>fill</code> color of red.');"
        },
        {
          "text":
            "The labels should all have a <code>font-size</code> of 25 pixels.",
          "testString":
            "assert($('text').css('font-size') == '25px', 'The labels should all have a <code>font-size</code> of 25 pixels.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - 3 * d)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => d * 3)\n       .attr(\"fill\", \"navy\");\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) => d)\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - (3 * d) - 3)\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Style D3 Labels",
      "dashedName": "style-d3-labels"
    },
    {
      "id": "587d7faa367417b2b2512bd4",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "It's possible to add effects that highlight a bar when the user hovers over it with the mouse. So far, the styling for the rectangles is applied with the built-in D3 and SVG methods, but you can use CSS as well.",
        "You set the CSS class on the SVG elements with the <code>attr()</code> method. Then the <code>:hover</code> pseudo-class for your new class holds the style rules for any hover effects.",
        "<hr>",
        "Use the <code>attr()</code> method to add a class of <code>bar</code> to all the <code>rect</code> elements. This changes the <code>fill</code> color of the bar to brown when you mouse over it."
      ],
      "tests": [
        {
          "text":
            "Your <code>rect</code> elements should have a class of <code>bar</code>.",
          "testString":
            "assert($('rect').attr('class') == \"bar\", 'Your <code>rect</code> elements should have a class of <code>bar</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .bar:hover {\n    fill: brown;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - 3 * d)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => 3 * d)\n       .attr(\"fill\", \"navy\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) => d)\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - (3 * d) - 3);\n       \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add a Hover Effect to a D3 Element",
      "dashedName": "add-a-hover-effect-to-a-d3-element"
    },
    {
      "id": "587d7faa367417b2b2512bd6",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "A tooltip shows more information about an item on a page when the user hovers over that item. There are several ways to add a tooltip to a visualization, this challenge uses the SVG <code>title</code> element.",
        "<code>title</code> pairs with the <code>text()</code> method to dynamically add data to the bars.",
        "<hr>",
        "Append a <code>title</code> element under each <code>rect</code> node. Then call the <code>text()</code> method with a callback function so the text displays the data value."
      ],
      "tests": [
        {
          "text": "Your code should have 9 <code>title</code> elements.",
          "testString":
            "assert($('title').length == 9, 'Your code should have 9 <code>title</code> elements.');"
        },
        {
          "text":
            "The first <code>title</code> element should have tooltip text of 12.",
          "testString":
            "assert($('title').eq(0).text() == '12', 'The first <code>title</code> element should have tooltip text of 12.');"
        },
        {
          "text":
            "The second <code>title</code> element should have tooltip text of 31.",
          "testString":
            "assert($('title').eq(1).text() == '31', 'The second <code>title</code> element should have tooltip text of 31.');"
        },
        {
          "text":
            "The third <code>title</code> element should have tooltip text of 22.",
          "testString":
            "assert($('title').eq(2).text() == '22', 'The third <code>title</code> element should have tooltip text of 22.');"
        },
        {
          "text":
            "The fourth <code>title</code> element should have tooltip text of 17.",
          "testString":
            "assert($('title').eq(3).text() == '17', 'The fourth <code>title</code> element should have tooltip text of 17.');"
        },
        {
          "text":
            "The fifth <code>title</code> element should have tooltip text of 25.",
          "testString":
            "assert($('title').eq(4).text() == '25', 'The fifth <code>title</code> element should have tooltip text of 25.');"
        },
        {
          "text":
            "The sixth <code>title</code> element should have tooltip text of 18.",
          "testString":
            "assert($('title').eq(5).text() == '18', 'The sixth <code>title</code> element should have tooltip text of 18.');"
        },
        {
          "text":
            "The seventh <code>title</code> element should have tooltip text of 29.",
          "testString":
            "assert($('title').eq(6).text() == '29', 'The seventh <code>title</code> element should have tooltip text of 29.');"
        },
        {
          "text":
            "The eighth <code>title</code> element should have tooltip text of 14.",
          "testString":
            "assert($('title').eq(7).text() == '14', 'The eighth <code>title</code> element should have tooltip text of 14.');"
        },
        {
          "text":
            "The ninth <code>title</code> element should have tooltip text of 9.",
          "testString":
            "assert($('title').eq(8).text() == '9', 'The ninth <code>title</code> element should have tooltip text of 9.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<style>\n  .bar:hover {\n    fill: brown;\n  }\n</style>\n<body>\n  <script>\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\n    \n    const w = 500;\n    const h = 100;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"rect\")\n       .data(dataset)\n       .enter()\n       .append(\"rect\")\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - 3 * d)\n       .attr(\"width\", 25)\n       .attr(\"height\", (d, i) => d * 3)\n       .attr(\"fill\", \"navy\")\n       .attr(\"class\", \"bar\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) => d)\n       .attr(\"x\", (d, i) => i * 30)\n       .attr(\"y\", (d, i) => h - (d * 3 + 3))   \n    \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add a Tooltip to a D3 Element",
      "dashedName": "add-a-tooltip-to-a-d3-element"
    },
    {
      "id": "587d7fab367417b2b2512bd7",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "A scatter plot is another type of visualization. It usually uses circles to map data points, which have two values each. These values tie to the <code>x</code> and <code>y</code> axes, and are used to position the circle in the visualization.",
        "SVG has a <code>circle</code> tag to create the circle shape. It works a lot like the <code>rect</code> elements you used for the bar chart.",
        "<hr>",
        "Use the <code>data()</code>, <code>enter()</code>, and <code>append()</code> methods to bind <code>dataset</code> to new <code>circle</code> elements that are appended to the SVG canvas."
      ],
      "tests": [
        {
          "text": "Your code should have 10 <code>circle</code> elements.",
          "testString":
            "assert($('circle').length == 10, 'Your code should have 10 <code>circle</code> elements.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,    78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,    411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,   333 ],\n                  [ 78,    320 ],\n                  [ 21,    123 ]\n                ];\n    \n    \n    const w = 500;\n    const h = 500;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"circle\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Scatterplot with SVG Circles",
      "dashedName": "create-a-scatterplot-with-svg-circles"
    },
    {
      "id": "587d7fab367417b2b2512bd8",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The last challenge created the <code>circle</code> elements for each point in the <code>dataset</code>, and appended them to the SVG canvas. But D3 needs more information about the position and size of each <code>circle</code> to display them correctly.",
        "A <code>circle</code> in SVG has three main attributes. The <code>cx</code> and <code>cy</code> attributes are the coordinates. They tell D3 where to position the <em>center</em> of the shape on the SVG canvas. The radius (<code>r</code> attribute) gives the size of the <code>circle</code>.",
        "Just like the <code>rect</code> <code>y</code> coordinate, the <code>cy</code> attribute for a <code>circle</code> is measured from the top of the SVG canvas, not from the bottom.",
        "All three attributes can use a callback function to set their values dynamically. Remember that all methods chained after <code>data(dataset)</code> run once per item in <code>dataset</code>. The <code>d</code> parameter in the callback function refers to the current item in <code>dataset</code>, which is an array for each point. You use bracket notation, like <code>d[0]</code>, to access the values in that array.",
        "<hr>",
        "Add <code>cx</code>, <code>cy</code>, and <code>r</code> attributes to the <code>circle</code> elements. The <code>cx</code> value should be the first number in the array for each item in <code>dataset</code>. The <code>cy</code> value should be based off the second number in the array, but make sure to show the chart right-side-up and not inverted. The <code>r</code> value should be 5 for all circles."
      ],
      "tests": [
        {
          "text": "Your code should have 10 <code>circle</code> elements.",
          "testString":
            "assert($('circle').length == 10, 'Your code should have 10 <code>circle</code> elements.');"
        },
        {
          "text":
            "The first <code>circle</code> element should have a <code>cx</code> value of 34, a <code>cy</code> value of 422, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(0).attr('cx') == '34' && $('circle').eq(0).attr('cy') == '422' && $('circle').eq(0).attr('r') == '5', 'The first <code>circle</code> element should have a <code>cx</code> value of 34, a <code>cy</code> value of 422, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The second <code>circle</code> element should have a <code>cx</code> value of 109, a <code>cy</code> value of 220, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(1).attr('cx') == '109' && $('circle').eq(1).attr('cy') == '220' && $('circle').eq(1).attr('r') == '5', 'The second <code>circle</code> element should have a <code>cx</code> value of 109, a <code>cy</code> value of 220, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The third <code>circle</code> element should have a <code>cx</code> value of 310, a <code>cy</code> value of 380, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(2).attr('cx') == '310' && $('circle').eq(2).attr('cy') == '380' && $('circle').eq(2).attr('r') == '5', 'The third <code>circle</code> element should have a <code>cx</code> value of 310, a <code>cy</code> value of 380, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The fourth <code>circle</code> element should have a <code>cx</code> value of 79, a <code>cy</code> value of 89, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(3).attr('cx') == '79' && $('circle').eq(3).attr('cy') == '89' && $('circle').eq(3).attr('r') == '5', 'The fourth <code>circle</code> element should have a <code>cx</code> value of 79, a <code>cy</code> value of 89, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The fifth <code>circle</code> element should have a <code>cx</code> value of 420, a <code>cy</code> value of 280, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(4).attr('cx') == '420' && $('circle').eq(4).attr('cy') == '280' && $('circle').eq(4).attr('r') == '5', 'The fifth <code>circle</code> element should have a <code>cx</code> value of 420, a <code>cy</code> value of 280, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The sixth <code>circle</code> element should have a <code>cx</code> value of 233, a <code>cy</code> value of 355, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(5).attr('cx') == '233' && $('circle').eq(5).attr('cy') == '355' && $('circle').eq(5).attr('r') == '5', 'The sixth <code>circle</code> element should have a <code>cx</code> value of 233, a <code>cy</code> value of 355, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The seventh <code>circle</code> element should have a <code>cx</code> value of 333, a <code>cy</code> value of 404, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(6).attr('cx') == '333' && $('circle').eq(6).attr('cy') == '404' && $('circle').eq(6).attr('r') == '5', 'The seventh <code>circle</code> element should have a <code>cx</code> value of 333, a <code>cy</code> value of 404, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The eighth <code>circle</code> element should have a <code>cx</code> value of 222, a <code>cy</code> value of 167, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(7).attr('cx') == '222' && $('circle').eq(7).attr('cy') == '167' && $('circle').eq(7).attr('r') == '5', 'The eighth <code>circle</code> element should have a <code>cx</code> value of 222, a <code>cy</code> value of 167, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The ninth <code>circle</code> element should have a <code>cx</code> value of 78, a <code>cy</code> value of 180, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(8).attr('cx') == '78' && $('circle').eq(8).attr('cy') == '180' && $('circle').eq(8).attr('r') == '5', 'The ninth <code>circle</code> element should have a <code>cx</code> value of 78, a <code>cy</code> value of 180, and an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The tenth <code>circle</code> element should have a <code>cx</code> value of 21, a <code>cy</code> value of 377, and an <code>r</code> value of 5.",
          "testString":
            "assert($('circle').eq(9).attr('cx') == '21' && $('circle').eq(9).attr('cy') == '377' && $('circle').eq(9).attr('r') == '5', 'The tenth <code>circle</code> element should have a <code>cx</code> value of 21, a <code>cy</code> value of 377, and an <code>r</code> value of 5.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,    78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,    411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,   333 ],\n                  [ 78,    320 ],\n                  [ 21,    123 ]\n                ];\n    \n    \n    const w = 500;\n    const h = 500;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Attributes to the Circle Elements",
      "dashedName": "add-attributes-to-the-circle-elements"
    },
    {
      "id": "587d7fab367417b2b2512bd9",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "You can add text to create labels for the points in a scatter plot.",
        "The goal is to display the comma-separated values for the first (<code>x</code>) and second (<code>y</code>) fields of each item in <code>dataset</code>.",
        "The <code>text</code> nodes need <code>x</code> and <code>y</code> attributes to position it on the SVG canvas. In this challenge, the <code>y</code> value (which determines height) can use the same value that the <code>circle</code> uses for its <code>cy</code> attribute. The <code>x</code> value can be slightly larger than the <code>cx</code> value of the <code>circle</code>, so the label is visible. This will push the label to the right of the plotted point.",
        "<hr>",
        "Label each point on the scatter plot using the <code>text</code> elements. The text of the label should be the two values separated by a comma and a space. For example, the label for the first point is \"34, 78\". Set the <code>x</code> attribute so it's 5 units more than the value you used for the <code>cx</code> attribute on the <code>circle</code>. Set the <code>y</code> attribute the same way that's used for the <code>cy</code> value on the <code>circle</code>."
      ],
      "tests": [
        {
          "text": "Your code should have 10 <code>text</code> elements.",
          "testString":
            "assert($('text').length == 10, 'Your code should have 10 <code>text</code> elements.');"
        },
        {
          "text":
            "The first label should have text of \"34, 78\", an <code>x</code> value of 39, and a <code>y</code> value of 422.",
          "testString":
            "assert($('text').eq(0).text() == '34, 78' && $('text').eq(0).attr('x') == '39' && $('text').eq(0).attr('y') == '422', 'The first label should have text of \"34, 78\", an <code>x</code> value of 39, and a <code>y</code> value of 422.');"
        },
        {
          "text":
            "The second label should have text of \"109, 280\", an <code>x</code> value of 114, and a <code>y</code> value of 220.",
          "testString":
            "assert($('text').eq(1).text() == '109, 280' && $('text').eq(1).attr('x') == '114' && $('text').eq(1).attr('y') == '220', 'The second label should have text of \"109, 280\", an <code>x</code> value of 114, and a <code>y</code> value of 220.');"
        },
        {
          "text":
            "The third label should have text of \"310, 120\", an <code>x</code> value of 315, and a <code>y</code> value of 380.",
          "testString":
            "assert($('text').eq(2).text() == '310, 120' && $('text').eq(2).attr('x') == '315' && $('text').eq(2).attr('y') == '380', 'The third label should have text of \"310, 120\", an <code>x</code> value of 315, and a <code>y</code> value of 380.');"
        },
        {
          "text":
            "The fourth label should have text of \"79, 411\", an <code>x</code> value of 84, and a <code>y</code> value of 89.",
          "testString":
            "assert($('text').eq(3).text() == '79, 411' && $('text').eq(3).attr('x') == '84' && $('text').eq(3).attr('y') == '89', 'The fourth label should have text of \"79, 411\", an <code>x</code> value of 84, and a <code>y</code> value of 89.');"
        },
        {
          "text":
            "The fifth label should have text of \"420, 220\", an <code>x</code> value of 425, and a <code>y</code> value of 280.",
          "testString":
            "assert($('text').eq(4).text() == '420, 220' && $('text').eq(4).attr('x') == '425' && $('text').eq(4).attr('y') == '280', 'The fifth label should have text of \"420, 220\", an <code>x</code> value of 425, and a <code>y</code> value of 280.');"
        },
        {
          "text":
            "The sixth label should have text of \"233, 145\", an <code>x</code> value of 238, and a <code>y</code> value of 355.",
          "testString":
            "assert($('text').eq(5).text() == '233, 145' && $('text').eq(5).attr('x') == '238' && $('text').eq(5).attr('y') == '355', 'The sixth label should have text of \"233, 145\", an <code>x</code> value of 238, and a <code>y</code> value of 355.');"
        },
        {
          "text":
            "The seventh label should have text of \"333, 96\", an <code>x</code> value of 338, and a <code>y</code> value of 404.",
          "testString":
            "assert($('text').eq(6).text() == '333, 96' && $('text').eq(6).attr('x') == '338' && $('text').eq(6).attr('y') == '404', 'The seventh label should have text of \"333, 96\", an <code>x</code> value of 338, and a <code>y</code> value of 404.');"
        },
        {
          "text":
            "The eighth label should have text of \"222, 333\", an <code>x</code> value of 227, and a <code>y</code> value of 167.",
          "testString":
            "assert($('text').eq(7).text() == '222, 333' && $('text').eq(7).attr('x') == '227' && $('text').eq(7).attr('y') == '167', 'The eighth label should have text of \"222, 333\", an <code>x</code> value of 227, and a <code>y</code> value of 167.');"
        },
        {
          "text":
            "The ninth label should have text of \"78, 320\", an <code>x</code> value of 83, and a <code>y</code> value of 180.",
          "testString":
            "assert($('text').eq(8).text() == '78, 320' && $('text').eq(8).attr('x') == '83' && $('text').eq(8).attr('y') == '180', 'The ninth label should have text of \"78, 320\", an <code>x</code> value of 83, and a <code>y</code> value of 180.');"
        },
        {
          "text":
            "The tenth label should have text of \"21, 123\", an <code>x</code> value of 26, and a <code>y</code> value of 377.",
          "testString":
            "assert($('text').eq(9).text() == '21, 123' && $('text').eq(9).attr('x') == '26' && $('text').eq(9).attr('y') == '377', 'The tenth label should have text of \"21, 123\", an <code>x</code> value of 26, and a <code>y</code> value of 377.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,    78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,    411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,   333 ],\n                  [ 78,    320 ],\n                  [ 21,    123 ]\n                ];\n    \n    \n    const w = 500;\n    const h = 500;\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       .attr(\"cx\", (d, i) => d[0])\n       .attr(\"cy\", (d, i) => h - d[1])\n       .attr(\"r\", 5);\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Labels to Scatter Plot Circles",
      "dashedName": "add-labels-to-scatter-plot-circles"
    },
    {
      "id": "587d7fab367417b2b2512bda",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The bar and scatter plot charts both plotted data directly onto the SVG canvas. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.",
        "In D3, there are scales to help plot data. <code>Scales</code> are functions that tell the program how to map a set of raw data points onto the pixels of the SVG canvas.",
        "For example, say you have a 100x500-sized SVG canvas and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.",
        "It's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the <code>x</code> and <code>y</code> values fit your canvas width and height.",
        "D3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method <code>scaleLinear()</code>:",
        "<code> const scale = d3.scaleLinear()</code>",
        "By default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.",
        "<hr>",
        "Change the <code>scale</code> variable to create a linear scale. Then set the <code>output</code> variable to the scale called with an input argument of 50."
      ],
      "tests": [
        {
          "text": "The text in the <code>h2</code> should be 50.",
          "testString":
            "assert($('h2').text() == '50', 'The text in the <code>h2</code> should be 50.');"
        },
        {
          "text": "Your code should use the <code>scaleLinear()</code> method.",
          "testString":
            "assert(code.match(/\\.scaleLinear/g), 'Your code should use the <code>scaleLinear()</code> method.');"
        },
        {
          "text":
            "The <code>output</code> variable should call <code>scale</code> with an argument of 50.",
          "testString":
            "assert(output == 50 && code.match(/scale\\(\\s*?50\\s*?\\)/g), 'The <code>output</code> variable should call <code>scale</code> with an argument of 50.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    // Add your code below this line\n    \n    const scale = undefined; // Create the scale here\n    const output = scale(); // Call the scale with an argument here\n    \n    // Add your code above this line\n    \n    d3.select(\"body\")\n      .append(\"h2\")\n      .text(output);\n  \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Linear Scale with D3",
      "dashedName": "create-a-linear-scale-with-d3"
    },
    {
      "id": "587d7fac367417b2b2512bdb",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "By default, scales use the identity relationship - the input value maps to the output value. But scales can be much more flexible and interesting.",
        "Say a data set has values ranging from 50 to 480. This is the input information for a scale, and is also known as the domain.",
        "You want to map those points along the <code>x</code> axis on the SVG canvas, between 10 units and 500 units. This is the output information, which is also known as the range.",
        "The <code>domain()</code> and <code>range()</code> methods set these values for the scale. Both methods take an array of at least two elements as an argument. Here's an example:",
        "<blockquote>// Set a domain<br>// The domain covers the set of input values<br>scale.domain([50, 480]);<br>// Set a range<br>// The range covers the set of output values<br>scale.range([10, 500]);<br>scale(50) // Returns 10<br>scale(480) // Returns 500<br>scale(325) // Returns 323.37<br>scale(750) // Returns 807.67<br>d3.scaleLinear()</blockquote>",
        "Notice that the scale uses the linear relationship between the domain and range values to figure out what the output should be for a given number. The minimum value in the domain (50) maps to the minimum value (10) in the range.",
        "<hr>",
        "Create a scale and set its domain to <code>[250, 500]</code> and range to <code>[10, 150]</code>.",
        "<strong>Note</strong><br>You can chain the <code>domain()</code> and <code>range()</code> methods onto the <code>scale</code> variable."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>domain()</code> method.",
          "testString":
            "assert(code.match(/\\.domain/g), 'Your code should use the <code>domain()</code> method.');"
        },
        {
          "text":
            "The <code>domain()</code> of the scale should be set to <code>[250, 500]</code>.",
          "testString":
            "assert(JSON.stringify(scale.domain()) == JSON.stringify([250, 500]), 'The <code>domain()</code> of the scale should be set to <code>[250, 500]</code>.');"
        },
        {
          "text": "Your code should use the <code>range()</code> method.",
          "testString":
            "assert(code.match(/\\.range/g), 'Your code should use the <code>range()</code> method.');"
        },
        {
          "text":
            "The <code>range()</code> of the scale should be set to <code>[10, 150]</code>.",
          "testString":
            "assert(JSON.stringify(scale.range()) == JSON.stringify([10, 150]), 'The <code>range()</code> of the scale should be set to <code>[10, 150]</code>.');"
        },
        {
          "text": "The text in the <code>h2</code> should be -102.",
          "testString":
            "assert($('h2').text() == '-102', 'The text in the <code>h2</code> should be -102.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    // Add your code below this line\n    const scale = d3.scaleLinear();\n    \n    \n    \n    // Add your code above this line\n    const output = scale(50);\n    d3.select(\"body\")\n      .append(\"h2\")\n      .text(output);\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Set a Domain and a Range on a Scale",
      "dashedName": "set-a-domain-and-a-range-on-a-scale"
    },
    {
      "id": "587d7fac367417b2b2512bdc",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The D3 methods <code>domain()</code> and <code>range()</code> set that information for your scale based on the data. There are a couple methods to make that easier.",
        "Often when you set the domain, you'll want to use the minimum and maximum values within the data set. Trying to find these values manually, especially in a large data set, may cause errors.",
        "D3 has two methods - <code>min()</code> and <code>max()</code> to return this information. Here's an example:",
        "<blockquote>const exampleData = [34, 234, 73, 90, 6, 52];<br>d3.min(exampleData) // Returns 6<br>d3.max(exampleData) // Returns 234</blockquote>",
        "A dataset may have nested arrays, like the [x, y] coordinate pairs that were in the scatter plot example. In that case, you need to tell D3 how to calculate the maximum and minimum.",
        "Fortunately, both the <code>min()</code> and <code>max()</code> methods take a callback function.",
        "In this example, the callback function's argument <code>d</code> is for the current inner array. The callback needs to return the element from the inner array (the x or y value) over which you want to compute the maximum or minimum. Here's an example for how to find the min and max values with an array of arrays:",
        "<blockquote>const locationData = [[1, 7],[6, 3],[8, 3]];<br>// Returns the smallest number out of the first elements<br>const minX = d3.min(locationData, (d) => d[0]);<br>// minX compared 1, 6, and 8 and is set to 1</blockquote>",
        "<hr>",
        "The <code>positionData</code> variable holds a 3-dimensional (3D) array. Use a D3 method to find the maximum value of the z coordinate (the third value) from the arrays and save it in the <code>output</code> variable.",
        "<strong>Note</strong><br>Fun fact - D3 can plot 3D arrays."
      ],
      "tests": [
        {
          "text": "The text in the <code>h2</code> should be 8.",
          "testString":
            "assert(output == 8 && $('h2').text() == '8', 'The text in the <code>h2</code> should be 8.');"
        },
        {
          "text": "Your code should use the <code>max()</code> method.",
          "testString":
            "assert(code.match(/\\.max/g), 'Your code should use the <code>max()</code> method.')"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const positionData = [[1, 7, -4],[6, 3, 8],[2, 8, 3]]\n    // Add your code below this line\n    \n    const output = undefined; // Change this line\n    \n    // Add your code above this line\n    \n    d3.select(\"body\")\n      .append(\"h2\")\n      .text(output)\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Use the d3max and d3min Functions to Find Minimum and Maximum Values in a Dataset",
      "dashedName":
        "use-the-d3max-and-d3min-functions-to-find-minimum-and-maximum-values-in-a-dataset"
    },
    {
      "id": "587d7fac367417b2b2512bdd",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "The D3 <code>min()</code> and <code>max()</code> methods are useful to help set the scale.",
        "Given a complex data set, one priority is to set the scale so the visualization fits the SVG container's width and height. You want all the data plotted inside the SVG canvas so it's visible on the web page.",
        "The example below sets the x-axis scale for scatter plot data. The <code>domain()</code> method passes information to the scale about the raw data values for the plot. The <code>range()</code> method gives it information about the actual space on the web page for the visualization.",
        "In the example, the domain goes from 0 to the maximum in the set. It uses the <code>max()</code> method with a callback function based on the x values in the arrays. The range uses the SVG canvas' width (<code>w</code>), but it includes some padding, too. This puts space between the scatter plot dots and the edge of the SVG canvas.",
        "<blockquote>const dataset = [<br>                  [ 34,    78 ],<br>                  [ 109,   280 ],<br>                  [ 310,   120 ],<br>                  [ 79,    411 ],<br>                  [ 420,   220 ],<br>                  [ 233,   145 ],<br>                  [ 333,   96 ],<br>                  [ 222,   333 ],<br>                  [ 78,    320 ],<br>                  [ 21,    123 ]<br>                ];<br>const w = 500;<br>const h = 500;<br><br>// Padding between the SVG canvas boundary and the plot<br>const padding = 30;<br>const xScale = d3.scaleLinear()<br>                 .domain([0, d3.max(dataset, (d) => d[0])])<br>                 .range([padding, w - padding]);</blockquote>",
        "The padding may be confusing at first. Picture the x-axis as a horizontal line from 0 to 500 (the width value for the SVG canvas). Including the padding in the <code>range()</code> method forces the plot to start at 30 along that line (instead of 0), and end at 470 (instead of 500).",
        "<hr>",
        "Use the <code>yScale</code> variable to create a linear y-axis scale. The domain should start at zero and go to the maximum y value in the set. The range should use the SVG height (<code>h</code>) and include padding.",
        "<strong>Note</strong><br>Remember to keep the plot right-side-up. When you set the range for the y coordinates, the higher value (height minus padding) is the first argument, and the lower value is the second argument."
      ],
      "tests": [
        {
          "text": "The text in the <code>h2</code> should be 30.",
          "testString":
            "assert(output == 30 && $('h2').text() == '30', 'The text in the <code>h2</code> should be 30.');"
        },
        {
          "text":
            "The <code>domain()</code> of yScale should be equivalent to <code>[0, 411]</code>.",
          "testString":
            "assert(JSON.stringify(yScale.domain()) == JSON.stringify([0, 411]), 'The <code>domain()</code> of yScale should be equivalent to <code>[0, 411]</code>.');"
        },
        {
          "text":
            "The <code>range()</code> of yScale should be equivalent to <code>[470, 30]</code>.",
          "testString":
            "assert(JSON.stringify(yScale.range()) == JSON.stringify([470, 30]), 'The <code>range()</code> of yScale should be equivalent to <code>[470, 30]</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,    78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,    411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,   333 ],\n                  [ 78,    320 ],\n                  [ 21,    123 ]\n                ];\n    \n    const w = 500;\n    const h = 500;\n    \n    // Padding between the SVG canvas boundary and the plot\n    const padding = 30;\n    \n    // Create an x and y scale\n    \n    const xScale = d3.scaleLinear()\n                    .domain([0, d3.max(dataset, (d) => d[0])])\n                    .range([padding, w - padding]);\n    \n    // Add your code below this line\n    \n    const yScale = undefined;\n                     \n                     \n    // Add your code above this line\n    \n    const output = yScale(411); // Returns 30\n    d3.select(\"body\")\n      .append(\"h2\")\n      .text(output)\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Dynamic Scales",
      "dashedName": "use-dynamic-scales"
    },
    {
      "id": "587d7fac367417b2b2512bde",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "With the scales set up, it's time to map the scatter plot again. The scales are like processing functions that turn the x and y raw data into values that fit and render correctly on the SVG canvas. They keep the data within the screen's plotting area.",
        "You set the coordinate attribute values for an SVG shape with the scaling function. This includes <code>x</code> and <code>y</code> attributes for <code>rect</code> or <code>text</code> elements, or <code>cx</code> and <code>cy</code> for <code>circles</code>. Here's an example:",
        "<blockquote>shape<br>  .attr(\"x\", (d) => xScale(d[0]))</blockquote>",
        "Scales set shape coordinate attributes to place the data points onto the SVG canvas. You don't need to apply scales when you display the actual data value, for example, in the <code>text()</code> method for a tooltip or label.",
        "<hr>",
        "Use <code>xScale</code> and <code>yScale</code> to position both the <code>circle</code> and <code>text</code> shapes onto the SVG canvas. For the <code>circles</code>, apply the scales to set the <code>cx</code> and <code>cy</code> attributes. Give them a radius of 5 units, too.",
        "For the <code>text</code> elements, apply the scales to set the <code>x</code> and <code>y</code> attributes. The labels should be offset to the right of the dots. To do this, add 10 units to the x data value before passing it to the <code>xScale</code>."
      ],
      "tests": [
        {
          "text": "Your code should have 10 <code>circle</code> elements.",
          "testString":
            "assert($('circle').length == 10, 'Your code should have 10 <code>circle</code> elements.');"
        },
        {
          "text":
            "The first <code>circle</code> element should have a <code>cx</code> value of approximately 91 and a <code>cy</code> value of approximately 368 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(0).attr('cx')) == '91' && Math.round($('circle').eq(0).attr('cy')) == '368' && $('circle').eq(0).attr('r') == '5', 'The first <code>circle</code> element should have a <code>cx</code> value of approximately 91 and a <code>cy</code> value of approximately 368 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The second <code>circle</code> element should have a <code>cx</code> value of approximately 159 and a <code>cy</code> value of approximately 181 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(1).attr('cx')) == '159' && Math.round($('circle').eq(1).attr('cy')) == '181' && $('circle').eq(1).attr('r') == '5', 'The second <code>circle</code> element should have a <code>cx</code> value of approximately 159 and a <code>cy</code> value of approximately 181 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The third <code>circle</code> element should have a <code>cx</code> value of approximately 340 and a <code>cy</code> value of approximately 329 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(2).attr('cx')) == '340' && Math.round($('circle').eq(2).attr('cy')) == '329' && $('circle').eq(2).attr('r') == '5', 'The third <code>circle</code> element should have a <code>cx</code> value of approximately 340 and a <code>cy</code> value of approximately 329 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The fourth <code>circle</code> element should have a <code>cx</code> value of approximately 131 and a <code>cy</code> value of approximately 60 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(3).attr('cx')) == '131' && Math.round($('circle').eq(3).attr('cy')) == '60' && $('circle').eq(3).attr('r') == '5', 'The fourth <code>circle</code> element should have a <code>cx</code> value of approximately 131 and a <code>cy</code> value of approximately 60 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The fifth <code>circle</code> element should have a <code>cx</code> value of approximately 440 and a <code>cy</code> value of approximately 237 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(4).attr('cx')) == '440' && Math.round($('circle').eq(4).attr('cy')) == '237' && $('circle').eq(4).attr('r') == '5', 'The fifth <code>circle</code> element should have a <code>cx</code> value of approximately 440 and a <code>cy</code> value of approximately 237 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The sixth <code>circle</code> element should have a <code>cx</code> value of approximately 271 and a <code>cy</code> value of approximately 306 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(5).attr('cx')) == '271' && Math.round($('circle').eq(5).attr('cy')) == '306' && $('circle').eq(5).attr('r') == '5', 'The sixth <code>circle</code> element should have a <code>cx</code> value of approximately 271 and a <code>cy</code> value of approximately 306 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The seventh <code>circle</code> element should have a <code>cx</code> value of approximately 361 and a <code>cy</code> value of approximately 351 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(6).attr('cx')) == '361' && Math.round($('circle').eq(6).attr('cy')) == '351' && $('circle').eq(6).attr('r') == '5', 'The seventh <code>circle</code> element should have a <code>cx</code> value of approximately 361 and a <code>cy</code> value of approximately 351 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The eighth <code>circle</code> element should have a <code>cx</code> value of approximately 261 and a <code>cy</code> value of approximately 132 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(7).attr('cx')) == '261' && Math.round($('circle').eq(7).attr('cy')) == '132' && $('circle').eq(7).attr('r') == '5', 'The eighth <code>circle</code> element should have a <code>cx</code> value of approximately 261 and a <code>cy</code> value of approximately 132 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The ninth <code>circle</code> element should have a <code>cx</code> value of approximately 131 and a <code>cy</code> value of approximately 144 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(8).attr('cx')) == '131' && Math.round($('circle').eq(8).attr('cy')) == '144' && $('circle').eq(8).attr('r') == '5', 'The ninth <code>circle</code> element should have a <code>cx</code> value of approximately 131 and a <code>cy</code> value of approximately 144 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text":
            "The tenth <code>circle</code> element should have a <code>cx</code> value of approximately 79 and a <code>cy</code> value of approximately 326 after applying the scales. It should also have an <code>r</code> value of 5.",
          "testString":
            "assert(Math.round($('circle').eq(9).attr('cx')) == '79' && Math.round($('circle').eq(9).attr('cy')) == '326' && $('circle').eq(9).attr('r') == '5', 'The tenth <code>circle</code> element should have a <code>cx</code> value of approximately 79 and a <code>cy</code> value of approximately 326 after applying the scales. It should also have an <code>r</code> value of 5.');"
        },
        {
          "text": "Your code should have 10 <code>text</code> elements.",
          "testString":
            "assert($('text').length == 10, 'Your code should have 10 <code>text</code> elements.');"
        },
        {
          "text":
            "The first label should have an <code>x</code> value of approximately 100 and a <code>y</code> value of approximately 368 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(0).attr('x')) == '100' && Math.round($('text').eq(0).attr('y')) == '368', 'The first label should have an <code>x</code> value of approximately 100 and a <code>y</code> value of approximately 368 after applying the scales.');"
        },
        {
          "text":
            "The second label should have an <code>x</code> value of approximately 168 and a <code>y</code> value of approximately 181 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(1).attr('x')) == '168' && Math.round($('text').eq(1).attr('y')) == '181', 'The second label should have an <code>x</code> value of approximately 168 and a <code>y</code> value of approximately 181 after applying the scales.');"
        },
        {
          "text":
            "The third label should have an <code>x</code> value of approximately 350 and a <code>y</code> value of approximately 329 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(2).attr('x')) == '350' && Math.round($('text').eq(2).attr('y')) == '329', 'The third label should have an <code>x</code> value of approximately 350 and a <code>y</code> value of approximately 329 after applying the scales.');"
        },
        {
          "text":
            "The fourth label should have an <code>x</code> value of approximately 141 and a <code>y</code> value of approximately 60 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(3).attr('x')) == '141' && Math.round($('text').eq(3).attr('y')) == '60', 'The fourth label should have an <code>x</code> value of approximately 141 and a <code>y</code> value of approximately 60 after applying the scales.');"
        },
        {
          "text":
            "The fifth label should have an <code>x</code> value of approximately 449 and a <code>y</code> value of approximately 237 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(4).attr('x')) == '449' && Math.round($('text').eq(4).attr('y')) == '237', 'The fifth label should have an <code>x</code> value of approximately 449 and a <code>y</code> value of approximately 237 after applying the scales.');"
        },
        {
          "text":
            "The sixth label should have an <code>x</code> value of approximately 280 and a <code>y</code> value of approximately 306 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(5).attr('x')) == '280' && Math.round($('text').eq(5).attr('y')) == '306', 'The sixth label should have an <code>x</code> value of approximately 280 and a <code>y</code> value of approximately 306 after applying the scales.');"
        },
        {
          "text":
            "The seventh label should have an <code>x</code> value of approximately 370 and a <code>y</code> value of approximately 351 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(6).attr('x')) == '370' && Math.round($('text').eq(6).attr('y')) == '351', 'The seventh label should have an <code>x</code> value of approximately 370 and a <code>y</code> value of approximately 351 after applying the scales.');"
        },
        {
          "text":
            "The eighth label should have an <code>x</code> value of approximately 270 and a <code>y</code> value of approximately 132 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(7).attr('x')) == '270' && Math.round($('text').eq(7).attr('y')) == '132', 'The eighth label should have an <code>x</code> value of approximately 270 and a <code>y</code> value of approximately 132 after applying the scales.');"
        },
        {
          "text":
            "The ninth label should have an <code>x</code> value of approximately 140 and a <code>y</code> value of approximately 144 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(8).attr('x')) == '140' && Math.round($('text').eq(8).attr('y')) == '144', 'The ninth label should have an <code>x</code> value of approximately 140 and a <code>y</code> value of approximately 144 after applying the scales.');"
        },
        {
          "text":
            "The tenth label should have an <code>x</code> value of approximately 88 and a <code>y</code> value of approximately 326 after applying the scales.",
          "testString":
            "assert(Math.round($('text').eq(9).attr('x')) == '88' && Math.round($('text').eq(9).attr('y')) == '326', 'The tenth label should have an <code>x</code> value of approximately 88 and a <code>y</code> value of approximately 326 after applying the scales.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n    \n    const w = 500;\n    const h = 500;\n    const padding = 60;\n    \n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n    \n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n       \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \", \"\n + d[1]))\n       // Add your code below this line\n       \n       \n       \n       // Add your code above this line\n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use a PreDefined Scale to Place Elements",
      "dashedName": "use-a-predefined-scale-to-place-elements"
    },
    {
      "id": "587d7fad367417b2b2512bdf",
      "required": [
        { "src": "https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js" }
      ],
      "description": [
        "Another way to improve the scatter plot is to add an x-axis and a y-axis.",
        "D3 has two methods <code>axisLeft()</code> and <code>axisBottom()</code> to render the y and x axes, respectively. (Axes is the plural form of axis). Here's an example to create the x-axis based on the <code>xScale</code> in the previous challenges:",
        "<code>const xAxis = d3.axisBottom(xScale);</code>",
        "The next step is to render the axis on the SVG canvas. To do so, you can use a general SVG component, the <code>g</code> element. The <code>g</code> stands for group.",
        "Unlike <code>rect</code>, <code>circle</code>, and <code>text</code>, an axis is just a straight line when it's rendered. Because it is a simple shape, using <code>g</code> works.",
        "The last step is to apply a <code>transform</code> attribute to position the axis on the SVG canvas in the right place. Otherwise, the line would render along the border of SVG canvas and wouldn't be visible.",
        "SVG supports different types of <code>transforms</code>, but positioning an axis needs <code>translate</code>. When it's applied to the <code>g</code> element, it moves the whole group over and down by the given amounts. Here's an example:",
        "<blockquote>const xAxis = d3.axisBottom(xScale);<br><br>svg.append(\"g\")<br>   .attr(\"transform\", \"translate(0, \" + (h - padding) + \")\")<br>   .call(xAxis);</blockquote>",
        "The above code places the x-axis at the bottom of the SVG canvas. Then it's passed as an argument to the <code>call()</code> method.",
        "The y-axis works is the same way, except the <code>translate</code> argument is in the form (x, 0). Because <code>translate</code> is a string in the <code>attr()</code> method above, you can use concatenation to include variable values for its arguments.",
        "<hr>",
        "The scatter plot now has an x-axis. Create a y-axis in a variable named <code>yAxis</code> using the <code>axisLeft()</code> method. Then render the axis using a <code>g</code> element. Make sure to use a <code>transform</code> attribute to translate the axis by the amount of padding units right, and 0 units down. Remember to <code>call()</code> the axis."
      ],
      "tests": [
        {
          "text":
            "Your code should use the <code>axisLeft()</code> method with <code>yScale</code> passed as the argument.",
          "testString":
            "assert(code.match(/\\.axisLeft\\(yScale\\)/g), 'Your code should use the <code>axisLeft()</code> method with <code>yScale</code> passed as the argument.');"
        },
        {
          "text":
            "The y-axis <code>g</code> element should have a <code>transform</code> attribute to translate the axis by (60, 0).",
          "testString":
            "assert($('g').eq(1).attr('transform').match(/translate\\(60\\s*?,\\s*?0\\)/g), 'The y-axis <code>g</code> element should have a <code>transform</code> attribute to translate the axis by (60, 0).');"
        },
        {
          "text": "Your code should call the <code>yAxis</code>.",
          "testString":
            "assert(code.match(/\\.call\\(yAxis\\)/g), 'Your code should call the <code>yAxis</code>.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n    \n    const w = 500;\n    const h = 500;\n    const padding = 60;\n    \n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n    \n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n    \n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n    \n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       .attr(\"cx\", (d) => xScale(d[0]))\n       .attr(\"cy\",(d) => yScale(d[1]))\n       .attr(\"r\", (d) => 5);\n    \n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \",\" + d[1]))\n       .attr(\"x\", (d) => xScale(d[0] + 10))\n       .attr(\"y\", (d) => yScale(d[1]))\n    \n    const xAxis = d3.axisBottom(xScale);\n    \n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n       .call(xAxis);\n    \n    // Add your code below this line\n    \n    \n    \n    // Add your code above this line\n  \n  </script>\n</body>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Axes to a Visualization",
      "dashedName": "add-axes-to-a-visualization"
    },
    {
      "id": "587d7fad367417b2b2512be1",
      "description": [
        "You want your code to execute only once your page has finished loading. For that purpose, you can attach a JavaScript event to the document called <code>DOMContentLoaded</code>. Here's the code that does this:",
        "<blockquote>document.addEventListener('DOMContentLoaded',function() {<br><br>});</blockquote>",
        "You can implement event handlers that go inside of the <code>DOMContentLoaded</code> function. You can implement an <code>onclick</code> event handler which triggers when the user clicks on the element with id <code>getMessage</code>, by adding the following code:",
        "<blockquote>document.getElementById('getMessage').onclick=function(){};</blockquote>",
        "<hr>",
        "Add a click event handler inside of the <code>DOMContentLoaded</code> function for the element with id of <code>getMessage</code>."
      ],
      "tests": [
        {
          "text":
            "Your code should use the <code>document.getElementById</code> method to select the <code>getMessage</code> element.",
          "testString":
            "assert(code.match(/document\\.getElementById\\(\\s*?('|\")getMessage\\1\\s*?\\)/g), 'Your code should use the <code>document.getElementById</code> method to select the <code>getMessage</code> element.');"
        },
        {
          "text": "Your code should add an <code>onclick</code> event handler.",
          "testString":
            "assert(typeof document.getElementById('getMessage').onclick === 'function', 'Your code should add an <code>onclick</code> event handler.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    // Add your code below this line\n    \n    \n    // Add your code above this line\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Handle Click Events with JavaScript using the onclick property",
      "dashedName":
        "handle-click-events-with-javascript-using-the-onclick-property"
    },
    {
      "id": "587d7fad367417b2b2512be2",
      "description": [
        "When the click event happens, you can use JavaScript to update an HTML element.",
        "For example, when a user clicks the \"Get Message\" button, it changes the text of the element with the class <code>message</code> to say \"Here is the message\".",
        "This works by adding the following code within the click event:",
        "<code>document.getElementsByClassName('message')[0].innerHTML=\"Here is the message\";</code>",
        "<hr>",
        "Add code inside the <code>onclick</code> event handler to change the text inside the <code>message</code> element to say \"Here is the message\"."
      ],
      "tests": [
        {
          "text":
            "Your code should use the <code>document.getElementsByClassName</code> method to select the element with class <code>message</code> and set its <code>innerHTML</code> to the given string.",
          "testString":
            "assert(code.match(/document\\.getElementsByClassName\\(\\s*?('|\")message\\1\\s*?\\)\\[0\\]\\.innerHTML\\s*?=\\s*?('|\")Here is the message\\2/g), 'Your code should use the <code>document.getElementsByClassName</code> method to select the element with class <code>message</code> and set its <code>innerHTML</code> to the given string.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      // Add your code below this line\n      \n      \n      // Add your code above this line\n    }\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Change Text with click Events",
      "dashedName": "change-text-with-click-events"
    },
    {
      "id": "587d7fae367417b2b2512be3",
      "description": [
        "You can also request data from an external source. This is where APIs come into play.",
        "Remember that APIs - or Application Programming Interfaces - are tools that computers use to communicate with one another. You'll learn how to update HTML with the data we get from APIs using a technology called AJAX.",
        "Most web APIs transfer data in a format called JSON. JSON stands for JavaScript Object Notation.",
        "JSON syntax looks very similar to JavaScript object literal notation. JSON has object properties and their current values, sandwiched between a <code>{</code> and a <code>}</code>.",
        "These properties and their values are often referred to as \"key-value pairs\".",
        "However, JSON transmitted by APIs are sent as <code>bytes</code>, and your application receives it as a <code>string</code>. These can be converted into JavaScript objects, but they are not JavaScript objects by default. The <code>JSON.parse</code> method parses the string and constructs the JavaScript object described by it.",
        "You can request the JSON from freeCodeCamp's Cat Photo API. Here's the code you can put in your click event to do this:",
        "<blockquote>req=new XMLHttpRequest();<br>req.open(\"GET\",'/json/cats.json',true);<br>req.send();<br>req.onload=function(){<br>  json=JSON.parse(req.responseText);<br>  document.getElementsByClassName('message')[0].innerHTML=JSON.stringify(json);<br>};</blockquote>",
        "Here's a review of what each piece is doing. The JavaScript <code>XMLHttpRequest</code> object has a number of properties and methods that are used to transfer data. First, an instance of the <code>XMLHttpRequest</code> object is created and saved in the <code>req</code> variable.",
        "Next, the <code>open</code> method initializes a request - this example is requesting data from an API, therefore is a \"GET\" request. The second argument for <code>open</code> is the URL of the API you are requesting data from. The third argument is a Boolean value where <code>true</code> makes it an asynchronous request.",
        "The <code>send</code> method sends the request. Finally, the <code>onload</code> event handler parses the returned data and applies the <code>JSON.stringify</code> method to convert the JavaScript object into a string. This string is then inserted as the message text.",
        "<hr>",
        "Update the code to create and send a \"GET\" request to the freeCodeCamp Cat Photo API. Then click the \"Get Message\" button. Your AJAX function will replace the \"The message will go here\" text with the raw JSON output from the API."
      ],
      "tests": [
        {
          "text": "Your code should create a new <code>XMLHttpRequest</code>.",
          "testString":
            "assert(code.match(/new\\s+?XMLHttpRequest\\(\\s*?\\)/g), 'Your code should create a new <code>XMLHttpRequest</code>.');"
        },
        {
          "text":
            "Your code should use the <code>open</code> method to initialize a \"GET\" request to the freeCodeCamp Cat Photo API.",
          "testString":
            "assert(code.match(/\\.open\\(\\s*?('|\")GET\\1\\s*?,\\s*?('|\")\\/json\\/cats\\.json\\2\\s*?,\\s*?true\\s*?\\)/g), 'Your code should use the <code>open</code> method to initialize a \"GET\" request to the freeCodeCamp Cat Photo API.');"
        },
        {
          "text":
            "Your code should use the <code>send</code> method to send the request.",
          "testString":
            "assert(code.match(/\\.send\\(\\s*\\)/g), 'Your code should use the <code>send</code> method to send the request.');"
        },
        {
          "text":
            "Your code should have an <code>onload</code> event handler set to a function.",
          "testString":
            "assert(code.match(/\\.onload\\s*=\\s*function\\(\\s*?\\)\\s*?{/g), 'Your code should have an <code>onload</code> event handler set to a function.');"
        },
        {
          "text":
            "Your code should use the <code>JSON.parse</code> method to parse the <code>responseText</code>.",
          "testString":
            "assert(code.match(/JSON\\.parse\\(.*\\.responseText\\)/g), 'Your code should use the <code>JSON.parse</code> method to parse the <code>responseText</code>.');"
        },
        {
          "text":
            "Your code should get the element with class <code>message</code> and change its inner HTML to the string of JSON data.",
          "testString":
            "assert(code.match(/document\\.getElementsByClassName\\(\\s*?('|\")message\\1\\s*?\\)\\[0\\]\\.innerHTML\\s*?=\\s*?JSON\\.stringify\\(.+?\\)/g), 'Your code should get the element with class <code>message</code> and change its inner HTML to the string of JSON data.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      // Add your code below this line\n      \n      \n      // Add your code above this line\n    };\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Get JSON with the JavaScript XMLHttpRequest Method",
      "dashedName": "get-json-with-the-javascript-xmlhttprequest-method"
    },
    {
      "id": "587d7fae367417b2b2512be4",
      "description": [
        "In the previous challenge, you saw how to get JSON data from the freeCodeCamp Cat Photo API.",
        "Now you'll take a closer look at the returned data to better understand the JSON format. Recall some notation in JavaScript:",
        "<blockquote>[ ] -> Square brackets represent an array<br>{ } -> Curly brackets represent an object<br>\" \" -> Double quotes represent a string. They are also used for key names in JSON</blockquote>",
        "Understanding the structure of the data that an API returns is important because it influences how you retrieve the values you need.",
        "On the right, click the \"Get Message\" button to load the freeCodeCamp Cat Photo API JSON into the HTML.",
        "The first and last character you see in the JSON data are square brackets <code>[ ]</code>. This means that the returned data is an array. The second character in the JSON data is a curly <code>{</code> bracket, which starts an object. Looking closely, you can see that there are three separate objects. The JSON data is an array of three objects, where each object contains information about a cat photo.",
        "You learned earlier that objects contain \"key-value pairs\" that are separated by commas. In the Cat Photo example, the first object has <code>\"id\":0</code> where \"id\" is a key and 0 is its corresponding value. Similarly, there are keys for \"imageLink\", \"altText\", and \"codeNames\". Each cat photo object has these same keys, but with different values.",
        "Another interesting \"key-value pair\" in the first object is <code>\"codeNames\":[\"Juggernaut\",\"Mrs. Wallace\",\"ButterCup\"]</code>. Here \"codeNames\" is the key and its value is an array of three strings. It's possible to have arrays of objects as well as a key with an array as a value.",
        "Remember how to access data in arrays and objects. Arrays use bracket notation to access a specific index of an item. Objects use either bracket or dot notation to access the value of a given property. Here's an example that prints the \"altText\" of the first cat photo - note that the parsed JSON data in the editor is saved in a variable called <code>json</code>:",
        "<blockquote>console.log(json[0].altText);<br>// Prints \"A white cat wearing a green helmet shaped melon on its head.\"</blockquote>",
        "<hr>",
        "For the cat with the \"id\" of 2, print to the console the second value in the <code>codeNames</code> array. You should use bracket and dot notation on the object (which is saved in the variable <code>json</code>) to access the value."
      ],
      "tests": [
        {
          "text":
            "Your code should use bracket and dot notation to access the proper code name, and print \"Loki\" to the console.",
          "testString":
            "assert(code.match(/(?:json\\[2\\]\\.codeNames\\[1\\]|json\\[2\\]\\[('|\")codeNames\\1\\]\\[1\\])/g), 'Your code should use bracket and dot notation to access the proper code name, and print \"Loki\" to the console.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      req=new XMLHttpRequest();\n      req.open(\"GET\",'/json/cats.json',true);\n      req.send();\n      req.onload=function(){\n        json=JSON.parse(req.responseText);\n        document.getElementsByClassName('message')[0].innerHTML=JSON.stringify(json);\n        // Add your code below this line\n        \n        \n        // Add your code above this line\n      };\n    };\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Access the JSON Data from an API",
      "dashedName": "access-the-json-data-from-an-api"
    },
    {
      "id": "587d7fae367417b2b2512be5",
      "description": [
        "Now that you're getting data from a JSON API, you can display it in the HTML.",
        "You can use a <code>forEach</code> method to loop through the data since the cat photo objects are held in an array. As you get to each item, you can modify the HTML elements.",
        "First, declare an html variable with <code>var html = \"\";</code>.",
        "Then, loop through the JSON, adding HTML to the variable that wraps the key names in <code>strong</code> tags, followed by the value. When the loop is finished, you render it.",
        "Here's the code that does this:",
        "<blockquote>json.forEach(function(val) {</br>  var keys = Object.keys(val);</br>  html += \"&lt;div class = 'cat'&gt;\";</br>  keys.forEach(function(key) {</br>    html += \"&lt;strong&gt;\" + key + \"&lt;/strong&gt;: \" + val[key] + \"&lt;br&gt;\";</br>  });</br>  html += \"&lt;/div&gt;&lt;br&gt;\";</br>});</blockquote>",
        "<hr>",
        "Add a <code>forEach</code> method to loop over the JSON data and create the HTML elements to display it.",
        "Here is some example JSON",
        "<blockquote>[</br>  {</br>    \"id\":0,</br>    \"imageLink\":\"https://s3.amazonaws.com/freecodecamp/funny-cat.jpg\",</br>    \"altText\":\"A white cat wearing a green helmet shaped melon on its head. \",</br>    \"codeNames\":[</br>      \"Juggernaut\",</br>      \"Mrs. Wallace\",</br>      \"Buttercup\"</br>    ]</br>  }</br>]</blockquote>"
      ],
      "tests": [
        {
          "text":
            "Your code should store the data in the <code>html</code> variable",
          "testString":
            "assert(code.match(/html\\s+?(\\+=|=\\shtml\\s\\+)/g), 'Your code should store the data in the <code>html</code> variable');"
        },
        {
          "text":
            "Your code should use a <code>forEach</code> method to loop over the JSON data from the API.",
          "testString":
            "assert(code.match(/json\\.forEach/g), 'Your code should use a <code>forEach</code> method to loop over the JSON data from the API.');"
        },
        {
          "text":
            "Your code should wrap the key names in <code>strong</code> tags.",
          "testString":
            "assert(code.match(/<strong>.+<\\/strong>/g), 'Your code should wrap the key names in <code>strong</code> tags.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      req=new XMLHttpRequest();\n      req.open(\"GET\",'/json/cats.json',true);\n      req.send();\n      req.onload=function(){\n        json=JSON.parse(req.responseText);\n        var html = \"\";\n        // Add your code below this line\n        \n        \n        \n        // Add your code above this line\n        document.getElementsByClassName('message')[0].innerHTML=html;\n      };\n    };\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Convert JSON Data to HTML",
      "dashedName": "convert-json-data-to-html"
    },
    {
      "id": "587d7fae367417b2b2512be6",
      "description": [
        "The last few challenges showed that each object in the JSON array contains an <code>imageLink</code> key with a value that is the URL of a cat's image.",
        "When you're looping through these objects, you can use this <code>imageLink</code> property to display this image in an <code>img</code> element.",
        "Here's the code that does this:",
        "<code>html += \"&lt;img src = '\" + val.imageLink + \"' \" + \"alt='\" + val.altText + \"'&gt;\";</code>",
        "<hr>",
        "Add code to use the <code>imageLink</code> and <code>altText</code> properties in an <code>img</code> tag."
      ],
      "tests": [
        {
          "text":
            "You should use the <code>imageLink</code> property to display the images.",
          "testString":
            "assert(code.match(/val\\.imageLink/g), 'You should use the <code>imageLink</code> property to display the images.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      req=new XMLHttpRequest();\n      req.open(\"GET\",'/json/cats.json',true);\n      req.send();\n      req.onload=function(){\n        json=JSON.parse(req.responseText);\n        var html = \"\";\n        json.forEach(function(val) {\n          html += \"<div class = 'cat'>\";\n          // Add your code below this line\n          \n          \n          // Add your code above this line\n          html += \"</div><br>\";\n        });\n        document.getElementsByClassName('message')[0].innerHTML=html;\n      };\n     };\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Render Images from Data Sources",
      "dashedName": "render-images-from-data-sources"
    },
    {
      "id": "587d7fae367417b2b2512be7",
      "description": [
        "If you don't want to render every cat photo you get from the freeCodeCamp Cat Photo API, you can pre-filter the JSON before looping through it.",
        "Given that the JSON data is stored in an array, you can use the <code>filter</code> method to filter out the cat whose \"id\" key has a value of 1.",
        "Here's the code to do this:",
        "<blockquote>json = json.filter(function(val) {<br>  return (val.id !== 1);<br>});</blockquote>",
        "<hr>",
        "Add code to <code>filter</code> the json data to remove the cat with the \"id\" value of 1."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>filter</code> method.",
          "testString":
            "assert(code.match(/json\\.filter/g), 'Your code should use the <code>filter</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('getMessage').onclick=function(){\n      req=new XMLHttpRequest();\n      req.open(\"GET\",'/json/cats.json',true);\n      req.send();\n      req.onload=function(){\n        json=JSON.parse(req.responseText);\n        var html = \"\";\n        // Add your code below this line\n        \n        \n        // Add your code above this line\n         json.forEach(function(val) {\n           html += \"<div class = 'cat'>\"\n           \n           html += \"<img src = '\" + val.imageLink + \"' \" + \"alt='\" + val.altText + \"'>\"\n           \n           html += \"</div>\"\n         });\n         document.getElementsByClassName('message')[0].innerHTML=html;\n       };\n     }; \n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Photo Finder</h1> \n<p class=\"message box\">\n  The message will go here\n</p>\n<p>\n  <button id=\"getMessage\">\n    Get Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Prefilter JSON to Get the Data You Need",
      "dashedName": "prefilter-json-to-get-the-data-you-need"
    },
    {
      "id": "587d7faf367417b2b2512be8",
      "description": [
        "Another cool thing you can do is access your user's current location. Every browser has a built in navigator that can give you this information.",
        "The navigator will get the user's current longitude and latitude.",
        "You will see a prompt to allow or block this site from knowing your current location. The challenge can be completed either way, as long as the code is correct.",
        "By selecting allow, you will see the text on the output phone change to your latitude and longitude.",
        "Here's code that does this:",
        "<blockquote>if (navigator.geolocation){<br>  navigator.geolocation.getCurrentPosition(function(position) {<br>    document.getElementById('data').innerHTML=\"latitude: \"+ position.coords.latitude +  \"&lt;br&gt;longitude: \" +  position.coords.longitude;<br>  });<br>}</blockquote>",
        "First, it checks if the <code>navigator.geolocation</code> object exists. If it does, the <code>getCurrentPosition</code> method on that object is called, which initiates an asynchronous request for the user's position. If the request is successful, the callback function in the method runs. This function accesses the <code>position</code> object's values for latitude and longitude using dot notation and updates the HTML.",
        "<hr>",
        "Add the example code inside the <code>script</code> tags to check a user's current location and insert it into the HTML."
      ],
      "tests": [
        {
          "text":
            "Your code should use <code>navigator.geolocation</code> to access the user&#39;s current location.",
          "testString":
            "assert(code.match(/navigator\\.geolocation\\.getCurrentPosition/g), 'Your code should use <code>navigator.geolocation</code> to access the user&#39;s current location.');"
        },
        {
          "text":
            "Your code should use <code>position.coords.latitude</code> to display the user&#39;s latitudinal location.",
          "testString":
            "assert(code.match(/position\\.coords\\.latitude/g), 'Your code should use <code>position.coords.latitude</code> to display the user&#39;s latitudinal location.');"
        },
        {
          "text":
            "Your code should use <code>position.coords.longitude</code> to display the user&#39;s longitudinal location.",
          "testString":
            "assert(code.match(/position\\.coords\\.longitude/g), 'Your code should use <code>position.coords.longitude</code> to display the user&#39;s longitudinal location.');"
        },
        {
          "text":
            "You should display the user&#39;s position within the <code>data</code> div element.",
          "testString":
            "assert(code.match(/document\\.getElementById\\(\\s*?('|\")data\\1\\s*?\\)\\.innerHTML/g), 'You should display the user&#39;s position within the <code>data</code> div element.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  // Add your code below this line\n  \n  \n  // Add your code above this line\n</script>\n<h4>You are here:</h4>\n<div id=\"data\">\n\n</div>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Get Geolocation Data to Find A Users GPS Coordinates",
      "dashedName": "get-geolocation-data-to-find-a-users-gps-coordinates"
    },
    {
      "id": "587d7faf367417b2b2512be9",
      "description": [
        "In the previous examples, you received data from an external resource. You can also send data to an external resource, as long as that resource supports AJAX requests and you know the URL.",
        "JavaScript's <code>XMLHttpRequest</code> method is also used to post data to a server. Here's an example:",
        "<blockquote>req=new XMLHttpRequest();<br>req.open(\"POST\",url,true);<br>req.setRequestHeader('Content-Type','text/plain');<br>req.onreadystatechange=function(){<br>  if(req.readyState==4 && req.status==200){<br>    document.getElementsByClassName('message')[0].innerHTML=req.responseText;<br>  }<br>};<br>req.send(userName);</blockquote>",
        "You've seen several of these methods before. Here the <code>open</code> method initializes the request as a \"POST\" to the given URL of the external resource, and uses the <code>true</code> Boolean to make it asynchronous.",
        "The <code>setRequestHeader</code> method sets the value of an HTTP request header, which contains information about the sender and the request. It must be called after the <code>open</code> method, but before the <code>send</code> method. The two parameters are the name of the header and the value to set as the body of that header.",
        "Next, the <code>onreadystatechange</code> event listener handles a change in the state of the request. A <code>readyState</code> of 4 means the operation is complete, and a <code>status</code> of 200 means it was a successful request. The document's HTML can be updated.",
        "Finally, the <code>send</code> method sends the request with the <code>userName</code> value, which was given by the user in the <code>input</code> field.",
        "<hr>",
        "Update the code to create and send a \"POST\" request. Then enter your name in input box and click \"Send Message\". Your AJAX function will replace \"Reply from Server will be here.\" with the reply of the server. In this case, it is your name appended with \" loves cats\"."
      ],
      "tests": [
        {
          "text": "Your code should create a new <code>XMLHttpRequest</code>.",
          "testString":
            "assert(code.match(/new\\s+?XMLHttpRequest\\(\\s*?\\)/g), 'Your code should create a new <code>XMLHttpRequest</code>.');"
        },
        {
          "text":
            "Your code should use the <code>open</code> method to initialize a \"POST\" request to the server.",
          "testString":
            "assert(code.match(/\\.open\\(\\s*?('|\")POST\\1\\s*?,\\s*?url\\s*?,\\s*?true\\s*?\\)/g), 'Your code should use the <code>open</code> method to initialize a \"POST\" request to the server.');"
        },
        {
          "text":
            "Your code should use the <code>setRequestHeader</code> method.",
          "testString":
            "assert(code.match(/\\.setRequestHeader\\(\\s*?('|\")Content-Type\\1\\s*?,\\s*?('|\")text\\/plain\\2\\s*?\\)/g), 'Your code should use the <code>setRequestHeader</code> method.');"
        },
        {
          "text":
            "Your code should have an <code>onreadystatechange</code> event handler set to a function.",
          "testString":
            "assert(code.match(/\\.onreadystatechange\\s*?=/g), 'Your code should have an <code>onreadystatechange</code> event handler set to a function.');"
        },
        {
          "text":
            "Your code should get the element with class <code>message</code> and change its inner HTML to the <code>responseText</code>.",
          "testString":
            "assert(code.match(/document\\.getElementsByClassName\\(\\s*?('|\")message\\1\\s*?\\)\\[0\\]\\.innerHTML\\s*?=\\s*?.+?\\.responseText/g), 'Your code should get the element with class <code>message</code> and change its inner HTML to the <code>responseText</code>.');"
        },
        {
          "text": "Your code should use the <code>send</code> method.",
          "testString":
            "assert(code.match(/\\.send\\(\\s*?userName\\s*?\\)/g), 'Your code should use the <code>send</code> method.');"
        }
      ],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents":
            "<script>\n  document.addEventListener('DOMContentLoaded',function(){\n    document.getElementById('sendMessage').onclick=function(){\n    \n      var userName=document.getElementById('name').value;\n      // Add your code below this line\n      \n      \n      // Add your code above this line\n    };\n  });\n</script>\n<style>\n  body {\n    text-align: center;\n    font-family: \"Helvetica\", sans-serif;\n  }\n  h1 {\n    font-size: 2em;\n    font-weight: bold;\n  }\n  .box {\n    border-radius: 5px;\n    background-color: #eee;\n    padding: 20px 5px;\n  }\n  button {\n    color: white;\n    background-color: #4791d0;\n    border-radius: 5px;\n    border: 1px solid #4791d0;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    background-color: #0F5897;\n    border: 1px solid #0F5897;\n  }\n</style>\n<h1>Cat Friends</h1> \n<p class=\"message box\">\n  Reply from Server will be here\n</p>\n<p>\n  <label for=\"name\">Your name:\n    <input type=\"text\" id=\"name\"/>\n  </label>\n  <button id=\"sendMessage\">\n    Send Message\n  </button>\n</p>",
          "head": "",
          "tail": ""
        }
      },
      "name": "Post Data with the JavaScript XMLHttpRequest Method",
      "dashedName": "post-data-with-the-javascript-xmlhttprequest-method"
    },
    {
      "id": "bd7158d8c443edefaeb5bdef",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://curse-arrow.glitch.me/' target='_blank'>https://curse-arrow.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-timestamp/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-timestamp/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "I can pass a string as a parameter, and it will check to see whether that string contains either a unix timestamp or a natural language date (example: January 1, 2016).",
          "testString": ""
        },
        {
          "text":
            "If it does, it returns both the Unix timestamp and the natural language form of that date.",
          "testString": ""
        },
        {
          "text":
            "If it does not contain a date or Unix timestamp, it returns null for those properties.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Timestamp Microservice",
      "dashedName": "timestamp-microservice"
    },
    {
      "id": "bd7158d8c443edefaeb5bdff",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://dandelion-roar.glitch.me/' target='_blank'>https://dandelion-roar.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-headerparser/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-headerparser/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "I can get the IP address, language and operating system for my browser.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Request Header Parser Microservice",
      "dashedName": "request-header-parser-microservice"
    },
    {
      "id": "bd7158d8c443edefaeb5bd0e",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://thread-paper.glitch.me/' target='_blank'>https://thread-paper.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-urlshortener/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-urlshortener/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "I can pass a URL as a parameter and I will receive a shortened URL in the JSON response.",
          "testString": ""
        },
        {
          "text":
            "If I pass an invalid URL that doesn't follow the valid http://www.example.com format, the JSON response will contain an error instead.",
          "testString": ""
        },
        {
          "text":
            "When I visit that shortened URL, it will redirect me to my original link.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "URL Shortener Microservice",
      "dashedName": "url-shortener-microservice"
    },
    {
      "id": "5a8b073d06fa14fcfde687aa",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://fuschia-custard.glitch.me/' target='_blank'>https://fuschia-custard.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-exercisetracker/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-exercisetracker/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "I can create a user by posting form data username to /api/exercise/new-user and returned will be an object with username and <code>_id</code>.",
          "testString": ""
        },
        {
          "text":
            "I can get an array of all users by getting api/exercise/users with the same info as when creating a user.",
          "testString": ""
        },
        {
          "text":
            "I can add an exercise to any user by posting form data userId(_id), description, duration, and optionally date to /api/exercise/add. If no date supplied it will use current date. App will return the user object with the exercise fields added.",
          "testString": ""
        },
        {
          "text":
            "I can retrieve a full exercise log of any user by getting /api/exercise/log with a parameter of userId(_id). App will return the user object with added array log and count (total exercise count).",
          "testString": ""
        },
        {
          "text":
            "I can retrieve part of the log of any user by also passing along optional parameters of from & to or limit. (Date format yyyy-mm-dd, limit = int)",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Exercise Tracker",
      "dashedName": "exercise-tracker"
    },
    {
      "id": "bd7158d8c443edefaeb5bd0f",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://purple-paladin.glitch.me/' target='_blank'>https://purple-paladin.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-filemetadata/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-filemetadata/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text": "I can submit a FormData object that includes a file upload.",
          "testString": ""
        },
        {
          "text":
            "When I submit something, I will receive the file size in bytes within the JSON response.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "File Metadata Microservice",
      "dashedName": "file-metadata-microservice"
    },
    {
      "id": "587d7fb0367417b2b2512bed",
      "description": [
        "During the development process, it is important to be able to check what’s going on in your code. Node is just a JavaScript environment. Like client side JavaScript, you can use the console to display useful debug information. On your local machine, you would see the console output in a terminal. On Glitch you can open the logs in the lower part of the screen. You can toggle the log panel with the button ‘Logs’ (top-left, under the app name).",
        "To get started, just print the classic \"Hello World\" in the console. We recommend to keep the log panel open while working at these challenges. Reading the logs you can be aware of the nature of the errors that may occur."
      ],
      "tests": [
        {
          "text": "<code>\"Hello World\"</code> should be in the console",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/hello-console').then(data => { assert.isTrue(data.passed, '\"Hello World\" is not in the server console'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Meet the Node console",
      "dashedName": "meet-the-node-console"
    },
    {
      "id": "587d7fb0367417b2b2512bee",
      "description": [
        "In the first two lines of the file myApp.js you can see how it’s easy to create an Express app object. This object has several methods, and we will learn many of them in these challenges. One fundamental method is <code>app.listen(port)</code>. It tells your server to listen on a given port, putting it in running state. You can see it at the bottom of the file. It is inside comments because for testing reasons we need the app to be running in background. All the code that you may want to add goes between these two fundamental parts. Glitch stores the port number in the environemet variable <code>process.env.PORT</code>. Its value is <code>3000</code>.",
        "Let’s serve our first string! In Express, routes takes the following structure: <code>app.METHOD(PATH, HANDLER)</code>. METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). HANDLER is a function that Express calls when the route is matched.",
        "Handlers take the form <code>function(req, res) {...}</code>, where req is the request object, and res is the response object. For example, the handler",
        "<blockquote>function(req, res) {<br> res.send('Response String');<br>}</blockquote>",
        "will serve the string 'Response String'.",
        "Use the <code>app.get()</code> method to serve the string Hello Express, to GET requests matching the / root path. Be sure that your code works by looking at the logs, then see the results in your browser, clicking the button ‘Show Live’ in the Glitch UI."
      ],
      "tests": [
        {
          "text": "Your app should serve the string 'Hello Express'",
          "testString":
            "getUserInput => $.get(getUserInput('url')).then(data => { assert.equal(data, 'Hello Express', 'Your app does not serve the text \"Hello Express\"'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Start a Working Express Server",
      "dashedName": "start-a-working-express-server"
    },
    {
      "id": "587d7fb0367417b2b2512bef",
      "description": [
        "We can respond with a file using the method <code>res.sendFile(path)</code>.",
        "You can put it inside the <code>app.get('/', ...)</code> route handler. Behind the scenes this method will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type. Then it will read and send the file. This method needs an absolute file path. We recommend you to use the Node global variable <code>__dirname</code> to calculate the path.",
        "e.g. <code>absolutePath = __dirname + relativePath/file.ext</code>.",
        "The file to send is <code>/views/index.html</code>. Try to ‘Show Live’ your app, you should see a big HTML heading (and a form that we will use later…), with no style applied.",
        "Note: You can edit the solution of the previous challenge, or create a new one. If you create a new solution, keep in mind that Express evaluates the routes from top to bottom. It executes the handler for the first match. You have to comment out the preceding solution, or the server will keep responding with a string."
      ],
      "tests": [
        {
          "text": "Your app should serve the file views/index.html",
          "testString":
            "getUserInput => $.get(getUserInput('url')).then(data => { assert.match(data, /<h1>.*<\\/h1>/, 'Your app does not serve the expected HTML'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Serve an HTML File",
      "dashedName": "serve-an-html-file"
    },
    {
      "id": "587d7fb0367417b2b2512bf0",
      "description": [
        "An HTML server usually has one or more directories that are accessible by the user. You can place there the static assets needed by your application (stylesheets, scripts, images). In Express you can put in place this functionality using the middleware <code>express.static(path)</code>, where the parameter is the absolute path of the folder containing the assets. If don’t know what a middleware is, don’t worry. We’ll discuss about it later in details. Basically middlewares are functions that intercept route handlers, adding some kind of information. A middleware needs to be mounted using the method <code>app.use(path, middlewareFunction)</code>. The first path argument is optional. If you don’t pass it, the middleware will be executed for all the requests.",
        "Mount the <code>express.static()</code> middleware for all the requests with <code>app.use()</code>. The absolute path to the assets folder is <code>__dirname + /public</code>.",
        "Now your app should be able to serve a CSS stylesheet. From outside the public folder will appear mounted to the root directory. Your front-page should look a little better now!"
      ],
      "tests": [
        {
          "text":
            "Your app should serve asset files from the <code>/public</code> directory",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/style.css').then(data => { assert.match(data, /body\\s*\\{[^\\}]*\\}/, 'Your app does not serve static assets'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Serve Static Assets",
      "dashedName": "serve-static-assets"
    },
    {
      "id": "587d7fb1367417b2b2512bf1",
      "description": [
        "While an HTML server serves (you guessed it!) HTML, an API serves data. A <dfn>REST</dfn> (REpresentational State Transfer) API allows data exchange in a simple way, without the need for clients to know any detail about the server. The client only needs to know where the resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitted.",
        "Let's create a simple API by creating a route that responds with JSON at the path <code>/json</code>. You can do it as usual, with the <code>app.get()</code> method. Inside the route handler use the method <code>res.json()</code>, passing in an object as an argument. This method closes the request-response loop, returning the data. Behind the scenes it converts a valid JavaScript object into a string, then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back. A valid object has the usual structure <code>{key: data}</code>. Data can ba a number, a string, a nested object or an array. Data can also be a variable or the result of a function call; in which case it will be evaluated before being converted into a string.",
        "Serve the object <code>{\"message\": \"Hello json\"}</code> as a response in JSON format, to the GET requests to the route <code>/json</code>. Then point your browser to your-app-url/json, you should see the message on the screen."
      ],
      "tests": [
        {
          "text":
            "The endpoint <code>/json</code> should serve the json object <code>{\"message\": \"Hello json\"}</code>",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/json').then(data => { assert.equal(data.message, 'Hello json', 'The \\'/json\\' endpoint does not serve the right data'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Serve JSON on a Specific Route",
      "dashedName": "serve-json-on-a-specific-route"
    },
    {
      "id": "587d7fb1367417b2b2512bf2",
      "description": [
        "The <code>.env</code> file is a hidden file that is used to pass environment variables to your application. This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden. For example, you can store API keys from external services or your database URI. You can also use it to store configuration options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.",
        "The environment variables are accessible from the app as <code>process.env.VAR_NAME</code>. The <code>process.env</code> object is a global Node object, and variables are passed as strings. By convention, the variable names are all uppercase, with words separated by an underscore. The <code>.env</code> is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e.g. <code>VAR_NAME=value</code>. Usually, you will put each variable definition on a separate line.",
        "Let's add an environment variable as a configuration option. Store the variable <code>MESSAGE_STYLE=uppercase</code> in the <code>.env</code> file. Then tell the GET <code>/json</code> route handler that you created in the last challenge to transform the response object’s message to uppercase if <code>process.env.MESSAGE_STYLE</code> equals <code>uppercase</code>. The response object should become <code>{\"message\": \"HELLO JSON\"}</code>."
      ],
      "tests": [
        {
          "text":
            "The response of the endpoint <code>/json</code> should change according to the environment variable <code>MESSAGE_STYLE</code>",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/use-env-vars').then(data => { assert.isTrue(data.passed, 'The response of \"/json\" does not change according to MESSAGE_STYLE'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use the env File",
      "dashedName": "use-the-env-file"
    },
    {
      "id": "587d7fb1367417b2b2512bf3",
      "description": [
        "Before we introduced the <code>express.static()</code> middleware function. Now it’s time to see what middleware is, in more detail. Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s request-response cycle. These functions execute some code that can have side effects on the app, and usually add informations to the request or response objects. They can also end the cycle sending the response, when some condition is met. If they don’t send the response, when they are done they start the execution of the next function in the stack. This is triggered calling the 3rd argument <code>next()</code>. More information in the <a href='http://expressjs.com/en/guide/using-middleware.html' target='_blank'>express documentation</a>.",
        "Look at the following example :",
        "<blockquote>function(req, res, next) {<br>  console.log(\"I'm a middleware...\");<br>  next();<br>}</blockquote>",
        "Let’s suppose we mounted this function on a route. When a request matches the route, it displays the string “I’m a middleware…”. Then it executes the next function in the stack.",
        "In this exercise we are going to build a root-level middleware. As we have seen in challenge 4, to mount a middleware function at root level we can use the method <code>app.use(&lt;mware-function&gt;)</code>. In this case the function will be executed for all the requests, but you can also set more specific conditions. For example, if you want a function to be executed only for POST requests, you could use <code>app.post(&lt;mware-function&gt;)</code>. Analogous methods exist for all the http verbs (GET, DELETE, PUT, …).",
        "Build a simple logger. For every request, it should log in the console a string taking the following format: <code>method path - ip</code>. An example would look like: <code>GET /json - ::ffff:127.0.0.1</code>. Note that there is a space between <code>method</code> and <code>path</code> and that the dash separating <code>path</code> and <code>ip</code> is surrounded by a space on either side. You can get the request method (http verb), the relative route path, and the caller’s ip from the request object, using <code>req.method</code>, <code>req.path</code> and <code>req.ip</code>. Remember to call <code>next()</code> when you are done, or your server will be stuck forever. Be sure to have the ‘Logs’ opened, and see what happens when some request arrives…",
        "Hint: Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all the routes, it should be mounted before them."
      ],
      "tests": [
        {
          "text": "Root level logger middleware should be active",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/root-middleware-logger').then(data => { assert.isTrue(data.passed, 'root-level logger is not working as expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Implement a RootLevel Request Logger Middleware",
      "dashedName": "implement-a-rootlevel-request-logger-middleware"
    },
    {
      "id": "587d7fb1367417b2b2512bf4",
      "description": [
        "Middleware can be mounted at a specific route using <code>app.METHOD(path, middlewareFunction)</code>. Middleware can also be chained inside route definition.",
        "Look at the following example:",
        "<blockquote>app.get('/user', function(req, res, next) {<br>  req.user = getTheUserSync();  // Hypotetical synchronous operation<br>  next();<br>}, function(req, res) {<br>  res.send(req.user);<br>})</blockquote>",
        "This approach is useful to split the server operations into smaller units. That leads a to a better app structure, and the possibility to reuse code in different places. This approach can also be used to perform some validation on the data. At each point of the middleware stack you can block the execution of the current chain and pass control to functions specifically designed to handle errors. Or you can pass control to the next matching route, to handle special cases. We will see how in the advanced Express section.",
        "In the route <code>app.get('/now', ...)</code> chain a middleware function and the final handler. In the middleware function you should add the current time to the request object in the <code>req.time</code> key. You can use <code>new Date().toString()</code>. In the handler, respond with a JSON object, taking the structure <code>{time: req.time}</code>.",
        "Hint: The test will not pass if you don’t chain the middleware. If you mount the function somewhere else, the test will fail, even if the output result is correct."
      ],
      "tests": [
        {
          "text": "The /now endpoint should have mounted middleware",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/chain-middleware-time').then(data => { assert.equal(data.stackLength, 2, '\"/now\" route has no mounted middleware'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "The /now endpoint should return a time that is +/- 20 secs from now",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/chain-middleware-time').then(data => { var now = new Date(); assert.isAtMost(Math.abs(new Date(data.time) - now), 20000, 'the returned time is not between +- 20 secs from now'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Chain Middleware to Create a Time Server",
      "dashedName": "chain-middleware-to-create-a-time-server"
    },
    {
      "id": "587d7fb2367417b2b2512bf5",
      "description": [
        "When building an API, we have to allow users to comunicate us what they want to get from our service. For example, if the client is requesting information about a user stored in the database, they need a way to let us know which user they're interested in. One possible way to achieve this result is using route parameters. Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the URL which matches its position. The captured values can be found in the <code>req.params</code> object.",
        "<blockquote>route_path: '/user/:userId/book/:bookId'<br>actual_request_URL: '/user/546/book/6754' <br>req.params: {userId: '546', bookId: '6754'}</blockquote>",
        "Build an echo server, mounted at the route <code>GET /:word/echo</code>. Respond with a JSON object, taking the structure <code>{echo: word}</code>. You can find the word to be repeated at <code>req.params.word</code>. You can test your route from your browser's address bar, visiting some matching routes, e.g. your-app-rootpath/freecodecamp/echo"
      ],
      "tests": [
        {
          "text": "Test 1 : Your echo server should repeat words correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/eChOtEsT/echo').then(data => { assert.equal(data.echo, 'eChOtEsT', 'Test 1: the echo server is not working as expected') }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Test 2 : Your echo server should repeat words correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/ech0-t3st/echo').then(data => { assert.equal(data.echo, 'ech0-t3st', 'Test 2: the echo server is not working as expected') }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Get Route Parameter Input from the Client",
      "dashedName": "get-route-parameter-input-from-the-client"
    },
    {
      "id": "587d7fb2367417b2b2512bf6",
      "description": [
        "Another common way to get input from the client is by encoding the data after the route path, using a query string. The query string is delimited by a question mark (?), and includes field=value couples. Each couple is separated by an ampersand (&). Express can parse the data from the query string, and populate the object <code>req.query</code>. Some characters cannot be in URLs, they have to be encoded in a <a href='https://en.wikipedia.org/wiki/Percent-encoding' target='_blank'>different format</a> before you can send them. If you use the API from JavaScript, you can use specific methods to encode/decode these characters.",
        "<blockquote>route_path: '/library'<br>actual_request_URL: '/library?userId=546&bookId=6754' <br>req.query: {userId: '546', bookId: '6754'}</blockquote>",
        "Build an API endpoint, mounted at <code>GET /name</code>. Respond with a JSON document, taking the structure <code>{ name: 'firstname lastname'}</code>. The first and last name parameters should be encoded in a query string e.g. <code>?first=firstname&last=lastname</code>.",
        "TIP: In the following exercise we are going to receive data from a POST request, at the same <code>/name</code> route path. If you want you can use the method <code>app.route(path).get(handler).post(handler)</code>. This syntax allows you to chain different verb handlers on the same path route. You can save a bit of typing, and have cleaner code."
      ],
      "tests": [
        {
          "text":
            "Test 1 : Your API endpoint should respond with the correct name",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/name?first=Mick&last=Jagger').then(data => { assert.equal(data.name, 'Mick Jagger', 'Test 1: \"GET /name\" route does not behave as expected') }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "Test 2 : Your APi endpoint should respond with the correct name",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/name?last=Richards&first=Keith').then(data => { assert.equal(data.name, 'Keith Richards', 'Test 2: \"GET /name\" route does not behave as expected') }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Get Query Parameter Input from the Client",
      "dashedName": "get-query-parameter-input-from-the-client"
    },
    {
      "id": "587d7fb2367417b2b2512bf7",
      "description": [
        "Besides GET there is another common http verb, it is POST. POST is the default method used to send client data with HTML forms. In the REST convention POST is used to send data to create new items in the database (a new user, or a new blog post). We don’t have a database in this project, but we are going to learn how to handle POST requests anyway.",
        "In these kind of requests the data doesn’t appear in the URL, it is hidden in the request body. This is a part of the HTML request, also called payload. Since HTML is text based, even if you don’t see the data, it doesn’t mean that they are secret. The raw content of an HTTP POST request is shown below:",
        "<blockquote>POST /path/subpath HTTP/1.0<br>From: john@example.com<br>User-Agent: someBrowser/1.0<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 20<br>name=John+Doe&age=25</blockquote>",
        "As you can see the body is encoded like the query string. This is the default format used by HTML forms. With Ajax we can also use JSON to be able to handle data having a more complex structure. There is also another type of encoding: multipart/form-data. This one is used to upload binary files.",
        "In this exercise we will use an urlencoded body.",
        "To parse the data coming from POST requests, you have to install a package: the body-parser. This package allows you to use a series of middleware, which can decode data in different formats. See the docs <a href=\"https://github.com/expressjs/body-parser\" target=\"_blank\" >here</a>.",
        "Install the body-parser module in your package.json. Then require it at the top of the file. Store it in a variable named bodyParser.",
        "The middleware to handle url encoded data is returned by <code>bodyParser.urlencoded({extended: false})</code>. <code>extended=false</code> is a configuration option that tells the parser to use the classic encoding. When using it, values can be only strings or arrays. The extended version allows more data flexibility, but it is outmatched by JSON. Pass to <code>app.use()</code> the function returned by the previous method call. As usual, the middleware must be mounted before all the routes which need it."
      ],
      "tests": [
        {
          "text": "The 'body-parser' middleware should be mounted",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/add-body-parser').then(data => { assert.isAbove(data.mountedAt, 0, '\"body-parser\" is not mounted correctly') }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use bodyparser to Parse POST Requests",
      "dashedName": "use-bodyparser-to-parse-post-requests"
    },
    {
      "id": "587d7fb2367417b2b2512bf8",
      "description": [
        "Mount a POST handler at the path <code>/name</code>. It’s the same path as before. We have prepared a form in the html frontpage. It will submit the same data of exercise 10 (Query string). If the body-parser is configured correctly, you should find the parameters in the object <code>req.body</code>. Have a look at the usual library example:",
        "<blockquote>route: POST '/library'<br>urlencoded_body: userId=546&bookId=6754 <br>req.body: {userId: '546', bookId: '6754'}</blockquote>",
        "Respond with the same JSON object as before: <code>{name: 'firstname lastname'}</code>. Test if your endpoint works using the html form we provided in the app frontpage.",
        "Tip: There are several other http methods other than GET and POST. And by convention there is a correspondence between the http verb, and the operation you are going to execute on the server. The conventional mapping is:",
        "POST (sometimes PUT) - Create a new resource using the information sent with the request,",
        "GET - Read an existing resource without modifying it,",
        "PUT or PATCH (sometimes POST) - Update a resource using the data sent,",
        "DELETE => Delete a resource.",
        "There are also a couple of other methods which are used to negotiate a connection with the server. Except from GET, all the other methods listed above can have a payload (i.e. the data into the request body). The body-parser middleware works with these methods as well."
      ],
      "tests": [
        {
          "text":
            "Test 1 : Your API endpoint should respond with the correct name",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/name', {first: 'Mick', last: 'Jagger'}).then(data => { assert.equal(data.name, 'Mick Jagger', 'Test 1: \"POST /name\" route does not behave as expected') }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "Test 2 : Your API endpoint should respond with the correct name",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/name', {first: 'Keith', last: 'Richards'}).then(data => { assert.equal(data.name, 'Keith Richards', 'Test 2: \"POST /name\" route does not behave as expected') }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Get Data from POST Requests",
      "dashedName": "get-data-from-post-requests"
    },
    {
      "id": "587d7fb3367417b2b2512bfb",
      "description": [
        "The file package.json is the center of any Node.js project or npm package. It stores information about your project just like the <head>-section in a HTML document describes the content of a webpage. The package.json consists of a single JSON-object where information is stored in \"key\": value-pairs. There are only two required fields in a minimal package.json - name and version - but it’s a good practice to provide additional information about your project that could be useful to future users or maintainers.",
        "The author-field",
        "If you go to the Glitch project that you set up previously and look at on the left side of your screen, you’ll find the file tree where you can see an overview of the various files in your project. Under the file tree’s back-end section, you’ll find package.json - the file that we’ll be improving in the next couple of challenges.",
        "One of the most common pieces of information in this file is the author-field that specifies who’s the creator of a project. It can either be a string or an object with contact details. The object is recommended for bigger projects but in our case, a simple string like the following example will do.",
        "<code>\"author\": \"Jane Doe\",</code>",
        "Instructions",
        "Add your name to the author-field in the package.json of your Glitch project.",
        "Remember that you’re writing JSON.",
        "All field-names must use double-quotes (\"), e.g. \"author\"",
        "All fields must be separated with a comma (,)"
      ],
      "tests": [
        {
          "text": "package.json should have a valid \"author\" key",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert(packJson.author, '\"author\" is missing'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "How to Use packagejson the Core of Any Nodejs Project or npm Package",
      "dashedName":
        "how-to-use-packagejson-the-core-of-any-nodejs-project-or-npm-package"
    },
    {
      "id": "587d7fb3367417b2b2512bfc",
      "description": [
        "The next part of a good package.json is the description-field, where a short but informative description about your project belongs.",
        "If you some day plan to publishing a package to npm, remember that this is the string that should sell your idea to the user when they decide whether to install your package or not. However, that’s not the only use case for the description: Since it’s a great way to summarize what a project does, it’s just as important for your normal Node.js-projects to help other developers, future maintainers or even your future self understand the project quickly.",
        "Regardless of what you plan for your project, a description is definitely recommended. Let’s add something similar to this:",
        "<code>\"description\": \"A project that does something awesome\",</code>",
        "Instructions",
        "Add a description to the package.json in your Glitch project.",
        "Remember to use double-quotes for field-names (\") and commas (,) to separate fields."
      ],
      "tests": [
        {
          "text": "package.json should have a valid \"description\" key",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert(packJson.description, '\"description\" is missing'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Add a Description to Your packagejson",
      "dashedName": "add-a-description-to-your-packagejson"
    },
    {
      "id": "587d7fb4367417b2b2512bfd",
      "description": [
        "The keywords-field is where you can describe your project using related keywords.",
        "Example",
        "<code>\"keywords\": [ \"descriptive\", \"related\", \"words\" ],</code>",
        "As you can see, this field is structured as an array of double-quoted strings.",
        "Instructions",
        "Add an array of suitable strings to the keywords-field in the package.json of your Glitch project.",
        "One of the keywords should be freecodecamp."
      ],
      "tests": [
        {
          "text": "package.json should have a valid \"keywords\" key",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert(packJson.keywords, '\"keywords\" is missing'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"keywords\" field should be an Array",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.isArray(packJson.keywords, '\"keywords\" is not an array'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"keywords\" should include \"freecodecamp\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);     assert.include(packJson.keywords, 'freecodecamp', '\"keywords\" does not include \"freecodecamp\"'); },  xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Add Keywords to Your packagejson",
      "dashedName": "add-keywords-to-your-packagejson"
    },
    {
      "id": "587d7fb4367417b2b2512bfe",
      "description": [
        "TODO: This challenge could be used to inspire more people to develop OSS - we should really improve this description.",
        "The license-field is where you inform users of your project what they are allowed to do with it.",
        "Some common licenses for open source projects include MIT and BSD. http://choosealicense.com is a great resource if you want to learn more about what license could fit your project.",
        "License information is not required. Copyright laws in most countries will give you ownership of what you create by default. However, it’s always a good practice to explicitly state what users can and can’t do.",
        "Example",
        "<code>\"license\": \"MIT\",</code>",
        "Instructions",
        "Fill the license-field in the package.json of your Glitch project as you find suitable."
      ],
      "tests": [
        {
          "text": "package.json should have a valid \"license\" key",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert(packJson.license, '\"license\" is missing'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Add a License to Your packagejson",
      "dashedName": "add-a-license-to-your-packagejson"
    },
    {
      "id": "587d7fb4367417b2b2512bff",
      "description": [
        "The version is together with name one of the required fields in a package.json. This field describes the current version of your project.",
        "Example",
        "<code>\"version\": \"1.2\",</code>",
        "Instructions",
        "Add a version to the package.json in your Glitch project."
      ],
      "tests": [
        {
          "text": "package.json should have a valid \"version\" key",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert(packJson.version, '\"version\" is missing'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Add a Version to Your packagejson",
      "dashedName": "add-a-version-to-your-packagejson"
    },
    {
      "id": "587d7fb4367417b2b2512c00",
      "description": [
        "One of the biggest reasons to use a package manager is their powerful dependency management. Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you. But how can npm know exactly what your project needs? Meet the dependencies-section of your package.json.",
        "In the dependencies-section, packages your project require are stored using the following format:",
        "<code>\"dependencies\": {</code>",
        "<code>  \"package-name\": \"version\",</code>",
        "<code>  \"express\": \"4.14.0\"</code>",
        "<code>}</code>",
        "Instructions",
        "Add version 2.14.0 of the package moment to the dependencies-field of your package.json",
        "Moment is a handy library for working with time and dates."
      ],
      "tests": [
        {
          "text": "\"dependencies\" should include \"moment\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.property(packJson.dependencies, 'moment', '\"dependencies\" does not include \"moment\"'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"moment\" version should be \"2.14.0\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.match(packJson.dependencies.moment, /^[\\^\\~]?2\\.14\\.0/, 'Wrong version of \"moment\" installed. It should be 2.14.0'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Expand Your Project with External Packages from npm",
      "dashedName": "expand-your-project-with-external-packages-from-npm"
    },
    {
      "id": "587d7fb5367417b2b2512c01",
      "description": [
        "Versions of the npm packages in the dependencies-section of your package.json follow what’s called Semantic Versioning (SemVer), an industry standard for software versioning aiming to make it easier to manage dependencies. Libraries, frameworks or other tools published on npm should use SemVer in order to clearly communicate what kind of changes that projects who depend on the package can expect if they update.",
        "SemVer doesn’t make sense in projects without public APIs - so unless your project is similar to the examples above, use another versioning format.",
        "So why do you need to understand SemVer?",
        "Knowing SemVer can be useful when you develop software that use external dependencies (which you almost always do). One day, your understanding of these numbers will save you from accidentally introducing breaking changes to your project without understanding why things “that worked yesterday” suddenly doesn’t.",
        "This is how Semantic Versioning works according to the official website:",
        "Given a version number MAJOR.MINOR.PATCH, increment the:",
        "MAJOR version when you make incompatible API changes,",
        "MINOR version when you add functionality in a backwards-compatible manner, and",
        "PATCH version when you make backwards-compatible bug fixes.",
        "This means that PATCHes are bug fixes and MINORs add new features but neither of them break what worked before. Finally, MAJORs add changes that won’t work with earlier versions.",
        "Example",
        "A semantic version number: 1.3.8",
        "Instructions",
        "In the dependencies-section of your package.json, change the version of moment to match MAJOR version 2, MINOR version 10 and PATCH version 2"
      ],
      "tests": [
        {
          "text": "\"dependencies\" should include \"moment\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'moment', '\"dependencies\" does not include \"moment\"'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"moment\" version should be \"2.10.2\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.match(packJson.dependencies.moment, /^[\\^\\~]?2\\.10\\.2/, 'Wrong version of \"moment\". It should be 2.10.2'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Manage npm Dependencies By Understanding Semantic Versioning",
      "dashedName":
        "manage-npm-dependencies-by-understanding-semantic-versioning"
    },
    {
      "id": "587d7fb5367417b2b2512c02",
      "description": [
        "In the last challenge, we told npm to only include a specific version of a package. That’s a useful way to freeze your dependencies if you need to make sure that different parts of your project stay compatible with each other. But in most use cases you don’t want to miss bug fixes, since they often include important security patches and (hopefully) don’t break things in doing so.",
        "To allow a npm dependency to get updated to the latest PATCH-version, you can prefix the dependency’s version with the tilde-character (~). In package.json, our current rule for how npm may upgrade moment is to use a specific version only (2.10.2), but we want to allow the latest 2.10.x-version.",
        "Example",
        "<code>\"some-package-name\": \"~1.3.8\" allows updates to any 1.3.x version.</code>",
        "Instructions",
        "Use the tilde-character (~) to prefix the version of moment in your dependencies and allow npm to update it to any new PATCH release.",
        "Note that the version numbers themselves not should be changed."
      ],
      "tests": [
        {
          "text": "\"dependencies\" should include \"moment\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'moment', '\"dependencies\" does not include \"moment\"'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"moment\" version should match \"~2.10.2\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.match(packJson.dependencies.moment, /^\\~2\\.10\\.2/, 'Wrong version of \"moment\". It should be ~2.10.2'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Use the TildeCharacter to Always Use the Latest Patch Version of a Dependency",
      "dashedName":
        "use-the-tildecharacter-to-always-use-the-latest-patch-version-of-a-dependency"
    },
    {
      "id": "587d7fb5367417b2b2512c03",
      "description": [
        "Similar to how the tilde (~) we learned about in the last challenge allow npm to install the latest PATCH for a dependency, the caret (^) allows npm to install future updates as well. The difference is that the caret will allow both MINOR updates and PATCHes.",
        "At the moment, your current version of moment should be ~2.10.2 which allows npm to install to the latest 2.10.x-version. If we instead were to use the caret (^) as our version prefix, npm would instead be allowed to update to any 2.x.x-version.",
        "Example",
        "<code>\"some-package-name\": \"^1.3.8\" allows updates to any 1.x.x version.</code>",
        "Instructions",
        "Use the caret-character (^) to prefix the version of moment in your dependencies and allow npm to update it to any new MINOR release.",
        "Note that the version numbers themselves not should be changed."
      ],
      "tests": [
        {
          "text": "\"dependencies\" should include \"moment\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'moment', '\"dependencies\" does not include \"moment\"'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"moment\" version should match \"^2.x.x\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.match(packJson.dependencies.moment, /^\\^2\\./, 'Wrong version of \"moment\". It should be ^2.10.2'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Use the CaretCharacter to Use the Latest Minor Version of a Dependency",
      "dashedName":
        "use-the-caretcharacter-to-use-the-latest-minor-version-of-a-dependency"
    },
    {
      "id": "587d7fb5367417b2b2512c04",
      "description": [
        "Now you’ve tested a few ways you can manage dependencies of your project by using the package.json's dependencies-section. You’ve included external packages by adding them to the file and even told npm what types of versions you want by using special characters as the tilde (~) or the caret (^).",
        "But what if you want to remove an external package that you no longer need? You might already have guessed it - Just remove the corresponding \"key\": value-pair for that from your dependencies.",
        "This same method applies to removing other fields in your package.json as well",
        "Instructions",
        "Remove the package moment from your dependencies.",
        "Make sure you have the right amount of commas after removing it."
      ],
      "tests": [
        {
          "text": "\"dependencies\" should not include \"moment\"",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.notProperty(packJson.dependencies, 'moment', '\"dependencies\" still includes \"moment\"'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Remove a Package from Your Dependencies",
      "dashedName": "remove-a-package-from-your-dependencies"
    },
    {
      "id": "587d7fb6367417b2b2512c06",
      "description": [
        "Add mongodb and mongoose to the project’s package.json. Then require mongoose. Store your mLab database URI in the private .env file as MONGO_URI. Connect to the database using mongoose.connect(<Your URI>)"
      ],
      "tests": [
        {
          "text": "\"mongodb\" dependency should be in package.json",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongodb'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"mongoose\" dependency should be in package.json",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongoose'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"mongoose\" should be connected to a database",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/is-mongoose-ok').then(data => {assert.isTrue(data.isMongooseOk, 'mongoose is not connected')}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Install and Set Up Mongoose",
      "dashedName": "install-and-set-up-mongoose"
    },
    {
      "id": "587d7fb6367417b2b2512c07",
      "description": [
        "First of all we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection.",
        "Schemas are building block for Models. They can be nested to create complex models, but in this case we’ll keep things simple.",
        "A model allows you to create instances of your objects, called documents.",
        "Create a person having this prototype :",
        "<code>- Person Prototype -</code>",
        "<code>--------------------</code>",
        "<code>name : string [required]</code>",
        "<code>age :  number</code>",
        "<code>favoriteFoods : array of strings (*) </code>",
        "Use the mongoose basic schema types. If you want you can also add",
        "more fields, use simple validators like required or unique,",
        "and set default values. See the <a href='http://mongoosejs.com/docs/guide.html'>mongoose docs</a>.",
        "[C]RUD Part I - CREATE",
        "Note: Glitch is a real server, and in real servers the interactions with the db happen in handler functions. These function are executed when some event happens (e.g. someone hits an endpoint on your API). We’ll follow the same approach in these exercises. The done() function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating or deleting. It’s following the Node convention and should be called as done(null, data) on success, or done(err) on error.",
        "Warning - When interacting with remote services, errors may occur !",
        "<code>/* Example */</code>",
        "<code>var someFunc = function(done) {</code>",
        "<code>  //... do something (risky) ...</code>",
        "<code>  if(error) return done(error);</code>",
        "<code>  done(null, result);</code>",
        "<code>};</code>"
      ],
      "tests": [
        {
          "text": "Creating an instance from a mongoose schema should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/mongoose-model', {name: 'Mike', age: 28, favoriteFoods: ['pizza', 'cheese']}).then(data => { assert.equal(data.name, 'Mike', '\"model.name\" is not what expected'); assert.equal(data.age, '28', '\"model.age\" is not what expected'); assert.isArray(data.favoriteFoods, '\"model.favoriteFoods\" is not an Array'); assert.include(data.favoriteFoods, 'pizza', '\"model.favoriteFoods\" does not include the expected items'); assert.include(data.favoriteFoods, 'cheese', '\"model.favoriteFoods\" does not include the expected items'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Create a Model",
      "dashedName": "create-a-model"
    },
    {
      "id": "587d7fb6367417b2b2512c09",
      "description": [
        "Create a document instance using the Person constructor you build before. Pass to the constructor an object having the fields name, age, and favoriteFoods. Their types must be conformant to the ones in the Person Schema. Then call the method document.save() on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern, all the following CRUD methods take a callback function like this as the last argument.",
        "<code>/* Example */</code>",
        "<code>// ...</code>",
        "<code>person.save(function(err, data) {</code>",
        "<code>//   ...do your stuff here...</code>",
        "<code>});</code>"
      ],
      "tests": [
        {
          "text": "Creating and saving a db item should succeed",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/create-and-save-person').then(data => { assert.isString(data.name, '\"item.name\" should be a String'); assert.isNumber(data.age, '28', '\"item.age\" should be a Number'); assert.isArray(data.favoriteFoods, '\"item.favoriteFoods\" should be an Array'); assert.equal(data.__v, 0, 'The db item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Create and Save a Record of a Model",
      "dashedName": "create-and-save-a-record-of-a-model"
    },
    {
      "id": "587d7fb7367417b2b2512c0a",
      "description": [
        "Sometimes you need to create many instances of your models, e.g. when seeding a database with initial data. Model.create() takes an array of objects like [{name: 'John', ...}, {...}, ...] as the first argument, and saves them all in the db. Create many people with Model.create(), using the function argument arrayOfPeople."
      ],
      "tests": [
        {
          "text": "Creating many db items at once should succeed",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url') + '/_api/create-many-people', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'John', age: 24, favoriteFoods: ['pizza', 'salad']}, {name: 'Mary', age: 21, favoriteFoods: ['onions', 'chicken']}])}).then(data => { assert.isArray(data, 'the response should be an array'); assert.equal(data.length, 2, 'the response does not contain the expected number of items'); assert.equal(data[0].name, 'John', 'The first item is not correct'); assert.equal(data[0].__v, 0, 'The first item should be not previously edited'); assert.equal(data[1].name, 'Mary', 'The second item is not correct'); assert.equal(data[1].__v, 0, 'The second item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Create Many Records with modelcreate",
      "dashedName": "create-many-records-with-modelcreate"
    },
    {
      "id": "587d7fb7367417b2b2512c0b",
      "description": [
        "Find all the people having a given name, using Model.find() -> [Person]",
        "In its simplest usage, Model.find() accepts a query document (a JSON object ) as the first argument, then a callback. It returns an array of matches. It supports an extremely wide range of search options. Check it in the docs. Use the function argument personName as search key."
      ],
      "tests": [
        {
          "text": "Find all items corresponding to a criteria should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/find-all-by-name', {name: 'r@nd0mN4m3', age: 24, favoriteFoods: ['pizza']}).then(data => { assert.isArray(data, 'the response should be an Array');  assert.equal(data[0].name, 'r@nd0mN4m3', 'item.name is not what expected'); assert.equal(data[0].__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use modelfind to Search Your Database",
      "dashedName": "use-modelfind-to-search-your-database"
    },
    {
      "id": "587d7fb7367417b2b2512c0c",
      "description": [
        "Model.findOne() behaves like .find(), but it returns only one document (not an array), even if there are items. It is especially useful when searching by properties that you have declared as unique. Find just one person which has a certain food in her favorites, using Model.findOne() -> Person. Use the function argument food as search key."
      ],
      "tests": [
        {
          "text": "Find one item should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/find-one-by-food', {name: 'Gary', age: 46, favoriteFoods: ['chicken salad']}).then(data => { assert.equal(data.name, 'Gary', 'item.name is not what expected'); assert.deepEqual(data.favoriteFoods, ['chicken salad'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Use modelfindOne to Return a Single Matching Document from Your Database",
      "dashedName":
        "use-modelfindone-to-return-a-single-matching-document-from-your-database"
    },
    {
      "id": "587d7fb7367417b2b2512c0d",
      "description": [
        "When saving a document, mongodb automatically adds the field _id, and set it to a unique alphanumeric key. Searching by _id is an extremely frequent operation, so moongose provides a dedicated method for it. Find the (only!!) person having a given _id, using Model.findById() -> Person. Use the function argument personId as search key."
      ],
      "tests": [
        {
          "text": "Find an item by Id should succeed",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/find-by-id').then(data => { assert.equal(data.name, 'test', 'item.name is not what expected'); assert.equal(data.age, 0, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['none'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use modelfindById to Search Your Database By id",
      "dashedName": "use-modelfindbyid-to-search-your-database-by-id"
    },
    {
      "id": "587d7fb8367417b2b2512c0e",
      "description": [
        "In the good old days this was what you needed to do if you wanted to edit a document and be able to use it somehow e.g. sending it back in a server response. Mongoose has a dedicated updating method : Model.update(). It is binded to the low-level mongo driver. It can bulk edit many documents matching certain criteria, but it doesn’t send back the updated document, only a ‘status’ message. Furthermore it makes model validations difficult, because it just directly calls the mongo driver.",
        "Find a person by _id ( use any of the above methods ) with the parameter personId as search key. Add “hamburger” to the list of her favoriteFoods (you can use Array.push()). Then - inside the find callback - save() the updated Person.",
        "[*] Hint: This may be tricky if in your Schema you declared favoriteFoods as an Array, without specifying the type (i.e. [String]). In that casefavoriteFoods defaults to Mixed type, and you have to manually mark it as edited using document.markModified('edited-field'). (http://mongoosejs.com/docs/schematypes.html - #Mixed )"
      ],
      "tests": [
        {
          "text": "Find-edit-update an item should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/find-edit-save', {name:'Poldo', age: 40, favoriteFoods:['spaghetti']}).then(data => { assert.equal(data.name, 'Poldo', 'item.name is not what expected'); assert.equal(data.age, 40, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['spaghetti', 'hamburger'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 1, 'The item should be previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Perform Classic Updates by Running Find Edit then Save",
      "dashedName": "perform-classic-updates-by-running-find-edit-then-save"
    },
    {
      "id": "587d7fb8367417b2b2512c0f",
      "description": [
        "Recent versions of mongoose have methods to simplify documents updating. Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the Classic method is still useful in many situations. findByIdAndUpdate() can be used when searching by Id.",
        "Find a person by Name and set her age to 20. Use the function parameter personName as search key.",
        "Hint: We want you to return the updated document. o do that you need to pass the options document { new: true } as the 3rd argument to findOneAndUpdate(). By default these methods return the unmodified object."
      ],
      "tests": [
        {
          "text": "findOneAndUpdate an item should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/find-one-update', {name:'Dorian Gray', age: 35, favoriteFoods:['unknown']}).then(data => { assert.equal(data.name, 'Dorian Gray', 'item.name is not what expected'); assert.equal(data.age, 20, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['unknown'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'findOneAndUpdate does not increment version by design !!!'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Perform New Updates on a Document Using modelfindOneAndUpdate",
      "dashedName":
        "perform-new-updates-on-a-document-using-modelfindoneandupdate"
    },
    {
      "id": "587d7fb8367417b2b2512c10",
      "description": [
        "Delete one person by her _id. You should use one of the methods findByIdAndRemove() or findOneAndRemove(). They are like the previous update methods. They pass the removed document to the cb. As usual, use the function argument personId as search key."
      ],
      "tests": [
        {
          "text": "Deleting an item should succeed",
          "testString":
            "getUserInput => $.post(getUserInput('url') + '/_api/remove-one-person', {name:'Jason Bourne', age: 36, favoriteFoods:['apples']}).then(data => { assert.equal(data.name, 'Jason Bourne', 'item.name is not what expected'); assert.equal(data.age, 36, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['apples'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0); assert.equal(data.count, 0, 'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Delete One Document Using modelfindByIdAndRemove",
      "dashedName": "delete-one-document-using-modelfindbyidandremove"
    },
    {
      "id": "587d7fb8367417b2b2512c11",
      "description": [
        "Model.remove() is useful to delete all the documents matching given criteria. Delete all the people whose name is “Mary”, using Model.remove(). Pass to it a query ducument with the “name” field set, and of course a callback.",
        "Note: Model.remove() doesn’t return the deleted document, but a JSON object containing the outcome of the operation, and the number of items affected. Don’t forget to pass it to the done() callback, since we use it in tests."
      ],
      "tests": [
        {
          "text": "Deleting many items at once should succeed",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url') + '/_api/remove-many-people', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'Mary', age: 16, favoriteFoods: ['lollipop']}, {name: 'Mary', age: 21, favoriteFoods: ['steak']}])}).then(data => { assert.isTrue(!!data.ok, 'The mongo stats are not what expected'); assert.equal(data.n, 2, 'The number of items affected is not what expected'); assert.equal(data.count, 0, 'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Delete Many Documents with modelremove",
      "dashedName": "delete-many-documents-with-modelremove"
    },
    {
      "id": "587d7fb9367417b2b2512c12",
      "description": [
        "If you don’t pass the callback as the last argument to Model.find() (or to the other search methods), the query is not executed. You can store the query in a variable for later use. This kind of object enables you to build up a query using chaining syntax. The actual db search is executed when you finally chain the method .exec(). Pass your callback to this last method. There are many query helpers, here we’ll use the most ‘famous’ ones.",
        "Find people who like \"burrito\". Sort them by name, limit the results to two documents, and hide their age. Chain .find(), .sort(), .limit(), .select(), and then .exec(). Pass the done(err, data) callback to exec()."
      ],
      "tests": [
        {
          "text": "Chaining query helpers should succeed",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url') + '/_api/query-tools', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'Pablo', age: 26, favoriteFoods: ['burrito', 'hot-dog']}, {name: 'Ashley', age: 32, favoriteFoods: ['steak', 'burrito']}, {name: 'Mario', age: 51, favoriteFoods: ['burrito', 'prosciutto']} ]) }).then(data => { assert.isArray(data, 'the response should be an Array'); assert.equal(data.length, 2, 'the data array length is not what expected'); assert.notProperty(data[0], 'age', 'The returned first item has too many properties'); assert.equal(data[0].name, 'Ashley', 'The returned first item name is not what expected'); assert.notProperty(data[1], 'age', 'The returned second item has too many properties'); assert.equal(data[1].name, 'Mario', 'The returned second item name is not what expected');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Chain Search Query Helpers to Narrow Search Results",
      "dashedName": "chain-search-query-helpers-to-narrow-search-results"
    },
    {
      "id": "5895f700f9fc0f352b528e63",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "A template engine enables you to use static template files (such as those written in <em>Pug</em>) in your app. At runtime, the template engine replaces variables in a template file with actual values which can be supplied by your server, and transforms the template into a static HTML file that is then sent to the client. This approach makes it easier to design an HTML page and allows for displaying of variables on the page without needing to make an API call from the client.",
        "To set up <em>Pug</em> for use in your project, you will need to add it as a dependency first in your package.json. <code>\"pug\": \"^0.1.0\"</code>",
        "Now to tell Node/Express to use the templating engine you will have to tell your express <b>app</b> to <b>set</b> 'pug' as the 'view-engine'. <code>app.set('view engine', 'pug')</code>",
        "Lastly, you should change your response to the request for the index route to <code>res.render</code> with the path to the view <em>views/pug/index.pug</em>.",
        "If all went as planned, you should refresh your apps home page and see a small message saying you're successfully rending the Pug from our Pug file! Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Pug is a dependency",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'pug', 'Your project should list \"pug\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "View engine is Pug",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /('|\")view engine('|\"),( |)('|\")pug('|\")/gi, 'Your project should set Pug as a view engine'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Pug is working",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/') .then(data => { assert.match(data, /pug-success-message/gi, 'Your projects home page should now be rendered by pug with the projects .pug file unaltered'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Set up a Template Engine",
      "dashedName": "set-up-a-template-engine"
    },
    {
      "id": "5895f70bf9fc0f352b528e64",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "One of the greatest features of using a template engine is being able to pass variables from the server to the template file before rendering it to HTML.",
        "In your Pug file, you're about to use a variable by referencing the variable name as <code>#{variable_name}</code> inline with other text on an element or by using an equal side on the element without a space such as <code>p= variable_name</code> which sets that p elements text to equal the variable.",
        "We strongly recommend looking at the syntax and structure of Pug <a href='https://github.com/pugjs/pug'>here</a> on their Githubs README. Pug is all about using whitespace and tabs to show nested elements and cutting down on the amount of code needed to make a beautiful site.",
        "Looking at our pug file 'index.pug' included in your project, we used the variables <em>title</em> and <em>message</em>",
        "To pass those alone from our server, you will need to add an object as a second argument to your <em>res.render</em> with the variables and their value. For example, pass this object along setting the variables for your index view: <code>{title: 'Hello', message: 'Please login'</code>",
        "It should look like: <code>res.render(process.cwd() + '/views/pug/index', {title: 'Hello', message: 'Please login'});</code>",
        "Now refresh your page and you should see those values rendered in your view in the correct spot as laid out in your index.pug file! Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Pug render variables correct",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/') .then(data => { assert.match(data, /pug-variable(\"|')>Please login/gi, 'Your projects home page should now be rendered by pug with the projects .pug file unaltered'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use a Template Engines Powers",
      "dashedName": "use-a-template-engines-powers"
    },
    {
      "id": "5895f70cf9fc0f352b528e65",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "It's time to set up <em>Passport</em> so we can finally start allowing a user to register or login to an account! In addition to Passport, we will use Express-session to handle sessions. Using this middleware saves the session id as a cookie in the client and allows us to access the session data using that id on the server. This way we keep personal account information out of the cookie used by the client to verify to our server they are authenticated and just keep the <em>key</em> to access the data stored on the server.",
        "To set up Passport for use in your project, you will need to add it as a dependency first in your package.json. <code>\"passport\": \"^0.3.2\"</code>",
        "In addition, add Express-session as a dependency now as well. Express-session has a ton of advanced features you can use but for now we're just going to use the basics! <code>\"express-session\": \"^1.15.0\"</code>",
        "You will need to set up the session settings now and initialize Passport. Be sure to first create the variables 'session' and 'passport' to require 'express-session' and 'passport' respectively.",
        "To set up your express app to use use the session we'll define just a few basic options. Be sure to add 'SESSION_SECRET' to your .env file and give it a random value. This is used to compute the hash used to encrypt your cookie!",
        "<pre>app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: true,\n  saveUninitialized: true,\n}));</pre>",
        "As well you can go ahead and tell your express app to <b>use</b> 'passport.initialize()' and 'passport.session()'. (For example, <code>app.use(passport.initialize());</code>)",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point <a href='https://gist.github.com/JosephLivengood/338a9c5a326923c3826a666d430e65c3'>here</a>."
      ],
      "tests": [
        {
          "text": "Passort and Express-session are dependencies",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passport', 'Your project should list \"passport\" as a dependency'); assert.property(packJson.dependencies, 'express-session', 'Your project should list \"express-session\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Dependencies correctly required",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|')passport(\"|')/gi, 'You should have required passport'); assert.match(data, /require.*(\"|')express-session(\"|')/gi, 'You should have required express-session'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Express app uses new dependencies",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.initialize/gi, 'Your express app should use \"passport.initialize()\"'); assert.match(data, /passport.session/gi, 'Your express app should use \"passport.session()\"'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Session and session secret correctly set up",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /secret:( |)process.env.SESSION_SECRET/gi, 'Your express app should have express-session set up with your secret as process.env.SESSION_SECRET'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Set up Passport",
      "dashedName": "set-up-passport"
    },
    {
      "id": "5895f70cf9fc0f352b528e66",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Serialization and deserialization are important concepts in regards to authentication. To serialize an object means to convert its contents into a small <em>key</em> essentially that can then be deserialized into the original object. This is what allows us to know whos communicated with the server without having to send the authentication data like username and password at each request for a new page.",
        "To set this up properly, we need to have a serialize function and a deserialize function. In passport we create these with <code>passport.serializeUser( OURFUNCTION )</code> and <code>passport.deserializeUser( OURFUNCTION )</code>",
        "The serializeUser is called with 2 arguments, the full user object and a callback used by passport. Returned in the callback should be a unique key to identify that user- the easiest one to use being the users _id in the object as it should be unique as it generated by MongoDb. Similarly deserializeUser is called with that key and a callback function for passport as well, but this time we have to take that key and return the users full object to the callback. To make a query search for a Mongo _id you will have to create <code>const ObjectID = require('mongodb').ObjectID;</code>, and then to use it you call <code>new ObjectID(THE_ID)</code>. Be sure to add MongoDB as a dependency. You can see this in the examples below:",
        "<pre>passport.serializeUser((user, done) => {\n   done(null, user._id);\n });</pre><br><pre>passport.deserializeUser((id, done) => {\n        db.collection('users').findOne(\n            {_id: new ObjectID(id)},\n            (err, doc) => {\n                done(null, doc);\n            }\n        );\n    });</pre>",
        "NOTE: This deserializeUser will throw an error until we set up the DB in the next step so comment out the whole block and just call <code>done(null, null)</code> in the function deserializeUser.",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Serialize user function correct",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.serializeUser/gi, 'You should have created your passport.serializeUser function'); assert.match(data, /null, user._id/gi, 'There should be a callback in your serializeUser with (null, user._id)'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Deserialize user function correct",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.deserializeUser/gi, 'You should have created your passport.deserializeUser function'); assert.match(data, /null,( |)null/gi, 'There should be a callback in your deserializeUser with (null, null) for now'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "MongoDB is a dependency",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'mongodb', 'Your project should list \"mongodb\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Mongodb properly required including the ObjectId",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|')mongodb(\"|')/gi, 'You should have required mongodb'); assert.match(data, /new ObjectID.*id/gi, 'Even though the block is commented out, you should use new ObjectID(id) for when we add the database'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Serialization of a User Object",
      "dashedName": "serialization-of-a-user-object"
    },
    {
      "id": "5895f70cf9fc0f352b528e67",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Right now we're not loading an actually users object since we haven't set up our database. This can be done many different ways, but for our project we will connect to the database once when we start the server and keep a persistent connection for the full life-cycle of the app.",
        "To do this, add MongoDB as a dependency and require it in your server. (<code>const mongo = require('mongodb').MongoClient;</code>)",
        "Now we want to the connect to our database then start listening for requests. The purpose of this is to not allow requests before our database is connected or if there is a database error. To accomplish you will want to encompass your serialization and your app listener in the following:",
        "<pre>mongo.connect(process.env.DATABASE, (err, db) => {\n    if(err) {\n        console.log('Database error: ' + err);\n    } else {\n        console.log('Successful database connection');\n\n        //serialization and app.listen\n\n}});</pre>",
        "You can now uncomment the block in deserializeUser and remove your <code>done(null, null)</code>. Be sure to set <em>DATABASE</em> in your .env file to your database's connection string (for example: <code>DATABASE=mongodb://admin:pass@mlab.com:12345/my-project</code>). You can set up a free database on <a href='https://mlab.com/welcome/'>mLab</a>. Congratulations- you've finished setting up serialization!",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point <a href='https://gist.github.com/JosephLivengood/e192e809a1d27cb80dc2c6d3467b7477'>here</a>."
      ],
      "tests": [
        {
          "text": "Database connection is present",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /mongo.connect/gi, 'You should have created a connection to your database'); assert.match(data, /mongo.connect[^]*app.listen[^]*}[^]*}/gi, 'You should have your app.listen nested at within your database connection at the bottom'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text":
            "Deserialization is now correctly using the DB and <code>done(null, null)</code> is erased",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.notMatch(data, /null,( |)null/gi, 'The callback in deserializeUser of (null, null) should be completely removed for the db block uncommented out'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Implement the Serialization of a Passport User",
      "dashedName": "implement-the-serialization-of-a-passport-user"
    },
    {
      "id": "5895f70df9fc0f352b528e68",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "A strategy is a way of authenticating a user. You can use a strategy for allowing users to authenticate based on locally saved information (if you have them register first) or from a variety of providers such as Google or Github. For this project we will set up a local strategy. To see a list of the 100's of strategies, visit Passports site <a href='http://passportjs.org/'>here</a>.",
        "Add <em>passport-local</em> as a dependency and add it to your server as follows: <code>const LocalStrategy = require('passport-local');</code>",
        "Now you will have to tell passport to <b>use</b> an instantiated LocalStartegy object with a few settings defined. Make sure this as well as everything from this point on is encapsulated in the database connection since it relies on it! <pre>passport.use(new LocalStrategy(\n  function(username, password, done) {\n    db.collection('users').findOne({ username: username }, function (err, user) {\n      console.log('User '+ username +' attempted to log in.');\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (password !== user.password) { return done(null, false); }\n      return done(null, user);\n    });\n  }\n));</pre> This is defining the process to take when we try to authenticate someone locally. First it tries to find a user in our database with the username entered, then it checks for the password to match, then finally if no errors have popped up that we checked for, like an incorrect password, the users object is returned and they are authenticated.",
        "Many strategies are set up using different settings, general it is easy to set it up based on the README in that strategies repository though. A good example of this is the Github strategy where we don't need to worry about a username or password because the user will be sent to Github's auth page to authenticate and as long as they are logged in and agree then Github returns their profile for us to use.",
        "In the next step we will set up how to actually call the authentication strategy to validate a user based on form data! Submit your page when you think you've got it right up to this point."
      ],
      "tests": [
        {
          "text": "Passport-local is a dependency",
          "testString":
            " getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passport-local', 'Your project should list \"passport-local \" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Passport-local correctly required and setup",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|')passport-local(\"|')/gi, 'You should have required passport-local'); assert.match(data, /new LocalStrategy/gi, 'You should have told passport to use a new strategy'); assert.match(data, /findOne/gi, 'Your new local strategy should use the findOne query to find a username based on the inputs'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Authentication Strategies",
      "dashedName": "authentication-strategies"
    },
    {
      "id": "5895f70df9fc0f352b528e69",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "In the index.pug file supplied there is actually a login form. It has previously been hidden because of the inline javascript <code>if showLogin</code> with the form indented after it. Before showLogin as a variable was never defined, it never rendered the code block containing the form. Go ahead and on the res.render for that page add a new variable to the object <code>showLogin: true</code>. When you refresh your page, you should then see the form! This form is set up to <b>POST</b> on <em>/login</em> so this is where we should set up to accept the POST and authenticate the user.",
        "For this challenge you should add the route /login to accept a POST request. To authenticate on this route you need to add a middleware to do so before then sending a response. This is done by just passing another argument with the middleware before your <code>function(req,res)</code> with your response! The middleware to use is <code>passport.authenticate('local')</code>.",
        "<em>passport.authenticate</em> can also take some options as an argument such as: <code>{ failureRedirect: '/' }</code> which is incredibly useful so be sure to add that in as well. As a response after using the middleware (which will only be called if the authentication middleware passes) should be to redirect the user to <em>/profile</em> and that route should render the view 'profile.pug'.",
        "If the authentication was successful, the user object will be saved in <em>req.user</em>.",
        "Now at this point if you enter a username and password in the form, it should redirect to the home page <em>/</em> and in the console of your server should be 'User {USERNAME} attempted to log in.' since we currently cannot login a user who isn't registered.",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point <a href='https://gist.github.com/JosephLivengood/8a335d1a68ed9170da02bb9d8f5b71d5'>here</a>."
      ],
      "tests": [
        {
          "text": "All steps correctly implemented in the server.js",
          "testString":
            " getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showLogin:( |)true/gi, 'You should be passing the variable \"showLogin\" as true to your render function for the homepage'); assert.match(data, /failureRedirect:( |)('|\")\\/('|\")/gi, 'Your code should include a failureRedirect to the \"/\" route'); assert.match(data, /login[^]*post[^]*local/gi, 'You should have a route for login which accepts a POST and passport.authenticates local'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "A POST request to /login correctly redirects to /",
          "testString":
            "getUserInput => $.post(getUserInput('url')+ '/login') .then(data => { assert.match(data, /Home page/gi, 'A login attempt at this point should redirect to the homepage since we do not have any registered users'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "How to Use Passport Strategies",
      "dashedName": "how-to-use-passport-strategies"
    },
    {
      "id": "5895f70df9fc0f352b528e6a",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "As in, any user can just go to /profile whether they authenticated or not by typing in the url. We want to prevent this by checking if the user is authenticated first before rendering the profile page. This is the perfect example of when to create a middleware.",
        "The challenge here is creating the middleware function <code>ensureAuthenticated(req, res, next)</code>, which will check if a user is authenticated by calling passports isAuthenticated on the <em>request</em> which in turn checks for <em>req.user</em> is to be defined. If it is then <em>next()</em> should be called, otherwise we can just respond to the request with a redirect to our homepage to login. An implementation of this middleware is:",
        "<pre>function ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) {\n      return next();\n  }\n  res.redirect('/');\n};</pre>",
        "Now add <em>ensureAuthenticated</em> as a middleware to the request for the profile page before the argument to the get request containing the function that renders the page.",
        "<pre>app.route('/profile')\n  .get(ensureAuthenticated, (req,res) => {\n       res.render(process.cwd() + '/views/pug/profile');\n  });</pre>",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text":
            "Middleware ensureAuthenticated should be implemented and on our /profile route",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /ensureAuthenticated[^]*req.isAuthenticated/gi, 'Your ensureAuthenticated middleware should be defined and utilize the req.isAuthenticated function'); assert.match(data, /profile[^]*get[^]*ensureAuthenticated/gi, 'Your ensureAuthenticated middleware should be attached to the /profile route'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text":
            "A Get request to /profile correctly redirects to / since we are not authenticated",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/profile') .then(data => { assert.match(data, /Home page/gi, 'An attempt to go to the profile at this point should redirect to the homepage since we are not logged in'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Create New Middleware",
      "dashedName": "create-new-middleware"
    },
    {
      "id": "5895f70ef9fc0f352b528e6b",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Now that we can ensure the user accessing the <em>/profile</em> is authenticated, we can use the information contained in 'req.user' on our page!",
        "Go ahead and pass the object containing the variable <em>username</em> equaling 'req.user.username' into the render method of the profile view. Then go to your 'profile.pug' view and add the line <code>h2.center#welcome Welcome, #{username}!</code> creating the h2 element with the class 'center' and id 'welcome' containing the text 'Welcome, ' and the username!",
        "Also in the profile, add a link to <em>/logout</em>. That route will host the logic to unauthenticate a user. <code>a(href='/logout') Logout</code>",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Correctly added a Pug render variable to /profile",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /\\/views\\/pug\\/profile[^]*username:( |)req.user.username/gi, 'You should be passing the variable username with req.user.username into the render function of the profile page'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "How to Put a Profile Together",
      "dashedName": "how-to-put-a-profile-together"
    },
    {
      "id": "58965611f9fc0f352b528e6c",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Creating the logout logic is easy. The route should just unauthenticate the user and redirect to the home page instead of rendering any view.",
        "In passport, unauthenticating a user is as easy as just calling <code>req.logout();</code> before redirecting.",
        "<pre>app.route('/logout')\n  .get((req, res) => {\n      req.logout();\n      res.redirect('/');\n  });</pre>",
        "You may have noticed we also we're not handling missing pages (404), the common way to handle this in Node is with the following middleware. Go ahead and add this in after all your other routes:",
        "<pre>app.use((req, res, next) => {\n  res.status(404)\n    .type('text')\n    .send('Not Found');\n});</pre>",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Logout route",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /req.logout/gi, 'You should be call req.logout() in youre /logout route'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Logout should redirect to the home page /",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/logout') .then(data => { assert.match(data, /Home page/gi, 'When a user logs out they should be redirected to the homepage'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Logging a User Out",
      "dashedName": "logging-a-user-out"
    },
    {
      "id": "58966a17f9fc0f352b528e6d",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Now we need to allow a new user on our site to register an account. On the res.render for the home page add a new variable to the object passed along- <code>showRegistration: true</code>. When you refresh your page, you should then see the registration form that was already created in your index.pug file! This form is set up to <b>POST</b> on <em>/register</em> so this is where we should set up to accept the POST and create the user object in the database.",
        "The logic of the registration route should be as follows: Register the new user > Authenticate the new user > Redirect to /profile",
        "The logic of step 1, registering the new user, should be as follows: Query database with a findOne command > if user is returned then it exists and redirect back to home <em>OR</em> if user is undefined and no error occurs then 'insertOne' into the database with the username and password and as long as no errors occur then call <em>next</em> to go to step 2, authenticating the new user, which we've already written the logic for in our POST /login route.",
        "<pre>app.route('/register')\n  .post((req, res, next) => {\n      db.collection('users').findOne({ username: req.body.username }, function (err, user) {\n          if(err) {\n              next(err);\n          } else if (user) {\n              res.redirect('/');\n          } else {\n              db.collection('users').insertOne(\n                {username: req.body.username,\n                 password: req.body.password},\n                (err, doc) => {\n                    if(err) {\n                        res.redirect('/');\n                    } else {\n                        next(null, user);\n                    }\n                }\n              )\n          }\n      })},\n    passport.authenticate('local', { failureRedirect: '/' }),\n    (req, res, next) => {\n        res.redirect('/profile');\n    }\n);</pre>",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project completed up to this point <a href='https://gist.github.com/JosephLivengood/6c47bee7df34df9f11820803608071ed'>here</a>."
      ],
      "tests": [
        {
          "text": "Register route and display on home",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showRegistration:( |)true/gi, 'You should be passing the variable \"showRegistration\" as true to your render function for the homepage'); assert.match(data, /register[^]*post[^]*findOne[^]*username:( |)req.body.username/gi, 'You should have a route accepted a post request on register that querys the db with findone and the query being \"username: req.body.username\"'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Registering should work",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url')+ '/register',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'},crossDomain: true, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, 'I should be able to register and it direct me to my profile. CLEAR YOUR DATABASE if this test fails (each time until its right!)'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Login should work",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url')+ '/login',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'}, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, 'Login should work if previous test was done successfully and redirect successfully to the profile. Check your work and clear your DB'); assert.match(data, /freeCodeCampTester/gi, 'The profile should properly display the welcome to the user logged in'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Logout should work",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url')+ '/logout', type: 'GET', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, 'Logout should redirect to home'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Profile should no longer work after logout",
          "testString":
            "getUserInput => $.ajax({url: getUserInput('url')+ '/profile', type: 'GET', crossDomain: true, xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, 'Profile should redirect to home when we are logged out now again'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Registration of New Users",
      "dashedName": "registration-of-new-users"
    },
    {
      "id": "58a25c98f9fc0f352b528e7f",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Going back to the information security section you may remember that storing plaintext passwords is <em>never</em> okay. Now it is time to implement BCrypt to solve this issue.",
        "<hr>Add BCrypt as a dependency and require it in your server. You will need to handle hashing in 2 key areas: where you handle registering/saving a new account and when you check to see that a password is correct on login.",
        "Currently on our registeration route, you insert a user's password into the database like the following: <code>password: req.body.password</code>. An easy way to implement saving a hash instead is to add the following before your database logic <code>var hash = bcrypt.hash(req.body.password, 12);</code> and replacing the <code>req.body.password</code> in the database saving with just <code>password: hash</code>.",
        "Finally on our authentication strategy we check for the following in our code before completing the process: <code>if (password !== user.password) { return done(null, false); }</code>. After making the previous changes, now <code>user.password</code> is a hash. Before making a change to the existing code, notice how the statement is checking if the password is NOT equal then return non-authenticated. With this in mind your code could look as follows to properly check the password entered against the hash: <code>if (!bcrypt.compare(password, user.password)) { return done(null, false); }</code>",
        "That is all it takes to implement one of the most important security features when you have to store passwords! Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "BCrypt is a dependency",
          "testString":
            " getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'bcrypt', 'Your project should list \"bcrypt\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "BCrypt correctly required and implemented",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|')bcrypt(\"|')/gi, 'You should have required bcrypt'); assert.match(data, /bcrypt.hash/gi, 'You should use hash the password in the registration'); assert.match(data, /bcrypt.compare/gi, 'You should compare the password to the hash in your strategy'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Hashing Your Passwords",
      "dashedName": "hashing-your-passwords"
    },
    {
      "id": "589690e6f9fc0f352b528e6e",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a>.",
        "Right now everything you have is in your server.js file. This can lead to hard to manage code that isn't very expandable.",
        "Create 2 new files: Routes.js and Auth.js",
        "Both should start with the following code: <pre>module.exports = function (app, db) {\n\n\n}</pre>",
        "Now in the top of your server file, require these files like such: <code>const routes = require('./routes.js');</code>",
        "Right after you establish a successful connect with the database instantiate each of them like such: <code>routes(app, db)</code>",
        "Finally, take all of the routes in your server and paste them into your new files and remove them from your server file. Also take the ensureAuthenticated since we created that middleware function for routing specifically. You will have to now correctly add the dependencies in that are used, such as <code>const passport = require('passport');</code>, at the very top above the export line in your routes.js file.",
        "Keep adding them until no more errors exist, and your server file no longer has any routing!",
        "Now do the same thing in your auth.js file with all of the things related to authentication such as the serialization and the setting up of the local strategy and erase them from your server file. Be sure to add the dependencies in and call <code>auth(app,db)</code> in the server in the same spot. Be sure to have <code>auth(app, db)</code> before <code>routes(app, db)</code> since our registration route depends on passport being initiated!",
        "Congratulations- you're at the end of this section of Advanced Node and Express and have some beautiful code to show for it! Submit your page when you think you've got it right. If you're running into errors, you can check out an example of the completed project <a href='https://glitch.com/#!/project/delicious-herring'>here</a>."
      ],
      "tests": [
        {
          "text": "Modules present",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|').\\/routes.js(\"|')/gi, 'You should have required your new files'); assert.match(data, /mongo.connect[^]*routes/gi, 'Your new modules should be called after your connection to the database'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Clean Up Your Project with Modules",
      "dashedName": "clean-up-your-project-with-modules"
    },
    {
      "id": "589a69f5f9fc0f352b528e70",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socialauth/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socialauth/'>GitHub</a>.",
        "The basic path this kind of authentication will follow in your app is: <ol><li>User clicks a button or link sending them to our route to authenticate using a specific strategy (EG. Github)</li><li>Your route calls <code>passport.authenticate('github')</code> which redirects them to Github.</li><li>The page the user lands on, on Github, allows them to login if they aren't already then asks them to approve access to their profile from our app.</li><li>The user is then returned to our app at a specific callback url with their profile if they approved.</li><li>They are now authenticated and your app should check if it is a returning profile, or save it in your database if it is not.</li></ol>",
        "Strategies with OAuth require you to have at least a <em>Client ID</em> and a <em>Client Secret</em> which is a way for them to verify who the authentication request is coming from and if it is valid. These are obtained from the site you are trying to implement authentication with, such as Github, and are unique to your app- <b>THEY ARE NOT TO BE SHARED</b> and should never be uploaded to a public repository or written directly in your code. A common practice is to put them in your <em>.env</em> file and reference them like: <code>process.env.GITHUB_CLIENT_ID</code>. For this challenge we're going to use the Github strategy.",
        "Obtaining your <em>Client ID and Secret<em> from Github is done in your account profile settings under 'developer settings', then '<a href='https://github.com/settings/developers'>OAuth applications</a>'. Click 'Register a new application', name your app, paste in the url to your glitch homepage (<b>Not the project code's url</b>), and lastly for the callback url, paste in the same url as the homepage but with '/auth/github/callback' added on. This is where users will be redirected to for us to handle after authenticating on Github. Save the returned information as 'GITHUB_CLIENT_ID' and 'GITHUB_CLIENT_SECRET' in your .env file.",
        "On your remixed project, create 2 routes accepting GET requests: /auth/github and /auth/github/callback. The first should only call passport to authenticate 'github' and the second should call passport to authenticate 'github' with a failure redirect to '/' and then if that is successful redirect to '/profile' (similar to our last project).",
        "An example of how '/auth/github/callback' should look is similar to how we handled a normal login in our last project: <pre>app.route('/login')\n  .post(passport.authenticate('local', { failureRedirect: '/' }), (req,res) => { \n    res.redirect('/profile'); \n  });</pre>",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project up to this point <a href='https://gist.github.com/JosephLivengood/28ea2cae7e1dc6a53d7f0c42d987313b'>here</a>."
      ],
      "tests": [
        {
          "text": "Route /auth/github correct",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /('|\")\\/auth\\/github('|\")[^]*get.*passport.authenticate.*github/gi, 'Route auth/github should only call passport.authenticate with github'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Route /auth/github/callback correct",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /('|\")\\/auth\\/github\\/callback('|\")[^]*get.*passport.authenticate.*github.*failureRedirect:( |)(\"|')\\/(\"|')/gi, 'Route auth/github/callback should accept a get request and call passport.authenticate for github with a failure redirect to home'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Implementation of Social Authentication",
      "dashedName": "implementation-of-social-authentication"
    },
    {
      "id": "589a69f5f9fc0f352b528e71",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socialauth/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socialauth/'>GitHub</a>.",
        "The last part of setting up your Github authentication is to create the strategy itself. For this, you will need to add the dependency of 'passport-github' to your project and require it as GithubStrategy like <code>const GitHubStrategy = require('passport-github').Strategy;</code>.",
        "To set up the Github strategy, you have to tell <b>passport</b> to <b>use</b> an instantiated <b>GithubStrategy</b>, which accepts 2 arguments: An object (containing <em>clientID</em>, <em>clientSecret</em>, and <em>callbackURL</em>) and a function to be called when a user is successfully authenticated which we will determine if the user is new and what fields to save initially in the user's database object. This is common across many strategies but some may require more information as outlined in that specific strategy's github README; for example, Google requires a <em>scope</em> as well which determines what kind of information your request is asking returned and asks the user to approve such access. The current strategy we are implementing has its usage outlined <a>here</a>, but we're going through it all right here on freeCodeCamp!",
        "Here's how your new strategy should look at this point: <pre>passport.use(new GitHubStrategy({\n    clientID: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    callbackURL: /*INSERT CALLBACK URL ENTERED INTO GITHUB HERE*/\n  },\n  function(accessToken, refreshToken, profile, cb) {\n      console.log(profile);\n      //Database logic here with callback containing our user object\n  }\n));</pre>",
        "Your authentication won't be successful yet, and actually throw an error, without the database logic and callback, but it should log to your console your Github profile if you try it!",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Dependency added",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passport-github', 'Your project should list \"passport-github\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Dependency required",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\"|')passport-github(\"|')/gi, 'You should have required passport-github'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Github strategy setup correctly thus far",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.use.*new GitHubStrategy/gi, 'Passport should use a new GitHubStrategy'); assert.match(data, /callbackURL:( |)(\"|').*(\"|')/gi, 'You should have a callbackURL'); assert.match(data, /process.env.GITHUB_CLIENT_SECRET/g, 'You should use process.env.GITHUB_CLIENT_SECRET'); assert.match(data, /process.env.GITHUB_CLIENT_ID/g, 'You should use process.env.GITHUB_CLIENT_ID'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Implementation of Social Authentication II",
      "dashedName": "implementation-of-social-authentication-ii"
    },
    {
      "id": "589a8eb3f9fc0f352b528e72",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socialauth/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socialauth/'>GitHub</a>.",
        "The final part of the strategy is handling the profile returned from Github. We need to load the users database object if it exists or create one if it doesn't and populate the fields from the profile, then return the user's object. Github supplies us a unique <em>id</em> within each profile which we can use to search with to serialize the user with (already implemented). Below is an example implementation you can use in your project- it goes within the function that is the second argument for the new strategy, right below the <code>console.log(profile);</code> currently is:",
        "<pre>db.collection('socialusers').findAndModify(\n    {id: profile.id},\n    {},\n    {$setOnInsert:{\n        id: profile.id,\n        name: profile.displayName || 'John Doe',\n        photo: profile.photos[0].value || '',\n        email: profile.emails[0].value || 'No public email',\n        created_on: new Date(),\n        provider: profile.provider || ''\n    },$set:{\n        last_login: new Date()\n    },$inc:{\n        login_count: 1\n    }},\n    {upsert:true, new: true},\n    (err, doc) => {\n        return cb(null, doc.value);\n    }\n);</pre>",
        "With a findAndModify, it allows you to search for an object and update it, as well as upsert the object if it doesn't exist and receive the new object back each time in our callback function. In this example, we always set the last_login as now, we always increment the login_count by 1, and only when we insert a new object(new user) do we populate the majority of the fields. Something to notice also is the use of default values. Sometimes a profile returned won't have all the information filled out or it will have been chosen by the user to remain private; so in this case we have to handle it to prevent an error.",
        "You should be able to login to your app now- try it! Submit your page when you think you've got it right. If you're running into errors, you can check out an example of this mini-project's finished code <a href='https://glitch.com/#!/project/guttural-birch'>here</a>."
      ],
      "tests": [
        {
          "text": "Github strategy setup complete",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /GitHubStrategy[^]*db.collection/gi, 'Strategy should use now use the database to search for the user'); assert.match(data, /GitHubStrategy[^]*socialusers/gi, 'Strategy should use \"socialusers\" as db collection'); assert.match(data, /GitHubStrategy[^]*return cb/gi, 'Strategy should return the callback function \"cb\"'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Implementation of Social Authentication III",
      "dashedName": "implementation-of-social-authentication-iii"
    },
    {
      "id": "589fc830f9fc0f352b528e74",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "Add Socket.IO as a dependency and require/instantiate it in your server defined as 'io' with the http server as an argument. <code>const io = require('socket.io')(http);</code>",
        "The first thing needing to be handled is listening for a new connection from the client. The <dfn>on</dfn> keyword does just that- listen for a specific event. It requires 2 arguments: a string containing the title of the event thats emitted, and a function with which the data is passed though. In the case of our connection listener, we use <em>socket</em> to define the data in the second argument. A socket is an individual client who is connected.",
        "For listening for connections on our server, add the following between the comments in your project:<pre>io.on('connection', socket => {\n  console.log('A user has connected');\n});</pre>",
        "Now for the client to connect, you just need to add the following to your client.js which is loaded by the page after you've authenticated: <pre>/*global io*/\nvar socket = io();</pre>The comment suppresses the error you would normally see since 'io' is not defined in the file. We've already added a reliable CDN to the Socket.IO library on the page in chat.pug.",
        "Now try loading up your app and authenticate and you should see in your server console 'A user has connected'!",
        "<strong>Note</strong><br><code>io()</code> works only when connecting to a socket hosted on the same url/server. For connecting to an external socket hosted elsewhere, you would use <code>io.connect('URL');</code>.",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Socket.IO is a dependency",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'socket.io', 'Your project should list \"socket.io\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Socket.IO has been properly required and instanciated",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js').then(data => {assert.match(data, /io.*=.*require.*('|\")socket.io('|\").*http/gi, 'You should correctly require and instantiate socket.io as io.');}, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Socket.IO should be listening for connections",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /io.on.*('|\")connection('|\").*socket/gi, 'io should listen for \"connection\" and socket should be the 2nd arguments variable'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Your client should connect to your server",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/public/client.js') .then(data => { assert.match(data, /socket.*=.*io/gi, 'Your client should be connection to server with the connection defined as socket'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Set up the Environment",
      "dashedName": "set-up-the-environment"
    },
    {
      "id": "589fc831f9fc0f352b528e75",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "<dfn>Emit</dfn> is the most common way of communicating you will use. When you emit something from the server to 'io', you send an event's name and data to all the connected sockets. A good example of this concept would be emitting the current count of connected users each time a new user connects!",
        "<hr>Start by adding a variable to keep track of the users just before where you are currently listening for connections. <code>var currentUsers = 0;</code>",
        "Now when someone connects you should increment the count before emitting the count so you will want to add the incrementer within the connection listener. <code>++currentUsers;</code>",
        "Finally after incrementing the count, you should emit the event(still within the connection listener). The event should be named 'user count' and the data should just be the 'currentUsers'. <code>io.emit('user count', currentUsers);</code>",
        "<hr>Now you can implement a way for your client to listen for this event! Similarly to listening for a connection on the server you will use the <em>on</em> keyword. <pre>socket.on('user count', function(data){\n  console.log(data);\n});</pre>",
        "Now try loading up your app and authenticate and you should see in your client console '1' representing the current user count! Try loading more clients up and authenticating to see the number go up.",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "currentUsers is defined",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js').then(data => {assert.match(data, /currentUsers/gi, 'You should have variable currentUsers defined');}, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Server emits the current user count at each new connection",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /io.emit.*('|\")user count('|\").*currentUsers/gi, 'You should emit \"user count\" with data currentUsers'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Your client is listening for 'user count' event",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/public/client.js') .then(data => { assert.match(data, /socket.on.*('|\")user count('|\")/gi, 'Your client should be connection to server with the connection defined as socket'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Communicate by Emitting",
      "dashedName": "communicate-by-emitting"
    },
    {
      "id": "589fc831f9fc0f352b528e76",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "You may notice that up to now you have only been increasing the user count. Handling a user disconnecting is just as easy as handling the initial connect except the difference is you have to listen for it on each socket versus on the whole server.",
        "<hr>To do this, add in to your existing connect listener a listener that listens for 'disconnect' on the socket with no data passed through. You can test this functionality by just logging to the console a user has disconnected. <code>socket.on('disconnect', () => { /*anything you want to do on disconnect*/ });</code>",
        "To make sure clients continuously have the updated count of current users, you should decrease the currentUsers by 1 when the disconnect happens then emit the 'user count' event with the updated count!",
        "<strong>Note</strong><br>Just like 'disconnect', all other events that a socket can emit to the server should be handled within the connecting listener where we have 'socket' defined.",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Server handles the event disconnect from a socket",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /socket.on.*('|\")disconnect('|\")/gi, ''); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "Your client is listening for 'user count' event",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/public/client.js') .then(data => { assert.match(data, /socket.on.*('|\")user count('|\")/gi, 'Your client should be connection to server with the connection defined as socket'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Handle a Disconnect",
      "dashedName": "handle-a-disconnect"
    },
    {
      "id": "589fc831f9fc0f352b528e77",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "Currently, you cannot determine who is connected to your web socket. While 'req.user' containers the user object, thats only when your user interacts with the web server and with web sockets you have no req (request) and therefor no user data. One way to solve the problem of knowing who is connected to your web socket is by parsing and decoding the cookie that contains the passport session then deserializing it to obtain the user object. Luckily, there is a package on NPM just for this that turns a once complex task into something simple!",
        "<hr>Add 'passport.socketio' as a dependency and require it as 'passportSocketIo'.",
        "Now we just have to tell Socket.IO to use it and set the options. Be sure this is added before the existing socket code and not in the existing connection listener. For your server it should look as follows:<pre>io.use(passportSocketIo.authorize({\n  cookieParser: cookieParser,\n  key:          'express.sid',\n  secret:       process.env.SESSION_SECRET,\n  store:        sessionStore\n}));</pre>You can also optionally pass 'success' and 'fail' with a function that will be called after the authentication process completes when a client trys to connect.",
        "The user object is now accessible on your socket object as <code>socket.request.user</code>. For example, now you can add the following: <code>console.log('user ' + socket.request.user.name + ' connected');</code> and it will log to the server console who has connected!",
        "Submit your page when you think you've got it right. If you're running into errors, you can check out the project up to this point <a href='https://gist.github.com/JosephLivengood/a9e69ff91337500d5171e29324e1ff35'>here</a>."
      ],
      "tests": [
        {
          "text": "passportSocketIo is a dependency",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passportSocketIo', 'Your project should list \"passportSocketIo\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "passportSocketIo is properly required",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js').then(data => {assert.match(data, /passportSockerIo.*=.*require.*('|\")passportSocketIo('|\")/gi, 'You should correctly require and instantiate socket.io as io.');}, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "passportSocketIo is properly setup",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /io.use.*passportSocketIo.authorize/gi, 'You should have told io to use passportSockIo.authorize with the correct options'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Authentication with SocketIO",
      "dashedName": "authentication-with-socketio"
    },
    {
      "id": "589fc832f9fc0f352b528e78",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "Many chat rooms are able to annouce when a user connects or disconnects and then display that to all of the connected users in the chat. Seeing as though you already are emitting an event on connect and disconnect, you will just have to modify this event to support such feature. The most logical way of doing so is sending 3 pieces of data with the event: name of the user connected/disconnected, the current user count, and if that name connected or disconnected.",
        "<hr>Change the event name to 'user' and as the data pass an object along containing fields 'name', 'currentUsers', and boolean 'connected' (to be true if connection, or false for disconnection of the user sent). Be sure to make the change to both points we had the 'user count' event and set the disconnect one to sent false for field 'connected' instead of true like the event emitted on connect. <code>io.emit('user', {name: socket.request.user.name, currentUsers, connected: true});</code>",
        "Now your client will have all the nesesary information to correctly display the current user count and annouce when a user connects or disconnects! To handle this event on the client side we should listen for 'user' and then update the current user count by using jQuery to change the text of <code>#num-users</code> to '{NUMBER} users online', as well as append a <code>&#60;li&#62;</code> to the unordered list with id 'messages' with '{NAME} has {joined/left} the chat.'.",
        "An implementation of this could look like the following:<pre>socket.on('user', function(data){\n  $('#num-users').text(data.currentUsers+' users online');\n  var message = data.name;\n  if(data.connected) {\n    message += ' has joined the chat.';\n  } else {\n    message += ' has left the chat.';\n  }\n  $('#messages').append($('&#60;li&#62;').html('&#60;b&#62;'+ message +'&#60;\\/b&#62;'));\n});</pre>",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text":
            "Event 'user' is emitted with name, currentUsers, and connected",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /io.emit.*('|\")user('|\").*name.*currentUsers.*connected/gi, 'You should have an event emitted named user sending name, currentUsers, and connected'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text":
            "Client properly handling and displaying the new data from event 'user'",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/public/client.js') .then(data => { assert.match(data, /socket.on.*('|\")user('|\")[^]*num-users/gi, 'You should change the text of #num-users within on your client within the \"user\" even listener to show the current users connected'); assert.match(data, /socket.on.*('|\")user('|\")[^]*messages.*li/gi, 'You should append a list item to #messages on your client within the \"user\" event listener to annouce a user came or went'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Announce New Users",
      "dashedName": "announce-new-users"
    },
    {
      "id": "589fc832f9fc0f352b528e79",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socketio/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-socketio/'>GitHub</a>.",
        "It's time you start allowing clients to send a chat message to the server to emit to all the clients! Already in your client.js file you should see there is already a block of code handling when the messgae form is submitted! (<code>$('form').submit(function(){ /*logic*/ });</code>)",
        "<hr>Within the code you're handling the form submit you should emit an event after you define 'messageToSend' but before you clear the text box <code>#m</code>. The event should be named 'chat message' and the data should just be 'messageToSend'. <code>socket.emit('chat message', messageToSend);</code>",
        "Now on your server you should be listening to the socket for the event 'chat message' with the data being named 'message'. Once the event is received it should then emit the event 'chat message' to all sockets <code>io.emit</code> with the data being an object containing 'name' and 'message'.",
        "On your client now again, you should now listen for event 'chat message' and when received, append a list item to <code>#messages</code> with the name a colon and the message!",
        "At this point the chat should be fully functional and sending messages across all clients! Submit your page when you think you've got it right. If you're running into errors, you can check out the project up to this point <a href='https://gist.github.com/JosephLivengood/3e4b7750f6cd42feaa2768458d682136'>here for the server</a> and <a href='https://gist.github.com/JosephLivengood/41ba76348df3013b7870dc64861de744'>here for the client</a>."
      ],
      "tests": [
        {
          "text": "Server listens for 'chat message' then emits it properly",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /socket.on.*('|\")chat message('|\")[^]*io.emit.*('|\")chat message('|\").*name.*message/gi, 'Your server should listen to the socket for \"chat message\" then emit to all users \"chat message\" with name and message in the data object'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text":
            "Client properly handling and displaying the new data from event 'chat message'",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/public/client.js') .then(data => { assert.match(data, /socket.on.*('|\")chat message('|\")[^]*messages.*li/gi, 'You should append a list item to #messages on your client within the \"chat message\" event listener to display the new message'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Send and Display Chat Messages",
      "dashedName": "send-and-display-chat-messages"
    },
    {
      "id": "587d8247367417b2b2512c36",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Helmet helps you secure your Express apps by setting various HTTP headers. Install the package, then require it."
      ],
      "tests": [
        {
          "text": "\"helmet\" dependency should be in package.json",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'helmet'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Install and Require Helmet",
      "dashedName": "install-and-require-helmet"
    },
    {
      "id": "587d8247367417b2b2512c37",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Hackers can exploit known vulnerabilities in Express/Node if they see that your site is powered by Express. X-Powered-By: Express is sent in every request coming from Express by default. The helmet.hidePoweredBy() middleware will remove the X-Powered-By header. You can also explicitly set the header to something else, to throw people off. e.g. app.use(helmet.hidePoweredBy({ setTo: 'PHP 4.2.0' }))"
      ],
      "tests": [
        {
          "text":
            "helmet.hidePoweredBy() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'hidePoweredBy'); assert.notEqual(data.headers['x-powered-by'], 'Express')}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Hide Potentially Dangerous Information Using helmethidePoweredBy",
      "dashedName":
        "hide-potentially-dangerous-information-using-helmethidepoweredby"
    },
    {
      "id": "587d8247367417b2b2512c38",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Your page could be put in a <frame> or <iframe> without your consent. This can result in clickjacking attacks, among other things. Clickjacking is a technique of tricking a user into interacting with a page different from what the user thinks it is. This can be obtained executing your page in a malicious context, by mean of iframing. In that context a hacker can put a hidden layer over your page. Hidden buttons can be used to run bad scripts. This middleware sets the X-Frame-Options header. It restricts who can put your site in a frame. It has three modes: DENY, SAMEORIGIN, and ALLOW-FROM.",
        "We don’t need our app to be framed. You should use helmet.frameguard() passing with the configuration object {action: 'deny'}."
      ],
      "tests": [
        {
          "text": "helmet.frameguard() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'frameguard', 'helmet.frameguard() middleware is not mounted correctly'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "helmet.frameguard() 'action' should be set to 'DENY'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.property(data.headers, 'x-frame-options'); assert.equal(data.headers['x-frame-options'], 'DENY');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Mitigate the Risk of Clickjacking with helmetframeguard",
      "dashedName": "mitigate-the-risk-of-clickjacking-with-helmetframeguard"
    },
    {
      "id": "587d8247367417b2b2512c39",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Cross-site scripting (XSS) is a frequent type of attack where malicious scripts are injected into vulnerable pages, with the purpose of stealing sensitive data like session cookies, or passwords.",
        "The basic rule to lower the risk of an XSS attack is simple: “Never trust user’s input”. As a developer you should always sanitize all the input coming from the outside. This includes data coming from forms, GET query urls, and even from POST bodies. Sanitizing means that you should find and encode the characters that may be dangerous e.g. <, >.",
        "Modern browsers can help mitigating the risk by adopting better software strategies. Often these are configurable via http headers.",
        "The X-XSS-Protection HTTP header is a basic protection. The browser detects a potential injected script using a heuristic filter. If the header is enabled, the browser changes the script code, neutralizing it.",
        "It still has limited support."
      ],
      "tests": [
        {
          "text": "helmet.xssFilter() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'xXssProtection'); assert.property(data.headers, 'x-xss-protection'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Mitigate the Risk of Cross Site Scripting XSS Attacks with helmetxssFilter",
      "dashedName":
        "mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmetxssfilter"
    },
    {
      "id": "587d8248367417b2b2512c3a",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Browsers can use content or MIME sniffing to adapt to different datatypes coming from a response. They override the Content-Type headers to guess and process the data. While this can be convenient in some scenarios, it can also lead to some dangerous attacks. This middleware sets the X-Content-Type-Options header to nosniff. This instructs the browser to not bypass the provided Content-Type."
      ],
      "tests": [
        {
          "text": "helmet.noSniff() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'nosniff'); assert.equal(data.headers['x-content-type-options'], 'nosniff'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Avoid Inferring the Response MIME Type with helmetnoSniff",
      "dashedName": "avoid-inferring-the-response-mime-type-with-helmetnosniff"
    },
    {
      "id": "587d8248367417b2b2512c3b",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "Some web applications will serve untrusted HTML for download. Some versions of Internet Explorer by default open those HTML files in the context of your site. This means that an untrusted HTML page could start doing bad things in the context of your pages. This middleware sets the X-Download-Options header to noopen. This will prevent IE users from executing downloads in the trusted site’s context."
      ],
      "tests": [
        {
          "text": "helmet.ieNoOpen() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'ienoopen'); assert.equal(data.headers['x-download-options'], 'noopen'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Prevent IE from Opening Untrusted HTML with helmetieNoOpen",
      "dashedName": "prevent-ie-from-opening-untrusted-html-with-helmetienoopen"
    },
    {
      "id": "587d8248367417b2b2512c3c",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "HTTP Strict Transport Security (HSTS) is a web security policy which helps to protect websites against protocol downgrade attacks and cookie hijacking. If your website can be accessed via HTTPS you can ask user’s browsers to avoid using insecure HTTP. By setting the header Strict-Transport-Security, you tell the browsers to use HTTPS for the future requests in a specified amount of time. This will work for the requests coming after the initial request.",
        "Configure helmet.hsts() to use HTTPS for the next 90 days. Pass the config object {maxAge: timeInMilliseconds, force: true}. Glitch already has hsts enabled. To override its settings you need to set the field \"force\" to true in the config object. We will intercept and restore the Glitch header, after inspecting it for testing.",
        "Note: Configuring HTTPS on a custom website requires the acquisition of a domain, and a SSL/TSL Certificate."
      ],
      "tests": [
        {
          "text": "helmet.hsts() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'hsts'); assert.property(data.headers, 'strict-transport-security'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "maxAge should be equal to 7776000 ms (90 days)",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.match(data.headers['strict-transport-security'], /^max-age=777600000;?/); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Ask Browsers to Access Your Site via HTTPS Only with helmethsts",
      "dashedName":
        "ask-browsers-to-access-your-site-via-https-only-with-helmethsts"
    },
    {
      "id": "587d8248367417b2b2512c3d",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "To improve performance, most browsers prefetch DNS records for the links in a page. In that way the destination ip is already known when the user clicks on a link. This may lead to over-use of the DNS service (if you own a big website, visited by millions people…), privacy issues (one eavesdropper could infer that you are on a certain page), or page statistics alteration (some links may appear visited even if they are not). If you have high security needs you can disable DNS prefetching, at the cost of a performance penalty."
      ],
      "tests": [
        {
          "text":
            "helmet.dnsPrefetchControl() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'dnsPrefetchControl'); assert.equal(data.headers['x-dns-prefetch-control'], 'off'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Disable DNS Prefetching with helmetdnsPrefetchControl",
      "dashedName": "disable-dns-prefetching-with-helmetdnsprefetchcontrol"
    },
    {
      "id": "587d8249367417b2b2512c3e",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "If you are releasing an update for your website, and you want the users to always download the newer version, you can (try to) disable caching on client’s browser. It can be useful in development too. Caching has performance benefits, which you will lose, so only use this option when there is a real need."
      ],
      "tests": [
        {
          "text": "helmet.noCache() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'nocache'); assert.equal(data.headers['cache-control'], 'no-store, no-cache, must-revalidate, proxy-revalidate'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Disable ClientSide Caching with helmetnoCache",
      "dashedName": "disable-clientside-caching-with-helmetnocache"
    },
    {
      "id": "587d8249367417b2b2512c3f",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "This challenge highlights one promising new defense that can significantly reduce the risk and impact of many type of attacks in modern browsers. By setting and configuring a Content Security Policy you can prevent the injection of anything unintended into your page. This will protect your app from XSS vulnerabilities, undesired tracking, malicious frames, and much more. CSP works by defining a whitelist of content sources which are trusted. You can configure them for each kind of resource a web page may need (scripts, stylesheets, fonts, frames, media, and so on…). There are multiple directives available, so a website owner can have a granular control. See HTML 5 Rocks, KeyCDN for more details. Unfortunately CSP in unsupported by older browser.",
        "By default, directives are wide open, so it’s important to set the defaultSrc directive as a fallback. Helmet supports both defaultSrc and default-src naming styles. The fallback applies for most of the unspecified directives. In this exercise, use helmet.contentSecurityPolicy(), and configure it setting the defaultSrc directive to [\"self\"] (the list of allowed sources must be in an array), in order to trust only your website address by default. Set also the scriptSrc directive so that you will allow scripts to be downloaded from your website, and from the domain 'trusted-cdn.com'.",
        "Hint: in the \"'self'\" keyword, the single quotes are part of the keyword itself, so it needs to be enclosed in double quotes to be working."
      ],
      "tests": [
        {
          "text": "helmet.csp() middleware should be mounted correctly",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'csp'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "Your csp config is not correct. defaultSrc should be [\"'self'\"] and scriptSrc should be [\"'self'\", 'trusted-cdn.com']",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { var cspHeader = Object.keys(data.headers).filter(function(k){ return k === 'content-security-policy' || k === 'x-webkit-csp' || k === 'x-content-security-policy' })[0]; assert.equal(data.headers[cspHeader], \"default-src 'self'; script-src 'self' trusted-cdn.com\"); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Set a Content Security Policy with helmetcontentSecurityPolicy",
      "dashedName":
        "set-a-content-security-policy-with-helmetcontentsecuritypolicy"
    },
    {
      "id": "587d8249367417b2b2512c40",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a>.",
        "app.use(helmet()) will automatically include all the middleware introduced above, except noCache(), and contentSecurityPolicy(), but these can be enabled if necessary. You can also disable or configure any other middleware individually, using a configuration object.",
        "// Example",
        "<code>app.use(helmet({</code>",
        "<code>  frameguard: {         // configure</code>",
        "<code>    action: 'deny'</code>",
        "<code>  },</code>",
        "<code>  contentSecurityPolicy: {    // enable and configure</code>",
        "<code>   directives: {</code>",
        "<code>     defaultSrc: [\"self\"],</code>",
        "<code>     styleSrc: ['style.com'],</code>",
        "<code>   }</code>",
        "<code>  },</code>",
        "<code> dnsPrefetchControl: false     // disable</code>",
        "<code>}))</code>",
        "We introduced each middleware separately for teaching purpose, and for ease of testing. Using the ‘parent’ helmet() middleware is easiest, and cleaner, for a real project."
      ],
      "tests": [
        {
          "text": "no tests - it's a descriptive challenge",
          "testString": "assert(true)"
        }
      ],
      "challengeType": 2,
      "name": "Configure Helmet Using the parent helmet Middleware",
      "dashedName": "configure-helmet-using-the-parent-helmet-middleware"
    },
    {
      "id": "58a25bcef9fc0f352b528e7c",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-bcrypt/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-bcrypt/'>GitHub</a>.",
        "BCrypt hashes are very secure. A hash is basically a fingerprint of the original data- always unique. This is accomplished by feeding the original data into a algorithm and having returned a fixed length result. To further complicate this process and make it more secure, you can also <em>salt</em> your hash. Salting your hash involves adding random data to the original data before the hashing process which makes it even harder to crack the hash.",
        "BCrypt hashes will always looks like <code>$2a$13$ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO.uUUtcbqloU0yvzavOm</code> which does have a structure. The first small bit of data <code>$2a</code> is defining what kind of hash algorithm was used. The next portion <code>$13</code> defines the <em>cost</em>. Cost is about how much power it takes to compute the hash. It is on a logarithmic scale of 2^cost and determines how many times the data is put through the hashing algorithm. For example, at a cost of 10 you are able to hash 10 passwords a second on an average computer, however at a cost of 15 it takes 3 seconds per hash... and to take it further, at a cost of 31 it would takes multiple days to complete a hash. A cost of 12 is considered very secure at this time. The last portion of your hash <code>$ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO.uUUtcbqloU0yvzavOm</code>, looks like 1 large string of numbers, periods, and letters but it is actually 2 separate pieces of information. The first 22 characters is the salt in plain text, and the rest is the hashed password!",
        "<hr>To begin using BCrypt, add it as a dependency in your project and require it as 'bcrypt' in your server.",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "BCyrpt is a dependency",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'bcrypt', 'Your project should list \"bcrypt\" as a dependency'); }, xhr => { throw new Error(xhr.statusText); })"
        },
        {
          "text": "BCrypt has been properly required",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js').then(data => {assert.match(data, /bcrypt.*=.*require.*('|\")bcrypt('|\")/gi, 'You should correctly require and instantiate socket.io as io.');}, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Understand BCrypt Hashes",
      "dashedName": "understand-bcrypt-hashes"
    },
    {
      "id": "58a25bcff9fc0f352b528e7d",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-bcrypt/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-bcrypt/'>GitHub</a>.",
        "As hashing is designed to be computationally intensive, it is recommended to do so asyncronously on your server as to avoid blocking incoming connections while you hash. All you have to do to hash a password asynchronous is call <code>bcrypt.hash(myPlaintextPassword, saltRounds, (err, hash) => { /*Store hash in your db*/ });</code>",
        "<hr>Add this hashing function to your server(we've already defined the variables used in the function for you to use) and log it to the console for you to see! At this point you would normally save the hash to your database.",
        "Now when you need to figure out if a new input is the same data as the hash you would just use the compare function <code>bcrypt.compare(myPlaintextPassword, hash, (err, res) => { /*res == true or false*/ });</code>. Add this into your existing hash function(since you need to wait for the hash to complete before calling the compare function) after you log the completed hash and log 'res' to the console within the compare. You should see in the console a hash then 'true' is printed! If you change 'myPlaintextPassword' in the compare function to 'someOtherPlaintextPassword' then it should say false.",
        "<pre>bcrypt.hash('passw0rd!', 13, (err, hash) => {\n  console.log(hash); //$2a$12$Y.PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS\n  bcrypt.compare('passw0rd!', hash, (err, res) => {\n      console.log(res); //true\n  });\n});</pre>",
        "Submit your page when you think you've got it right."
      ],
      "tests": [
        {
          "text": "Async hash generated and correctly compared",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /START_ASYNC[^]*bcrypt.hash.*myPlaintextPassword( |),( |)saltRounds( |),( |).*err( |),( |)hash[^]*END_ASYNC/gi, 'You should call bcrypt.hash on myPlaintextPassword and saltRounds and handle err and hash as a result in the callback'); assert.match(data, /START_ASYNC[^]*bcrypt.hash[^]*bcrypt.compare.*myPlaintextPassword( |),( |)hash( |),( |).*err( |),( |)res[^]*}[^]*}[^]*END_ASYNC/gi, 'Nested within the hash function should be the compare function comparing myPlaintextPassword to hash'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Hash and Compare Passwords Asynchronously",
      "dashedName": "hash-and-compare-passwords-asynchronously"
    },
    {
      "id": "58a25bcff9fc0f352b528e7e",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-bcrypt/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-bcrypt/'>GitHub</a>.",
        "Hashing synchronously is just as easy to do but can cause lag if using it server side with a high cost or with hashing done very often. Hashing with this method is as easy as calling <code>var hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);</code>",
        "<hr>Add this method of hashing to your code and then log the result to the console. Again, the variables used are already defined in the server so you wont need to adjust them. You may notice even though you are hashing the same password as in the async function, the result in the console is different- this is due to the salt being randomly generated each time as seen by the first 22 characters in the third string of the hash.",
        "Now to compare a password input with the new sync hash, you would use the compareSync method: <code>var result = bcrypt.compareSync(myPlaintextPassword, hash);</code> with the result being a boolean true or false. Add this function in and log to the console the result to see it working.",
        "Submit your page when you think you've got it right. If you ran into errors during these challenges you can take a look at the example completed code <a href='https://gist.github.com/JosephLivengood/9a2698fb63e42d9d8b4b84235c08b4c4'>here</a>."
      ],
      "tests": [
        {
          "text": "Sync hash generated and correctly compared",
          "testString":
            "getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /START_SYNC[^]*hash.*=.*bcrypt.hashSync.*myPlaintextPassword( |),( |)saltRounds[^]*END_SYNC/gi, 'You should call bcrypt.hashSync on myPlaintextPassword with saltRounds'); assert.match(data, /START_SYNC[^]*result.*=.*bcrypt.compareSync.*myPlaintextPassword( |),( |)hash[^]*END_SYNC/gi, 'You should call bcrypt.compareSync on myPlaintextPassword with the hash generated in the last line'); }, xhr => { throw new Error(xhr.statusText); })"
        }
      ],
      "challengeType": 2,
      "name": "Hash and Compare Passwords Synchronously",
      "dashedName": "hash-and-compare-passwords-synchronously"
    },
    {
      "id": "587d8249367417b2b2512c41",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://hard-twilight.glitch.me/' target='_blank'>https://hard-twilight.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-metricimpconverter/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-metricimpconverter/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "I will prevent the client from trying to guess(sniff) the MIME type.",
          "testString": ""
        },
        {
          "text": "I will prevent cross-site scripting (XSS) attacks.",
          "testString": ""
        },
        {
          "text":
            "I can GET /api/convert with a single parameter containing an accepted number and unit and have it converted. (Hint: Split the input by looking for the index of the first character which will mark the start of the unit)",
          "testString": ""
        },
        {
          "text":
            "I can convert 'gal' to 'L' and vice versa. (1 gal to 3.78541 L)",
          "testString": ""
        },
        {
          "text":
            "I can convert 'lbs' to 'kg' and vice versa. (1 lbs to 0.453592 kg)",
          "testString": ""
        },
        {
          "text":
            "I can convert 'mi' to 'km' and vice versa. (1 mi to 1.60934 km)",
          "testString": ""
        },
        {
          "text":
            "If my unit of measurement is invalid, returned will be 'invalid unit'.",
          "testString": ""
        },
        {
          "text":
            "If my number is invalid, returned with will 'invalid number'.",
          "testString": ""
        },
        {
          "text":
            "If both are invalid, return will be 'invalid number and unit'.",
          "testString": ""
        },
        {
          "text":
            "I can use fractions, decimals or both in my parameter(ie. 5, 1/2, 2.5/6), but if nothing is provided it will default to 1.",
          "testString": ""
        },
        {
          "text":
            "My return will consist of the initNum, initUnit, returnNum, returnUnit, and string spelling out units in format '{initNum} {initial_Units} converts to {returnNum} {return_Units}' with the result rounded to 5 decimals in the string.",
          "testString": ""
        },
        {
          "text": "All 16 unit tests are complete and passing.",
          "testString": ""
        },
        {
          "text": "All 5 functional tests are complete and passing.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "MetricImperial Converter",
      "dashedName": "metricimperial-converter"
    },
    {
      "id": "587d8249367417b2b2512c42",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://protective-garage.glitch.me/' target='_blank'>https://protective-garage.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-issuetracker/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-issuetracker/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text": "Prevent cross site scripting (XSS) attacks.",
          "testString": ""
        },
        {
          "text":
            "I can POST /api/issues/{projectname} with form data containing required issue_title, issue_text, created_by, and optional assigned_to and status_text.",
          "testString": ""
        },
        {
          "text":
            "The object saved (and returned) will include all of those fields (blank for optional no input) and also include created_on(date/time), updated_on(date/time), open(boolean, true for open, false for closed), and _id.",
          "testString": ""
        },
        {
          "text":
            "I can PUT /api/issues/{projectname} with a id and any fields in the object with a value to object said object. Returned will be 'successfully updated' or 'could not update '+id. This should always update updated_on. If no fields are sent return 'no updated field sent'.",
          "testString": ""
        },
        {
          "text":
            "I can DELETE /api/issues/{projectname} with a id to completely delete an issue. If no _id is sent return 'id error', success: 'deleted '+id, failed: 'could not delete '+id.",
          "testString": ""
        },
        {
          "text":
            "I can GET /api/issues/{projectname} for an array of all issues on that specific project with all the information for each issue as was returned when posted.",
          "testString": ""
        },
        {
          "text":
            "I can filter my get request by also passing along any field and value in the query(ie. /api/issues/{project}?open=false). I can pass along as many fields/values as I want.",
          "testString": ""
        },
        {
          "text": "All 11 functional tests are complete and passing.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Issue Tracker",
      "dashedName": "issue-tracker"
    },
    {
      "id": "587d824a367417b2b2512c43",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://spark-cathedral.glitch.me/' target='_blank'>https://spark-cathedral.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-library/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-library/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text": "Nothing from my website will be cached in my client.",
          "testString": ""
        },
        {
          "text":
            "The headers will say that the site is powered by 'PHP 4.2.0' even though it isn't (as a security measure).",
          "testString": ""
        },
        {
          "text":
            "I can post a title to /api/books to add a book and returned will be the object with the title and a unique _id.",
          "testString": ""
        },
        {
          "text":
            "I can get /api/books to retrieve an array of all books containing title, _id, and commentcount.",
          "testString": ""
        },
        {
          "text":
            "I can get /api/books/{id} to retrieve a single object of a book containing _title, _id, & an array of comments (empty array if no comments present).",
          "testString": ""
        },
        {
          "text":
            "I can post a comment to /api/books/{id} to add a comment to a book and returned will be the books object similar to get /api/books/{id} including the new comment.",
          "testString": ""
        },
        {
          "text":
            "I can delete /api/books/{_id} to delete a book from the collection. Returned will be 'delete successful' if successful.",
          "testString": ""
        },
        {
          "text":
            "If I try to request a book that doesn't exist I will be returned 'no book exists'.",
          "testString": ""
        },
        {
          "text":
            "I can send a delete request to /api/books to delete all books in the database. Returned will be 'complete delete successful' if successful.",
          "testString": ""
        },
        {
          "text": "All 6 functional tests required are complete and passing.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Personal Library",
      "dashedName": "personal-library"
    },
    {
      "id": "587d824a367417b2b2512c44",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://giant-chronometer.glitch.me/' target='_blank'>https://giant-chronometer.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-stockchecker/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-stockchecker/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "Set the content security policies to only allow loading of scripts and css from your server.",
          "testString": ""
        },
        {
          "text":
            "I can GET /api/stock-prices with form data containing a Nasdaq stock ticker and receive back an object stockData.",
          "testString": ""
        },
        {
          "text":
            "In stockData, I can see the stock(string, the ticker), price(decimal in string format), and likes(int).",
          "testString": ""
        },
        {
          "text":
            "I can also pass along field like as true(boolean) to have my like added to the stock(s). Only 1 like per ip should be accepted.",
          "testString": ""
        },
        {
          "text":
            "If I pass along 2 stocks, the return object will be an array with both stock's info. Instead of likes, it will display rel_likes(the difference between the likes on both stocks) on both.",
          "testString": ""
        },
        {
          "text":
            "A good way to receive current price is the following external API(replacing 'GOOG' with your stock): https://finance.google.com/finance/info?q=NASDAQ%3aGOOG",
          "testString": ""
        },
        {
          "text": "All 5 functional tests are complete and passing.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Stock Price Checker",
      "dashedName": "stock-price-checker"
    },
    {
      "id": "587d824a367417b2b2512c45",
      "description": [
        "Build a full stack JavaScript app that is functionally similar to this: <a href='https://horn-celery.glitch.me/' target='_blank'>https://horn-celery.glitch.me/</a>.",
        "Working on this project will involve you writing your code on Glitch on our starter project. After completing this project you can copy your public glitch url (to the homepage of your app) into this screen to test it! Optionally you may choose to write your project on another platform but it must be publicly visible for our testing.",
        "Start this project on Glitch using <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-messageboard/'>this link</a> or clone <a href='https://github.com/freeCodeCamp/boilerplate-project-messageboard/'>this repository</a> on GitHub! If you use Glitch, remember to save the link to your project somewhere safe!"
      ],
      "tests": [
        {
          "text":
            "Only allow your site to be loading in an iFrame on your own pages.",
          "testString": ""
        },
        { "text": "Do not allow DNS prefetching.", "testString": "" },
        {
          "text":
            "Only allow your site to send the referrer for your own pages.",
          "testString": ""
        },
        {
          "text":
            "I can POST a thread to a specific message board by passing form data text and deletepassword_ to /api/threads/{board}.(Recommend res.redirect to board page /b/{board}) Saved will be at least _id, text, createdon_(date&time), bumpedon_(date&time, starts same as created_on), reported(boolean), deletepassword_, & replies(array).",
          "testString": ""
        },
        {
          "text":
            "I can POST a reply to a thread on a specific board by passing form data text, deletepassword_, & threadid_ to /api/replies/{board} and it will also update the bumped_on date to the comments date.(Recommend res.redirect to thread page /b/{board}/{thread_id}) In the thread's replies array will be saved _id, text, createdon_, deletepassword_, & reported.",
          "testString": ""
        },
        {
          "text":
            "I can GET an array of the most recent 10 bumped threads on the board with only the most recent 3 replies each from /api/threads/{board}. The reported and deletepasswords_ fields will not be sent to the client.",
          "testString": ""
        },
        {
          "text":
            "I can GET an entire thread with all its replies from /api/replies/{board}?thread_id={thread_id}. Also hiding the same fields the client should be see.",
          "testString": ""
        },
        {
          "text":
            "I can delete a thread completely if I send a DELETE request to /api/threads/{board} and pass along the threadid_ & deletepassword_. (Text response will be 'incorrect password' or 'success')",
          "testString": ""
        },
        {
          "text":
            "I can delete a post(just changing the text to '[deleted]' instead of removing completely like a thread) if I send a DELETE request to /api/replies/{board} and pass along the threadid_, replyid_, & deletepassword_. (Text response will be 'incorrect password' or 'success')",
          "testString": ""
        },
        {
          "text":
            "I can report a thread and change its reported value to true by sending a PUT request to /api/threads/{board} and pass along the threadid_. (Text response will be 'success')",
          "testString": ""
        },
        {
          "text":
            "I can report a reply and change its reported value to true by sending a PUT request to /api/replies/{board} and pass along the threadid_ & replyid_. (Text response will be 'success')",
          "testString": ""
        },
        {
          "text": "Complete functional tests that wholly test routes and pass.",
          "testString": ""
        }
      ],
      "challengeType": 4,
      "isRequired": true,
      "name": "Anonymous Message Board",
      "dashedName": "anonymous-message-board"
    },
    {
      "id": "587d824a367417b2b2512c46",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Use assert.isNull() or assert.isNotNull() to make the tests pass."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=0').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isNull vs. isNotNull",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=0').then(data => {  assert.equal(data.assertions[0].method, 'isNull', 'Null is null'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isNull vs. isNotNull",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=0').then(data => {  assert.equal(data.assertions[1].method, 'isNotNull', '1 is not null'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Learn How JavaScript Assertions Work",
      "dashedName": "learn-how-javascript-assertions-work"
    },
    {
      "id": "587d824b367417b2b2512c47",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Use assert.isDefined() or assert.isUndefined() to make the tests pass"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=1').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isDefined vs. isUndefined",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=1').then(data => {  assert.equal(data.assertions[0].method, 'isDefined', 'Null is not undefined'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isDefined vs. isUndefined",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=1').then(data => {  assert.equal(data.assertions[1].method, 'isUndefined', 'Undefined is undefined'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isDefined vs. isUndefined",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=1').then(data => {  assert.equal(data.assertions[2].method, 'isDefined', 'A string is not undefined'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a Variable or Function is Defined",
      "dashedName": "test-if-a-variable-or-function-is-defined"
    },
    {
      "id": "587d824b367417b2b2512c48",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Use assert.isOk() or assert.isNotOk() to make the tests pass.",
        ".isOk(truthy) and .isNotOk(falsey) will pass."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=2').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isOk vs. isNotOk",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=2').then(data => {  assert.equal(data.assertions[0].method, 'isNotOk', 'Null is falsey'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isOk vs. isNotOk",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=2').then(data => {  assert.equal(data.assertions[1].method, 'isOk','A string is truthy'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isOk vs. isNotOk",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=2').then(data => {  assert.equal(data.assertions[2].method, 'isOk', 'true is truthy'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use AssertisOK and AssertisNotOK",
      "dashedName": "use-assertisok-and-assertisnotok"
    },
    {
      "id": "587d824b367417b2b2512c49",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Use assert.isTrue() or assert.isNotTrue() to make the tests pass.",
        ".isTrue(true) and .isNotTrue(everything else) will pass.",
        ".isFalse() and .isNotFalse() also exist."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=3').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isTrue vs. isNotTrue",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=3').then(data => {  assert.equal(data.assertions[0].method, 'isTrue', 'True is true'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isTrue vs. isNotTrue",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=3').then(data => {  assert.equal(data.assertions[1].method, 'isTrue', 'Double negation of a truthy value is true'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isTrue vs. isNotTrue",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=3').then(data => {  assert.equal(data.assertions[2].method, 'isNotTrue', 'A truthy object is not true - neither is a false one'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test for Truthiness",
      "dashedName": "test-for-truthiness"
    },
    {
      "id": "587d824b367417b2b2512c4a",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".equal(), .notEqual()",
        ".equal() compares objects using '=='"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=4').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - equal vs. notEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=4').then(data => {  assert.equal(data.assertions[0].method, 'equal', 'Numbers are coerced into strings with == '); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - equal vs. notEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=4').then(data => {  assert.equal(data.assertions[1].method, 'notEqual', ' == compares object references'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - equal vs. notEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=4').then(data => {  assert.equal(data.assertions[2].method, 'equal', '6 * \\'2\\' is 12 ! It should be equal to \\'12\\''); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - equal vs. notEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=4').then(data => {  assert.equal(data.assertions[3].method, 'notEqual', '6 + \\'2\\' is \\'62\\'...'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use the Double Equals to Assert Equality",
      "dashedName": "use-the-double-equals-to-assert-equality"
    },
    {
      "id": "587d824b367417b2b2512c4b",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".strictEqual(), .notStrictEqual()",
        ".strictEqual() compares objects using '==='"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=5').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - strictEqual vs. notStrictEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=5').then(data => {  assert.equal(data.assertions[0].method, 'notStrictEqual', 'with strictEqual the type must match'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - strictEqual vs. notStrictEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=5').then(data => {  assert.equal(data.assertions[1].method, 'strictEqual', '3*2 = 6...'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - strictEqual vs. notStrictEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=5').then(data => {  assert.equal(data.assertions[2].method, 'strictEqual', '6 * \\'2\\' is 12. Types match !'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - strictEqual vs. notStrictEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=5').then(data => {  assert.equal(data.assertions[3].method, 'notStrictEqual', 'Even if they have the same elements, the Arrays are notStrictEqual'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use the Triple Equals to Assert Strict Equality",
      "dashedName": "use-the-triple-equals-to-assert-strict-equality"
    },
    {
      "id": "587d824c367417b2b2512c4c",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".deepEqual(), .notDeepEqual()",
        ".deepEqual() asserts that two object are deep equal"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=6').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - deepEqual vs. notDeepEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=6').then(data => {  assert.equal(data.assertions[0].method, 'deepEqual', 'The order of the keys does not matter'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - deepEqual vs. notDeepEqual",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=6').then(data => {  assert.equal(data.assertions[1].method, 'notDeepEqual', 'The position of elements within an array does matter'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Assert Deep Equality with deepEqual and notDeepEqual",
      "dashedName": "assert-deep-equality-with-deepequal-and-notdeepequal"
    },
    {
      "id": "587d824c367417b2b2512c4d",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".isAbove() => a > b , .isAtMost() => a <= b"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=7').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isAbove vs. isAtMost",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=7').then(data => {  assert.equal(data.assertions[0].method, 'isAtMost', '5 is at most (<=) 5'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isAbove vs. isAtMost",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=7').then(data => {  assert.equal(data.assertions[1].method, 'isAbove', '1 is greater than 0'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isAbove vs. isAtMost",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=7').then(data => {  assert.equal(data.assertions[2].method, 'isAbove', 'Math.PI = 3.14159265 is greater than 3'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isAbove vs. isAtMost",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=7').then(data => {  assert.equal(data.assertions[3].method, 'isAtMost', '1 - Math.random() is > 0 and <= 1. It is atMost 1 !'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Compare the Properties of Two Elements",
      "dashedName": "compare-the-properties-of-two-elements"
    },
    {
      "id": "587d824c367417b2b2512c4e",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".isBelow() => a < b , .isAtLeast =>  a >= b"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=8').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isBelow vs. isAtLeast",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=8').then(data => {  assert.equal(data.assertions[0].method, 'isAtLeast', '5 is at least (>=) 5'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isBelow vs. isAtLeast",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=8').then(data => {  assert.equal(data.assertions[1].method, 'isAtLeast', '2 * Math.random() is at least 0'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isBelow vs. isAtLeast",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=8').then(data => {  assert.equal(data.assertions[2].method, 'isBelow', '1 is smaller than 2'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isBelow vs. isAtLeast",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=8').then(data => {  assert.equal(data.assertions[3].method, 'isBelow', '2/3 (0.6666) is smaller than 1'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if One Value is Below or At Least as Large as Another",
      "dashedName": "test-if-one-value-is-below-or-at-least-as-large-as-another"
    },
    {
      "id": "587d824c367417b2b2512c4f",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        ".approximately",
        ".approximately(actual, expected, range, [message])",
        "actual = expected +/- range",
        "Choose the minimum range (3rd parameter) to make the test always pass",
        "it should be less than 1"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=9').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "Use approximately(actual, expected, range) - Chose the correct range",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=9').then(data => {  assert.equal(data.assertions[0].method, 'approximately');  assert.equal(data.assertions[0].args[2], 0.5, 'weirdNumbers(0.5) is in the range (0.5, 1.5]. It\\'s within 1 +/- 0.5'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "Use approximately(actual, expected, range) - Chose the correct range",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=9').then(data => {  assert.equal(data.assertions[1].method, 'approximately');  assert.equal(data.assertions[1].args[2], 0.8, 'weirdNumbers(0.2) is in the range (0.2, 1.2]. It\\'s within 1 +/- 0.8'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a Value Falls within a Specific Range",
      "dashedName": "test-if-a-value-falls-within-a-specific-range"
    },
    {
      "id": "587d824d367417b2b2512c50",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=10').then(data => {assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isArray vs. isNotArray",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=10').then(data => {  assert.equal(data.assertions[0].method, 'isArray', 'String.prototype.split() returns an Array'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isArray vs. isNotArray",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=10').then(data => {  assert.equal(data.assertions[1].method, 'isNotArray', 'Array.prototype.indexOf() returns a number'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a Value is an Array",
      "dashedName": "test-if-a-value-is-an-array"
    },
    {
      "id": "587d824d367417b2b2512c51",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=11').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - include vs. notInclude",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=11').then(data => {  assert.equal(data.assertions[0].method, 'notInclude', 'It\\'s summer in july...'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - include vs. notInclude",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=11').then(data => {  assert.equal(data.assertions[1].method, 'include', 'JavaScript is a backend language !!'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if an Array Contains an Item",
      "dashedName": "test-if-an-array-contains-an-item"
    },
    {
      "id": "587d824d367417b2b2512c52",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#isString asserts that the actual value is a string."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=12').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isString vs. isNotString",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=12').then(data => {  assert.equal(data.assertions[0].method, 'isNotString', 'A float number is not a string'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isString vs. isNotString",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=12').then(data => {  assert.equal(data.assertions[1].method, 'isString', 'environment vars are strings (or undefined)'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - isString vs. isNotString",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=12').then(data => {  assert.equal(data.assertions[2].method, 'isString', 'A JSON is a string'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a Value is a String",
      "dashedName": "test-if-a-value-is-a-string"
    },
    {
      "id": "587d824d367417b2b2512c53",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#include (on #notInclude ) works for strings too !!",
        "It asserts that the actual string contains the expected substring"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=13').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - include vs. notInclude",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=13').then(data => {  assert.equal(data.assertions[0].method, 'include', '\\'Arrow\\' contains \\'row\\'...'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - include vs. notInclude",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=13').then(data => {  assert.equal(data.assertions[1].method, 'notInclude', '... a \\'dart\\' doesn\\'t contain a \\'queue\\''); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a String Contains a Substring",
      "dashedName": "test-if-a-string-contains-a-substring"
    },
    {
      "id": "587d824d367417b2b2512c54",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#match Asserts that the actual value",
        "matches the second argument regular expression."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=14').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - match vs. notMatch",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=14').then(data => {  assert.equal(data.assertions[0].method, 'match', '\\'# name: John Doe, age: 35\\' matches the regex'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - match vs. notMatch",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=14').then(data => {  assert.equal(data.assertions[1].method, 'notMatch', '\\'# name: Paul Smith III, age: twenty-four\\' does not match the regex (the age must be numeric)'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Use Regular Expressions to Test a String",
      "dashedName": "use-regular-expressions-to-test-a-string"
    },
    {
      "id": "587d824e367417b2b2512c55",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#property asserts that the actual object has a given property.",
        "Use #property or #notProperty where appropriate"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=15').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - property vs. notProperty",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=15').then(data => { assert.equal(data.assertions[0].method, 'notProperty', 'A car has not wings'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - property vs. notProperty",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=15').then(data => { assert.equal(data.assertions[1].method, 'property', 'planes have engines'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - property vs. notProperty",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=15').then(data => { assert.equal(data.assertions[2].method, 'property', 'Cars have wheels'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if an Object has a Property",
      "dashedName": "test-if-an-object-has-a-property"
    },
    {
      "id": "587d824e367417b2b2512c56",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#typeOf asserts that value’s type is the given string, as determined by Object.prototype.toString.",
        "Use #typeOf or #notTypeOf where appropriate"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - typeOf vs. notTypeOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.assertions[0].method, 'typeOf', 'myCar is typeOf Object'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - typeOf vs. notTypeOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.assertions[1].method, 'typeOf', 'Car.model is a String'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - typeOf vs. notTypeOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.assertions[2].method, 'notTypeOf', 'Plane.wings is a Number (not a String)'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - typeOf vs. notTypeOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.assertions[3].method, 'typeOf', 'Plane.engines is an Array'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - typeOf vs. notTypeOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=16').then(data => { assert.equal(data.assertions[4].method, 'typeOf', 'Car.wheels is a Number'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if a Value is of a Specific Data Structure Type",
      "dashedName": "test-if-a-value-is-of-a-specific-data-structure-type"
    },
    {
      "id": "587d824e367417b2b2512c57",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "#instanceOf asserts that an object is an instance of a constructor.",
        "Use #instanceOf or #notInstanceOf where appropriate"
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=17').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - instanceOf vs. notInstanceOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=17').then(data => { assert.equal(data.assertions[0].method, 'notInstanceOf', 'myCar is not an instance of Plane'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - instanceOf vs. notInstanceOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=17').then(data => { assert.equal(data.assertions[1].method, 'instanceOf', 'airlinePlane is an instance of Plane'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - instanceOf vs. notInstanceOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=17').then(data => { assert.equal(data.assertions[2].method, 'instanceOf', 'everything is an Object in JavaScript...'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "Choose the right assertion - instanceOf vs. notInstanceOf",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=unit&n=17').then(data => { assert.equal(data.assertions[3].method, 'notInstanceOf', 'myCar.wheels is not an instance of String'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Test if an Object is an Instance of a Constructor",
      "dashedName": "test-if-an-object-is-an-instance-of-a-constructor"
    },
    {
      "id": "587d824e367417b2b2512c58",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Replace assert.fail(). Test the status and the text.response. Make the test pass.",
        "Don't send a name in the query, the endpoint with responds with 'hello Guest'."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.status' == 200",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.text' == 'hello Guest'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.text'); assert.equal(data.assertions[1].args[1], '\\'hello Guest\\'');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Run Functional Tests on API Endpoints using ChaiHTTP",
      "dashedName": "run-functional-tests-on-api-endpoints-using-chaihttp"
    },
    {
      "id": "587d824f367417b2b2512c59",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "Replace assert.fail(). Test the status and the text.response. Make the test pass.",
        "Send you name in the query appending ?name=<your_name>, the endpoint with responds with 'hello <your_name>'."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=1').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.status' == 200",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=1').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.text' == 'hello Guest'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=1').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.text'); assert.match(data.assertions[1].args[1], /hello [\\w\\d_-]/);}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Run Functional Tests on API Endpoints using ChaiHTTP II",
      "dashedName": "run-functional-tests-on-api-endpoints-using-chaihttp-ii"
    },
    {
      "id": "587d824f367417b2b2512c5a",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "In the next example we'll see how to send data in a request payload (body).",
        "We are going to test a PUT request. The '/travellers' endpoint accepts",
        "a JSON object taking the structure :",
        " {surname: [last name of a traveller of the past]} ,",
        "The route responds with :",
        " {name: [first name], surname:[last name], dates: [birth - death years]}",
        "see the server code for more details.",
        "Send {surname: 'Colombo'}. Replace assert.fail() and make the test pass.",
        "Check for 1) status, 2) type, 3) body.name, 4) body.surname",
        "Follow the assertion order above, We rely on it."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=2').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.status' to be 200",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=2').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.type' to be 'application/json'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=2').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.type'); assert.equal(data.assertions[1].args[1], '\\'application/json\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.body.name' to be 'Cristoforo'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=2').then(data => { assert.equal(data.assertions[2].method, 'equal'); assert.equal(data.assertions[2].args[0], 'res.body.name'); assert.equal(data.assertions[2].args[1], '\\'Cristoforo\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.body.surname' to be 'Colombo'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=2').then(data => { assert.equal(data.assertions[3].method, 'equal'); assert.equal(data.assertions[3].args[0], 'res.body.surname'); assert.equal(data.assertions[3].args[1], '\\'Colombo\\'');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Run Functional Tests on an API Response using ChaiHTTP III  PUT method",
      "dashedName":
        "run-functional-tests-on-an-api-response-using-chaihttp-iii--put-method"
    },
    {
      "id": "587d824f367417b2b2512c5b",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "This exercise is similar to the preceding. Look at it for the details.",
        "Send {surname: 'da Verrazzano'}. Replace assert.fail() and make the test pass.",
        "Check for 1) status, 2) type, 3) body.name, 4) body.surname",
        "Follow the assertion order above, We rely on it."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.status' to be 200",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.type' to be 'application/json'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.type'); assert.equal(data.assertions[1].args[1], '\\'application/json\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "You should test for 'res.body.name' to be 'Giovanni'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[2].method, 'equal'); assert.equal(data.assertions[2].args[0], 'res.body.name'); assert.equal(data.assertions[2].args[1], '\\'Giovanni\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "You should test for 'res.body.surname' to be 'da Verrazzano'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[3].method, 'equal'); assert.equal(data.assertions[3].args[0], 'res.body.surname'); assert.equal(data.assertions[3].args[1], '\\'da Verrazzano\\'');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name":
        "Run Functional Tests on an API Response using ChaiHTTP IV  PUT method",
      "dashedName":
        "run-functional-tests-on-an-api-response-using-chaihttp-iv--put-method"
    },
    {
      "id": "587d824f367417b2b2512c5c",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "In the next challenges we are going to simulate the human interaction with a page using a device called 'Headless Browser'.",
        "A headless browser is a web browser without a graphical user interface. These kind of tools are particularly useful for testing web pages as they are able to render and understand HTML, CSS, and JavaScript the same way a browser would.",
        "For these challenges we are using Zombie.JS. It's a lightweight browser which is totally based on JS, without relying on additional binaries to be installed. This feature makes it usable in an environment such as Glitch. There are many other (more powerful) options.<br>",
        "Look at the examples in the code for the exercise directions Follow the assertions order, We rely on it."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "assert that the headless browser request succeeded",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[0].method, 'browser.success'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the text inside the element 'span#name' is 'Cristoforo'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[1].method, 'browser.text'); assert.equal(data.assertions[1].args[0], '\\'span#name\\''); assert.equal(data.assertions[1].args[1], '\\'Cristoforo\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the text inside the element 'span#surname' is 'Colombo'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[2].method, 'browser.text'); assert.equal(data.assertions[2].args[0], '\\'span#surname\\''); assert.equal(data.assertions[2].args[1], '\\'Colombo\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the element 'span#dates' exist and its count is 1",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[3].method, 'browser.element'); assert.equal(data.assertions[3].args[0], '\\'span#dates\\''); assert.equal(data.assertions[3].args[1], 1);}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Run Functional Tests using a Headless Browser",
      "dashedName": "run-functional-tests-using-a-headless-browser"
    },
    {
      "id": "587d8250367417b2b2512c5d",
      "description": [
        "As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.",
        "This exercise is similar to the preceding.",
        "Look at  the code for directions. Follow the assertions order, We rely on it."
      ],
      "tests": [
        {
          "text": "All tests should pass",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": " assert that the headless browser request succeeded",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(data => { assert.equal(data.assertions[0].method, 'browser.success'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the text inside the element 'span#name' is 'Amerigo'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(data => { assert.equal(data.assertions[1].method, 'browser.text'); assert.equal(data.assertions[1].args[0], '\\'span#name\\''); assert.equal(data.assertions[1].args[1], '\\'Amerigo\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the text inside the element 'span#surname' is 'Vespucci'",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(data => { assert.equal(data.assertions[2].method, 'browser.text'); assert.equal(data.assertions[2].args[0], '\\'span#surname\\''); assert.equal(data.assertions[2].args[1], '\\'Vespucci\\'');}, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text":
            "assert that the element 'span#dates' exist and its count is 1",
          "testString":
            "getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(data => { assert.equal(data.assertions[3].method, 'browser.element'); assert.equal(data.assertions[3].args[0], '\\'span#dates\\''); assert.equal(data.assertions[3].args[1], 1);}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "challengeType": 2,
      "name": "Run Functional Tests using a Headless Browser II",
      "dashedName": "run-functional-tests-using-a-headless-browser-ii"
    },
    {
      "id": "a3f503de51cf954ede28891d",
      "description": [
        "Create a function that takes two or more arrays and returns an array of the <dfn>symmetric difference</dfn> (<code>&xutri;</code> or <code>&oplus;</code>) of the provided arrays.",
        "Given two sets (for example set <code>A = {1, 2, 3}</code> and set <code>B = {2, 3, 4}</code>), the mathematical term \"symmetric difference\" of two sets is the set of elements which are in either of the two sets, but not in both (<code>A &xutri; B = C = {1, 4}</code>). For every additional symmetric difference you take (say on a set <code>D = {2, 3}</code>), you should get the set with elements which are in either of the two the sets but not both (<code>C &xutri; D = {1, 4} &xutri; {2, 3} = {1, 2, 3, 4}</code>). The resulting array must contain only unique values (<em>no duplicates</em>).",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>sym([1, 2, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.",
          "testString":
            "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5], '<code>sym([1, 2, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.');"
        },
        {
          "text":
            "<code>sym([1, 2, 3], [5, 2, 1, 4])</code> should contain only three elements.",
          "testString":
            "assert.equal(sym([1, 2, 3], [5, 2, 1, 4]).length, 3, '<code>sym([1, 2, 3], [5, 2, 1, 4])</code> should contain only three elements.');"
        },
        {
          "text":
            "<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.",
          "testString":
            "assert.sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5], '<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.');"
        },
        {
          "text":
            "<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should contain only three elements.",
          "testString":
            "assert.equal(sym([1, 2, 3, 3], [5, 2, 1, 4]).length, 3, '<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should contain only three elements.');"
        },
        {
          "text":
            "<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should return <code>[3, 4, 5]</code>.",
          "testString":
            "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4, 5]), [3, 4, 5], '<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should return <code>[3, 4, 5]</code>.');"
        },
        {
          "text":
            "<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should contain only three elements.",
          "testString":
            "assert.equal(sym([1, 2, 3], [5, 2, 1, 4, 5]).length, 3, '<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should contain only three elements.');"
        },
        {
          "text":
            "<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should return <code>[1, 4, 5]</code>",
          "testString":
            "assert.sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5], '<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should return <code>[1, 4, 5]</code>');"
        },
        {
          "text":
            "<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should contain only three elements.",
          "testString":
            "assert.equal(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]).length, 3, '<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should contain only three elements.');"
        },
        {
          "text":
            "<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should return <code>[1, 4, 5]</code>.",
          "testString":
            "assert.sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5], '<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should return <code>[1, 4, 5]</code>.');"
        },
        {
          "text":
            "<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should contain only three elements.",
          "testString":
            "assert.equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]).length, 3, '<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should contain only three elements.');"
        },
        {
          "text":
            "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should return <code>[2, 3, 4, 6, 7]</code>.",
          "testString":
            "assert.sameMembers(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]), [2, 3, 4, 6, 7], '<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should return <code>[2, 3, 4, 6, 7]</code>.');"
        },
        {
          "text":
            "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should contain only five elements.",
          "testString":
            "assert.equal(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]).length, 5, '<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should contain only five elements.');"
        },
        {
          "text":
            "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should return <code>[1, 2, 4, 5, 6, 7, 8, 9]</code>.",
          "testString":
            "assert.sameMembers(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]), [1, 2, 4, 5, 6, 7, 8, 9], '<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should return <code>[1, 2, 4, 5, 6, 7, 8, 9]</code>.');"
        },
        {
          "text":
            "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should contain only eight elements.",
          "testString":
            "assert.equal(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]).length, 8, '<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should contain only eight elements.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sym(args) {\n  return args;\n}\n\nsym([1, 2, 3], [5, 2, 1, 4]);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Find the Symmetric Difference",
      "dashedName": "find-the-symmetric-difference"
    },
    {
      "id": "a56138aff60341a09ed6c480",
      "description": [
        "Compare and update the inventory stored in a 2D array against a second 2D array of a fresh delivery. Update the current existing inventory item quantities (in <code>arr1</code>). If an item cannot be found, add the new item and quantity into the inventory array. The returned inventory array should be in alphabetical order by item.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "The function <code>updateInventory</code> should return an array.",
          "testString":
            "assert.isArray(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]), 'The function <code>updateInventory</code> should return an array.');"
        },
        {
          "text":
            "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return an array with a length of 6.",
          "testString":
            "assert.equal(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]).length, 6, '<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return an array with a length of 6.');"
        },
        {
          "text":
            "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]]</code>.",
          "testString":
            "assert.deepEqual(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]), [[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]], '<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]]</code>.');"
        },
        {
          "text":
            "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [])</code> should return <code>[[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]]</code>.",
          "testString":
            "assert.deepEqual(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], []), [[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], '<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [])</code> should return <code>[[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]]</code>.');"
        },
        {
          "text":
            "<code>updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]]</code>.",
          "testString":
            "assert.deepEqual(updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]), [[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]], '<code>updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]]</code>.');"
        },
        {
          "text":
            "<code>updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]])</code> should return <code>[[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]]</code>.",
          "testString":
            "assert.deepEqual(updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]]), [[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]], '<code>updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]])</code> should return <code>[[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]]</code>.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function updateInventory(arr1, arr2) {\n    // All inventory must be accounted for or you're fired!\n    return arr1;\n}\n\n// Example inventory lists\nvar curInv = [\n    [21, \"Bowling Ball\"],\n    [2, \"Dirty Sock\"],\n    [1, \"Hair Pin\"],\n    [5, \"Microphone\"]\n];\n\nvar newInv = [\n    [2, \"Hair Pin\"],\n    [3, \"Half-Eaten Apple\"],\n    [67, \"Bowling Ball\"],\n    [7, \"Toothpaste\"]\n];\n\nupdateInventory(curInv, newInv);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Inventory Update",
      "dashedName": "inventory-update"
    },
    {
      "id": "a7bf700cd123b9a54eef01d5",
      "description": [
        "Return the number of total permutations of the provided string that don't have repeated consecutive letters. Assume that all characters in the provided string are each unique.",
        "For example, <code>aab</code> should return 2 because it has 6 total permutations (<code>aab</code>, <code>aab</code>, <code>aba</code>, <code>aba</code>, <code>baa</code>, <code>baa</code>), but only 2 of them (<code>aba</code> and <code>aba</code>) don't have the same letter (in this case <code>a</code>) repeating.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text": "<code>permAlone(\"aab\")</code> should return a number.",
          "testString":
            "assert.isNumber(permAlone('aab'), '<code>permAlone(\"aab\")</code> should return a number.');"
        },
        {
          "text": "<code>permAlone(\"aab\")</code> should return 2.",
          "testString":
            "assert.strictEqual(permAlone('aab'), 2, '<code>permAlone(\"aab\")</code> should return 2.');"
        },
        {
          "text": "<code>permAlone(\"aaa\")</code> should return 0.",
          "testString":
            "assert.strictEqual(permAlone('aaa'), 0, '<code>permAlone(\"aaa\")</code> should return 0.');"
        },
        {
          "text": "<code>permAlone(\"aabb\")</code> should return 8.",
          "testString":
            "assert.strictEqual(permAlone('aabb'), 8, '<code>permAlone(\"aabb\")</code> should return 8.');"
        },
        {
          "text": "<code>permAlone(\"abcdefa\")</code> should return 3600.",
          "testString":
            "assert.strictEqual(permAlone('abcdefa'), 3600, '<code>permAlone(\"abcdefa\")</code> should return 3600.');"
        },
        {
          "text": "<code>permAlone(\"abfdefa\")</code> should return 2640.",
          "testString":
            "assert.strictEqual(permAlone('abfdefa'), 2640, '<code>permAlone(\"abfdefa\")</code> should return 2640.');"
        },
        {
          "text": "<code>permAlone(\"zzzzzzzz\")</code> should return 0.",
          "testString":
            "assert.strictEqual(permAlone('zzzzzzzz'), 0, '<code>permAlone(\"zzzzzzzz\")</code> should return 0.');"
        },
        {
          "text": "<code>permAlone(\"a\")</code> should return 1.",
          "testString":
            "assert.strictEqual(permAlone('a'), 1, '<code>permAlone(\"a\")</code> should return 1.');"
        },
        {
          "text": "<code>permAlone(\"aaab\")</code> should return 0.",
          "testString":
            "assert.strictEqual(permAlone('aaab'), 0, '<code>permAlone(\"aaab\")</code> should return 0.');"
        },
        {
          "text": "<code>permAlone(\"aaabb\")</code> should return 12.",
          "testString":
            "assert.strictEqual(permAlone('aaabb'), 12, '<code>permAlone(\"aaabb\")</code> should return 12.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function permAlone(str) {\n  return str;\n}\n\npermAlone('aab');",
          "head": "",
          "tail": ""
        }
      },
      "name": "No Repeats Please",
      "dashedName": "no-repeats-please"
    },
    {
      "id": "a3f503de51cfab748ff001aa",
      "description": [
        "Given an array <code>arr</code>, find element pairs whose sum equal the second argument <code>arg</code> and return the sum of their indices.",
        "You may use multiple pairs that have the same numeric elements but different indices. Each pair should use the lowest possible available indices. Once an element has been used it cannot be reused to pair with another element. For instance, <code>pairwise([1, 1, 2], 3)</code> creates a pair <code>[2, 1]</code> using the 1 at indice 0 rather than the 1 at indice 1, because 0+2 < 1+2.",
        "For example <code>pairwise([7, 9, 11, 13, 15], 20)</code> returns <code>6</code>. The pairs that sum to 20 are <code>[7, 13]</code> and <code>[9, 11]</code>. We can then write out the array with their indices and values.",
        "<table class=\"table\"><tr><th><strong>Index</strong></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr><tr><td>Value</td><td>7</td><td>9</td><td>11</td><td>13</td><td>15</td></tr></table>",
        "Below we'll take their corresponding indices and add them.",
        "7 + 13 = 20 &#8594; Indices 0 + 3 = 3<br>9 + 11 = 20 &#8594; Indices 1 + 2 = 3<br>3 + 3 = 6 &#8594 Return <code>6</code>",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "tests": [
        {
          "text":
            "<code>pairwise([1, 4, 2, 3, 0, 5], 7)</code> should return 11.",
          "testString":
            "assert.deepEqual(pairwise([1, 4, 2, 3, 0, 5], 7), 11, '<code>pairwise([1, 4, 2, 3, 0, 5], 7)</code> should return 11.');"
        },
        {
          "text": "<code>pairwise([1, 3, 2, 4], 4)</code> should return 1.",
          "testString":
            "assert.deepEqual(pairwise([1, 3, 2, 4], 4), 1, '<code>pairwise([1, 3, 2, 4], 4)</code> should return 1.');"
        },
        {
          "text": "<code>pairwise([1, 1, 1], 2)</code> should return 1.",
          "testString":
            "assert.deepEqual(pairwise([1, 1, 1], 2), 1, '<code>pairwise([1, 1, 1], 2)</code> should return 1.');"
        },
        {
          "text":
            "<code>pairwise([0, 0, 0, 0, 1, 1], 1)</code> should return 10.",
          "testString":
            "assert.deepEqual(pairwise([0, 0, 0, 0, 1, 1], 1), 10, '<code>pairwise([0, 0, 0, 0, 1, 1], 1)</code> should return 10.');"
        },
        {
          "text": "<code>pairwise([], 100)</code> should return 0.",
          "testString":
            "assert.deepEqual(pairwise([], 100), 0, '<code>pairwise([], 100)</code> should return 0.');"
        }
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pairwise(arr, arg) {\n  return arg;\n}\n\npairwise([1,4,2,3,0,5], 7);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Pairwise",
      "dashedName": "pairwise"
    },
    {
      "id": "8d5123c8c441eddfaeb5bdef",
      "description": [
        "This is the first of several challenges on sorting algorithms. Given an array of unsorted items, we want to be able to return a sorted array. We will see several different methods to do this and learn some tradeoffs between these different approaches. While most modern languages have built-in sorting methods for operations like this, it is still important to understand some of the common basic approaches and learn how they can be implemented.",
        "Here we will see bubble sort. The bubble sort method starts at the beginning of an unsorted array and 'bubbles up' unsorted values towards the end, iterating through the array until it is completely sorted. It does this by comparing adjacent items and swapping them if they are out of order. The method continues looping through the array until no swaps occur at which point the array is sorted.",
        "This method requires multiple iterations through the array and for average and worst cases has quadratic time complexity. While simple, it is usually impractical in most situations.",
        "<strong>Instructions:</strong> Write a function <code>bubbleSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest.",
        "<strong>Note:</strong><br>We are calling this function from behind the scenes; the test array we are using is commented out in the editor. Try logging <code>array</code> to see your sorting algorithm in action!"
      ],
      "tests": [
        {
          "text": "<code>bubbleSort</code> is a function.",
          "testString":
            "assert(typeof bubbleSort == 'function', '<code>bubbleSort</code> is a function.');"
        },
        {
          "text":
            "<code>bubbleSort</code> returns a sorted array (least to greatest).",
          "testString":
            "assert(isSorted(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>bubbleSort</code> returns a sorted array (least to greatest).');"
        },
        {
          "text":
            "<code>bubbleSort</code> returns an array that is unchanged except for order.",
          "testString":
            "assert.sameMembers(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>bubbleSort</code> returns an array that is unchanged except for order.');"
        },
        {
          "text":
            "<code>bubbleSort</code> should not use the built-in <code>.sort()</code> method.",
          "testString":
            "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>bubbleSort</code> should not use the built-in <code>.sort()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function bubbleSort(array) {\n  // change code below this line\n\n  // change code above this line\n  return array;\n}\n\n// test array:\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",
          "head": "",
          "tail":
            "function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"
        }
      },
      "name": "Implement Bubble Sort",
      "dashedName": "implement-bubble-sort"
    },
    {
      "id": "587d8259367417b2b2512c85",
      "description": [
        "Here we will implement selection sort. Selection sort works by selecting the minimum value in a list and swapping it with the first value in the list. It then starts at the second position, selects the smallest value in the remaining list, and swaps it with the second element. It continues iterating through the list and swapping elements until it reaches the end of the list. Now the list is sorted. Selection sort has quadratic time complexity in all cases.",
        "<strong>Instructions</strong>: Write a function <code>selectionSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest.",
        "<strong>Note:</strong><br>We are calling this function from behind the scenes; the test array we are using is commented out in the editor. Try logging <code>array</code> to see your sorting algorithm in action!"
      ],
      "tests": [
        {
          "text": "<code>selectionSort</code> is a function.",
          "testString":
            "assert(typeof selectionSort == 'function', '<code>selectionSort</code> is a function.');"
        },
        {
          "text":
            "<code>selectionSort</code> returns a sorted array (least to greatest).",
          "testString":
            "assert(isSorted(selectionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>selectionSort</code> returns a sorted array (least to greatest).');"
        },
        {
          "text":
            "<code>selectionSort</code> returns an array that is unchanged except for order.",
          "testString":
            "assert.sameMembers(selectionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>selectionSort</code> returns an array that is unchanged except for order.');"
        },
        {
          "text":
            "<code>selectionSort</code> should not use the built-in <code>.sort()</code> method.",
          "testString":
            "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>selectionSort</code> should not use the built-in <code>.sort()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function selectionSort(array) {\n  // change code below this line\n\n  // change code above this line\n  return array;\n}\n\n// test array:\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",
          "head": "",
          "tail":
            "function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"
        }
      },
      "name": "Implement Selection Sort",
      "dashedName": "implement-selection-sort"
    },
    {
      "id": "587d8259367417b2b2512c86",
      "description": [
        "The next sorting method we'll look at is insertion sort. This method works by building up a sorted array at the beginning of the list. It begins the sorted array with the first element. Then it inspects the next element and swaps it backwards into the sorted array until it is in sorted position. It continues iterating through the list and swapping new items backwards into the sorted portion until it reaches the end. This algorithm has quadratic time complexity in the average and worst cases.",
        "<strong>Instructions:</strong> Write a function <code>insertionSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest.",
        "<strong>Note:</strong><br>We are calling this function from behind the scenes; the test array we are using is commented out in the editor. Try logging <code>array</code> to see your sorting algorithm in action!"
      ],
      "tests": [
        {
          "text": "<code>insertionSort</code> is a function.",
          "testString":
            "assert(typeof insertionSort == 'function', '<code>insertionSort</code> is a function.');"
        },
        {
          "text":
            "<code>insertionSort</code> returns a sorted array (least to greatest).",
          "testString":
            "assert(isSorted(insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>insertionSort</code> returns a sorted array (least to greatest).');"
        },
        {
          "text":
            "<code>insertionSort</code> returns an array that is unchanged except for order.",
          "testString":
            "assert.sameMembers(insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>insertionSort</code> returns an array that is unchanged except for order.');"
        },
        {
          "text":
            "<code>insertionSort</code> should not use the built-in <code>.sort()</code> method.",
          "testString":
            "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>insertionSort</code> should not use the built-in <code>.sort()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function insertionSort(array) {\n  // change code below this line\n\n  // change code above this line\n  return array;\n}\n\n// test array:\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",
          "head": "",
          "tail":
            "function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"
        }
      },
      "name": "Implement Insertion Sort",
      "dashedName": "implement-insertion-sort"
    },
    {
      "id": "587d825a367417b2b2512c89",
      "description": [
        "Here we will move on to an intermediate sorting algorithm: quick sort. Quick sort is an efficient, recursive divide-and-conquer approach to sorting an array. In this method, a pivot value is chosen in the original array. The array is then partitioned into two subarrays of values less than and greater than the pivot value. We then combine the result of recursively calling the quick sort algorithm on both sub-arrays. This continues until the base case of an empty or single-item array is reached, which we return. The unwinding of the recursive calls return us the sorted array.",
        "Quick sort is a very efficient sorting method, providing <i>O(nlog(n))</i> performance on average. It is also relatively easy to implement. These attributes make it a popular and useful sorting method.",
        "<strong>Instructions:</strong> Write a function <code>quickSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest. While the choice of the pivot value is important, any pivot will do for our purposes here. For simplicity, the first or last element could be used.",
        "<strong>Note:</strong><br>We are calling this function from behind the scenes; the test array we are using is commented out in the editor. Try logging <code>array</code> to see your sorting algorithm in action!"
      ],
      "tests": [
        {
          "text": "<code>quickSort</code> is a function.",
          "testString":
            "assert(typeof quickSort == 'function', '<code>quickSort</code> is a function.');"
        },
        {
          "text":
            "<code>quickSort</code> returns a sorted array (least to greatest).",
          "testString":
            "assert(isSorted(quickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>quickSort</code> returns a sorted array (least to greatest).');"
        },
        {
          "text":
            "<code>quickSort</code> returns an array that is unchanged except for order.",
          "testString":
            "assert.sameMembers(quickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>quickSort</code> returns an array that is unchanged except for order.');"
        },
        {
          "text":
            "<code>quickSort</code> should not use the built-in <code>.sort()</code> method.",
          "testString":
            "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>quickSort</code> should not use the built-in <code>.sort()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function quickSort(array) {\n  // change code below this line\n\n  // change code above this line\n  return array;\n}\n\n// test array:\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",
          "head": "",
          "tail":
            "function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"
        }
      },
      "name": "Implement Quick Sort",
      "dashedName": "implement-quick-sort"
    },
    {
      "id": "587d825c367417b2b2512c8f",
      "description": [
        "Another intermediate sorting algorithm that is very common is merge sort. Like quick sort, merge sort also uses a divide-and-conquer, recursive methodology to sort an array. It takes advantage of the fact that it is relatively easy to sort two arrays as long as each is sorted in the first place. But we'll start with only one array as input, so how do we get to two sorted arrays from that? Well, we can recursively divide the original input in two until we reach the base case of an array with one item. A single-item array is naturally sorted, so then we can start combining. This combination will unwind the recursive calls that split the original array, eventually producing a final sorted array of all the elements. The steps of merge sort, then, are:",
        "<strong>1)</strong> Recursively split the input array in half until a sub-array with only one element is produced.",
        "<strong>2)</strong> Merge each sorted sub-array together to produce the final sorted array.",
        "Merge sort is an efficient sorting method, with time complexity of <i>O(nlog(n))</i>. This algorithm is popular because it is performant and relatively easy to implement.",
        "As an aside, this will be the last sorting algorithm we cover here. However, later in the section on tree data structures we will describe heap sort, another efficient sorting method that requires a binary heap in its implementation.",
        "<strong>Instructions:</strong> Write a function <code>mergeSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest. A good way to implement this is to write one function, for instance <code>merge</code>, which is responsible for merging two sorted arrays, and another function, for instance <code>mergeSort</code>, which is responsible for the recursion that produces single-item arrays to feed into merge. Good luck!",
        "<strong>Note:</strong><br>We are calling this function from behind the scenes; the test array we are using is commented out in the editor. Try logging <code>array</code> to see your sorting algorithm in action!"
      ],
      "tests": [
        {
          "text": "<code>mergeSort</code> is a function.",
          "testString":
            "assert(typeof mergeSort == 'function', '<code>mergeSort</code> is a function.');"
        },
        {
          "text":
            "<code>mergeSort</code> returns a sorted array (least to greatest).",
          "testString":
            "assert(isSorted(mergeSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>mergeSort</code> returns a sorted array (least to greatest).');"
        },
        {
          "text":
            "<code>mergeSort</code> returns an array that is unchanged except for order.",
          "testString":
            "assert.sameMembers(mergeSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>mergeSort</code> returns an array that is unchanged except for order.');"
        },
        {
          "text":
            "<code>mergeSort</code> should not use the built-in <code>.sort()</code> method.",
          "testString":
            "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>mergeSort</code> should not use the built-in <code>.sort()</code> method.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function mergeSort(array) {\n  // change code below this line\n\n  // change code above this line\n  return array;\n}\n\n// test array:\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",
          "head": "",
          "tail":
            "function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"
        }
      },
      "name": "Implement Merge Sort",
      "dashedName": "implement-merge-sort"
    },
    {
      "id": "587d8253367417b2b2512c6a",
      "description": [
        "Arrays are JavaScript objects that can hold a lot of different elements.",
        "<code>var complexArr = [1, 5, \"2\", \"Word\", {\"name\": \"James\"}];</code>",
        "Basically what happens in the background is that your browser will automatically give the right amount of memory space for that array. It will also change as needed if you add or remove data.",
        "However, in the world of high performance and different element types, sometimes you need to be more specific on how much memory is given to an array.",
        "<dfn>Typed arrays</dfn> are the answer to this problem. You are now able to say how much memory you want to give an array. Below is a basic overview of the different types of arrays available and the size in bytes for each element in that array.",
        "<table class='table table-striped'><tr><th>Type</th><th>Each element size in bytes</th></tr><tr><td><code>Int8Array</code></td><td>1</td></tr><tr><td><code>Uint8Array</code></td><td>1</td></tr><tr><td><code>Uint8ClampedArray</code></td><td>1</td></tr><tr><td><code>Int16Array</code></td><td>2</td></tr><tr><td><code>Uint16Array</code></td><td>2</td></tr><tr><td><code>Int32Array</code></td><td>4</td></tr><tr><td><code>Uint32Array</code></td><td>4</td></tr><tr><td><code>Float32Array</code></td><td>4</td></tr><tr><td><code>Float64Array</code></td><td>8</td></tr></table>",
        "There are two ways in creating these kind of arrays. One way is to create it directly. Below is how to create a 3 length <code>Int16Array</code>.",
        "<blockquote>var i8 = new Int16Array(3);<br>console.log(i8);<br>// Returns [0, 0, 0]</blockquote>",
        "You can also create a <dfn>buffer</dfn> to assign how much data (in bytes) you want the array to take up.",
        "<strong>Note</strong><br>To create typed arrays using buffers, you need to assign the number of bytes to be a multiple of the bytes listed above.",
        "<blockquote>// Create same Int16Array array differently<br>var byteSize = 6; // Needs to be multiple of 2<br>var buffer = new ArrayBuffer(byteSize);<br>var i8View = new Int16Array(buffer);<br>buffer.byteLength; // Returns 6<br>i8View.byteLength; // Returns 6<br>console.log(i8View); // Returns [0, 0, 0]</blockquote>",
        "<dfn>Buffers</dfn> are general purpose objects that just carry data. You cannot access them normally. To access them, you need to first create a <dfn>view</dfn>.",
        "<blockquote>i8View[0] = 42;<br>console.log(i8View); // Returns [42, 0, 0]</blockquote>",
        "<strong>Note</strong><br>Typed arrays do not have some of the methods traditional arrays have such as <code>.pop()</code> or <code>.push()</code>. Typed arrays also fail <code>Array.isArray()</code> that checks if something is an array. Although simpler, this can be an advantage for less-sophisticated JavaScript engines to implement them.",
        "<hr>",
        "First create a <code>buffer</code> that is 64-bytes. Then create a <code>Int32Array</code> typed array with a view of it called <code>i32View</code>."
      ],
      "tests": [
        {
          "text": "Your <code>buffer</code> should be 64 bytes large.",
          "testString":
            "assert(buffer.byteLength === 64, 'Your <code>buffer</code> should be 64 bytes large.');"
        },
        {
          "text":
            "Your <code>i32View</code> view of your buffer should be 64 bytes large.",
          "testString":
            "assert(i32View.byteLength === 64, 'Your <code>i32View</code> view of your buffer should be 64 bytes large.');"
        },
        {
          "text":
            "Your <code>i32View</code> view of your buffer should be 16 elements long.",
          "testString":
            "assert(i32View.length === 16, 'Your <code>i32View</code> view of your buffer should be 16 elements long.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var buffer;\nvar i32View;",
          "head": "",
          "tail": ""
        }
      },
      "name": "Typed Arrays",
      "dashedName": "typed-arrays"
    },
    {
      "id": "587d8250367417b2b2512c5e",
      "description": [
        "You are probably familiar with stack of books on your table. You have likely used the undo feature of a text editor. You are also probably used to hitting the back button on your phone to go back to the previous view in your app.",
        "You know what they all have in common? They all store the data in a way so that you can traverse backwards.",
        "The topmost book in the stack was the one that was put there last. If you remove that book from your stack's top, you would expose the book that was put there before the last book and so on.",
        "If you think about it, in all the above examples, you are getting <dfn>Last-In-First-Out</dfn> type of service. We will try to mimic this with our code.",
        "This data storage scheme is called a <dfn>Stack</dfn>. In particular, we would have to implement the <code>push()</code> method that pushes JavaScript objects at the top of the stack; and <code>pop()</code> method, that removes the JavaScript object that's at the top of the stack at the current moment.",
        "<hr>",
        "Here we have a stack of homework assignments represented as an array: <code>\"BIO12\"</code> is at the base, and <code>\"PSY44\"</code> is at the top of the stack.",
        "Modify the given array and treat it like a <code>stack</code> using the JavaScript methods mentioned above. Remove the top element <code>\"PSY44\"</code> from the stack. Then add <code>\"CS50\"</code> to be the new top element of the stack."
      ],
      "tests": [
        {
          "text": "<code>homeworkStack</code> should only contain 4 elements.",
          "testString":
            "assert(homeworkStack.length === 4, '<code>homeworkStack</code> should only contain 4 elements.');"
        },
        {
          "text":
            "The last element in <code>homeworkStack</code> should be <code>\"CS50\"</code>.",
          "testString":
            "assert(homeworkStack[3] === 'CS50', 'The last element in <code>homeworkStack</code> should be <code>\"CS50\"</code>.');"
        },
        {
          "text":
            "<code>homeworkStack</code> should not contain <code>\"PSY44\"</code>.",
          "testString":
            "assert(homeworkStack.indexOf('PSY44') === -1, '<code>homeworkStack</code> should not contain <code>\"PSY44\"</code>.');"
        },
        {
          "text":
            "The initial declaration of the <code>homeworkStack</code> should not be changed.",
          "testString":
            "assert(code.match(/=/g).length === 1 && /homeworkStack\\s*=\\s*\\[\"BIO12\"\\s*,\\s*\"HIS80\"\\s*,\\s*\"MAT122\"\\s*,\\s*\"PSY44\"\\]/.test(code), 'The initial declaration of the <code>homeworkStack</code> should not be changed.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var homeworkStack = [\"BIO12\",\"HIS80\",\"MAT122\",\"PSY44\"];\n// Only change code below this line\n",
          "head": "",
          "tail": ""
        }
      },
      "name": "Learn how a Stack Works",
      "dashedName": "learn-how-a-stack-works"
    },
    {
      "id": "587d8250367417b2b2512c5f",
      "description": [
        "In the last section, we talked about what a stack is and how we can use an array to represent a stack. In this section, we will be creating our own stack class.",
        "Although you can use arrays to create stacks, sometimes it is best to limit the amount of control we have with our stacks.",
        "Apart from the <code>push</code> and <code>pop</code> method, stacks have other useful methods. Let's add a <code>peek</code>, <code>isEmpty</code>, and <code>clear</code> method to our stack class.",
        "Instructions",
        "Write a <code>push</code> method that pushes an element to the top of the stack, a <code>pop</code> method that removes the element on the top of the stack, a <code>peek</code> method that looks at the first element in the stack, an <code>isEmpty</code> method that checks if the stack is empty, and a <code>clear</code> method that removes all elements from the stack.",
        "Normally stacks don't have this, but we've added a <code>print</code> helper method that console logs the collection."
      ],
      "tests": [
        {
          "text":
            "Your <code>Stack</code> class should have a <code>push</code> method.",
          "testString":
            "assert((function(){var test = new Stack(); return (typeof test.push === 'function')}()), 'Your <code>Stack</code> class should have a <code>push</code> method.');"
        },
        {
          "text":
            "Your <code>Stack</code> class should have a <code>pop</code> method.",
          "testString":
            "assert((function(){var test = new Stack(); return (typeof test.pop === 'function')}()), 'Your <code>Stack</code> class should have a <code>pop</code> method.');"
        },
        {
          "text":
            "Your <code>Stack</code> class should have a <code>peek</code> method.",
          "testString":
            "assert((function(){var test = new Stack(); return (typeof test.peek === 'function')}()), 'Your <code>Stack</code> class should have a <code>peek</code> method.');"
        },
        {
          "text":
            "Your <code>Stack</code> class should have a <code>isEmpty</code> method.",
          "testString":
            "assert((function(){var test = new Stack(); return (typeof test.isEmpty === 'function')}()), 'Your <code>Stack</code> class should have a <code>isEmpty</code> method.');"
        },
        {
          "text":
            "Your <code>Stack</code> class should have a <code>clear</code> method.",
          "testString":
            "assert((function(){var test = new Stack(); return (typeof test.clear === 'function')}()), 'Your <code>Stack</code> class should have a <code>clear</code> method.');"
        },
        {
          "text":
            "The <code>peek</code> method should return the top element of the stack",
          "testString":
            "assert((function(){var test = new Stack();  test.push('CS50'); return (test.peek() === 'CS50')}()), 'The <code>peek</code> method should return the top element of the stack');"
        },
        {
          "text":
            "The <code>pop</code> method should remove and return the top element of the stack",
          "testString":
            "assert((function(){var test = new Stack(); test.push('CS50'); return (test.pop() === 'CS50');}()), 'The <code>pop</code> method should remove and return the top element of the stack');"
        },
        {
          "text":
            "The <code>isEmpty</code> method should return true if a stack does not contain any elements",
          "testString":
            "assert((function(){var test = new Stack(); return test.isEmpty()}()), 'The <code>isEmpty</code> method should return true if a stack does not contain any elements');"
        },
        {
          "text":
            "The <code>clear</code> method should remove all element from the stack",
          "testString":
            "assert((function(){var test = new Stack();  test.push('CS50'); test.clear(); return (test.isEmpty())}()), 'The <code>clear</code> method should remove all element from the stack');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Stack() { \n    collection = [];\n    this.print = function() {\n        console.log(collection);\n    };\n    // Only change code below this line\n\n    // Only change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Stack Class",
      "dashedName": "create-a-stack-class"
    },
    {
      "id": "587d8250367417b2b2512c60",
      "description": [
        "Like stacks, queues are a collection of elements. But unlike stacks, queues follow the FIFO (First-In First-Out) principle. Elements added to a queue are pushed to the tail, or the end, of the queue, and only the element at the front of the queue is allowed to be removed.",
        "We could use an array to represent a queue, but just like stacks, we want to limit the amount of control we have over our queues.",
        "The two main methods of a queue class is the enqueue and the dequeue method. The enqueue method pushes an element to the tail of the queue, and the dequeue method removes and returns the element at the front of the queue. Other useful methods are the front, size, and isEmpty methods.",
        "Instructions",
        "Write an enqueue method that pushes an element to the tail of the queue, a dequeue method that removes and returns the front element, a front method that lets us see the front element, a size method that shows the length, and an isEmpty method to check if the queue is empty."
      ],
      "tests": [
        {
          "text":
            "Your <code>Queue</code> class should have a <code>enqueue</code> method.",
          "testString":
            "assert((function(){var test = new Queue();  return (typeof test.enqueue === 'function')}()), 'Your <code>Queue</code> class should have a <code>enqueue</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have a <code>dequeue</code> method.",
          "testString":
            "assert((function(){var test = new Queue();  return (typeof test.dequeue === 'function')}()), 'Your <code>Queue</code> class should have a <code>dequeue</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have a <code>front</code> method.",
          "testString":
            "assert((function(){var test = new Queue();  return (typeof test.front === 'function')}()), 'Your <code>Queue</code> class should have a <code>front</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have a <code>size</code> method.",
          "testString":
            "assert((function(){var test = new Queue();  return (typeof test.size === 'function')}()), 'Your <code>Queue</code> class should have a <code>size</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have an <code>isEmpty</code> method.",
          "testString":
            "assert((function(){var test = new Queue();  return (typeof test.isEmpty === 'function')}()), 'Your <code>Queue</code> class should have an <code>isEmpty</code> method.');"
        },
        {
          "text":
            "The <code>dequeue</code> method should remove and return the front element of the queue",
          "testString":
            "assert((function(){var test = new Queue();  test.enqueue('Smith'); return (test.dequeue() === 'Smith')}()), 'The <code>dequeue</code> method should remove and return the front element of the queue');"
        },
        {
          "text":
            "The <code>front</code> method should return value of the front element of the queue",
          "testString":
            "assert((function(){var test = new Queue();  test.enqueue('Smith'); test.enqueue('John'); return (test.front() === 'Smith')}()), 'The <code>front</code> method should return value of the front element of the queue');"
        },
        {
          "text":
            "The <code>size</code> method should return the length of the queue",
          "testString":
            "assert((function(){var test = new Queue();  test.enqueue('Smith'); return (test.size() === 1)}()), 'The <code>size</code> method should return the length of the queue');"
        },
        {
          "text":
            "The <code>isEmpty</code> method should return <code>false</code> if there are elements in the queue",
          "testString":
            "assert((function(){var test = new Queue();  test.enqueue('Smith'); return !(test.isEmpty())}()), 'The <code>isEmpty</code> method should return <code>false</code> if there are elements in the queue');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Queue () { \n    collection = [];\n    this.print = function() {\n        console.log(collection);\n    };\n    // Only change code below this line\n\n    // Only change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Queue Class",
      "dashedName": "create-a-queue-class"
    },
    {
      "id": "587d8255367417b2b2512c74",
      "description": [
        "In this challenge you will be creating a Priority Queue. A Priority Queue is a special type of Queue in which items may have additional information which specifies their priority. This could be simply represented with an integer. Item priority will override placement order in determining the sequence items are dequeued. If an item with a higher priority is enqueued after items with lower priority, the higher priority item will be dequeued before all the others.",
        "For instance, let’s imagine we have a priority queue with three items:",
        "<code>[[’kitten’, 2], [‘dog’, 2], [‘rabbit’, 2]]</code>",
        "Here the second value (an integer) represents item priority. If we enqueue <code>[‘human’, 1]</code> with a priority of <code>1</code> (assuming lower priorities are given precedence) it would then be the first item to be dequeued. The collection would like this:",
        "<code>[[‘human’, 1], [’kitten’, 2], [‘dog’, 2], [‘rabbit’, 2]]</code>.",
        "We’ve started writing a <code>PriorityQueue</code> in the code editor. You will need to add an <code>enqueue</code> method for adding items with a priority, a <code>dequeue</code> method for removing items, a <code>size</code> method to return the number of items in the queue, a <code>front</code> method to return the element at the front of the queue, and finally an <code>isEmpty</code> method that will return <code>true</code> if the queue is empty or <code>false</code> if it is not.",
        "The <code>enqueue</code> should accept items with the format shown above (<code>['human', 1]</code>) where <code>1</code> represents the priority. The <code>dequeue</code> should return only the current item, not its priority."
      ],
      "tests": [
        {
          "text":
            "Your <code>Queue</code> class should have a <code>enqueue</code> method.",
          "testString":
            "assert((function(){var test = new PriorityQueue();  return (typeof test.enqueue === 'function')}()), 'Your <code>Queue</code> class should have a <code>enqueue</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have a <code>dequeue</code> method.",
          "testString":
            "assert((function(){var test = new PriorityQueue();  return (typeof test.dequeue === 'function')}()), 'Your <code>Queue</code> class should have a <code>dequeue</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have a <code>size</code> method.",
          "testString":
            "assert((function(){var test = new PriorityQueue();  return (typeof test.size === 'function')}()), 'Your <code>Queue</code> class should have a <code>size</code> method.');"
        },
        {
          "text":
            "Your <code>Queue</code> class should have an <code>isEmpty</code> method.",
          "testString":
            "assert((function(){var test = new PriorityQueue();  return (typeof test.isEmpty === 'function')}()), 'Your <code>Queue</code> class should have an <code>isEmpty</code> method.');"
        },
        {
          "text":
            "Your PriorityQueue should correctly keep track of the current number of items using the <code>size</code> method as items are enqueued and dequeued.",
          "testString":
            "assert((function(){var test = new PriorityQueue(); test.enqueue(['David Brown', 2]); test.enqueue(['Jon Snow', 1]); var size1 = test.size(); test.dequeue(); var size2 = test.size(); test.enqueue(['A', 3]); test.enqueue(['B', 3]); test.enqueue(['C', 3]); return (size1 === 2 && size2 === 1 && test.size() === 4)}()), 'Your PriorityQueue should correctly keep track of the current number of items using the <code>size</code> method as items are enqueued and dequeued.');"
        },
        {
          "text":
            "The <code>isEmpty</code> method should return <code>true</code> when the queue is empty.",
          "testString":
            "assert((function(){var test = new PriorityQueue(); test.enqueue(['A', 1]); test.enqueue(['B', 1]); test.dequeue(); var first = test.isEmpty(); test.dequeue(); return (!first && test.isEmpty()); }()), 'The <code>isEmpty</code> method should return <code>true</code> when the queue is empty.');"
        },
        {
          "text":
            "The priority queue should return items with a higher priority before items with a lower priority and return items in first-in-first-out order otherwise.",
          "testString":
            "assert((function(){var test = new PriorityQueue(); test.enqueue(['A', 5]); test.enqueue(['B', 5]); test.enqueue(['C', 5]); test.enqueue(['D', 3]); test.enqueue(['E', 1]); test.enqueue(['F', 7]); var result = []; result.push(test.dequeue()); result.push(test.dequeue()); result.push(test.dequeue()); result.push(test.dequeue()); result.push(test.dequeue()); result.push(test.dequeue()); return result.join('') === 'EDABCF';}()), 'The priority queue should return items with a higher priority before items with a lower priority and return items in first-in-first-out order otherwise.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function PriorityQueue () {\n    this.collection = [];\n    this.printCollection = function() {\n      console.log(this.collection);\n    };\n    // Only change code below this line\n\n    // Only change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Priority Queue Class",
      "dashedName": "create-a-priority-queue-class"
    },
    {
      "id": "587d8255367417b2b2512c75",
      "description": [
        "In this challenge you will be creating a Circular Queue. A circular queue is basically a queue that writes to the end of a collection then begins over writing itself at the beginning of the collection. This is type of data structure has some useful applications in certain situations. For example, a circular queue can be used for streaming media. Once the queue is full, new media data simply begins to overwrite old data.",
        "A good way to illustrate this concept is with an array:",
        "<blockquote>[1, 2, 3, 4, 5]<br> ^Read @ 0<br> ^Write @ 0</blockquote>",
        "Here the read and write are both at position <code>0</code>. Now the queue gets 3 new records <code>a</code>, <code>b</code>, and <code>c</code>. Our queue now looks like:",
        "<blockquote>[a, b, c, 4, 5]<br> ^Read @ 0<br>       ^Write @ 3</blockquote>",
        "As the read head reads, it can remove values or keep them:",
        "<blockquote>[null, null, null, 4, 5]<br>                   ^Read @ 3<br>                   ^Write @ 3</blockquote>",
        "Once the write reaches the end of the array it loops back to the beginning:",
        "<blockquote>[f, null, null, d, e]<br>                ^Read @ 3<br> ^Write @ 1</blockquote>",
        "This approach requires a constant amount of memory but allows files of a much larger size to be processed.",
        "Instructions:",
        "In this challenge we will implement a circular queue. The circular queue should provide <code>enqueue</code> and <code>dequeue</code> methods which allow you to read from and write to the queue. The class itself should also accept an integer which you can use to specify the size of the queue when you create it. We've written the starting version of this class for you in the code editor. When you enqueue items to the queue, the write pointer should advance forward and loop back to the beginning once it reaches the end of the queue. Likewise, the read pointer should advance forward as you dequeue items. The write pointer should not be allowed to move past the read pointer (our class won't let you overwrite data you haven't read yet) and the read pointer should not be able to advance past data you have written.",
        "In addition, the <code>enqueue</code> method should return the item you enqueued if it is successfully and otherwise return <code>null</code>. Similarly, when you dequeue an item it should be returned and if you cannot dequeue you should return <code>null</code>."
      ],
      "tests": [
        {
          "text":
            "The <code>enqueue</code> method adds items to the circular queue.",
          "testString":
            "assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), 'The <code>enqueue</code> method adds items to the circular queue.');"
        },
        {
          "text": "You cannot enqueue items past the read pointer.",
          "testString":
            "assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); test.enqueue(13); test.enqueue(25); test.enqueue(59); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), 'You cannot enqueue items past the read pointer.');"
        },
        {
          "text":
            "The <code>dequeue</code> method dequeues items from the queue.",
          "testString":
            "assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591; })(), 'The <code>dequeue</code> method dequeues items from the queue.');"
        },
        {
          "text":
            "After an item is dequeued its position in the queue should be reset to <code>null</code>.",
          "testString":
            "assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(672); test.dequeue(); test.dequeue(); var print = test.print(); return print[0] === null && print[1] === null && print[2] === 672; })(), 'After an item is dequeued its position in the queue should be reset to <code>null</code>.');"
        },
        {
          "text":
            "Trying to dequeue past the write pointer returns <code>null</code> and does not advance the write pointer.",
          "testString":
            "assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591 && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.enqueue(100) === 100 && test.dequeue() === 100; })(), 'Trying to dequeue past the write pointer returns <code>null</code> and does not advance the write pointer.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "class CircularQueue {\n   constructor(size) {\n\n     this.queue = [];\n     this.read = 0;\n     this.write = 0;\n     this.max = size - 1;\n\n     while (size > 0) {\n        this.queue.push(null);\n        size--;\n     }\n\n   }\n\n   print() {\n     return this.queue;\n   }\n\n\n   enqueue(item) {\n    // Only change code below this line\n\n    // Only change code above this line\n   }\n\n   dequeue() {\n    // Only change code below this line\n\n    // Only change code above this line\n   }\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Circular Queue",
      "dashedName": "create-a-circular-queue"
    },
    {
      "id": "8d1323c8c441eddfaeb5bdef",
      "description": [
        "In the next few exercises we are going to create a function to emulate a data structure called a \"Set\". A Set is like an array, but it cannot contain duplicate values. The typical use for a Set is to simply check for the presence of an item. This can be implemented with an object, for instance:",
        "<blockquote>var set = new Object();<br>set.foo = true;<br>// See if foo exists in our set:<br>console.log(set.foo) // true</blockquote>",
        "In the next few exercises, we will build a full featured Set from scratch.",
        "For this exercise, create a function that will add a value to our set collection as long as the value does not already exist in the set. For example:",
        "<blockquote>this.add = function(element) {<br>  //some code to add value to the set<br>}</blockquote>",
        "The function should return <code>true</code> if the value is successfully added and <code>false</code> otherwise."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have an <code>add</code> method.",
          "testString":
            "assert((function(){var test = new Set(); return (typeof test.add === 'function')}()), 'Your <code>Set</code> class should have an <code>add</code> method.');"
        },
        {
          "text":
            "Your <code>add</code> method should not add duplicate values.",
          "testString":
            "assert((function(){var test = new Set(); test.add('a'); test.add('b'); test.add('a'); var vals = test.values(); return (vals[0] === 'a' && vals[1] === 'b' && vals.length === 2)}()), 'Your <code>add</code> method should not add duplicate values.');"
        },
        {
          "text":
            "Your <code>add</code> method should return <code>true</code> when a value has been successfully added.",
          "testString":
            "assert((function(){var test = new Set(); var result = test.add('a'); return (result != undefined) && (result === true);}()), 'Your <code>add</code> method should return <code>true</code> when a value has been successfully added.');"
        },
        {
          "text":
            "Your <code>add</code> method should return <code>false</code> when a duplicate value is added.",
          "testString":
            "assert((function(){var test = new Set(); test.add('a'); var result = test.add('a'); return (result != undefined) && (result === false);}()), 'Your <code>add</code> method should return <code>false</code> when a duplicate value is added.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold our set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Set Class",
      "dashedName": "create-a-set-class"
    },
    {
      "id": "587d8253367417b2b2512c6b",
      "description": [
        "In this exercises we are going to create a delete function for our set. The function should be named <code>this.remove</code>. This function should accept a value and check if it exists in the set. If it does, remove that value from the set, and return true. Otherwise, return false."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>remove</code> method.",
          "testString":
            "assert((function(){var test = new Set(); return (typeof test.remove === 'function')}()), 'Your <code>Set</code> class should have a <code>remove</code> method.');"
        },
        {
          "text":
            "Your <code>remove</code> method should only remove items that are present in the set.",
          "testString":
            "assert.deepEqual((function(){var test = new Set(); test.add('a');test.add('b');test.remove('c'); return test.values(); })(), ['a', 'b'], 'Your <code>remove</code> method should only remove items that are present in the set.');"
        },
        {
          "text":
            "Your <code>remove</code> method should remove the given item from the set.",
          "testString":
            "assert((function(){var test = new Set(); test.add('a');test.add('b');test.remove('a'); var vals = test.values(); return (vals[0] === 'b' && vals.length === 1)}()), 'Your <code>remove</code> method should remove the given item from the set.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove from a Set",
      "dashedName": "remove-from-a-set"
    },
    {
      "id": "8d1923c8c441eddfaeb5bdef",
      "description": [
        "In this exercise we are going to create a size function for our Set. This function should be named <code>this.size</code> and it should return the size of the collection."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>size</code> method.",
          "testString":
            "assert((function(){var test = new Set(); return (typeof test.size === 'function')}()), 'Your <code>Set</code> class should have a <code>size</code> method.');"
        },
        {
          "text":
            "The <code>size</code> method should return the number of elements in the collection.",
          "testString":
            "assert((function(){var test = new Set(); test.add('a');test.add('b');test.remove('a');return (test.size() === 1)}()), 'The <code>size</code> method should return the number of elements in the collection.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // this method will remove an element from a set\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Size of the Set",
      "dashedName": "size-of-the-set"
    },
    {
      "id": "587d8253367417b2b2512c6c",
      "description": [
        "In this exercise we are going to perform a union on two sets of data. We will create a method on our <code>Set</code> data structure called <code>union</code>. This method should take another <code>Set</code> as an argument and return the <code>union</code> of the two sets, excluding any duplicate values.",
        "For example, if <code>setA = ['a','b','c']</code> and <code>setB = ['a','b','d','e']</code>, then the union of setA and setB is: <code>setA.union(setB) = ['a', 'b', 'c', 'd', 'e']</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>union</code> method.",
          "testString":
            "assert((function(){var test = new Set(); return (typeof test.union === 'function')})(), 'Your <code>Set</code> class should have a <code>union</code> method.');"
        },
        {
          "text": "The proper collection was returned",
          "testString":
            "assert((function(){var setA = new Set();  var setB = new Set();  setA.add('a');  setA.add('b');  setA.add('c');  setB.add('c');  setB.add('d');  var unionSetAB = setA.union(setB); var final = unionSetAB.values(); return (final.indexOf('a') !== -1 && final.indexOf('b') !== -1 && final.indexOf('c') !== -1 && final.indexOf('d') !== -1 && final.length === 4)})(), 'The proper collection was returned');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n   // this method will remove an element from a set\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // this method will return the size of the set\n    this.size = function() {\n        return collection.length;\n    };\n    // change code below this line\n\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Perform a Union on Two Sets",
      "dashedName": "perform-a-union-on-two-sets"
    },
    {
      "id": "587d8253367417b2b2512c6d",
      "description": [
        "In this exercise we are going to perform an intersection on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>intersection</code>. An intersection of sets represents all values that are common to two or more sets. This method should take another <code>Set</code> as an argument and return the <code>intersection</code> of the two sets.",
        "For example, if <code>setA = ['a','b','c']</code> and <code>setB = ['a','b','d','e']</code>, then the intersection of setA and setB is: <code>setA.intersection(setB) = ['a', 'b']</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>intersection</code> method.",
          "testString":
            "assert(function(){var test = new Set(); return (typeof test.intersection === 'function')}, 'Your <code>Set</code> class should have a <code>intersection</code> method.');"
        },
        {
          "text": "The proper collection was returned",
          "testString":
            "assert(function(){  var setA = new Set();  var setB = new Set();  setA.add('a');  setA.add('b');  setA.add('c');  setB.add('c');  setB.add('d');  var intersectionSetAB = setA.intersection(setB); return (intersectionSetAB.size() === 1 && intersectionSetAB.values()[0] === 'c')}, 'The proper collection was returned');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n   // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // this method will remove an element from a set\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // this method will return the size of the collection\n    this.size = function() {\n        return collection.length;\n    };\n    // this method will return the union of two sets\n    this.union = function(otherSet) {\n        var unionSet = new Set();\n        var firstSet = this.values();\n        var secondSet = otherSet.values();\n        firstSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        secondSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        return unionSet;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Perform an Intersection on Two Sets of Data",
      "dashedName": "perform-an-intersection-on-two-sets-of-data"
    },
    {
      "id": "587d8254367417b2b2512c6e",
      "description": [
        "In this exercise we are going to perform a difference on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>difference</code>. A difference of sets should compare two sets and return the items present in the first set that are absent in the second. This method should take another <code>Set</code> as an argument and return the <code>difference</code> of the two sets.",
        "For example, if <code>setA = ['a','b','c']</code> and <code>setB = ['a','b','d','e']</code>, then the difference of setA and setB is: <code>setA.difference(setB) = ['c']</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>difference</code> method.",
          "testString":
            "assert(function(){var test = new Set(); return (typeof test.difference === 'function')}, 'Your <code>Set</code> class should have a <code>difference</code> method.');"
        },
        {
          "text": "The proper collection was returned",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setA.add('c'); setB.add('c'); setB.add('d'); var differenceSetAB = setA.difference(setB); return (differenceSetAB.size() === 2) && (differenceSetAB.values() === [ 'a', 'b' ])}, 'The proper collection was returned');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // this method will remove an element from a set\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // this method will return the size of the collection\n    this.size = function() {\n        return collection.length;\n    };\n    // this method will return the union of two sets\n    this.union = function(otherSet) {\n        var unionSet = new Set();\n        var firstSet = this.values();\n        var secondSet = otherSet.values();\n        firstSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        secondSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        return unionSet;\n    };\n    // this method will return the intersection of two sets as a new set\n    this.intersection = function(otherSet) {\n        var intersectionSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(otherSet.has(e)){\n                intersectionSet.add(e);\n            }\n        });\n        return intersectionSet;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Perform a Difference on Two Sets of Data",
      "dashedName": "perform-a-difference-on-two-sets-of-data"
    },
    {
      "id": "587d8254367417b2b2512c6f",
      "description": [
        "In this exercise we are going to perform a subset test on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>subset</code>. This will compare the first set, against the second and if the first set is fully contained within the Second then it will return true.",
        "For example, if <code>setA = ['a','b']</code> and <code>setB = ['a','b','c','d']</code>, then the subset of setA and setB is: <code>setA.subset(setB)</code> should be <code>true</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> class should have a <code>union</code> method.",
          "testString":
            "assert(function(){var test = new Set(); return (typeof test.subset === 'function')}, 'Your <code>Set</code> class should have a <code>union</code> method.');"
        },
        {
          "text": "The first Set() was contained in the second Set",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setB.add('b'); setB.add('c'); setB.add('a'); setB.add('d'); var subsetSetAB = setA.subset(setB);return (subsetSetAB === true)}, 'The first Set() was contained in the second Set');"
        },
        {
          "text":
            "<code>['a', 'b'].subset(['a', 'b', 'c', 'd'])</code> should return <code>true</code>\")",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setB.add('a'); setB.add('b'); setB.add('c'); setB.add('d'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === true)}, \"<code>['a', 'b'].subset(['a', 'b', 'c', 'd'])</code> should return <code>true</code>\");"
        },
        {
          "text":
            "<code>['a', 'b', 'c'].subset(['a', 'b'])</code> should return <code>false</code>\")",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setA.add('c'); setB.add('a'); setB.add('b'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === false)}, \"<code>['a', 'b', 'c'].subset(['a', 'b'])</code> should return <code>false</code>\");"
        },
        {
          "text": "<code>[].subset([])</code> should return <code>true</code>",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); var subsetSetAB = setA.subset(setB); return (subsetSetAB === true)}, '<code>[].subset([])</code> should return <code>true</code>');"
        },
        {
          "text":
            "<code>['a', 'b'].subset(['c', 'd'])</code> should return <code>false</code>\")",
          "testString":
            "assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setB.add('c'); setB.add('d'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === false)}, \"<code>['a', 'b'].subset(['c', 'd'])</code> should return <code>false</code>\");"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Set() {\n    // the var collection will hold the set\n    var collection = [];\n    // this method will check for the presence of an element and return true or false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // this method will return all the values in the set\n    this.values = function() {\n        return collection;\n    };\n    // this method will add an element to the set\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // this method will remove an element from a set\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // this method will return the size of the collection\n    this.size = function() {\n        return collection.length;\n    };\n    // this method will return the union of two sets\n    this.union = function(otherSet) {\n        var unionSet = new Set();\n        var firstSet = this.values();\n        var secondSet = otherSet.values();\n        firstSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        secondSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        return unionSet;\n    };\n    // this method will return the intersection of two sets as a new set\n    this.intersection = function(otherSet) {\n        var intersectionSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(otherSet.has(e)){\n                intersectionSet.add(e);\n            }\n        });\n        return intersectionSet;\n    };\n    // this method will return the difference of two sets as a new set\n    this.difference = function(otherSet) {\n        var differenceSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(!otherSet.has(e)){\n                differenceSet.add(e);\n            }\n        });\n        return differenceSet;\n    };\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Perform a Subset Check on Two Sets of Data",
      "dashedName": "perform-a-subset-check-on-two-sets-of-data"
    },
    {
      "id": "587d8254367417b2b2512c70",
      "description": [
        "Now that you have worked through ES5, you are going to perform something similar in ES6. This will be considerably easier. ES6 contains a built-in data structure <code>Set</code> so many of the operations you wrote by hand are now included for you. Let's take a look:",
        "To create a new empty set:",
        "<code>var set = new Set();</code>",
        "You can create a set with a value:",
        "<code>var set = new Set(1);</code>",
        "You can create a set with an array:",
        "<code>var set = new Set([1, 2, 3]);</code>",
        "Once you have created a set, you can add the values you wish using the <code>add</code> method:",
        "<blockquote>var set = new Set([1, 2, 3]);<br>set.add([4, 5, 6]);</blockquote>",
        "As a reminder, a set is a data structure that cannot contain duplicate values:",
        "<blockquote>var set = new Set([1, 2, 3, 1, 2, 3]);<br>// set contains [1, 2, 3] only</blockquote>",
        "<hr>",
        "For this exercise, return a set with the following values: <code>1, 2, 3, 'Taco', 'Cat', 'Awesome'</code>"
      ],
      "tests": [
        {
          "text":
            "Your <code>Set</code> should only contains the values <code>1, 2, 3, Taco, Cat, Awesome</code>.",
          "testString":
            "assert(function(){var test = checkSet(); return (test.size == 6) && test.has(1) && test.has(2) && test.has(3) && test.has('Taco') && test.has('Cat') && test.has('Awesome');}, 'Your <code>Set</code> should only contains the values <code>1, 2, 3, Taco, Cat, Awesome</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkSet() {\n  var set = new Set([1, 2, 3, 3, 2, 1, 2, 3, 1]);\n  // change code below this line\n  \n  // change code above this line\n  console.log(set);\n  return set;\n}\n\ncheckSet();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create and Add to Sets in ES6",
      "dashedName": "create-and-add-to-sets-in-es6"
    },
    {
      "id": "587d8254367417b2b2512c71",
      "description": [
        "Let's practice removimg items from an ES6 Set using the <code>delete</code> method.",
        "First, create an ES6 Set",
        "<code>var set = new Set([1,2,3]);</code>",
        "Now remove an item from your Set with the <code>delete</code> method.",
        "<blockquote>set.delete(1);<br>console.log([...set]) // should return [ 2, 3 ]<blockquote>",
        "<hr>",
        "Now, create a set with the integers 1, 2, 3, 4, & 5. \n Remove the values 2 and 5, and then return the set."
      ],
      "tests": [
        {
          "text": "Your Set should contain the values 1, 3, & 4",
          "testString":
            "assert(function(){var test = checkSet(); return test.has(1) && test.has(3) && test.has(4) && test.size === 3}, 'Your Set should contain the values 1, 3, & 4');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkSet(){\n   var set = //Create a set with values 1, 2, 3, 4, & 5\n   //Remove the value 2\n   //Remove the value 5\n   //Return the set\n   return set;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove items from a set in ES6",
      "dashedName": "remove-items-from-a-set-in-es6"
    },
    {
      "id": "587d8255367417b2b2512c72",
      "description": [
        "Let's look at the .has and .size methods available on the ES6 Set object.",
        "First, create an ES6 Set",
        "<code>var set = new Set([1,2,3]);</code>",
        "The .has method will check if the value is contained within the set.",
        "<code>var hasTwo = set.has(2);</code>",
        "The .size method will return an integer representing the size of the Set",
        "<code>var howBig = set.size;</code>",
        "<hr>",
        "In this exercise we will pass an array and a value to the checkSet() function. Your function should create an ES6 set from the array argument. Find if the set contains the value argument. Find the size of the set. And return those two values in an array."
      ],
      "tests": [
        {
          "text":
            "<code>checkSet([4, 5, 6], 3)</code> should return [ false, 3 ]",
          "testString":
            "assert(function(){var test = checkSet([4,5,6], 3); test === [ false, 3 ]}, '<code>checkSet([4, 5, 6], 3)</code> should return [ false, 3 ]');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkSet(arrToBeSet, checkValue){\n\n   // change code below this line\n\n   // change code above this line\n\n}\n\ncheckSet([ 1, 2, 3], 2); // Should return [ true, 3 ]",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use has and size on an ES6 Set",
      "dashedName": "use-has-and-size-on-an-es6-set"
    },
    {
      "id": "587d8255367417b2b2512c73",
      "description": [
        "Do you remember the ES6 spread operator <code>...</code>?",
        "<code>...</code> can take iterable objects in ES6 and turn them into arrays.",
        "Let's create a Set, and check out the spread function.",
        "<blockquote>var set = new Set([1,2,3]);<br>var setToArr = [...set]<br>console.log(setToArr) // returns [ 1, 2, 3 ]</blockquote>",
        "<hr>",
        "In this exercise we will pass a set object to the <code>checkSet</code> function. It should return an array containing the values of the Set.",
        "Now you've successfully learned how to use the ES6 <code>Set()</code> object, good job!"
      ],
      "tests": [
        {
          "text": "Your Set was returned correctly!",
          "testString":
            "assert(function(){var test = checkSet(new Set([1,2,3,4,5,6,7])); test === [ 1, 2, 3, 4, 5, 6, 7 ]}, 'Your Set was returned correctly!');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function checkSet(set){\n   // change code below this line\n\n   // change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Use Spread and Notes for ES5 Set Integration",
      "dashedName": "use-spread-and-notes-for-es5-set-integration"
    },
    {
      "id": "8d5823c8c441eddfaeb5bdef",
      "description": [
        "The next few challenges will cover maps and hash tables. Maps are data structures that store key-value pairs. In JavaScript, these are available to us as objects. Maps provide rapid lookup of stored items based on key values and are very common and useful data structures.",
        "Instructions: Let's get some practice creating our own map. Because JavaScript objects provide a much more efficient map structure than anything we could write here, this is intended primarily as a learning exercise. However, JavaScript objects only provide us with certain operations. What if we wanted to define custom operations?",
        "Use the <code>Map</code> object provided here as a wrapper around a JavaScript <code>object</code>. Create the following methods and operations on the Map object:",
        "<code>add</code> accepts a <code>key, value</code> pair to add to the map",
        "<code>remove</code> accepts a key and removes the associated <code>key, value</code> pair",
        "<code>get</code> accepts a <code>key</code> and returns the stored <code>value</code>",
        "<code>has</code> returns a <code>boolean</code> for the presence or absence of an item",
        "<code>values</code> returns an array of all the values in the map",
        "<code>size</code> returns the number of items in the map",
        "<code>clear</code> empties the map"
      ],
      "tests": [
        {
          "text": "The Map data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test == 'object')})(), 'The Map data structure exists.');"
        },
        {
          "text":
            "The Map object has the following methods: add, remove, get, has, values, clear, and size.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test.add == 'function' && typeof test.remove == 'function' && typeof test.get == 'function' && typeof test.has == 'function' && typeof test.values == 'function' && typeof test.clear == 'function' && typeof test.size == 'function')})(), 'The Map object has the following methods: add, remove, get, has, values, clear, and size.');"
        },
        {
          "text": "The add method adds items to the map.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add(5,6); test.add(2,3); test.add(2,5); return (test.size() == 2)})(), 'The add method adds items to the map.');"
        },
        {
          "text":
            "The has method returns true for added items and false for absent items.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('test','value'); return (test.has('test') && !test.has('false'))})(), 'The has method returns true for added items and false for absent items.');"
        },
        {
          "text":
            "The get method accepts keys as input and returns the associated values.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('abc','def'); return (test.get('abc') == 'def')})(), 'The get method accepts keys as input and returns the associated values.');"
        },
        {
          "text":
            "The values method returns all the values stored in the map as strings in an array.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('a','b'); test.add('c','d'); test.add('e','f'); var vals = test.values(); return (vals.indexOf('b') != -1 && vals.indexOf('d') != -1 && vals.indexOf('f') != -1)})(), 'The values method returns all the values stored in the map as strings in an array.');"
        },
        {
          "text":
            "The clear method empties the map and the size method returns the number of items present in the map.",
          "testString":
            "assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('b','b'); test.add('c','d'); test.remove('asdfas'); var init = test.size(); test.clear(); return (init == 2 && test.size() == 0)})(), 'The clear method empties the map and the size method returns the number of items present in the map.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var Map = function() {\n  this.collection = {};\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Map Data Structure",
      "dashedName": "create-a-map-data-structure"
    },
    {
      "id": "587d825b367417b2b2512c8d",
      "description": [
        "The new version of JavaScript provides us with a built-in Map object which provides much of the functionality we wrote by hand in the last challenge. This Map object, although similar to regular JavaScript objects, provides some useful functionality that normal objects lack. For example, an ES6 Map tracks the insertion order of items that are added to it. Here is a more complete overview of its methods:",
        "<code>.has(key)</code> returns true or false based on the presence of a key",
        "<code>.get(key)</code> returns the value associated with a key",
        "<code>.set(key, value)</code> sets a new key, value pair",
        "<code>.delete(key)</code> removes a key, value pair",
        "<code>.clear()</code> removes all key, value pairs",
        "<code>.entries()</code> returns an array of all the keys in insertion order",
        "<code>.values()</code> returns an array of all the values in insertion order",
        "Instructions: Define a JavaScript Map object and assign to it a variable called myMap. Add the key, value pair <code>freeCodeCamp</code>, <code>Awesome!</code> to it."
      ],
      "tests": [
        {
          "text": "The myMap object exists.",
          "testString":
            "assert(typeof myMap === 'object', 'The myMap object exists.');"
        },
        {
          "text":
            "myMap contains the key value pair <code>freeCodeCamp</code>, <code>Awesome!</code>.",
          "testString":
            "assert(myMap.get('freeCodeCamp') === 'Awesome!', 'myMap contains the key value pair <code>freeCodeCamp</code>, <code>Awesome!</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "// change code below this line",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create an ES6 JavaScript Map",
      "dashedName": "create-an-es6-javascript-map"
    },
    {
      "id": "587d825b367417b2b2512c8e",
      "description": [
        "In this challenge we will learn about hash tables. A Hash table is used to implement associative arrays, or mappings of key-value pairs, like the objects and Maps we have just been studying. A JavaScript object could be implemented as a hash table, for instance (its actual implementation will depend on the environment it's running in). The way a hash table works is that it takes a key input and hashes this key in a deterministic way to some numerical value. This numerical value is then used as the actual key the associated value is stored by. Then, if you try to access the same key again, the hashing function will process the key, return the same numerical result, which will then be used to look up the associated value. This provides very efficient O(n) lookup time on average.",
        "Hash tables can be implemented as arrays with hash functions producing array indices within a specified range. In this method, the choice of the array size is important, as is the hashing function. For instance, what if the hashing function produces the same value for two different keys? This is called a collision. One way to handle collisions is to just store both key-value pairs at that index. Then, upon lookup of either, you would have to iterate through the bucket of items to find the key you are looking for. A good hashing function will minimize collisions to maintain efficient search time.",
        "Here, we won't be concerned with the details of hashing or hash table implementation, we will just try to get a general sense of how they work.",
        "Instructions: Let's create the basic functionality of a hash table. We've created a naive hashing function for you to use. You can pass a string value to the function hash and it will return a hashed value you can use as a key for storage. Store items based on this hashed value in the this.collection object. Create these three methods: add, remove, and lookup. The first should accept a key value pair to add to the hash table. The second should remove a key-value pair when passed a key. The third should accept a key and return the associated value or null if the key is not present.",
        "Be sure to write your code to account for collisions!"
      ],
      "tests": [
        {
          "text": "The HashTable data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; return (typeof test === 'object')})(), 'The HashTable data structure exists.');"
        },
        {
          "text": "The HashTable has an add method.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; return ((typeof test.add) === 'function')})(), 'The HashTable has an add method.');"
        },
        {
          "text": "The HashTable has an remove method.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; return ((typeof test.remove) === 'function')})(), 'The HashTable has an remove method.');"
        },
        {
          "text": "The HashTable has an lookup method.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; return ((typeof test.lookup) === 'function')})(), 'The HashTable has an lookup method.');"
        },
        {
          "text":
            "The add method adds key value pairs and the lookup method returns the values associated with a given key.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; test.add('key', 'value'); return (test.lookup('key') === 'value')})(), 'The add method adds key value pairs and the lookup method returns the values associated with a given key.');"
        },
        {
          "text":
            "The remove method accepts a key as input and removes the associated key value pair.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; test.add('key', 'value'); test.remove('key'); return (test.lookup('key') === null)})(), 'The remove method accepts a key as input and removes the associated key value pair.');"
        },
        {
          "text": "Items are added using the hash function.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; called = 0; test.add('key1','value1'); test.add('key2','value2'); test.add('key3','value3'); return (called === 3)})(), 'Items are added using the hash function.');"
        },
        {
          "text": "The hash table handles collisions.",
          "testString":
            "assert((function() { var test = false; if (typeof HashTable !== 'undefined') { test = new HashTable() }; called = 0; test.add('key1','value1'); test.add('1key','value2'); test.add('ke1y','value3'); return (test.lookup('key1') === 'value1' && test.lookup('1key') == 'value2' && test.lookup('ke1y') == 'value3')})(), 'The hash table handles collisions.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var called = 0;\nvar hash = (string) => {\n  called++;\n  var hash = 0;\n  for (var i = 0; i < string.length; i++) { hash += string.charCodeAt(i); }\n  return hash;\n};\nvar HashTable = function() {\n  this.collection = {};\n  // change code below this line\n  // change code above this line\n};",
          "head":
            "  var called = 0;\n    var hash = (string) => {\n     called++;\n      var hash = 0;\n      for (var i = 0; i < string.length; i++) { hash += string.charCodeAt(i); };\n      return hash;\n    };",
          "tail": ""
        }
      },
      "name": "Create a Hash Table",
      "dashedName": "create-a-hash-table"
    },
    {
      "id": "587d8251367417b2b2512c61",
      "description": [
        "Another common data structure you'll run into in computer science is the <dfn>linked list</dfn>. A linked list is a linear collection of data elements, called 'nodes', each of which points to the next. Each <dfn>node</dfn> in a linked list contains two key pieces of information: the <code>element</code> itself, and a reference to the next <code>node</code>.",
        "Imagine that you are in a conga line. You have your hands on the next person in the line, and the person behind you has their hands on you. You can see the person straight ahead of you, but they are blocking the view of the other people ahead in line. A node is just like a person in a conga line: they know who they are and they can only see the next person in line, but they are not aware of the other people ahead or behind them.",
        "<hr>",
        "In our code editor, we've created two nodes, <code>Kitten</code> and <code>Puppy</code>, and we've manually connected the <code>Kitten</code> node to the <code>Puppy</code> node.",
        "Create a <code>Cat</code> and <code>Dog</code> node and manually add them to the line."
      ],
      "tests": [
        {
          "text":
            "Your <code>Puppy</code> node should have a reference to a <code>Cat</code> node.",
          "testString":
            "assert(Puppy.next.element === \"Cat\", 'Your <code>Puppy</code> node should have a reference to a <code>Cat</code> node.');"
        },
        {
          "text":
            "Your <code>Cat</code> node should have a reference to a <code>Dog</code> node.",
          "testString":
            "assert(Cat.next.element === \"Dog\", 'Your <code>Cat</code> node should have a reference to a <code>Dog</code> node.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var Node = function(element){\n    this.element = element; \n    this.next = null; \n};\nvar Kitten = new Node(\"Kitten\");\nvar Puppy = new Node(\"Puppy\");\n\nKitten.next = Puppy;\n// only add code below this line\n\n// test your code\nconsole.log(Kitten.next);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Work with Nodes in a Linked List",
      "dashedName": "work-with-nodes-in-a-linked-list"
    },
    {
      "id": "587d8251367417b2b2512c62",
      "description": [
        "Let's create a <code>linked list</code> class. Every linked list should start out with a few basic properties: a <code>head</code> (the first item in your list) and a <code>length</code> (number of items in your list). Sometimes you'll see implementations of linked lists that incorporate a <code>tail</code> for the last element of the list, but for now we'll just stick with these two. Whenever we add an element to the linked list, our <code>length</code> property should be incremented by one.",
        "We'll want to have a way to add items to our linked list, so the first method we'll want to create is the <code>add</code> method.",
        "If our list is empty, adding an element to our linked list is straightforward enough: we just wrap that element in a <code>Node</code> class, and we assign that node to the <code>head</code> of our linked list.",
        "But what if our list already has one or more members? How do we add an element to the list? Recall that each node in a linked list has a <code>next</code> property. To add a node to the list, find the last node in the list, and point that last node's <code>next</code> property at our new node. (Hint: you know you've reached the end of a linked list when a node's <code>next</code> property is <code>null</code>.)",
        "<hr>",
        "Write an add method that assigns the first node you push to the linked list to the <code>head</code>; after that, whenever adding a node, every node should be referenced by the previous node's <code>next</code> property.",
        "Note",
        "Your list's <code>length</code> should increase by one every time an element is added to the linked list."
      ],
      "tests": [
        {
          "text":
            "Your <code>LinkedList</code> class should have a <code>add</code> method.",
          "testString":
            "assert((function(){var test = new LinkedList(); return (typeof test.add === 'function')}()), 'Your <code>LinkedList</code> class should have a <code>add</code> method.');"
        },
        {
          "text":
            "Your <code>LinkedList</code> class should assign <code>head</code> to the first node added.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); return test.head().element === 'cat'}()), 'Your <code>LinkedList</code> class should assign <code>head</code> to the first node added.');"
        },
        {
          "text":
            "The previous <code>node</code> in your <code>LinkedList</code> class should have reference to the newest node created.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.head().next.element === 'dog'}()), 'The previous <code>node</code> in your <code>LinkedList</code> class should have reference to the newest node created.');"
        },
        {
          "text":
            "The  <code>size</code> of your <code>LinkedList</code> class should equal the amount of nodes in the linked list.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.size() === 2}()), 'The  <code>size</code> of your <code>LinkedList</code> class should equal the amount of nodes in the linked list.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function LinkedList() { \n  var length = 0; \n  var head = null; \n\n  var Node = function(element){\n    this.element = element; \n    this.next = null; \n  }; \n\n  this.head = function(){\n    return head;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.add = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Linked List Class",
      "dashedName": "create-a-linked-list-class"
    },
    {
      "id": "587d8251367417b2b2512c63",
      "description": [
        "The next important method that any implementation of a linked list will need is a <code>remove</code> method. This method should take the element we want to remove as an argument, and then search the list to find and remove the node that contains that element.",
        "Whenever we remove a node from a linked list, it's important that we don't accidentally orphan the rest of the list in doing so. Recall that every node's <code>next</code> property points to the node that follows it in the list. If we're removing the middle element, say, we'll want to make sure that we have a connection from that element's previous node's <code>next</code> property to the middle element's <code>next</code> property (which is the next node in the list!)",
        "This might sound really confusing, so let's return to the conga line example so we have a good conceptual model. Picture yourself in a conga line, and the person directly in front of you leaves the line. The person who just left the line no longer has her hands on anyone in line--and you no longer have your hands on the person that left. You step forward and put your hands on next person you see.",
        "If the element we wish to remove is the <code>head</code> element, we reassign the <code>head</code> to the second node of the linked list.",
        "<hr>",
        "Write a <code>remove</code> method that takes an element and removes it from the linked list.",
        "Note",
        "The <code>length</code> of the list should decrease by one every time an element is removed from the linked list."
      ],
      "tests": [
        {
          "text":
            "Your <code>LinkedList</code> class should have a <code>remove</code> method.",
          "testString":
            "assert((function(){var test = new LinkedList(); return (typeof test.remove === 'function')}()), 'Your <code>LinkedList</code> class should have a <code>remove</code> method.');"
        },
        {
          "text":
            "Your <code>remove</code> method should reassign <code>head</code> to the second node when the first node is removed.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.remove('cat'); return test.head().element === 'dog'}()), 'Your <code>remove</code> method should reassign <code>head</code> to the second node when the first node is removed.');"
        },
        {
          "text":
            "Your <code>remove</code> method should decrease the <code>length</code> of the linked list by one for every node removed.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.remove('cat'); return test.size() === 1})(), 'Your <code>remove</code> method should decrease the <code>length</code> of the linked list by one for every node removed.');"
        },
        {
          "text":
            "Your <code>remove</code> method should reassign the reference of the previous node of the removed node to the removed node&apos;s <code>next</code> reference.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog');test.add('kitten'); test.remove('dog'); return test.head().next.element === 'kitten'})(), 'Your <code>remove</code> method should reassign the reference of the previous node of the removed node to the removed node&apos;s <code>next</code> reference.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function LinkedList() { \n  var length = 0; \n  var head = null; \n\n  var Node = function(element){ \n    this.element = element; \n    this.next = null; \n  }; \n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  }; \n\n  this.remove = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Elements from a Linked List",
      "dashedName": "remove-elements-from-a-linked-list"
    },
    {
      "id": "587d8251367417b2b2512c64",
      "description": [
        "Let's add a few more useful methods to our linked list class. Wouldn't it be useful if we could tell if our list was empty or not, as with our <code>Stack</code> and <code>Queue</code> classes?",
        "We should also be able to find specific elements in our linked list. Traversing through data structures is something you'll want to get a lot of practice with! Let's create an <code>indexOf</code> method that takes an <code>element</code> as an argument, and returns that element's <code>index</code> in the linked list. If the element is not found in the linked list, return <code>-1</code>.",
        "Let's also implement a method that does the opposite: an <code>elementAt</code> method that takes an <code>index</code> as an argument and returns the <code>element</code> at the given <code>index</code>. If no <code>element</code> is found, return <code>undefined</code>.",
        "<hr>",
        "Write an <code>isEmpty</code> method that checks if the linked list is empty, an <code>indexOf</code> method that returns the <code>index</code> of a given element, and an <code>elementAt</code> that returns an <code>element</code> at a given <code>index."
      ],
      "tests": [
        {
          "text":
            "Your <code>LinkedList</code> class should have a <code>indexOf</code> method.",
          "testString":
            "assert((function(){var test = new LinkedList(); return (typeof test.indexOf === 'function')}()), 'Your <code>LinkedList</code> class should have a <code>indexOf</code> method.');"
        },
        {
          "text":
            "Your <code>LinkedList</code> class should have a <code>elementAt</code> method.",
          "testString":
            "assert((function(){var test = new LinkedList(); return (typeof test.elementAt === 'function')}()), 'Your <code>LinkedList</code> class should have a <code>elementAt</code> method.');"
        },
        {
          "text":
            "Your <code>size</code> method should return the length of the linked list",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten'); return test.size() === 3}()), 'Your <code>size</code> method should return the length of the linked list');"
        },
        {
          "text":
            "Your <code>indexOf</code> method should return the index of the given element.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten'); return test.indexOf('kitten') === 2}()), 'Your <code>indexOf</code> method should return the index of the given element.');"
        },
        {
          "text":
            "Your <code>elementAt</code> method should return at element at a given index.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten'); return test.elementAt(1) === 'dog'}()), 'Your <code>elementAt</code> method should return at element at a given index.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function LinkedList() { \n  var length = 0; \n  var head = null; \n\n  var Node = function(element){ // {1} \n    this.element = element; \n    this.next = null; \n  }; \n\n  this.size = function() {\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  }; \n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n        head = currentNode.next;\n    } else {\n        while(currentNode.element !== element) {\n            previousNode = currentNode;\n            currentNode = currentNode.next;\n        }\n\n        previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Search within a Linked List",
      "dashedName": "search-within-a-linked-list"
    },
    {
      "id": "587d8251367417b2b2512c65",
      "description": [
        "Before we move on to another data structure, let's get a couple of last bits of practice with linked lists.",
        "Let's write a <code>removeAt</code> method that removes the <code>element</code> at a given <code>index</code>. The method should be called <code>removeAt(index)</code>. To remove an <code>element</code> at a certain <code>index</code>, we'll need to keep a running count of each node as we move along the linked list.",
        "A common technique used to iterate through the elements of a linked list involves a <dfn>'runner'</dfn>, or sentinel, that 'points' at the nodes that your code is comparing. In our case, starting at the <code>head</code> of our list, we start with a <code>currentIndex</code> variable that starts at <code>0</code>. The <code>currentIndex</code> should increment by one for each node we pass.",
        "Just like our <code>remove(element)</code> method, we need to be careful not to orphan the rest of our list when we remove the node in our removeAt(index) method. We keep our nodes contiguous by making sure that the node that has reference to the removed node has a reference to the next node.",
        "<hr>",
        "Write a <code>removeAt(index)</code> method that removes and returns a node at a given <code>index</code>. The method should return <code>null</code> if the given <code>index</code> is either negative, or greater than or equal to the <code>length</code> of the linked list.",
        "Note",
        "Remember to keep count of the <code>currentIndex</code>."
      ],
      "tests": [
        {
          "text":
            "Your <code>LinkedList</code> class should have a <code>removeAt</code> method.",
          "testString":
            "assert((function(){var test = new LinkedList(); return (typeof test.removeAt === 'function')}()), 'Your <code>LinkedList</code> class should have a <code>removeAt</code> method.');"
        },
        {
          "text":
            "Your <code>removeAt</code> method should reduce the <code>length</code> of the linked list",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten'); test.removeAt(1); return test.size() === 2}()), 'Your <code>removeAt</code> method should reduce the <code>length</code> of the linked list');"
        },
        {
          "text":
            "Your <code>removeAt</code> method should also return the element of the removed node.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten');  return test.removeAt(1) === 'dog'}()), 'Your <code>removeAt</code> method should also return the element of the removed node.');"
        },
        {
          "text":
            "Your <code>removeAt</code> method should also return <code>null</code> if the given index is less than <code>0</code>",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten');  return (test.removeAt(-1) === null)}()), 'Your <code>removeAt</code> method should also return <code>null</code> if the given index is less than <code>0</code>');"
        },
        {
          "text":
            "Your <code>removeAt</code> method should also return <code>null</code> if the given index is equal or more than the <code>length</code> of the linked list.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.add('kitten');  return (test.removeAt(3) === null)}()), 'Your <code>removeAt</code> method should also return <code>null</code> if the given index is equal or more than the <code>length</code> of the linked list.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function LinkedList() { \n  var length = 0; \n  var head = null; \n\n  var Node = function(element){ // {1} \n    this.element = element; \n    this.next = null; \n  }; \n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  }; \n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n        head = currentNode.next;\n    } else {\n        while(currentNode.element !== element) {\n            previousNode = currentNode;\n            currentNode = currentNode.next;\n        }\n\n        previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove Elements from a Linked List by Index",
      "dashedName": "remove-elements-from-a-linked-list-by-index"
    },
    {
      "id": "587d8252367417b2b2512c67",
      "description": [
        "Let's create a addAt(index,element) method that adds an element at a given index.",
        "Just like how we remove elements at a given index, we need to keep track of the currentIndex as we traverse the linked list. When the currentIndex matches the given index, we would need to reassign the previous node's next property to reference the new added node. And the new node should reference the next node in the currentIndex.",
        "Returning to the conga line example, a new person wants to join the line, but he wants to join in the middle. You are in the middle of the line, so you take your hands off of the person ahead of you. The new person walks over and puts his hands on the person you once had hands on, and you now have your hands on the new person.",
        "Instructions",
        "Create an addAt(index,element) method that adds an element at a given index. Return false if an element was unable to be added.",
        "Note",
        "Remember to check if the given index is a negative or is longer than the length of the linked list."
      ],
      "tests": [
        {
          "text":
            "Your <code>addAt</code> method should reassign <code>head</code> to the new node when the given index is 0.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.addAt(0,'cat'); return test.head().element === 'cat'}()), 'Your <code>addAt</code> method should reassign <code>head</code> to the new node when the given index is 0.');"
        },
        {
          "text":
            "Your <code>addAt</code> method should increase the length of the linked list by one for each new node added to the linked list.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); test.addAt(0,'cat'); return test.size() === 3}()), 'Your <code>addAt</code> method should increase the length of the linked list by one for each new node added to the linked list.');"
        },
        {
          "text":
            "Your <code>addAt</code> method should return <code>false</code> if a node was unable to be added.",
          "testString":
            "assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return (test.addAt(4,'cat') === false); }()), 'Your <code>addAt</code> method should return <code>false</code> if a node was unable to be added.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function LinkedList() { \n  var length = 0; \n  var head = null; \n\n  var Node = function(element){\n    this.element = element; \n    this.next = null; \n  }; \n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  }; \n\n  // Only change code below this line\n\n  // Only change code above this line\n\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Add Elements at a Specific Index in a Linked List",
      "dashedName": "add-elements-at-a-specific-index-in-a-linked-list"
    },
    {
      "id": "587d825a367417b2b2512c87",
      "description": [
        "All of the linked lists we've created so far are singly linked lists. Here, we'll create a <dfn>doubly linked list</dfn>. As the name implies, nodes in a doubly linked list have references to the next and previous node in the list.",
        "This allows us to traverse the list in both directions but it also requires more memory to be used because every node must contain an additional reference to the previous node in the list.",
        "<hr>",
        "We've provided a <code>Node</code> object and started our <code>DoublyLinkedList</code>. Let's add two methods to our doubly linked list called <code>add</code> and <code>remove</code>. The <code>add</code> method should add the given element to the list while the <code>remove</code> method should remove all occurrences of a given element in the list.",
        "Be careful to handle any possible edge cases when writing these methods, such as deletions for the first or last element. Also, removing any item on an empty list should return <code>null</code>."
      ],
      "tests": [
        {
          "text": "The DoublyLinkedList data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (typeof test == 'object')})(), 'The DoublyLinkedList data structure exists.');"
        },
        {
          "text": "The DoublyLinkedList has a method called add.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.add == undefined) { return false; }; return (typeof test.add == 'function')})(), 'The DoublyLinkedList has a method called add.');"
        },
        {
          "text": "The DoublyLinkedList has a method called remove.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.remove == undefined) { return false; }; return (typeof test.remove == 'function')})(), 'The DoublyLinkedList has a method called remove.');"
        },
        {
          "text": "Removing an item from an empty list returns null.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (test.remove(100) == null); })(), 'Removing an item from an empty list returns null.');"
        },
        {
          "text": "The add method adds items to the list.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(5); test.add(6); test.add(723); return (test.print().join('') == '56723'); })(), 'The add method adds items to the list.');"
        },
        {
          "text": "Each node keeps track of the previous node.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(50); test.add(68); test.add(73); return (test.printReverse().join('') == '736850'); })(), 'Each node keeps track of the previous node.');"
        },
        {
          "text": "The first item can be removed from the list.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(25); return ( test.print().join('') == '3560' ) })(), 'The first item can be removed from the list.');"
        },
        {
          "text": "The last item can be removed from the list.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(60); return ( test.print().join('') == '2535' ) })(), 'The last item can be removed from the list.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var Node = function(data, prev) {\n  this.data = data;\n  this.prev = prev;\n  this.next = null;\n};\nvar DoublyLinkedList = function() {\n  this.head = null;\n  this.tail = null;\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail":
            "DoublyLinkedList.prototype = {\n  print() {\n    if (this.head == null) {\n      return null;\n    } else {\n      var result = new Array();\n      var node = this.head;\n      while (node.next != null) {\n        result.push(node.data);\n        node = node.next;\n      };\n      result.push(node.data);\n      return result;\n    };\n  },\n  printReverse() {\n    if (this.tail == null) {\n      return null;\n    } else {\n      var result = new Array();\n      var node = this.tail;\n      while (node.prev != null) {\n        result.push(node.data);\n        node = node.prev;\n      };\n      result.push(node.data);\n      return result;\n    };\n  } \n};"
        }
      },
      "name": "Create a Doubly Linked List",
      "dashedName": "create-a-doubly-linked-list"
    },
    {
      "id": "587d825a367417b2b2512c88",
      "description": [
        "Let's create one more method for our doubly linked list called reverse which reverses the list in place. Once the method is executed the head should point to the previous tail and the tail should point to the previous head. Now, if we traverse the list from head to tail we should meet the nodes in a reverse order compared to the original list. Trying to reverse an empty list should return null."
      ],
      "tests": [
        {
          "text": "The DoublyLinkedList data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (typeof test == 'object')})(), 'The DoublyLinkedList data structure exists.');"
        },
        {
          "text": "The DoublyLinkedList has a method called add.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.add == undefined) { return false; }; return (typeof test.add == 'function')})(), 'The DoublyLinkedList has a method called add.');"
        },
        {
          "text": "The DoublyLinkedList has a method called reverse.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.reverse == undefined) { return false; }; return (typeof test.reverse == 'function')})(), 'The DoublyLinkedList has a method called reverse.');"
        },
        {
          "text": "Reversing an empty list returns null.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (test.reverse() == null); })(), 'Reversing an empty list returns null.');"
        },
        {
          "text": "The reverse method reverses the list.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(58); test.add(61); test.add(32); test.reverse(); return (test.print().join('') == '326158'); })(), 'The reverse method reverses the list.');"
        },
        {
          "text":
            "The next and previous references are correctly maintained when a list is reversed.",
          "testString":
            "assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(11); test.add(22); test.add(33); test.reverse(); return (test.printReverse().join('') == '112233'); })(), 'The next and previous references are correctly maintained when a list is reversed.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var Node = function(data, prev) {\n  this.data = data;\n  this.prev = prev;\n  this.next = null;\n};\nvar DoublyLinkedList = function() {\n  this.head = null;\n  this.tail = null;\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail":
            "DoublyLinkedList.prototype = {\n  add(data) {\n    if (this.head == null) {\n      this.head = new Node(data, null);\n      this.tail = this.head;\n    } else {\n      var node = this.head;\n      var prev = null;\n      while (node.next != null) {\n        prev = node;\n        node = node.next;\n      };\n      var newNode = new Node(data, node);\n      node.next = newNode;\n      this.tail = newNode;\n    };\n  },\n  print() {\n    if (this.head == null) {\n      return null;\n    } else {\n      var result = new Array();\n      var node = this.head;\n      while (node.next != null) {\n        result.push(node.data);\n        node = node.next;\n      };\n      result.push(node.data);\n      return result;\n    };\n  },\n  printReverse() {\n    if (this.tail == null) {\n      return null;\n    } else {\n      var result = new Array();\n      var node = this.tail;\n      while (node.prev != null) {\n        result.push(node.data);\n        node = node.prev;\n      };\n      result.push(node.data);\n      return result;\n    };\n  }\n};"
        }
      },
      "name": "Reverse a Doubly Linked List",
      "dashedName": "reverse-a-doubly-linked-list"
    },
    {
      "id": "587d8256367417b2b2512c7a",
      "description": [
        "This series of challenges will introduce the tree data structure. Trees are an important and versatile data structure in computer science. Of course, their name comes from the fact that when visualized they look much like the trees we are familiar with in the natural world. A tree data structure begins with one node, typically referred to as the root, and from here branches out to additional nodes, each of which may have more child nodes, and so on and so forth. The data structure is usually visualized with the root node at the top; you can think of it as a natural tree flipped upside down.",
        "First, let's describe some common terminology we will encounter with trees. The root node is the top of the tree. Data points in the tree are called nodes. Nodes with branches leading to other nodes are referred to as the parent of the node the branch leads to (the child). Other more complicated familial terms apply as you might expect. A subtree refers to all the descendants of a particular node, branches may be referred to as edges, and leaf nodes are nodes at the end of the tree that have no children. Finally, note that trees are inherently recursive data structures. That is, any children of a node are parents of their own subtree, and so on. The recursive nature of trees is important to understand when designing algorithms for common tree operations.",
        "To begin, we will discuss a particular type of a tree, the binary tree. In fact, we will actually discuss a particular binary tree, a binary search tree. Let's describe what this means. While the tree data structure can have any number of branches at a single node, a binary tree can only have two branches for every node. Furthermore, a binary search tree is ordered with respect to the child subtrees, such that the value of each node in the left subtree is less than or equal to the value of the parent node, and the value of each node in the right subtree is greater than or equal to the value of the parent node. It's very helpful to visualize this relationship in order to understand it better:",
        "<div style='width: 100%; display: flex; justify-content: center; align-items: center;'><img style='width: 100%; max-width: 350px;' src='https://user-images.githubusercontent.com/18563015/32136009-1e665d98-bbd6-11e7-9133-63184f9f9182.png'></div>",
        "Now this ordered relationship is very easy to see. Note that every value to the left of 8, the root node, is less than 8, and every value to the right is greater than 8. Also notice that this relationship applies to each of the subtrees as well. For example, the first left child is a subtree. 3 is the parent node, and it has exactly two child nodes &mdash; by the rules governing binary search trees, we know without even looking that the left child of this node (and any of its children) will be less than 3, and the right child (and any of its children) will be greater than 3 (but also less than the structure's root value), and so on.",
        "Binary search trees are very common and useful data structures because they provide logarithmic time in the average case for several common operations such as lookup, insertion, and deletion.",
        "Instructions: We'll start simple. We've defined the skeleton of a binary search tree structure here in addition to a function to create nodes for our tree. Observe that each node may have a left and right value. These will be assigned child subtrees if they exist. In our binary search tree, define two methods, <code>findMin</code> and <code>findMax</code>. These methods should return the minimum and maximum value held in the binary search tree (don't worry about adding values to the tree for now, we have added some in the background). If you get stuck, reflect on the invariant that must be true for binary search trees: each left subtree is less than or equal to its parent and each right subtree is greater than or equal to its parent. Let's also say that our tree can only store integer values. If the tree is empty, either method should return <code>null</code>."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>findMin</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.findMin == 'function')})(), 'The binary search tree has a method called <code>findMin</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>findMax</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.findMax == 'function')})(), 'The binary search tree has a method called <code>findMax</code>.');"
        },
        {
          "text":
            "The <code>findMin</code> method returns the minimum value in the binary search tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMin !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return test.findMin() == 1; })(), 'The <code>findMin</code> method returns the minimum value in the binary search tree.');"
        },
        {
          "text":
            "The <code>findMax</code> method returns the maximum value in the binary search tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMax !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return test.findMax() == 87; })(), 'The <code>findMax</code> method returns the maximum value in the binary search tree.');"
        },
        {
          "text":
            "The <code>findMin</code> and <code>findMax</code> methods return <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMin !== 'function') { return false; }; if (typeof test.findMax !== 'function') { return false; }; return (test.findMin() == null && test.findMax() == null) })(), 'The <code>findMin</code> and <code>findMax</code> methods return <code>null</code> for an empty tree.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    }\n};"
        }
      },
      "name": "Find the Minimum and Maximum Value in a Binary Search Tree",
      "dashedName": "find-the-minimum-and-maximum-value-in-a-binary-search-tree"
    },
    {
      "id": "587d8257367417b2b2512c7b",
      "description": [
        "Now that we have an idea of the basics lets write a more complex method.",
        "In this challenge, we will create a method to add new values to our binary search tree. The method should be called <code>add</code> and it should accept an integer value to add to the tree. Take care to maintain the invariant of a binary search tree: the value in each left child should be less than or equal to the parent value, and the value in each right child should be greater than or equal to the parent value. Here, let's make it so our tree cannot hold duplicate values. If we try to add a value that already exists, the method should return <code>null</code>. Otherwise, if the addition is successful, <code>undefined</code> should be returned.",
        "Hint: trees are naturally recursive data structures!"
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>add</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.add == 'function')})(), 'The binary search tree has a method called <code>add</code>.');"
        },
        {
          "text":
            "The add method adds elements according to the binary search tree rules.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.add !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return (test.isBinarySearchTree()); })(), 'The add method adds elements according to the binary search tree rules.');"
        },
        {
          "text":
            "Adding an element that already exists returns <code>null</code>",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.add !== 'function') { return false; }; test.add(4); return test.add(4) == null; })(), 'Adding an element that already exists returns <code>null</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    isBinarySearchTree() {\n        if (this.root == null) {\n            return null;\n        } else {\n            var check = true;\n            function checkTree(node) {\n                if (node.left != null) {\n                    var left = node.left;\n                    if (left.value > node.value) {\n                        check = false;\n                    } else {\n                        checkTree(left);\n                    }\n                }\n                if (node.right != null) {\n                    var right = node.right;\n                    if (right.value < node.value) {\n                        check = false;\n                    } else {\n                        checkTree(right);\n                    };\n                };\n            };\n            checkTree(this.root);\n            return check;\n        };\n    }\n};"
        }
      },
      "name": "Add a New Element to a Binary Search Tree",
      "dashedName": "add-a-new-element-to-a-binary-search-tree"
    },
    {
      "id": "587d8257367417b2b2512c7c",
      "description": [
        "Now that we have a general sense of what a binary search tree is let's talk about it in a little more detail. Binary search trees provide logarithmic time for the common operations of lookup, insertion, and deletion in the average case, and linear time in the worst case. Why is this? Each of those basic operations requires us to find an item in the tree (or in the case of insertion to find where it should go) and because of the tree structure at each parent node we are branching left or right and effectively excluding half the size of the remaining tree. This makes the search proportional to the logarithm of the number of nodes in the tree, which creates logarithmic time for these operations in the average case.",
        "Ok, but what about the worst case? Well, consider constructing a tree from the following values, adding them left to right: <code>10</code>, <code>12</code>, <code>17</code>, <code>25</code>. Following our rules for a binary search tree, we will add <code>12</code> to the right of <code>10</code>, <code>17</code> to the right of this, and <code>25</code> to the right of this. Now our tree resembles a linked list and traversing it to find <code>25</code> would require us to traverse all the items in linear fashion. Hence, linear time in the worst case. The problem here is that the tree is unbalanced. We'll look a little more into what this means in the following challenges.",
        "Instructions: In this challenge, we will create a utility for our tree. Write a method <code>isPresent</code> which takes an integer value as input and returns a boolean value for the presence or absence of that value in the binary search tree."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>isPresent</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.isPresent == 'function')})(), 'The binary search tree has a method called <code>isPresent</code>.');"
        },
        {
          "text":
            "The <code>isPresent</code> method correctly checks for the presence or absence of elements added to the tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.isPresent !== 'function') { return false; }; test.add(4); test.add(7); test.add(411); test.add(452); return ( test.isPresent(452) && test.isPresent(411) && test.isPresent(7) && !test.isPresent(100) ); })(), 'The <code>isPresent</code> method correctly checks for the presence or absence of elements added to the tree.');"
        },
        {
          "text":
            "<code>isPresent</code> handles cases where the tree is empty.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.isPresent !== 'function') { return false; }; return test.isPresent(5) == false; })(), '<code>isPresent</code> handles cases where the tree is empty.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {    \n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    }\n};"
        }
      },
      "name": "Check if an Element is Present in a Binary Search Tree",
      "dashedName": "check-if-an-element-is-present-in-a-binary-search-tree"
    },
    {
      "id": "587d8257367417b2b2512c7d",
      "description": [
        "In the last challenge we described a scenario in which a tree could become unbalanced. To understand the concept of balance, let's take a look at another tree property: height. Height in a tree represents the distance from the root node to any given leaf node. Different paths in a highly branched tree structure may have different heights, but for a given tree there will be a minimum and maximum height. If the tree is balanced, these values will differ at most by one. This means that in a balanced tree, all the leaf nodes exist within the same level, or if they are not within the same level they are at most one level apart.",
        "The property of balance is important for trees because it is what determines the efficiency of tree operations. As we explained in the last challenge, we face worst case time complexity for heavily unbalanced trees. Self-balancing trees are commonly used to account for this issue in trees with dynamic data sets. Common examples of these include AVL trees, red-black trees, and B-trees. These trees all contain additional internal logic which re-balance the tree when insertions or deletions create a state of imbalance.",
        "Note: A similar property to height is depth, which refers to how far a given node is from the root node.",
        "Instructions: Write two methods for our binary tree: <code>findMinHeight</code> and <code>findMaxHeight</code>. These methods should return an integer value for the minimum and maximum height within a given binary tree, respectively. If the node is empty let's assign it a height of <code>-1</code> (that's the base case). Finally, add a third method <code>isBalanced</code> which returns <code>true</code> or <code>false</code> depending on whether the tree is balanced or not. You can use the first two methods you just wrote to determine this."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>findMinHeight</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.findMinHeight == 'function')})(), 'The binary search tree has a method called <code>findMinHeight</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>findMaxHeight</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.findMaxHeight == 'function')})(), 'The binary search tree has a method called <code>findMaxHeight</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>isBalanced</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.isBalanced == 'function')})(), 'The binary search tree has a method called <code>isBalanced</code>.');"
        },
        {
          "text":
            "The <code>findMinHeight</code> method returns the minimum height of the tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMinHeight !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return (test.findMinHeight() == 1); })(), 'The <code>findMinHeight</code> method returns the minimum height of the tree.');"
        },
        {
          "text":
            "The <code>findMaxHeight</code> method returns the maximum height of the tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMaxHeight !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return (test.findMaxHeight() == 5); })(), 'The <code>findMaxHeight</code> method returns the maximum height of the tree.');"
        },
        {
          "text": "An empty tree returns a height of <code>-1</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.findMaxHeight !== 'function') { return false; }; return (test.findMaxHeight() == -1); })(), 'An empty tree returns a height of <code>-1</code>.');"
        },
        {
          "text":
            "The <code>isBalanced</code> method returns true if the tree is a balanced binary search tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.isBalanced !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); return test.isBalanced(); })(), 'The <code>isBalanced</code> method returns true if the tree is a balanced binary search tree.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    }\n};"
        }
      },
      "name": "Find the Minimum and Maximum Height of a Binary Search Tree",
      "dashedName":
        "find-the-minimum-and-maximum-height-of-a-binary-search-tree"
    },
    {
      "id": "587d8257367417b2b2512c7e",
      "description": [
        "We know how to search a binary search tree for a specific value. But what if we just want to explore the entire tree? Or what if we don't have an ordered tree and we need to just search for a value? Here we will introduce some tree traversal methods which can be used to explore tree data structures. First up is depth-first search. In depth-first search, a given subtree is explored as deeply as possible before the search continues on to another subtree. There are three ways this can be done:",
        "In-order: Begin the search at the left-most node and end at the right-most node.",
        "Pre-order: Explore all the roots before the leaves.",
        "Post-order: Explore all the leaves before the roots.",
        "As you may guess, you may choose different search methods depending on what type of data your tree is storing and what you are looking for. For a binary search tree, an inorder traversal returns the nodes in sorted order.",
        "Instructions: Here we will create these three search methods on our binary search tree. Depth-first search is an inherently recursive operation which continues to explore further subtrees so long as child nodes are present. Once you understand this basic concept, you can simply rearrange the order in which you explore the nodes and subtrees to produce any of the three searches above. For example, in post-order search we would want to recurse all the way to a leaf node before we begin to return any of the nodes themselves, whereas in pre-order search we would want to return the nodes first, and then continue recursing down the tree.",
        "Define <code>inorder</code>, <code>preorder</code>, and <code>postorder</code> methods on our tree. Each of these methods should return an array of items which represent the tree traversal. Be sure to return the integer values at each node in the array, not the nodes themselves. Finally, return <code>null</code> if the tree is empty."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>inorder</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.inorder == 'function')})(), 'The binary search tree has a method called <code>inorder</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>preorder</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.preorder == 'function')})(), 'The binary search tree has a method called <code>preorder</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>postorder</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.postorder == 'function')})(), 'The binary search tree has a method called <code>postorder</code>.');"
        },
        {
          "text":
            "The <code>inorder</code> method returns an array of the node values that result from an inorder traversal.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.inorder !== 'function') { return false; }; test.add(7); test.add(1); test.add(9); test.add(0); test.add(3); test.add(8); test.add(10); test.add(2); test.add(5); test.add(4); test.add(6); return (test.inorder().join('') == '012345678910'); })(), 'The <code>inorder</code> method returns an array of the node values that result from an inorder traversal.');"
        },
        {
          "text":
            "The <code>preorder</code> method returns an array of the node values that result from a preorder traversal.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.preorder !== 'function') { return false; }; test.add(7); test.add(1); test.add(9); test.add(0); test.add(3); test.add(8); test.add(10); test.add(2); test.add(5); test.add(4); test.add(6); return (test.preorder().join('') == '710325469810'); })(), 'The <code>preorder</code> method returns an array of the node values that result from a preorder traversal.');"
        },
        {
          "text":
            "The <code>postorder</code> method returns an array of the node values that result from a postorder traversal.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.postorder !== 'function') { return false; }; test.add(7); test.add(1); test.add(9); test.add(0); test.add(3); test.add(8); test.add(10); test.add(2); test.add(5); test.add(4); test.add(6); return (test.postorder().join('') == '024653181097'); })(), 'The <code>postorder</code> method returns an array of the node values that result from a postorder traversal.');"
        },
        {
          "text":
            "The <code>inorder</code> method returns <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.inorder !== 'function') { return false; }; return (test.inorder() == null); })(), 'The <code>inorder</code> method returns <code>null</code> for an empty tree.');"
        },
        {
          "text":
            "The <code>preorder</code> method returns <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.preorder !== 'function') { return false; }; return (test.preorder() == null); })(), 'The <code>preorder</code> method returns <code>null</code> for an empty tree.');"
        },
        {
          "text":
            "The <code>postorder</code> method returns <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.postorder !== 'function') { return false; }; return (test.postorder() == null); })(), 'The <code>postorder</code> method returns <code>null</code> for an empty tree.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    }\n};"
        }
      },
      "name": "Use Depth First Search in a Binary Search Tree",
      "dashedName": "use-depth-first-search-in-a-binary-search-tree"
    },
    {
      "id": "587d8258367417b2b2512c7f",
      "description": [
        "Here we will introduce another tree traversal method: breadth-first search. In contrast to the depth-first search methods from the last challenge, breadth-first search explores all the nodes in a given level within a tree before continuing on to the next level. Typically, queues are utilized as helper data structures in the design of breadth-first search algorithms.",
        "In this method, we start by adding the root node to a queue. Then we begin a loop where we dequeue the first item in the queue, add it to a new array, and then inspect both its child subtrees. If its children are not null, they are each enqueued. This process continues until the queue is empty.",
        "Instructions: Let's create a breadth-first search method in our tree called <code>levelOrder</code>. This method should return an array containing the values of all the tree nodes, explored in a breadth-first manner. Be sure to return the values in the array, not the nodes themselves. A level should be traversed from left to right. Next, let's write a similar method called <code>reverseLevelOrder</code> which performs the same search but in the reverse direction (right to left) at each level."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>levelOrder</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.levelOrder == 'function')})(), 'The binary search tree has a method called <code>levelOrder</code>.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>reverseLevelOrder</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.reverseLevelOrder == 'function')})(), 'The binary search tree has a method called <code>reverseLevelOrder</code>.');"
        },
        {
          "text":
            "The <code>levelOrder</code> method returns an array of the tree node values explored in level order.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.levelOrder !== 'function') { return false; }; test.add(7); test.add(1); test.add(9); test.add(0); test.add(3); test.add(8); test.add(10); test.add(2); test.add(5); test.add(4); test.add(6); return (test.levelOrder().join('') == '719038102546'); })(), 'The <code>levelOrder</code> method returns an array of the tree node values explored in level order.');"
        },
        {
          "text":
            "The <code>reverseLevelOrder</code> method returns an array of the tree node values explored in reverse level order.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.reverseLevelOrder !== 'function') { return false; }; test.add(7); test.add(1); test.add(9); test.add(0); test.add(3); test.add(8); test.add(10); test.add(2); test.add(5); test.add(4); test.add(6); return (test.reverseLevelOrder().join('') == '791108305264'); })(), 'The <code>reverseLevelOrder</code> method returns an array of the tree node values explored in reverse level order.');"
        },
        {
          "text":
            "The <code>levelOrder</code> method returns <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.levelOrder !== 'function') { return false; }; return (test.levelOrder() == null); })(), 'The <code>levelOrder</code> method returns <code>null</code> for an empty tree.');"
        },
        {
          "text":
            "The <code>reverseLevelOrder</code> method returns <code>null</code> for an empty tree.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.reverseLevelOrder !== 'function') { return false; }; return (test.reverseLevelOrder() == null); })(), 'The <code>reverseLevelOrder</code> method returns <code>null</code> for an empty tree.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    }\n};"
        }
      },
      "name": "Use Breadth First Search in a Binary Search Tree",
      "dashedName": "use-breadth-first-search-in-a-binary-search-tree"
    },
    {
      "id": "587d8258367417b2b2512c80",
      "description": [
        "This is the first of three challenges where we will implement a more difficult operation in binary search trees: deletion. Deletion is difficult because removing nodes breaks links in the tree. These links must be carefully reestablished to ensure the binary tree structure is maintained. For some deletions, this means the tree must be rearranged. In general, you will encounter one of three cases when trying to delete a node:",
        "Leaf Node: The target to delete has zero children.",
        "One Child: The target to delete only has one child.",
        "Two Children: The target to delete has two child nodes.",
        "Removing a leaf node is easy, we simply remove it. Deleting a node with one child is also relatively easy, we simply remove it and link its parent to child of the node we deleted. Removing a node with two children is more difficult, however, because this creates two child nodes that need to be reconnected to the parent tree. We'll see how to deal with this case in the third challenge. Additionally, you need to be mindful of some edge cases when handling deletion. What if the tree is empty? What if the node to delete is the root node? What if there are only two elements in the tree? For now, let's handle the first case where we delete a leaf node.",
        "Instructions: Create a method on our binary tree called <code>remove</code>. We'll build the logic for our deletion operation in here. First, you'll want to create a function within remove that finds the node we are trying to delete in the current tree. If the node is not present in the tree, <code>remove</code> should return <code>null</code>. Now, if the target node is a leaf node with no children, then the parent reference to it should be set to <code>null</code>. This effectively deletes the node from the tree. To do this, you will have to keep track of the parent of the node we are trying to delete as well. It will also be useful to create a way to track the number of children the target node has, as this will determine which case our deletion falls under.",
        "We will handle the second and third cases in the next challenges. Good luck!"
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>remove</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.remove == 'function')})(), 'The binary search tree has a method called <code>remove</code>.');"
        },
        {
          "text":
            "Trying to remove an element that does not exist returns <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; return (test.remove(100) == null); })(), 'Trying to remove an element that does not exist returns <code>null</code>.');"
        },
        {
          "text":
            "If the root node has no children, deleting it sets the root to <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(500); test.remove(500); return (test.inorder() == null); })(), 'If the root node has no children, deleting it sets the root to <code>null</code>.');"
        },
        {
          "text":
            "The <code>remove</code> method removes leaf nodes from the tree",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(5); test.add(3); test.add(7); test.add(6); test.add(10); test.add(12); test.remove(3); test.remove(12); test.remove(10); return (test.inorder().join('') == '567'); })(), 'The <code>remove</code> method removes leaf nodes from the tree');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\n\nfunction BinarySearchTree() {\n    this.root = null;\n    // case 1: target has no children, change code below this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    },\n    inorder: function() {\n        if (this.root == null) {\n          return null;\n        } else {\n          var result = new Array();\n          function traverseInOrder(node) {\n              if (node.left != null) {\n                  traverseInOrder(node.left);\n              };\n              result.push(node.value);\n              if (node.right != null) {\n                  traverseInOrder(node.right);\n              };\n          }\n          traverseInOrder(this.root);\n          return result;\n        };\n    },    \n    isBinarySearchTree() {\n        if (this.root == null) {\n            return null;\n        } else {\n            var check = true;\n            function checkTree(node) {\n                if (node.left != null) {\n                    var left = node.left;\n                    if (left.value > node.value) {\n                        check = false;\n                    } else {\n                        checkTree(left);\n                    }\n                }\n                if (node.right != null) {\n                    var right = node.right;\n                    if (right.value < node.value) {\n                        check = false;\n                    } else {\n                        checkTree(right);\n                    };\n                };\n            };\n            checkTree(this.root);\n            return check;\n        }\n    }\n};"
        }
      },
      "name": "Delete a Leaf Node in a Binary Search Tree",
      "dashedName": "delete-a-leaf-node-in-a-binary-search-tree"
    },
    {
      "id": "587d8258367417b2b2512c81",
      "description": [
        "Now that we can delete leaf nodes let's move on to the second case: deleting a node with one child. For this case, say we have a tree with the following nodes 1 — 2 — 3 where 1 is the root. To delete 2, we simply need to make the right reference in 1 point to 3. More generally to delete a node with only one child, we make that node's parent reference the next node in the tree.",
        "Instructions: We've provided some code in our <code>remove</code> method that accomplishes the tasks from the last challenge. We find the target to delete and its parent and define the number of children the target node has. Let's add the next case here for target nodes with only one child. Here, we'll have to determine if the single child is a left or right branch in the tree and then set the correct reference in the parent to point to this node. In addition, let's account for the case where the target is the root node (this means the parent node will be <code>null</code>). Feel free to replace all the starter code with your own as long as it passes the tests."
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>remove</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.remove == 'function')})(), 'The binary search tree has a method called <code>remove</code>.');"
        },
        {
          "text":
            "Trying to remove an element that does not exist returns <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; return (test.remove(100) == null); })(), 'Trying to remove an element that does not exist returns <code>null</code>.');"
        },
        {
          "text":
            "If the root node has no children, deleting it sets the root to <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(500); test.remove(500); return (test.inorder() == null); })(), 'If the root node has no children, deleting it sets the root to <code>null</code>.');"
        },
        {
          "text":
            "The <code>remove</code> method removes leaf nodes from the tree",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(5); test.add(3); test.add(7); test.add(6); test.add(10); test.add(12); test.remove(3); test.remove(12); test.remove(10); return (test.inorder().join('') == '567'); })(), 'The <code>remove</code> method removes leaf nodes from the tree');"
        },
        {
          "text":
            "The <code>remove</code> method removes nodes with one child.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(-1); test.add(3); test.add(7); test.add(16); test.remove(16); test.remove(7); test.remove(3); return (test.inorder().join('') == '-1'); })(), 'The <code>remove</code> method removes nodes with one child.');"
        },
        {
          "text":
            "Removing the root in a tree with two nodes sets the second to be the root.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(15); test.add(27); test.remove(15); return (test.inorder().join('') == '27'); })(), 'Removing the root in a tree with two nodes sets the second to be the root.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\n\nfunction BinarySearchTree() {\n  this.root = null;\n  this.remove = function(value) {\n    if (this.root === null) {\n      return null;\n    }\n    var target;\n    var parent = null;\n    // find the target value and its parent\n    (function findValue(node = this.root) {\n      if (value == node.value) {\n        target = node;\n      } else if (value < node.value && node.left !== null) {\n        parent = node;\n        return findValue(node.left);\n      } else if (value < node.value && node.left === null) {\n        return null;\n      } else if (value > node.value && node.right !== null) {\n        parent = node;\n        return findValue(node.right);\n      } else {\n        return null;\n      }\n    }).bind(this)();\n    if (target === null) {\n      return null;\n    }\n    // count the children of the target to delete\n    var children = (target.left !== null ? 1 : 0) + (target.right !== null ? 1 : 0);\n    // case 1: target has no children\n    if (children === 0) {\n      if (target == this.root) {\n        this.root = null;\n      }\n      else {\n        if (parent.left == target) {\n          parent.left = null;\n        } else {\n          parent.right = null;\n        }\n      }\n    }\n    // case 2: target has one child, change code below this line\n  };\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    },\n    inorder: function() {\n        if (this.root == null) {\n          return null;\n        } else {\n          var result = new Array();\n          function traverseInOrder(node) {\n              if (node.left != null) {\n                  traverseInOrder(node.left);\n              };\n              result.push(node.value);\n              if (node.right != null) {\n                  traverseInOrder(node.right);\n              };\n          }\n          traverseInOrder(this.root);\n          return result;\n        };\n    },    \n    isBinarySearchTree() {\n        if (this.root == null) {\n            return null;\n        } else {\n            var check = true;\n            function checkTree(node) {\n                if (node.left != null) {\n                    var left = node.left;\n                    if (left.value > node.value) {\n                        check = false;\n                    } else {\n                        checkTree(left);\n                    }\n                }\n                if (node.right != null) {\n                    var right = node.right;\n                    if (right.value < node.value) {\n                        check = false;\n                    } else {\n                        checkTree(right);\n                    };\n                };\n            };\n            checkTree(this.root);\n            return check;\n        }\n    }\n};"
        }
      },
      "name": "Delete a Node with One Child in a Binary Search Tree",
      "dashedName": "delete-a-node-with-one-child-in-a-binary-search-tree"
    },
    {
      "id": "587d8258367417b2b2512c82",
      "description": [
        "Removing nodes that have two children is the hardest case to implement. Removing a node like this produces two subtrees that are no longer connected to the original tree structure. How can we reconnect them? One method is to find the smallest value in the right subtree of the target node and replace the target node with this value. Selecting the replacement in this way ensures that it is greater than every node in the left subtree it becomes the new parent of but also less than every node in the right subtree it becomes the new parent of.",
        "Once this replacement is made the replacement node must be removed from the right subtree. Even this operation is tricky because the replacement may be a leaf or it may itself be the parent of a right subtree. If it is a leaf we must remove its parent's reference to it. Otherwise, it must be the right child of the target. In this case, we must replace the target value with the replacement value and make the target reference the replacement's right child.",
        "Instructions: Let's finish our <code>remove</code> method by handling the third case. We've provided some code again for the first two cases. Add some code now to handle target nodes with two children. Any edge cases to be aware of? What if the tree has only three nodes? Once you are finished this will complete our deletion operation for binary search trees. Nice job, this is a pretty hard problem!"
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>remove</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.remove == 'function')})(), 'The binary search tree has a method called <code>remove</code>.');"
        },
        {
          "text":
            "Trying to remove an element that does not exist returns <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.remove == 'function') ? (test.remove(100) == null) : false})(), 'Trying to remove an element that does not exist returns <code>null</code>.');"
        },
        {
          "text":
            "If the root node has no children, deleting it sets the root to <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; test.add(500); test.remove(500); return (typeof test.remove == 'function') ? (test.inorder() == null) : false})(), 'If the root node has no children, deleting it sets the root to <code>null</code>.');"
        },
        {
          "text":
            "The <code>remove</code> method removes leaf nodes from the tree",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; test.add(5); test.add(3); test.add(7); test.add(6); test.add(10); test.add(12); test.remove(3); test.remove(12); test.remove(10); return (typeof test.remove == 'function') ? (test.inorder().join('') == '567') : false})(), 'The <code>remove</code> method removes leaf nodes from the tree');"
        },
        {
          "text":
            "The <code>remove</code> method removes nodes with one child.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(-1); test.add(3); test.add(7); test.add(16); test.remove(16); test.remove(7); test.remove(3); return (test.inorder().join('') == '-1'); })(), 'The <code>remove</code> method removes nodes with one child.');"
        },
        {
          "text":
            "Removing the root in a tree with two nodes sets the second to be the root.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(15); test.add(27); test.remove(15); return (test.inorder().join('') == '27'); })(), 'Removing the root in a tree with two nodes sets the second to be the root.');"
        },
        {
          "text":
            "The <code>remove</code> method removes nodes with two children while maintaining the binary search tree structure.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(1); test.add(4); test.add(3); test.add(7); test.add(9); test.add(11); test.add(14); test.add(15); test.add(19); test.add(50); test.remove(9); if (!test.isBinarySearchTree()) { return false; }; test.remove(11); if (!test.isBinarySearchTree()) { return false; }; test.remove(14); if (!test.isBinarySearchTree()) { return false; }; test.remove(19); if (!test.isBinarySearchTree()) { return false; }; test.remove(3); if (!test.isBinarySearchTree()) { return false; }; test.remove(50); if (!test.isBinarySearchTree()) { return false; }; test.remove(15); if (!test.isBinarySearchTree()) { return false; }; return (test.inorder().join('') == '147'); })(), 'The <code>remove</code> method removes nodes with two children while maintaining the binary search tree structure.');"
        },
        {
          "text": "The root can be removed on a tree of three nodes.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.remove !== 'function') { return false; }; test.add(100); test.add(50); test.add(300); test.remove(100); return (test.inorder().join('') == 50300); })(), 'The root can be removed on a tree of three nodes.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\n\nfunction BinarySearchTree() {\n  this.root = null;\n  this.remove = function(value) {\n    if (this.root === null) {\n      return null;\n    }\n    var target;\n    var parent = null;\n    // find the target value and its parent\n    (function findValue(node = this.root) {\n      if (value == node.value) {\n        target = node;\n      } else if (value < node.value && node.left !== null) {\n        parent = node;\n        return findValue(node.left);\n      } else if (value < node.value && node.left === null) {\n        return null;\n      } else if (value > node.value && node.right !== null) {\n        parent = node;\n        return findValue(node.right);\n      } else {\n        return null;\n      }\n    }).bind(this)();\n    if (target === null) {\n      return null;\n    }\n    // count the children of the target to delete\n    var children = (target.left !== null ? 1 : 0) + (target.right !== null ? 1 : 0);\n    // case 1: target has no children\n    if (children === 0) {\n      if (target == this.root) {\n        this.root = null;\n      }\n      else {\n        if (parent.left == target) {\n          parent.left = null;\n        } else {\n          parent.right = null;\n        }\n      }\n    }\n    // case 2: target has one child\n    else if (children == 1) {\n      var newChild = (target.left !== null) ? target.left : target.right;\n      if (parent === null) {\n        target.value = newChild.value;\n        target.left = null;\n        target.right = null;\n      } else if (newChild.value < parent.value) {\n        parent.left = newChild;\n      } else {\n        parent.right = newChild;\n      }\n      target = null;\n    }\n    // case 3: target has two children, change code below this line\n  };\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    },\n    inorder: function() {\n        if (this.root == null) {\n          return null;\n        } else {\n          var result = new Array();\n          function traverseInOrder(node) {\n              if (node.left != null) {\n                  traverseInOrder(node.left);\n              };\n              result.push(node.value);\n              if (node.right != null) {\n                  traverseInOrder(node.right);\n              };\n          }\n          traverseInOrder(this.root);\n          return result;\n        };\n    },    \n    isBinarySearchTree() {\n        if (this.root == null) {\n            return null;\n        } else {\n            var check = true;\n            function checkTree(node) {\n                if (node.left != null) {\n                    var left = node.left;\n                    if (left.value > node.value) {\n                        check = false;\n                    } else {\n                        checkTree(left);\n                    }\n                }\n                if (node.right != null) {\n                    var right = node.right;\n                    if (right.value < node.value) {\n                        check = false;\n                    } else {\n                        checkTree(right);\n                    };\n                };\n            };\n            checkTree(this.root);\n            return check;\n        }\n    }\n};"
        }
      },
      "name": "Delete a Node with Two Children in a Binary Search Tree",
      "dashedName": "delete-a-node-with-two-children-in-a-binary-search-tree"
    },
    {
      "id": "587d8259367417b2b2512c83",
      "description": [
        "Here will we create a function to invert a binary tree. Given a binary tree, we want to produce a new tree that is equivalently the mirror image of this tree. Running an inorder traversal on an inverted tree will explore the nodes in reverse order when compared to the inorder traversal of the original tree. Write a method to do this called <code>invert</code> on our binary tree. Calling this method should invert the current tree structure. Ideally, we would like to do this in-place in linear time. That is, we only visit each node once and we modify the existing tree structure as we go, without using any additional memory. Good luck!"
      ],
      "tests": [
        {
          "text": "The <code>BinarySearchTree</code> data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() }; return (typeof test == 'object')})(), 'The <code>BinarySearchTree</code> data structure exists.');"
        },
        {
          "text":
            "The binary search tree has a method called <code>invert</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; return (typeof test.invert == 'function')})(), 'The binary search tree has a method called <code>invert</code>.');"
        },
        {
          "text":
            "The <code>invert</code> method correctly inverts the tree structure.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.invert !== 'function') { return false; }; test.add(4); test.add(1); test.add(7); test.add(87); test.add(34); test.add(45); test.add(73); test.add(8); test.invert(); return test.inorder().join('') == '877345348741'; })(), 'The <code>invert</code> method correctly inverts the tree structure.');"
        },
        {
          "text": "Inverting an empty tree returns <code>null</code>.",
          "testString":
            "assert((function() { var test = false; if (typeof BinarySearchTree !== 'undefined') { test = new BinarySearchTree() } else { return false; }; if (typeof test.invert !== 'function') { return false; }; return (test.invert() == null); })(), 'Inverting an empty tree returns <code>null</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n}\nfunction BinarySearchTree() {\n    this.root = null;\n    // change code below this line\n    // change code above this line\n}",
          "head": "",
          "tail":
            "BinarySearchTree.prototype = {\n    add: function(value) {\n        var node = this.root;\n        if (node == null) {\n          this.root = new Node(value);\n          return;\n        } else {\n            function searchTree(node) {\n                if (value < node.value) {\n                    if (node.left == null) {\n                        node.left = new Node(value);\n                        return;\n                    } else if (node.left != null) {\n                        return searchTree(node.left)\n                    };\n                } else if (value > node.value) {\n                    if (node.right == null) {\n                        node.right = new Node(value);\n                        return;\n                    } else if (node.right != null) {\n                        return searchTree(node.right);\n                    };\n                } else {\n                    return null;\n                };\n            };\n            return searchTree(node);\n        };\n    },\n    inorder: function() {\n        if (this.root == null) {\n          return null;\n        } else {\n          var result = new Array();\n          function traverseInOrder(node) {\n              if (node.left != null) {\n                  traverseInOrder(node.left);\n              };\n              result.push(node.value);\n              if (node.right != null) {\n                  traverseInOrder(node.right);\n              };\n          }\n          traverseInOrder(this.root);\n          return result;\n        };\n    }\n};"
        }
      },
      "name": "Invert a Binary Tree",
      "dashedName": "invert-a-binary-tree"
    },
    {
      "id": "587d8259367417b2b2512c84",
      "description": [
        "Here we will move on from binary search trees and take a look at another type of tree structure called a trie. A trie is an ordered search tree commonly used to hold strings, or more generically associative arrays or dynamic datasets in which the keys are strings. They are very good at storing sets of data when many keys will have overlapping prefixes, for example, all the words in a dictionary.",
        "Unlike a binary tree, nodes are not associated with actual values. Instead, the path to a node represents a specific key. For instance, if we wanted to store the string code in a trie, we would have four nodes, one for each letter: c — o — d — e. Following that path through all these nodes will then create code as a string — that path is the key we stored. Then, if we wanted to add the string coding, it would share the first three nodes of code before branching away after the d. In this way, large datasets can be stored very compactly. In addition, search can be very quick because it is effectively limited to the length of the string you are storing. Furthermore, unlike binary trees a node can store any number of child nodes.",
        "As you might have guessed from the above example, some metadata is commonly stored at nodes that hold the end of a key so that on later traversals that key can still be retrieved. For instance, if we added codes in our example above we would need some way to know that the e in code represents the end of a key that was previously entered. Otherwise, this information would effectively be lost when we add codes.",
        "Instructions: Let's create a trie to store words. It will accept words through an add method and store these in a trie data structure. It will also allow us to query if a given string is a word with an isWord method, and retrieve all the words entered into the trie with a print method. isWord should return a boolean value and print should return an array of all these words as string values.",
        "In order for us to verify that this data structure is implemented correctly, we've provided a Node structure for each node in the tree. Each node will be an object with a keys property which is a JavaScript Map object. This will hold the individual letters that are valid keys of each node. We've also created an end property on the nodes that can be set to true if the node represents the termination of a word."
      ],
      "tests": [
        {
          "text": "The Trie has an add method.",
          "testString":
            "assert((function testTrie() { var test = false; if (typeof Trie !== 'undefined') { test = new Trie() } else { return false; }; return (typeof test.add == 'function') }()), 'The Trie has an add method.');"
        },
        {
          "text": "The Trie has a print method.",
          "testString":
            "assert((function testTrie() { var test = false; if (typeof Trie !== 'undefined') { test = new Trie() } else { return false; }; return (typeof test.print == 'function') }()), 'The Trie has a print method.');"
        },
        {
          "text": "The Trie has an isWord method.",
          "testString":
            "assert((function testTrie() { var test = false; if (typeof Trie !== 'undefined') { test = new Trie() } else { return false; }; return (typeof test.isWord == 'function') }()), 'The Trie has an isWord method.');"
        },
        {
          "text":
            "The print method returns all items added to the trie as strings in an array.",
          "testString":
            "assert((function testTrie() { var test = false; if (typeof Trie !== 'undefined') { test = new Trie() } else { return false; }; test.add('jump'); test.add('jumps'); test.add('jumped'); test.add('house'); test.add('mouse'); var added = test.print(); return (added.indexOf('jump') != -1 && added.indexOf('jumps') != -1 && added.indexOf('jumped') != -1 && added.indexOf('house') != -1 && added.indexOf('mouse') != -1 && added.length == 5); }()), 'The print method returns all items added to the trie as strings in an array.');"
        },
        {
          "text":
            "The isWord method returns true only for words added to the trie and false for all other words.",
          "testString":
            "assert((function testTrie() { var test = false; if (typeof Trie !== 'undefined') { test = new Trie() } else { return false; }; test.add('hop'); test.add('hops'); test.add('hopped'); test.add('hoppy'); test.add('hope'); return (test.isWord('hop') && !test.isWord('ho') && test.isWord('hopped') && !test.isWord('hopp') && test.isWord('hoppy') && !test.isWord('hoping')); }()), 'The isWord method returns true only for words added to the trie and false for all other words.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nvar Node = function() {\n  this.keys = new Map();\n  this.end = false;\n  this.setEnd = function() {\n    this.end = true;\n  };\n  this.isEnd = function() {\n    return this.end;\n  };\n};\nvar Trie = function() {\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Create a Trie Search Tree",
      "dashedName": "create-a-trie-search-tree"
    },
    {
      "id": "587d825a367417b2b2512c8a",
      "description": [
        "Now we will move on to another tree data structure, the binary heap. A binary heap is a partially ordered binary tree which satisfies the heap property. The heap property specifies a relationship between parent and child nodes. You may have a max heap, in which all parent nodes are greater than or equal to their child nodes, or a min heap, in which the reverse is true. Binary heaps are also complete binary trees. This means that all levels of the tree are fully filled and if the last level is partially filled it is filled from left to right.",
        "While binary heaps may be implemented as tree structures with nodes that contain left and right references, the partial ordering according to the heap property allows us to represent the heap with an array. The parent-children relationship is what we're interested in and with simple arithmetic we can compute the children of any parent and the parent of any child node.",
        "For instance, consider this array representation of a binary min heap:",
        "<code>[ 6, 22, 30, 37, 63, 48, 42, 76 ]</code>",
        "The root node is the first element, 6. Its children are 22 and 30. If we look at the relationship between the array indices of these values, for index i the children are 2 * i + 1 and 2 * i + 2. Similarly, the element at index 0 is the parent of these two children at indices 1 and 2. More generally, we can find the parent of a node at any index with the following: (i - 1) / 2. These patterns will hold true as the binary tree grows to any size. Finally, we can make a slight adjustment to make this arithmetic even easier by skipping the first element in the array. Doing this creates the following relationship for any element at a given index i:",
        "Example Array representation:",
        "<code>[ null, 6, 22, 30, 37, 63, 48, 42, 76 ]</code>",
        "An element's left child: i * 2",
        "An element's right child: i * 2 + 1",
        "An element's parent: i / 2",
        "Once you wrap your head around the math, using an array representation is very useful because node locations can be quickly determined with this arithmetic and memory usage is diminished because you don't need to maintain references to child nodes.",
        "Instructions: Here we will create a max heap. Start by just creating an insert method which adds elements to our heap. During insertion, it is important to always maintain the heap property. For a max heap this means the root element should always have the greatest value in the tree and all parent nodes should be greater than their children. For an array implementation of a heap, this is typically accomplished in three steps:",
        "Add the new element to the end of the array.",
        "If the element is larger than its parents, switch them.",
        "Continue switching until the new element is either smaller than its parent or you reach the root of the tree.",
        "Finally, add a print method which returns an array of all the items that have been added to the heap."
      ],
      "tests": [
        {
          "text": "The MaxHeap data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() }; return (typeof test == 'object')})(), 'The MaxHeap data structure exists.');"
        },
        {
          "text": "MaxHeap has a method called insert.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; return (typeof test.insert == 'function')})(), 'MaxHeap has a method called insert.');"
        },
        {
          "text": "MaxHeap has a method called print.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; return (typeof test.print == 'function')})(), 'MaxHeap has a method called print.');"
        },
        {
          "text":
            "The insert method adds elements according to the max heap property.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; test.insert(50); test.insert(100); test.insert(700); test.insert(32); test.insert(51); let result = test.print(); return ((result.length == 5) ? result[0] == 700 : result[1] == 700) })(), 'The insert method adds elements according to the max heap property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var MaxHeap = function() {\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Insert an Element into a Max Heap",
      "dashedName": "insert-an-element-into-a-max-heap"
    },
    {
      "id": "587d825b367417b2b2512c8b",
      "description": [
        "Now that we can add elements to our heap let's see how we can remove elements. Removing and inserting elements both require similar logic. In a max heap you will usually want to remove the greatest value, so this involves simply extracting it from the root of our tree. This will break the heap property of our tree, so we must reestablish it in some way. Typically, for a max heap this is done in the following way:",
        "Move the last element in the heap into the root position.",
        "If either child of the root is greater than it, swap the root with the child of greater value.",
        "Continue swapping until the parent is greater than both children, or you reach the last level in the tree.",
        "Instructions: Add a method to our max heap called remove. This method should return the greatest value that has been added to our max heap and remove it from the heap. It should also reorder the heap so the heap property is maintained. After removing an element, the next greatest element remaining in the heap should become the root. Add your insert method again here as well."
      ],
      "tests": [
        {
          "text": "The MaxHeap data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() }; return (typeof test == 'object')})(), 'The MaxHeap data structure exists.');"
        },
        {
          "text": "MaxHeap has a method called print.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; return (typeof test.print == 'function')})(), 'MaxHeap has a method called print.');"
        },
        {
          "text": "MaxHeap has a method called insert.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; return (typeof test.insert == 'function')})(), 'MaxHeap has a method called insert.');"
        },
        {
          "text": "MaxHeap has a method called remove.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; return (typeof test.remove == 'function')})(), 'MaxHeap has a method called remove.');"
        },
        {
          "text":
            "The remove method removes the greatest element from the max heap while maintaining the max heap property.",
          "testString":
            "assert((function() { var test = false; if (typeof MaxHeap !== 'undefined') { test = new MaxHeap() } else { return false; }; test.insert(30); test.insert(300); test.insert(500); test.insert(10); let result = []; result.push(test.remove()); result.push(test.remove()); result.push(test.remove()); result.push(test.remove());  return (result.join('') == '5003003010') })(), 'The remove method removes the greatest element from the max heap while maintaining the max heap property.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "var MaxHeap = function() {\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Remove an Element from a Max Heap",
      "dashedName": "remove-an-element-from-a-max-heap"
    },
    {
      "id": "587d825b367417b2b2512c8c",
      "description": [
        "Now that we can add and remove elements let's see some of the applications heaps can be used for. Heaps are commonly used to implement priority queues because they always store an item of greatest or least value in first position. In addition, they are used to implement a sorting algorithm called heap sort. We'll see how to do this here. Heap sort uses a min heap, the reverse of a max heap. A min heap always stores the element of least value in the root position.",
        "Heap sort works by taking an unsorted array, adding each item in the array into a min heap, and then extracting every item out of the min heap into a new array. The min heap structure ensures that the new array will contain the original items in least to greatest order. This is one of the most efficient sorting algorithms with average and worst case performance of O(nlog(n)).",
        "Instructions: Let's implement heap sort with a min heap. Feel free to adapt your max heap code here. Create an object MinHeap with insert, remove, and sort methods. The sort method should return an array of all the elements in the min heap sorted from smallest to largest."
      ],
      "tests": [
        {
          "text": "The MinHeap data structure exists.",
          "testString":
            "assert((function() { var test = false; if (typeof MinHeap !== 'undefined') { test = new MinHeap() }; return (typeof test == 'object')})(), 'The MinHeap data structure exists.');"
        },
        {
          "text": "MinHeap has a method called insert.",
          "testString":
            "assert((function() { var test = false; if (typeof MinHeap !== 'undefined') { test = new MinHeap() } else { return false; }; return (typeof test.insert == 'function')})(), 'MinHeap has a method called insert.');"
        },
        {
          "text": "MinHeap has a method called remove.",
          "testString":
            "assert((function() { var test = false; if (typeof MinHeap !== 'undefined') { test = new MinHeap() } else { return false; }; return (typeof test.remove == 'function')})(), 'MinHeap has a method called remove.');"
        },
        {
          "text": "MinHeap has a method called sort.",
          "testString":
            "assert((function() { var test = false; if (typeof MinHeap !== 'undefined') { test = new MinHeap() } else { return false; }; return (typeof test.sort == 'function')})(), 'MinHeap has a method called sort.');"
        },
        {
          "text":
            "The sort method returns an array containing all items added to the min heap in sorted order.",
          "testString":
            "assert((function() { var test = false; if (typeof MinHeap !== 'undefined') { test = new MinHeap() } else { return false; }; test.insert(3); test.insert(12); test.insert(5); test.insert(10); test.insert(1); test.insert(27); test.insert(42); test.insert(57); test.insert(5); var result = test.sort(); return (isSorted(result)); })(), 'The sort method returns an array containing all items added to the min heap in sorted order.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// check if array is sorted\nfunction isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n}\n// generate a randomly filled array\nvar array = new Array();\n(function createArray(size = 5) {\n  array.push(+(Math.random() * 100).toFixed(0));\n  return (size > 1) ? createArray(size - 1) : undefined;\n})(25);\nvar MinHeap = function() {\n  // change code below this line\n  // change code above this line\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Implement Heap Sort with a Min Heap",
      "dashedName": "implement-heap-sort-with-a-min-heap"
    },
    {
      "id": "587d8256367417b2b2512c77",
      "description": [
        "Graphs can be represented in different ways. Here we describe one way, which is called an <dfn>adjacency list</dfn>.",
        "An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to. Below is a representation of an adjacency list.",
        "<blockquote>Node1: Node2, Node3<br>Node2: Node1<br>Node3: Node1</blockquote>",
        "Above is an undirected graph because <code>Node1</code> is connected to <code>Node2</code> and <code>Node3</code>, and that information is consistent with the connections <code>Node2</code> and <code>Node3</code> show. An adjacency list for a directed graph would mean each row of the list shows direction. If the above was directed, then <code>Node2: Node1</code> would mean there the directed edge is pointing from <code>Node2</code> towards <code>Node1</code>.",
        "We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object.",
        "<blockquote>var undirectedG = {<br>  Node1: [\"Node2\", \"Node3\"],<br>  Node2: [\"Node1\"],<br>  Node3: [\"Node1\"]<br>};</blockquote>",
        "This can also be more simply represented as an array where the nodes just have numbers rather than string labels.",
        "<blockquote>var undirectedGArr = [<br>  [1, 2], # Node1<br>  [0],    # Node2<br>  [0]     # Node3<br>];</blockquote>",
        "<hr>",
        "Create a social network as an undirected graph with 4 nodes/people named <code>James</code>, <code>Jill</code>, <code>Jenny</code>, and <code>Jeff</code>. There are edges/relationships between James and Jeff, Jill and Jenny, and Jeff and Jenny."
      ],
      "tests": [
        {
          "text":
            "<code>undirectedAdjList</code> should only contain four nodes.",
          "testString":
            "assert(Object.keys(undirectedAdjList).length === 4, '<code>undirectedAdjList</code> should only contain four nodes.');"
        },
        {
          "text":
            "There should be an edge between <code>Jeff</code> and <code>James</code>.",
          "testString":
            "assert(undirectedAdjList.James.indexOf(\"Jeff\") !== -1 && undirectedAdjList.Jeff.indexOf(\"James\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>James</code>.');"
        },
        {
          "text":
            "There should be an edge between <code>Jill</code> and <code>Jenny</code>.",
          "testString":
            "assert(undirectedAdjList.Jill.indexOf(\"Jenny\") !== -1 && undirectedAdjList.Jill.indexOf(\"Jenny\") !== -1, 'There should be an edge between <code>Jill</code> and <code>Jenny</code>.');"
        },
        {
          "text":
            "There should be an edge between <code>Jeff</code> and <code>Jenny</code>.",
          "testString":
            "assert(undirectedAdjList.Jeff.indexOf(\"Jenny\") !== -1 && undirectedAdjList.Jenny.indexOf(\"Jeff\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>Jenny</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var undirectedAdjList = {\n};",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjacency List",
      "dashedName": "adjacency-list"
    },
    {
      "id": "587d8256367417b2b2512c78",
      "description": [
        "Another way to represent a graph is to put it in an <dfn>adjacency matrix</dfn>.",
        "An <dfn>adjacency matrix</dfn> is a two-dimensional (2D) array where each nested array has the same number of elements as the outer array. In other words, it is a matrix or grid of numbers, where the numbers represent the edges. Zeros mean there is no edge or relationship.",
        "<blockquote>    1 2 3<br>   ------<br>1 | 0 1 1<br>2 | 1 0 0<br>3 | 1 0 0</blockquote>",
        "Above is a very simple, undirected graph where you have three nodes, where the first node is connected to the second and third node. <strong>Note</strong>: The numbers to the top and left of the matrix are just labels for the nodes.",
        "Below is a JavaScript implementation of the same thing.",
        "<blockquote>var adjMat = [<br>  [0, 1, 1],<br>  [1, 0, 0],<br>  [1, 0, 0]<br>];</blockquote>",
        "Unlike an adjacency list, each \"row\" of the matrix has to have the same number of elements as nodes in the graph. Here we have a three by three matrix, which means we have three nodes in our graph.",
        "A directed graph would look similar. Below is a graph where the first node has an edge pointing toward the second node, and then the second node has an edge pointing to the third node.",
        "<blockquote>var adjMatDirected = [<br>  [0, 1, 0],<br>  [0, 0, 1],<br>  [0, 0, 0]<br>];</blockquote>",
        "Graphs can also have <dfn>weights</dfn> on their edges. So far, we have <dfn>unweighted</dfn> edges where just the presence and lack of edge is binary (<code>0</code> or <code>1</code>). You can have different weights depending on your application.",
        "<hr>",
        "Create an adjacency matrix of an undirected graph with five nodes. This matrix should be in a multi-dimensional array. These five nodes have relationships between the first and fourth node, the first and third node, the third and fifth node, and the fourth and fifth node. All edge weights are one."
      ],
      "tests": [
        {
          "text":
            "<code>undirectedAdjList</code> should only contain five nodes.",
          "testString":
            "assert((adjMatUndirected.length === 5) && adjMatUndirected.map(function(x) { return x.length === 5 }).reduce(function(a, b) { return a && b }) , '<code>undirectedAdjList</code> should only contain five nodes.');"
        },
        {
          "text": "There should be an edge between the first and fourth node.",
          "testString":
            "assert((adjMatUndirected[0][3] === 1) && (adjMatUndirected[3][0] === 1), 'There should be an edge between the first and fourth node.');"
        },
        {
          "text": "There should be an edge between the first and third node.",
          "testString":
            "assert((adjMatUndirected[0][2] === 1) && (adjMatUndirected[2][0] === 1), 'There should be an edge between the first and third node.');"
        },
        {
          "text": "There should be an edge between the third and fifth node.",
          "testString":
            "assert((adjMatUndirected[2][4] === 1) && (adjMatUndirected[4][2] === 1), 'There should be an edge between the third and fifth node.');"
        },
        {
          "text": "There should be an edge between the fourth and fifth node.",
          "testString":
            "assert((adjMatUndirected[3][4] === 1) && (adjMatUndirected[4][3] === 1), 'There should be an edge between the fourth and fifth node.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var adjMatUndirected = [\n];",
          "head": "",
          "tail": ""
        }
      },
      "name": "Adjacency Matrix",
      "dashedName": "adjacency-matrix"
    },
    {
      "id": "587d8256367417b2b2512c79",
      "description": [
        "Yet another way to represent a graph is to put it in an <dfn>incidence matrix.</dfn>",
        "An <dfn>incidence matrix</dfn> is a two-dimensional (2D) array. Generally speaking, an incidence matrix relates two different classes of objects between its two dimensions. This kind of matrix is similar to an adjacency matrix. However, the rows and columns mean something else here.",
        "In graphs, we have edges and nodes. These will be our \"two different classes of objects\". This matrix will have the rows be the nodes and columns be the edges. This means that we can have an uneven number of rows and columns.",
        "Each column will represent a unique edge. Also, each edge connects two nodes. To show that there is an edge between two nodes, you will put a 1 in the two rows of a particular column. Below is a 3 node graph with one edge between node 1 and node 3.",
        "<blockquote>    1<br>   ---<br>1 | 1<br>2 | 0<br>3 | 1</blockquote>",
        "Here is an example of an <code>incidence matrix</code> with 4 edges and 4 nodes. Remember, the columns are the edges and rows are the nodes themselves.",
        "<blockquote>    1 2 3 4<br>   --------<br>1 | 0 1 1 1<br>2 | 1 1 0 0<br>3 | 1 0 0 1<br>4 | 0 0 1 0</blockquote>",
        "Below is a JavaScript implementation of the same thing.",
        "<blockquote>var incMat = [<br>  [0, 1, 1, 1],<br>  [1, 1, 0, 0],<br>  [1, 0, 0, 1],<br>  [0, 0, 1, 0]<br>];</blockquote>",
        "To make a directed graph, use <code>-1</code> for an edge leaving a particular node and <code>1</code> for an edge entering a node.",
        "<blockquote>var incMatDirected = [<br>  [ 0, -1,  1, -1],<br>  [-1,  1,  0,  0],<br>  [ 1,  0,  0,  1],<br>  [ 0,  0, -1,  0]<br>];</blockquote>",
        "Graphs can also have <dfn>weights</dfn> on their edges. So far, we have <dfn>unweighted</dfn> edges where just the presence and lack of edge is binary (<code>0</code> or <code>1</code>). You can have different weights depending on your application. A different weight is represented as numbers greater than 1.",
        "<hr>",
        "Create an incidence matrix of an undirected graph with five nodes and four edges. This matrix should be in a multi-dimensional array.",
        "These five nodes have relationships following relationships. The first edge is between the first and second node. The second edge is between the second and third node. The third edge is between the third and fifth node. And four edge is between the fourth and second node. All edge weights are one and the edge order matters."
      ],
      "tests": [
        {
          "text":
            "<code>incMatUndirected</code> should only contain five nodes.",
          "testString":
            "assert((incMatUndirected.length === 5) && incMatUndirected.map(function(x) { return x.length === 4 }).reduce(function(a, b) { return a && b }) , '<code>incMatUndirected</code> should only contain five nodes.');"
        },
        {
          "text":
            "There should be a first edge between the first and second node.",
          "testString":
            "assert((incMatUndirected[0][0] === 1) && (incMatUndirected[1][0] === 1), 'There should be a first edge between the first and second node.');"
        },
        {
          "text":
            "There should be a second edge between the second and third node.",
          "testString":
            "assert((incMatUndirected[1][1] === 1) && (incMatUndirected[2][1] === 1), 'There should be a second edge between the second and third node.');"
        },
        {
          "text":
            "There should be a third edge between the third and fifth node.",
          "testString":
            "assert((incMatUndirected[2][2] === 1) && (incMatUndirected[4][2] === 1), 'There should be a third edge between the third and fifth node.');"
        },
        {
          "text":
            "There should be a fourth edge between the second and fourth node.",
          "testString":
            "assert((incMatUndirected[1][3] === 1) && (incMatUndirected[3][3] === 1), 'There should be a fourth edge between the second and fourth node.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "var incMatUndirected = [\n  \n];",
          "head": "",
          "tail": ""
        }
      },
      "name": "Incidence Matrix",
      "dashedName": "incidence-matrix"
    },
    {
      "id": "587d825c367417b2b2512c90",
      "description": [
        "So far, we've learned different ways of creating representations of graphs. What now? One natural question to have is what are the distances between any two nodes in the graph? Enter <dfn>graph traversal algorithms</dfn>.",
        "<dfn>Traversal algorithms</dfn> are algorithms to traverse or visit nodes in a graph. One type of traversal algorithm is the breadth-first search algorithm.",
        "This algorithm starts at one node, first visits all its neighbors that are one edge away, then goes on to visiting each of their neighbors.",
        "Visually, this is what the algorithm is doing.",
        "<img class='img-responsive' src='https://camo.githubusercontent.com/2f57e6239884a1a03402912f13c49555dec76d06/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f342f34362f416e696d617465645f4246532e676966'>",
        "To implement this algorithm, you'll need to input a graph structure and a node you want to start at.",
        "First, you'll want to be aware of the distances from the start node. This you'll want to start all your distances initially some large number, like <code>Infinity</code>. This gives a reference for the case where a node may not be reachable from your start node.",
        "Next, you'll want to go from the start node to its neighbors. These neighbors are one edge away and at this point you should add one unit of distance to the distances you're keeping track of.",
        "Last, an important data structure that will help implement the breadth-first search algorithm is the queue. This is an array where you can add elements to one end and remove elements from the other end. This is also known as a <dfn>FIFO</dfn> or <dfn>First-In-First-Out</dfn> data structure.",
        "<hr>",
        "Write a function <code>bfs()</code> that takes an adjacency matrix graph (a two-dimensional array) and a node label root as parameters. The node label will just be the integer value of the node between <code>0</code> and <code>n - 1</code>, where <code>n</code> is the total number of nodes in the graph.",
        "Your function will output a JavaScript object key-value pairs with the node and its distance from the root. If the node could not be reached, it should have a distance of <code>Infinity</code>."
      ],
      "tests": [
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return <code>{0: 1, 1: 0, 2: 1, 3: 2}</code>",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]; var results = bfs(graph, 1); return isEquivalent(results, {0: 1, 1: 0, 2: 1, 3: 2})})(), 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return <code>{0: 1, 1: 0, 2: 1, 3: 2}</code>');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>1</code> should return <code>{0: 1, 1: 0, 2: 1, 3: Infinity}</code>",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]; var results = bfs(graph, 1); return isEquivalent(results, {0: 1, 1: 0, 2: 1, 3: Infinity})})(), 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>1</code> should return <code>{0: 1, 1: 0, 2: 1, 3: Infinity}</code>');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return <code>{0: 0, 1: 1, 2: 2, 3: 3}</code>",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]; var results = bfs(graph, 0); return isEquivalent(results, {0: 0, 1: 1, 2: 2, 3: 3})})(), 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return <code>{0: 0, 1: 1, 2: 2, 3: 3}</code>');"
        },
        {
          "text":
            "The input graph <code>[[0, 1], [1, 0]]</code> with a start node of <code>0</code> should return <code>{0: 0, 1: 1}</code>",
          "testString":
            "assert((function() { var graph = [[0, 1], [1, 0]]; var results = bfs(graph, 0); return isEquivalent(results, {0: 0, 1: 1})})(), 'The input graph <code>[[0, 1], [1, 0]]</code> with a start node of <code>0</code> should return <code>{0: 0, 1: 1}</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function bfs(graph, root) {\n  // Distance object returned\n  var nodesLen = {};\n  \n  return nodesLen;\n};\n\nvar exBFSGraph = [\n  [0, 1, 0, 0],\n  [1, 0, 1, 0],\n  [0, 1, 0, 1],\n  [0, 0, 1, 0]\n];\nconsole.log(bfs(exBFSGraph, 3));",
          "head": "",
          "tail":
            "// Source: http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html\nfunction isEquivalent(a, b) {\n    // Create arrays of property names\n    var aProps = Object.getOwnPropertyNames(a);\n    var bProps = Object.getOwnPropertyNames(b);\n    // If number of properties is different,\n    // objects are not equivalent\n    if (aProps.length != bProps.length) {\n        return false;\n    }\n    for (var i = 0; i < aProps.length; i++) {\n        var propName = aProps[i];\n        // If values of same property are not equal,\n        // objects are not equivalent\n        if (a[propName] !== b[propName]) {\n            return false;\n        }\n    }\n    // If we made it this far, objects\n    // are considered equivalent\n    return true;\n}"
        }
      },
      "name": "BreadthFirst Search",
      "dashedName": "breadthfirst-search"
    },
    {
      "id": "587d825d367417b2b2512c96",
      "description": [
        "Similar to <dfn>breadth-first search</dfn>, here we will learn about another graph traversal algorithm called <dfn>depth-first search</dfn>.",
        "Whereas the breadth-first search searches incremental edge lengths away from the source node, <dfn>depth-first search</dfn> first goes down a path of edges as far as it can.",
        "Once it reaches one end of a path, the search will backtrack to the last node with an un-visited edge path and continue searching.",
        "Visually, this is what the algorithm is doing where the top node is the starting point of the search.",
        "<img class='img-responsive' src='https://camo.githubusercontent.com/aaad9e39961daf34d967c616edeb50abf3bf1235/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f372f37662f44657074682d46697273742d5365617263682e676966'>",
        "A simple output of this algorithm is a list of nodes which are reachable from a given node. So when implementing this algorithm, you'll need to keep track of the nodes you visit.",
        "<hr>",
        "Write a function <code>dfs()</code> that takes an undirected, adjacency matrix <code>graph</code> and a node label <code>root</code> as parameters. The node label will just be the numeric value of the node between <code>0</code> and <code>n - 1</code>, where <code>n</code> is the total number of nodes in the graph.",
        "Your function should output an array of all nodes reachable from <code>root</code>."
      ],
      "tests": [
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return an array with <code>0</code>, <code>1</code>, <code>2</code>, and <code>3</code>.",
          "testString":
            "assert.sameMembers((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 1);})(), [0, 1, 2, 3], 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return an array with <code>0</code>, <code>1</code>, <code>2</code>, and <code>3</code>.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return an array with four elements.",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 1);})().length === 4, 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>1</code> should return an array with four elements.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>3</code> should return an array with <code>3</code>.",
          "testString":
            "assert.sameMembers((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]; return dfs(graph, 3);})(), [3], 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>3</code> should return an array with <code>3</code>.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>3</code> should return an array with one element.",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]; return dfs(graph, 3);})().length === 1, 'The input graph <code>[[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]</code> with a start node of <code>3</code> should return an array with one element.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>3</code> should return an array with <code>2</code> and <code>3</code>.",
          "testString":
            "assert.sameMembers((function() { var graph = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 3);})(), [2, 3], 'The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>3</code> should return an array with <code>2</code> and <code>3</code>.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>3</code> should return an array with two elements.",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 3);})().length === 2, 'The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>3</code> should return an array with two elements.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return an array with <code>0</code> and <code>1</code>.",
          "testString":
            "assert.sameMembers((function() { var graph = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 0);})(), [0, 1], 'The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return an array with <code>0</code> and <code>1</code>.');"
        },
        {
          "text":
            "The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return an array with two elements.",
          "testString":
            "assert((function() { var graph = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]; return dfs(graph, 0);})().length === 2, 'The input graph <code>[[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]</code> with a start node of <code>0</code> should return an array with two elements.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function dfs(graph, root) {\n  \n}\n\nvar exDFSGraph = [\n  [0, 1, 0, 0],\n  [1, 0, 1, 0],\n  [0, 1, 0, 1],\n  [0, 0, 1, 0]\n];\nconsole.log(dfs(exDFSGraph, 3));",
          "head": "",
          "tail": ""
        }
      },
      "name": "DepthFirst Search",
      "dashedName": "depthfirst-search"
    },
    {
      "id": "5900f36e1000cf542c50fe80",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>multiplesOf3and5(1000)</code> should return 233168.",
          "testString":
            "assert.strictEqual(multiplesOf3and5(1000), 233168, '<code>multiplesOf3and5(1000)</code> should return 233168.');"
        },
        {
          "text": "<code>multiplesOf3and5(49)</code> should return 543.",
          "testString":
            "assert.strictEqual(multiplesOf3and5(49), 543, '<code>multiplesOf3and5(49)</code> should return 543.');"
        },
        {
          "text":
            "<code>multiplesOf3and5(19564)</code> should return 89301183.",
          "testString":
            "assert.strictEqual(multiplesOf3and5(19564), 89301183, '<code>multiplesOf3and5(19564)</code> should return 89301183.');"
        },
        {
          "text":
            "Your function is not returning the correct result using our tests values.",
          "testString":
            "assert.strictEqual(multiplesOf3and5(8456), 16687353, 'Your function is not returning the correct result using our tests values.');"
        }
      ],
      "description": [
        "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.",
        "Find the sum of all the multiples of 3 or 5 below the provided parameter value <code>number</code>."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function multiplesOf3and5(number) {\n  // Good luck!\n  return true;\n}\n\nmultiplesOf3and5(1000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 1 Multiples of 3 and 5",
      "dashedName": "problem-1-multiples-of-3-and-5"
    },
    {
      "id": "5900f36e1000cf542c50fe81",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>fiboEvenSum(10)</code> should return 188.",
          "testString":
            "assert.strictEqual(fiboEvenSum(10), 188, '<code>fiboEvenSum(10)</code> should return 188.');"
        },
        {
          "text": "<code>fiboEvenSum(23)</code> should return 60696.",
          "testString":
            "assert.strictEqual(fiboEvenSum(23), 60696, '<code>fiboEvenSum(23)</code> should return 60696.');"
        },
        {
          "text": "<code>fiboEvenSum(43)</code> should return 1485607536.",
          "testString":
            "assert.strictEqual(fiboEvenSum(43), 1485607536, '<code>fiboEvenSum(43)</code> should return 1485607536.');"
        },
        {
          "text":
            "Your function is not returning the correct result using our tests values.",
          "testString":
            "assert.strictEqual(fiboEvenSum(18), 3382, 'Your function is not returning the correct result using our tests values.');"
        },
        {
          "text": "Your function should return an <code>even</code> value.",
          "testString":
            "assert.equal(fiboEvenSum(31) % 2 === 0, true, 'Your function should return an <code>even</code> value.');"
        }
      ],
      "description": [
        "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:",
        "<div style='text-align: center;'>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</div>",
        "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function fiboEvenSum(number) {\n  // You can do it!\n  return true;\n}\n\nfiboEvenSum(10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 2 Even Fibonacci Numbers",
      "dashedName": "problem-2-even-fibonacci-numbers"
    },
    {
      "id": "5900f36f1000cf542c50fe82",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>largestPrimeFactor(2)</code> should return 2.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(2), 2, '<code>largestPrimeFactor(2)</code> should return 2.');"
        },
        {
          "text": "<code>largestPrimeFactor(3)</code> should return 3.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(3), 3, '<code>largestPrimeFactor(3)</code> should return 3.');"
        },
        {
          "text": "<code>largestPrimeFactor(5)</code> should return 5.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(5), 5, '<code>largestPrimeFactor(5)</code> should return 5.');"
        },
        {
          "text": "<code>largestPrimeFactor(7)</code> should return 7.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(7), 7, '<code>largestPrimeFactor(7)</code> should return 7.');"
        },
        {
          "text": "<code>largestPrimeFactor(13195)</code> should return 29.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(13195), 29, '<code>largestPrimeFactor(13195)</code> should return 29.');"
        },
        {
          "text":
            "<code>largestPrimeFactor(600851475143)</code> should return 6857.",
          "testString":
            "assert.strictEqual(largestPrimeFactor(600851475143), 6857, '<code>largestPrimeFactor(600851475143)</code> should return 6857.');"
        }
      ],
      "description": [
        "The prime factors of 13195 are 5, 7, 13 and 29.",
        "What is the largest prime factor of the number 600851475143 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largestPrimeFactor(number) {\n  // Good luck!\n  return true;\n}\n\nlargestPrimeFactor(13195);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 3 Largest prime factor",
      "dashedName": "problem-3-largest-prime-factor"
    },
    {
      "id": "5900f3701000cf542c50fe83",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>largestPalindromeProduct(2)</code> should return 9009.",
          "testString":
            "assert.strictEqual(largestPalindromeProduct(2), 9009, '<code>largestPalindromeProduct(2)</code> should return 9009.');"
        },
        {
          "text":
            "<code>largestPalindromeProduct(3)</code> should return 906609.",
          "testString":
            "assert.strictEqual(largestPalindromeProduct(3), 906609, '<code>largestPalindromeProduct(3)</code> should return 906609.');"
        }
      ],
      "description": [
        "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.",
        "Find the largest palindrome made from the product of two 3-digit numbers."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largestPalindromeProduct(digit) {\n  // Good luck!\n  return true;\n}\n\nlargestPalindromeProduct(3);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 4 Largest palindrome product",
      "dashedName": "problem-4-largest-palindrome-product"
    },
    {
      "id": "5900f3711000cf542c50fe84",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>smallestMult(5)</code> should return 60.",
          "testString":
            "assert.strictEqual(smallestMult(5), 60, '<code>smallestMult(5)</code> should return 60.');"
        },
        {
          "text": "<code>smallestMult(10)</code> should return 2520.",
          "testString":
            "assert.strictEqual(smallestMult(10), 2520, '<code>smallestMult(10)</code> should return 2520.');"
        },
        {
          "text": "<code>smallestMult(20)</code> should return 232792560.",
          "testString":
            "assert.strictEqual(smallestMult(20), 232792560, '<code>smallestMult(20)</code> should return 232792560.');"
        }
      ],
      "description": [
        "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.",
        "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function smallestMult(n) {\n  // Good luck!\n  return true;\n}\n\nsmallestMult(20);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 5 Smallest multiple",
      "dashedName": "problem-5-smallest-multiple"
    },
    {
      "id": "5900f3721000cf542c50fe85",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>sumSquareDifference(10)</code> should return 2640.",
          "testString":
            "assert.strictEqual(sumSquareDifference(10), 2640, '<code>sumSquareDifference(10)</code> should return 2640.');"
        },
        {
          "text": "<code>sumSquareDifference(20)</code> should return 41230.",
          "testString":
            "assert.strictEqual(sumSquareDifference(20), 41230, '<code>sumSquareDifference(20)</code> should return 41230.');"
        },
        {
          "text":
            "<code>sumSquareDifference(100)</code> should return 25164150.",
          "testString":
            "assert.strictEqual(sumSquareDifference(100), 25164150, '<code>sumSquareDifference(100)</code> should return 25164150.');"
        }
      ],
      "description": [
        "The sum of the squares of the first ten natural numbers is,",
        "<div style='text-align: center;'>1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup> = 385</div>",
        "The square of the sum of the first ten natural numbers is,",
        "<div style='text-align: center;'>(1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 3025</div>",
        "Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.",
        "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumSquareDifference(number) {\n  // Good luck!\n  return true;\n}\n\nsumSquareDifference(100);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 6 Sum square difference",
      "dashedName": "problem-6-sum-square-difference"
    },
    {
      "id": "5900f3731000cf542c50fe86",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>nthPrime(6)</code> should return 13.",
          "testString":
            "assert.strictEqual(nthPrime(6), 13, '<code>nthPrime(6)</code> should return 13.');"
        },
        {
          "text": "<code>nthPrime(10)</code> should return 29.",
          "testString":
            "assert.strictEqual(nthPrime(10), 29, '<code>nthPrime(10)</code> should return 29.');"
        },
        {
          "text": "<code>nthPrime(100)</code> should return 541.",
          "testString":
            "assert.strictEqual(nthPrime(100), 541, '<code>nthPrime(100)</code> should return 541.');"
        },
        {
          "text": "<code>nthPrime(1000)</code> should return 7919.",
          "testString":
            "assert.strictEqual(nthPrime(1000), 7919, '<code>nthPrime(1000)</code> should return 7919.');"
        },
        {
          "text": "<code>nthPrime(10001)</code> should return 104743.",
          "testString":
            "assert.strictEqual(nthPrime(10001), 104743, '<code>nthPrime(10001)</code> should return 104743.');"
        }
      ],
      "description": [
        "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.",
        "What is the 10 001st prime number?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function nthPrime(number) {\n  // Good luck!\n  return true;\n}\n\nnthPrime(10001);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 7 10001st prime",
      "dashedName": "problem-7-10001st-prime"
    },
    {
      "id": "5900f3741000cf542c50fe87",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>largestProductinaSeries(4)</code> should return 5832.",
          "testString":
            "assert.strictEqual(largestProductinaSeries(4), 5832, '<code>largestProductinaSeries(4)</code> should return 5832.');"
        },
        {
          "text":
            "<code>largestProductinaSeries(13)</code> should return 23514624000.",
          "testString":
            "assert.strictEqual(largestProductinaSeries(13), 23514624000, '<code>largestProductinaSeries(13)</code> should return 23514624000.');"
        }
      ],
      "description": [
        "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.",
        "",
        "<div style='text-align: center;'>73167176531330624919225119674426574742355349194934</div>",
        "<div style='text-align: center;'>96983520312774506326239578318016984801869478851843</div>",
        "<div style='text-align: center;'>85861560789112949495459501737958331952853208805511</div>",
        "<div style='text-align: center;'>12540698747158523863050715693290963295227443043557</div>",
        "<div style='text-align: center;'>66896648950445244523161731856403098711121722383113</div>",
        "<div style='text-align: center;'>62229893423380308135336276614282806444486645238749</div>",
        "<div style='text-align: center;'>30358907296290491560440772390713810515859307960866</div>",
        "<div style='text-align: center;'>70172427121883998797908792274921901699720888093776</div>",
        "<div style='text-align: center;'>65727333001053367881220235421809751254540594752243</div>",
        "<div style='text-align: center;'>52584907711670556013604839586446706324415722155397</div>",
        "<div style='text-align: center;'>53697817977846174064955149290862569321978468622482</div>",
        "<div style='text-align: center;'>83972241375657056057490261407972968652414535100474</div>",
        "<div style='text-align: center;'>82166370484403199890008895243450658541227588666881</div>",
        "<div style='text-align: center;'>16427171479924442928230863465674813919123162824586</div>",
        "<div style='text-align: center;'>17866458359124566529476545682848912883142607690042</div>",
        "<div style='text-align: center;'>24219022671055626321111109370544217506941658960408</div>",
        "<div style='text-align: center;'>07198403850962455444362981230987879927244284909188</div>",
        "<div style='text-align: center;'>84580156166097919133875499200524063689912560717606</div>",
        "<div style='text-align: center;'>05886116467109405077541002256983155200055935729725</div>",
        "<div style='text-align: center;'>71636269561882670428252483600823257530420752963450</div>",
        "Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largestProductinaSeries(number) {\n  // Good luck!\n  let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];\n  return true;\n}\n\nlargestProductinaSeries(13);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 8 Largest product in a series",
      "dashedName": "problem-8-largest-product-in-a-series"
    },
    {
      "id": "5900f3761000cf542c50fe88",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>specialPythagoreanTriplet(1000)</code> should return 31875000.",
          "testString":
            "assert.strictEqual(specialPythagoreanTriplet(1000), 31875000, '<code>specialPythagoreanTriplet(1000)</code> should return 31875000.');"
        },
        {
          "text":
            "<code>specialPythagoreanTriplet(24)</code> should return 480.",
          "testString":
            "assert.strictEqual(specialPythagoreanTriplet(24), 480, '<code>specialPythagoreanTriplet(24)</code> should return 480.');"
        },
        {
          "text":
            "<code>specialPythagoreanTriplet(120)</code> should return 49920.",
          "testString":
            "assert.strictEqual(specialPythagoreanTriplet(120), 49920, '<code>specialPythagoreanTriplet(120)</code> should return 49920.');"
        }
      ],
      "description": [
        "A Pythagorean triplet is a set of three natural numbers, <var>a</var> < <var>b</var> < <var>c</var>, for which,",
        "<div style='text-align: center;'><var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup></div>",
        "For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.",
        "There exists exactly one Pythagorean triplet for which <var>a</var> + <var>b</var> + <var>c</var> = 1000. Find the product <var>abc</var>."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function specialPythagoreanTriplet(n) {\n let sumOfabc = n;\n // Good luck!\n return true;\n}\n\nspecialPythagoreanTriplet(1000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 9 Special Pythagorean triplet",
      "dashedName": "problem-9-special-pythagorean-triplet"
    },
    {
      "id": "5900f3761000cf542c50fe89",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>primeSummation(17)</code> should return 41.",
          "testString":
            "assert.strictEqual(primeSummation(17), 41, '<code>primeSummation(17)</code> should return 41.');"
        },
        {
          "text": "<code>primeSummation(2001)</code> should return 277050.",
          "testString":
            "assert.strictEqual(primeSummation(2001), 277050, '<code>primeSummation(2001)</code> should return 277050.');"
        },
        {
          "text":
            "<code>primeSummation(140759)</code> should return 873608362.",
          "testString":
            "assert.strictEqual(primeSummation(140759), 873608362, '<code>primeSummation(140759)</code> should return 873608362.');"
        },
        {
          "text":
            "<code>primeSummation(2000000)</code> should return 142913828922.",
          "testString":
            "assert.strictEqual(primeSummation(2000000), 142913828922, '<code>primeSummation(2000000)</code> should return 142913828922.');"
        }
      ],
      "description": [
        "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.",
        "Find the sum of all the primes below n."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function primeSummation(n) {\n  // Good luck!\n  return true;\n}\n\nprimeSummation(2000000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 10 Summation of primes",
      "dashedName": "problem-10-summation-of-primes"
    },
    {
      "id": "5900f3781000cf542c50fe8a",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>largestGridProduct(grid)</code> should return 70600674.",
          "testString":
            "assert.strictEqual(largestGridProduct(grid), 70600674, '<code>largestGridProduct(grid)</code> should return 70600674.');"
        },
        {
          "text":
            "<code>largestGridProduct(testGrid)</code> should return 14169081.",
          "testString":
            "assert.strictEqual(largestGridProduct(testGrid), 14169081, '<code>largestGridProduct(testGrid)</code> should return 14169081.');"
        }
      ],
      "description": [
        "In the 20×20 grid below, four numbers along a diagonal line have been marked in red.",
        "",
        "<div style='text-align: center;'>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08</div>",
        "<div style='text-align: center;'>49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00</div>",
        "<div style='text-align: center;'>81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65</div>",
        "<div style='text-align: center;'>52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91</div>",
        "<div style='text-align: center;'>22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80</div>",
        "<div style='text-align: center;'>24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50</div>",
        "<div style='text-align: center;'>32 98 81 28 64 23 67 10 <span style='color: red'><b>26</b></span> 38 40 67 59 54 70 66 18 38 64 70</div>",
        "<div style='text-align: center;'>67 26 20 68 02 62 12 20 95 <span style='color: red'><b>63</b></span> 94 39 63 08 40 91 66 49 94 21</div>",
        "<div style='text-align: center;'>24 55 58 05 66 73 99 26 97 17 <span style='color: red'><b>78</b></span> 78 96 83 14 88 34 89 63 72</div>",
        "<div style='text-align: center;'>21 36 23 09 75 00 76 44 20 45 35 <span style='color: red'><b>14</b></span> 00 61 33 97 34 31 33 95</div>",
        "<div style='text-align: center;'>78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92</div>",
        "<div style='text-align: center;'>16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57</div>",
        "<div style='text-align: center;'>86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58</div>",
        "<div style='text-align: center;'>19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40</div>",
        "<div style='text-align: center;'>04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66</div>",
        "<div style='text-align: center;'>88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69</div>",
        "<div style='text-align: center;'>04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36</div>",
        "<div style='text-align: center;'>20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16</div>",
        "<div style='text-align: center;'>20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54</div>",
        "<div style='text-align: center;'>01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</div>",
        "",
        "The product of these numbers is 26 × 63 × 78 × 14 = 1788696.",
        "What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largestGridProduct(arr) {\n  // Good luck!\n  return arr;\n}\n\n// Only change code above this line\nconst grid = [\n  [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n  [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n  [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n  [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n  [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n  [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n  [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n  [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n  [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n  [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n  [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n  [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n  [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n  [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\n];\n\nconst testGrid = [\n  [40, 17, 81, 18, 57],\n  [74, 4, 36, 16, 29],\n  [36, 42, 69, 73, 45],\n  [51, 54, 69, 16, 92],\n  [7, 97, 57, 32, 16]\n];\n\nlargestGridProduct(testGrid);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 11 Largest product in a grid",
      "dashedName": "problem-11-largest-product-in-a-grid"
    },
    {
      "id": "5900f3781000cf542c50fe8b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>divisibleTriangleNumber(5)</code> should return 28.",
          "testString":
            "assert.strictEqual(divisibleTriangleNumber(5), 28, '<code>divisibleTriangleNumber(5)</code> should return 28.');"
        },
        {
          "text": "<code>divisibleTriangleNumber(23)</code> should return 630.",
          "testString":
            "assert.strictEqual(divisibleTriangleNumber(23), 630, '<code>divisibleTriangleNumber(23)</code> should return 630.');"
        },
        {
          "text":
            "<code>divisibleTriangleNumber()</code> should return 76576500.",
          "testString":
            "assert.strictEqual(divisibleTriangleNumber(500), 76576500, '<code>divisibleTriangleNumber()</code> should return 76576500.');"
        }
      ],
      "description": [
        "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:",
        "<div style='text-align: center;'>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>",
        "Let us list the factors of the first seven triangle numbers:",
        "<div style='padding-left: 4em;'><b>1:</b> 1</div>",
        "<div style='padding-left: 4em;'><b>3:</b> 1, 3</div>",
        "<div style='padding-left: 4em;'><b>6:</b> 1, 2, 3, 6</div>",
        "<div style='padding-left: 4em;'><b>10:</b> 1, 2, 5, 10</div>",
        "<div style='padding-left: 4em;'><b>15:</b> 1, 3, 5, 15</div>",
        "<div style='padding-left: 4em;'><b>21:</b> 1, 3, 7, 21</div>",
        "<div style='padding-left: 4em;'><b>28:</b> 1, 2, 4, 7, 14, 28</div>",
        "We can see that 28 is the first triangle number to have over five divisors.",
        "What is the value of the first triangle number to have over five hundred divisors?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function divisibleTriangleNumber(n) {\n  // Good luck!\n  return true;\n}\n\ndivisibleTriangleNumber(500);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 12 Highly divisible triangular number",
      "dashedName": "problem-12-highly-divisible-triangular-number"
    },
    {
      "id": "5900f37a1000cf542c50fe8c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>largeSum(testNums)</code> should return 8348422521.",
          "testString":
            "assert.strictEqual(largeSum(testNums), 8348422521, '<code>largeSum(testNums)</code> should return 8348422521.');"
        },
        {
          "text":
            "<code>largeSum(fiftyDigitNums)</code> should return 5537376230.",
          "testString":
            "assert.strictEqual(largeSum(fiftyDigitNums), 5537376230, '<code>largeSum(fiftyDigitNums)</code> should return 5537376230.');"
        }
      ],
      "description": [
        "Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.",
        "",
        "37107287533902102798797998220837590246510135740250",
        "46376937677490009712648124896970078050417018260538",
        "74324986199524741059474233309513058123726617309629",
        "91942213363574161572522430563301811072406154908250",
        "23067588207539346171171980310421047513778063246676",
        "89261670696623633820136378418383684178734361726757",
        "28112879812849979408065481931592621691275889832738",
        "44274228917432520321923589422876796487670272189318",
        "47451445736001306439091167216856844588711603153276",
        "70386486105843025439939619828917593665686757934951",
        "62176457141856560629502157223196586755079324193331",
        "64906352462741904929101432445813822663347944758178",
        "92575867718337217661963751590579239728245598838407",
        "58203565325359399008402633568948830189458628227828",
        "80181199384826282014278194139940567587151170094390",
        "35398664372827112653829987240784473053190104293586",
        "86515506006295864861532075273371959191420517255829",
        "71693888707715466499115593487603532921714970056938",
        "54370070576826684624621495650076471787294438377604",
        "53282654108756828443191190634694037855217779295145",
        "36123272525000296071075082563815656710885258350721",
        "45876576172410976447339110607218265236877223636045",
        "17423706905851860660448207621209813287860733969412",
        "81142660418086830619328460811191061556940512689692",
        "51934325451728388641918047049293215058642563049483",
        "62467221648435076201727918039944693004732956340691",
        "15732444386908125794514089057706229429197107928209",
        "55037687525678773091862540744969844508330393682126",
        "18336384825330154686196124348767681297534375946515",
        "80386287592878490201521685554828717201219257766954",
        "78182833757993103614740356856449095527097864797581",
        "16726320100436897842553539920931837441497806860984",
        "48403098129077791799088218795327364475675590848030",
        "87086987551392711854517078544161852424320693150332",
        "59959406895756536782107074926966537676326235447210",
        "69793950679652694742597709739166693763042633987085",
        "41052684708299085211399427365734116182760315001271",
        "65378607361501080857009149939512557028198746004375",
        "35829035317434717326932123578154982629742552737307",
        "94953759765105305946966067683156574377167401875275",
        "88902802571733229619176668713819931811048770190271",
        "25267680276078003013678680992525463401061632866526",
        "36270218540497705585629946580636237993140746255962",
        "24074486908231174977792365466257246923322810917141",
        "91430288197103288597806669760892938638285025333403",
        "34413065578016127815921815005561868836468420090470",
        "23053081172816430487623791969842487255036638784583",
        "11487696932154902810424020138335124462181441773470",
        "63783299490636259666498587618221225225512486764533",
        "67720186971698544312419572409913959008952310058822",
        "95548255300263520781532296796249481641953868218774",
        "76085327132285723110424803456124867697064507995236",
        "37774242535411291684276865538926205024910326572967",
        "23701913275725675285653248258265463092207058596522",
        "29798860272258331913126375147341994889534765745501",
        "18495701454879288984856827726077713721403798879715",
        "38298203783031473527721580348144513491373226651381",
        "34829543829199918180278916522431027392251122869539",
        "40957953066405232632538044100059654939159879593635",
        "29746152185502371307642255121183693803580388584903",
        "41698116222072977186158236678424689157993532961922",
        "62467957194401269043877107275048102390895523597457",
        "23189706772547915061505504953922979530901129967519",
        "86188088225875314529584099251203829009407770775672",
        "11306739708304724483816533873502340845647058077308",
        "82959174767140363198008187129011875491310547126581",
        "97623331044818386269515456334926366572897563400500",
        "42846280183517070527831839425882145521227251250327",
        "55121603546981200581762165212827652751691296897789",
        "32238195734329339946437501907836945765883352399886",
        "75506164965184775180738168837861091527357929701337",
        "62177842752192623401942399639168044983993173312731",
        "32924185707147349566916674687634660915035914677504",
        "99518671430235219628894890102423325116913619626622",
        "73267460800591547471830798392868535206946944540724",
        "76841822524674417161514036427982273348055556214818",
        "97142617910342598647204516893989422179826088076852",
        "87783646182799346313767754307809363333018982642090",
        "10848802521674670883215120185883543223812876952786",
        "71329612474782464538636993009049310363619763878039",
        "62184073572399794223406235393808339651327408011116",
        "66627891981488087797941876876144230030984490851411",
        "60661826293682836764744779239180335110989069790714",
        "85786944089552990653640447425576083659976645795096",
        "66024396409905389607120198219976047599490197230297",
        "64913982680032973156037120041377903785566085089252",
        "16730939319872750275468906903707539413042652315011",
        "94809377245048795150954100921645863754710598436791",
        "78639167021187492431995700641917969777599028300699",
        "15368713711936614952811305876380278410754449733078",
        "40789923115535562561142322423255033685442488917353",
        "44889911501440648020369068063960672322193204149535",
        "41503128880339536053299340368006977710650566631954",
        "81234880673210146739058568557934581403627822703280",
        "82616570773948327592232845941706525094512325230608",
        "22918802058777319719839450180888072429661980811197",
        "77158542502016545090413245809786882778948721859617",
        "72107838435069186155435662884062257473692284509516",
        "20849603980134001723930671666823555245252804609722",
        "53503534226472524250874054075591789781264330331690"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function largeSum(arr) {\n  // Good luck!\n  return true;\n}\n\n// only change code above this line\n\nconst testNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538'\n];\n\nlargeSum(testNums);",
          "head":
            "const fiftyDigitNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538',\n  '74324986199524741059474233309513058123726617309629',\n  '91942213363574161572522430563301811072406154908250',\n  '23067588207539346171171980310421047513778063246676',\n  '89261670696623633820136378418383684178734361726757',\n  '28112879812849979408065481931592621691275889832738',\n  '44274228917432520321923589422876796487670272189318',\n  '47451445736001306439091167216856844588711603153276',\n  '70386486105843025439939619828917593665686757934951',\n  '62176457141856560629502157223196586755079324193331',\n  '64906352462741904929101432445813822663347944758178',\n  '92575867718337217661963751590579239728245598838407',\n  '58203565325359399008402633568948830189458628227828',\n  '80181199384826282014278194139940567587151170094390',\n  '35398664372827112653829987240784473053190104293586',\n  '86515506006295864861532075273371959191420517255829',\n  '71693888707715466499115593487603532921714970056938',\n  '54370070576826684624621495650076471787294438377604',\n  '53282654108756828443191190634694037855217779295145',\n  '36123272525000296071075082563815656710885258350721',\n  '45876576172410976447339110607218265236877223636045',\n  '17423706905851860660448207621209813287860733969412',\n  '81142660418086830619328460811191061556940512689692',\n  '51934325451728388641918047049293215058642563049483',\n  '62467221648435076201727918039944693004732956340691',\n  '15732444386908125794514089057706229429197107928209',\n  '55037687525678773091862540744969844508330393682126',\n  '18336384825330154686196124348767681297534375946515',\n  '80386287592878490201521685554828717201219257766954',\n  '78182833757993103614740356856449095527097864797581',\n  '16726320100436897842553539920931837441497806860984',\n  '48403098129077791799088218795327364475675590848030',\n  '87086987551392711854517078544161852424320693150332',\n  '59959406895756536782107074926966537676326235447210',\n  '69793950679652694742597709739166693763042633987085',\n  '41052684708299085211399427365734116182760315001271',\n  '65378607361501080857009149939512557028198746004375',\n  '35829035317434717326932123578154982629742552737307',\n  '94953759765105305946966067683156574377167401875275',\n  '88902802571733229619176668713819931811048770190271',\n  '25267680276078003013678680992525463401061632866526',\n  '36270218540497705585629946580636237993140746255962',\n  '24074486908231174977792365466257246923322810917141',\n  '91430288197103288597806669760892938638285025333403',\n  '34413065578016127815921815005561868836468420090470',\n  '23053081172816430487623791969842487255036638784583',\n  '11487696932154902810424020138335124462181441773470',\n  '63783299490636259666498587618221225225512486764533',\n  '67720186971698544312419572409913959008952310058822',\n  '95548255300263520781532296796249481641953868218774',\n  '76085327132285723110424803456124867697064507995236',\n  '37774242535411291684276865538926205024910326572967',\n  '23701913275725675285653248258265463092207058596522',\n  '29798860272258331913126375147341994889534765745501',\n  '18495701454879288984856827726077713721403798879715',\n  '38298203783031473527721580348144513491373226651381',\n  '34829543829199918180278916522431027392251122869539',\n  '40957953066405232632538044100059654939159879593635',\n  '29746152185502371307642255121183693803580388584903',\n  '41698116222072977186158236678424689157993532961922',\n  '62467957194401269043877107275048102390895523597457',\n  '23189706772547915061505504953922979530901129967519',\n  '86188088225875314529584099251203829009407770775672',\n  '11306739708304724483816533873502340845647058077308',\n  '82959174767140363198008187129011875491310547126581',\n  '97623331044818386269515456334926366572897563400500',\n  '42846280183517070527831839425882145521227251250327',\n  '55121603546981200581762165212827652751691296897789',\n  '32238195734329339946437501907836945765883352399886',\n  '75506164965184775180738168837861091527357929701337',\n  '62177842752192623401942399639168044983993173312731',\n  '32924185707147349566916674687634660915035914677504',\n  '99518671430235219628894890102423325116913619626622',\n  '73267460800591547471830798392868535206946944540724',\n  '76841822524674417161514036427982273348055556214818',\n  '97142617910342598647204516893989422179826088076852',\n  '87783646182799346313767754307809363333018982642090',\n  '10848802521674670883215120185883543223812876952786',\n  '71329612474782464538636993009049310363619763878039',\n  '62184073572399794223406235393808339651327408011116',\n  '66627891981488087797941876876144230030984490851411',\n  '60661826293682836764744779239180335110989069790714',\n  '85786944089552990653640447425576083659976645795096',\n  '66024396409905389607120198219976047599490197230297',\n  '64913982680032973156037120041377903785566085089252',\n  '16730939319872750275468906903707539413042652315011',\n  '94809377245048795150954100921645863754710598436791',\n  '78639167021187492431995700641917969777599028300699',\n  '15368713711936614952811305876380278410754449733078',\n  '40789923115535562561142322423255033685442488917353',\n  '44889911501440648020369068063960672322193204149535',\n  '41503128880339536053299340368006977710650566631954',\n  '81234880673210146739058568557934581403627822703280',\n  '82616570773948327592232845941706525094512325230608',\n  '22918802058777319719839450180888072429661980811197',\n  '77158542502016545090413245809786882778948721859617',\n  '72107838435069186155435662884062257473692284509516',\n  '20849603980134001723930671666823555245252804609722',\n  '53503534226472524250874054075591789781264330331690'\n];\n\nconst testNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538'\n];",
          "tail": ""
        }
      },
      "name": "Problem 13 Large sum",
      "dashedName": "problem-13-large-sum"
    },
    {
      "id": "5900f37a1000cf542c50fe8d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>longestCollatzSequence(14)</code> should return 9.",
          "testString":
            "assert.strictEqual(longestCollatzSequence(14), 9, '<code>longestCollatzSequence(14)</code> should return 9.');"
        },
        {
          "text":
            "<code>longestCollatzSequence(5847)</code> should return 3711.",
          "testString":
            "assert.strictEqual(longestCollatzSequence(5847), 3711, '<code>longestCollatzSequence(5847)</code> should return 3711.');"
        },
        {
          "text":
            "<code>longestCollatzSequence(1000000)</code> should return 837799.",
          "testString":
            "assert.strictEqual(longestCollatzSequence(1000000), 837799, '<code>longestCollatzSequence(1000000)</code> should return 837799.');"
        }
      ],
      "description": [
        "The following iterative sequence is defined for the set of positive integers:",
        "<div style='padding-left: 4em;'><var>n</var> → <var>n</var>/2 (<var>n</var> is even)</div>",
        "<div style='padding-left: 4em;'><var>n</var> → 3<var>n</var> + 1 (<var>n</var> is odd)</div>",
        "Using the rule above and starting with 13, we generate the following sequence:",
        "<div style='text-align: center;'>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</div>",
        "It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.",
        "Which starting number, under one million, produces the longest chain?",
        "NOTE: Once the chain starts the terms are allowed to go above one million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function longestCollatzSequence(limit) {\n  // Good luck!\n  return true;\n}\n\nlongestCollatzSequence(14);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 14 Longest Collatz sequence",
      "dashedName": "problem-14-longest-collatz-sequence"
    },
    {
      "id": "5900f37b1000cf542c50fe8e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>latticePaths(4)</code> should return 70.",
          "testString":
            "assert.strictEqual(latticePaths(4), 70, '<code>latticePaths(4)</code> should return 70.');"
        },
        {
          "text": "<code>latticePaths(9)</code> should return 48620.",
          "testString":
            "assert.strictEqual(latticePaths(9), 48620, '<code>latticePaths(9)</code> should return 48620.');"
        },
        {
          "text": "<code>latticePaths(20)</code> should return 137846528820.",
          "testString":
            "assert.strictEqual(latticePaths(20), 137846528820, '<code>latticePaths(20)</code> should return 137846528820.');"
        }
      ],
      "description": [
        "Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.",
        "",
        "<img class=\"img-responsive center-block\" alt=\"a diagram of 6 2 by 2 grids showing all the routes to the bottom right corner\" src=\"https://i.imgur.com/1Atixoj.gif\">",
        "",
        "How many such routes are there through a 20×20 grid?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function latticePaths(gridSize) {\n  // Good luck!\n  return true;\n}\n\nlatticePaths(4);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 15 Lattice paths",
      "dashedName": "problem-15-lattice-paths"
    },
    {
      "id": "5900f37d1000cf542c50fe8f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>powerDigitSum(15)</code> should return 26.",
          "testString":
            "assert.strictEqual(powerDigitSum(15), 26, '<code>powerDigitSum(15)</code> should return 26.');"
        },
        {
          "text": "<code>powerDigitSum(128)</code> should return 166.",
          "testString":
            "assert.strictEqual(powerDigitSum(128), 166, '<code>powerDigitSum(128)</code> should return 166.');"
        },
        {
          "text": "<code>powerDigitSum(1000)</code> should return 1366.",
          "testString":
            "assert.strictEqual(powerDigitSum(1000), 1366, '<code>powerDigitSum(1000)</code> should return 1366.');"
        }
      ],
      "description": [
        "2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.",
        "What is the sum of the digits of the number 2<sup>1000</sup>?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function powerDigitSum(exponent) {\n  // Good luck!\n  return true;\n}\n\npowerDigitSum(15);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 16 Power digit sum",
      "dashedName": "problem-16-power-digit-sum"
    },
    {
      "id": "5900f37d1000cf542c50fe90",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>numberLetterCounts(5)</code> should return 19.",
          "testString":
            "assert.strictEqual(numberLetterCounts(5), 19, '<code>numberLetterCounts(5)</code> should return 19.');"
        },
        {
          "text": "<code>numberLetterCounts(150)</code> should return 1903.",
          "testString":
            "assert.strictEqual(numberLetterCounts(150), 1903, '<code>numberLetterCounts(150)</code> should return 1903.');"
        },
        {
          "text": "<code>numberLetterCounts(1000)</code> should return 21124.",
          "testString":
            "assert.strictEqual(numberLetterCounts(1000), 21124, '<code>numberLetterCounts(1000)</code> should return 21124.');"
        }
      ],
      "description": [
        "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.",
        "If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used? ",
        "<b>NOTE:</b> Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function numberLetterCounts(limit) {\n  // Good luck!\n  return true;\n}\n\nnumberLetterCounts(5);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 17 Number letter counts",
      "dashedName": "problem-17-number-letter-counts"
    },
    {
      "id": "5900f37e1000cf542c50fe91",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>maximumPathSumI(testTriangle)</code> should return 23.",
          "testString":
            "assert.strictEqual(maximumPathSumI(testTriangle), 23, '<code>maximumPathSumI(testTriangle)</code> should return 23.');"
        },
        {
          "text":
            "<code>maximumPathSumI(numTriangle)</code> should return 1074.",
          "testString":
            "assert.strictEqual(maximumPathSumI(numTriangle), 1074, '<code>maximumPathSumI(numTriangle)</code> should return 1074.');"
        }
      ],
      "description": [
        "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.",
        "<span style='display: block; text-align: center;'><b style='color: red;'>3</b><br><b style='color: red;'>7</b> 4<br>2 <b style='color: red;'>4</b> 6<br>8 5 <b style='color: red;'>9</b> 3</span>",
        "That is, 3 + 7 + 4 + 9 = 23.",
        "Find the maximum total from top to bottom of the triangle below:",
        "<span style='display: block; text-align: center;'>75<br>95 64<br>17 47 82<br>18 35 87 10<br>20 04 82 47 65<br>19 01 23 75 03 34<br>88 02 77 73 07 63 67<br>99 65 04 28 06 16 70 92<br>41 41 26 56 83 40 80 70 33<br>41 48 72 33 47 32 37 16 94 29<br>53 71 44 65 25 43 91 52 97 51 14<br>70 11 33 28 77 73 17 78 39 68 17 57<br>91 71 52 38 17 14 91 43 58 50 27 29 48<br>63 66 04 68 89 53 67 30 73 16 69 87 40 31<br>04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</span>",
        "<b>NOTE:</b> As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function maximumPathSumI(triangle) {\n  // Good luck!\n  return true;\n}\n\nconst testTriangle = [[3, 0, 0, 0],\n                      [7, 4, 0, 0],\n                      [2, 4, 6, 0],\n                      [8, 5, 9, 3]];\n\nmaximumPathSumI(testTriangle);",
          "head":
            "const numTriangle = [[75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0], [99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0], [41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]];",
          "tail": ""
        }
      },
      "name": "Problem 18 Maximum path sum I",
      "dashedName": "problem-18-maximum-path-sum-i"
    },
    {
      "id": "5900f37f1000cf542c50fe92",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>countingSundays(1943, 1946)</code> should return 6.",
          "testString":
            "assert.strictEqual(countingSundays(1943, 1946), 6, '<code>countingSundays(1943, 1946)</code> should return 6.');"
        },
        {
          "text": "<code>countingSundays(1995, 2000)</code> should return 9.",
          "testString":
            "assert.strictEqual(countingSundays(1995, 2000), 9, '<code>countingSundays(1995, 2000)</code> should return 9.');"
        },
        {
          "text": "<code>countingSundays(1901, 2000)</code> should return 171.",
          "testString":
            "assert.strictEqual(countingSundays(1901, 2000), 171, '<code>countingSundays(1901, 2000)</code> should return 171.');"
        }
      ],
      "description": [
        "You are given the following information, but you may prefer to do some research for yourself.",
        "<ul><li>1 Jan 1900 was a Monday.</li><li>Thirty days has September,<br>April, June and November.<br>All the rest have thirty-one,<br>Saving February alone,<br>Which has twenty-eight, rain or shine.<br>And on leap years, twenty-nine.</li><li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>",
        "How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function countingSundays(firstYear, lastYear) {\n  // Good luck!\n  return true;\n}\n\ncountingSundays(1943, 1946);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 19 Counting Sundays",
      "dashedName": "problem-19-counting-sundays"
    },
    {
      "id": "5900f3801000cf542c50fe93",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>sumFactorialDigits(10)</code> should return 27.",
          "testString":
            "assert.strictEqual(sumFactorialDigits(10), 27, '<code>sumFactorialDigits(10)</code> should return 27.');"
        },
        {
          "text": "<code>sumFactorialDigits(25)</code> should return 72.",
          "testString":
            "assert.strictEqual(sumFactorialDigits(25), 72, '<code>sumFactorialDigits(25)</code> should return 72.');"
        },
        {
          "text": "<code>sumFactorialDigits(50)</code> should return 216.",
          "testString":
            "assert.strictEqual(sumFactorialDigits(50), 216, '<code>sumFactorialDigits(50)</code> should return 216.');"
        },
        {
          "text": "<code>sumFactorialDigits(75)</code> should return 432.",
          "testString":
            "assert.strictEqual(sumFactorialDigits(75), 432, '<code>sumFactorialDigits(75)</code> should return 432.');"
        },
        {
          "text": "<code>sumFactorialDigits(100)</code> should return 648.",
          "testString":
            "assert.strictEqual(sumFactorialDigits(100), 648, '<code>sumFactorialDigits(100)</code> should return 648.');"
        }
      ],
      "description": [
        "<var>n</var>! means <var>n</var> × (<var>n</var> − 1) × ... × 3 × 2 × 1",
        "For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,<br>and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.",
        "Find the sum of the digits <var>n</var>!"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumFactorialDigits(n) {\n  // Good luck!\n  return n;\n}\n\nsumFactorialDigits(100);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 20 Factorial digit sum",
      "dashedName": "problem-20-factorial-digit-sum"
    },
    {
      "id": "5900f3811000cf542c50fe94",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>sumAmicableNum(1000)</code> should return 504.",
          "testString":
            "assert.strictEqual(sumAmicableNum(1000), 504, '<code>sumAmicableNum(1000)</code> should return 504.');"
        },
        {
          "text": "<code>sumAmicableNum(2000)</code> should return 2898.",
          "testString":
            "assert.strictEqual(sumAmicableNum(2000), 2898, '<code>sumAmicableNum(2000)</code> should return 2898.');"
        },
        {
          "text": "<code>sumAmicableNum(5000)</code> should return 8442.",
          "testString":
            "assert.strictEqual(sumAmicableNum(5000), 8442, '<code>sumAmicableNum(5000)</code> should return 8442.');"
        },
        {
          "text": "<code>sumAmicableNum(10000)</code> should return 31626.",
          "testString":
            "assert.strictEqual(sumAmicableNum(10000), 31626, '<code>sumAmicableNum(10000)</code> should return 31626.');"
        }
      ],
      "description": [
        "Let d(<var>n</var>) be defined as the sum of proper divisors of <var>n</var> (numbers less than <var>n</var> which divide evenly into <var>n</var>).",
        "If d(<var>a</var>) = <var>b</var> and d(<var>b</var>) = <var>a</var>, where <var>a</var> ≠ <var>b</var>, then <var>a</var> and <var>b</var> are an amicable pair and each of <var>a</var> and <var>b</var> are called amicable numbers.",
        "For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.",
        "Evaluate the sum of all the amicable numbers under <var>n</var>."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumAmicableNum(n) {\n  // Good luck!\n  return n;\n}\n\nsumAmicableNum(10000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 21 Amicable numbers",
      "dashedName": "problem-21-amicable-numbers"
    },
    {
      "id": "5a51eabcad78bf416f316e2a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>namesScores(test1)</code> should return 791.",
          "testString":
            "assert.strictEqual(namesScores(test1), 791, '<code>namesScores(test1)</code> should return 791.');"
        },
        {
          "text": "<code>namesScores(test2)</code> should return 1468.",
          "testString":
            "assert.strictEqual(namesScores(test2), 1468, '<code>namesScores(test2)</code> should return 1468.');"
        },
        {
          "text": "<code>namesScores(names)</code> should return 871198282.",
          "testString":
            "assert.strictEqual(namesScores(names), 871198282, '<code>namesScores(names)</code> should return 871198282.');"
        }
      ],
      "description": [
        "Using <code>names</code>, an array containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.",
        "For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.",
        "What is the total of all the name scores in the file?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function namesScores(arr) {\n  // Good luck!\n  return arr;\n}\n\n// Only change code above this line\nconst test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST'];\nconst test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST'];\n\nnamesScores(test1);",
          "head":
            "const names = ['MARY','PATRICIA','LINDA','BARBARA','ELIZABETH','JENNIFER','MARIA','SUSAN','MARGARET','DOROTHY','LISA','NANCY','KAREN','BETTY','HELEN','SANDRA','DONNA','CAROL','RUTH','SHARON','MICHELLE','LAURA','SARAH','KIMBERLY','DEBORAH','JESSICA','SHIRLEY','CYNTHIA','ANGELA','MELISSA','BRENDA','AMY','ANNA','REBECCA','VIRGINIA','KATHLEEN','PAMELA','MARTHA','DEBRA','AMANDA','STEPHANIE','CAROLYN','CHRISTINE','MARIE','JANET','CATHERINE','FRANCES','ANN','JOYCE','DIANE','ALICE','JULIE','HEATHER','TERESA','DORIS','GLORIA','EVELYN','JEAN','CHERYL','MILDRED','KATHERINE','JOAN','ASHLEY','JUDITH','ROSE','JANICE','KELLY','NICOLE','JUDY','CHRISTINA','KATHY','THERESA','BEVERLY','DENISE','TAMMY','IRENE','JANE','LORI','RACHEL','MARILYN','ANDREA','KATHRYN','LOUISE','SARA','ANNE','JACQUELINE','WANDA','BONNIE','JULIA','RUBY','LOIS','TINA','PHYLLIS','NORMA','PAULA','DIANA','ANNIE','LILLIAN','EMILY','ROBIN','PEGGY','CRYSTAL','GLADYS','RITA','DAWN','CONNIE','FLORENCE','TRACY','EDNA','TIFFANY','CARMEN','ROSA','CINDY','GRACE','WENDY','VICTORIA','EDITH','KIM','SHERRY','SYLVIA','JOSEPHINE','THELMA','SHANNON','SHEILA','ETHEL','ELLEN','ELAINE','MARJORIE','CARRIE','CHARLOTTE','MONICA','ESTHER','PAULINE','EMMA','JUANITA','ANITA','RHONDA','HAZEL','AMBER','EVA','DEBBIE','APRIL','LESLIE','CLARA','LUCILLE','JAMIE','JOANNE','ELEANOR','VALERIE','DANIELLE','MEGAN','ALICIA','SUZANNE','MICHELE','GAIL','BERTHA','DARLENE','VERONICA','JILL','ERIN','GERALDINE','LAUREN','CATHY','JOANN','LORRAINE','LYNN','SALLY','REGINA','ERICA','BEATRICE','DOLORES','BERNICE','AUDREY','YVONNE','ANNETTE','JUNE','SAMANTHA','MARION','DANA','STACY','ANA','RENEE','IDA','VIVIAN','ROBERTA','HOLLY','BRITTANY','MELANIE','LORETTA','YOLANDA','JEANETTE','LAURIE','KATIE','KRISTEN','VANESSA','ALMA','SUE','ELSIE','BETH','JEANNE','VICKI','CARLA','TARA','ROSEMARY','EILEEN','TERRI','GERTRUDE','LUCY','TONYA','ELLA','STACEY','WILMA','GINA','KRISTIN','JESSIE','NATALIE','AGNES','VERA','WILLIE','CHARLENE','BESSIE','DELORES','MELINDA','PEARL','ARLENE','MAUREEN','COLLEEN','ALLISON','TAMARA','JOY','GEORGIA','CONSTANCE','LILLIE','CLAUDIA','JACKIE','MARCIA','TANYA','NELLIE','MINNIE','MARLENE','HEIDI','GLENDA','LYDIA','VIOLA','COURTNEY','MARIAN','STELLA','CAROLINE','DORA','JO','VICKIE','MATTIE','TERRY','MAXINE','IRMA','MABEL','MARSHA','MYRTLE','LENA','CHRISTY','DEANNA','PATSY','HILDA','GWENDOLYN','JENNIE','NORA','MARGIE','NINA','CASSANDRA','LEAH','PENNY','KAY','PRISCILLA','NAOMI','CAROLE','BRANDY','OLGA','BILLIE','DIANNE','TRACEY','LEONA','JENNY','FELICIA','SONIA','MIRIAM','VELMA','BECKY','BOBBIE','VIOLET','KRISTINA','TONI','MISTY','MAE','SHELLY','DAISY','RAMONA','SHERRI','ERIKA','KATRINA','CLAIRE','LINDSEY','LINDSAY','GENEVA','GUADALUPE','BELINDA','MARGARITA','SHERYL','CORA','FAYE','ADA','NATASHA','SABRINA','ISABEL','MARGUERITE','HATTIE','HARRIET','MOLLY','CECILIA','KRISTI','BRANDI','BLANCHE','SANDY','ROSIE','JOANNA','IRIS','EUNICE','ANGIE','INEZ','LYNDA','MADELINE','AMELIA','ALBERTA','GENEVIEVE','MONIQUE','JODI','JANIE','MAGGIE','KAYLA','SONYA','JAN','LEE','KRISTINE','CANDACE','FANNIE','MARYANN','OPAL','ALISON','YVETTE','MELODY','LUZ','SUSIE','OLIVIA','FLORA','SHELLEY','KRISTY','MAMIE','LULA','LOLA','VERNA','BEULAH','ANTOINETTE','CANDICE','JUANA','JEANNETTE','PAM','KELLI','HANNAH','WHITNEY','BRIDGET','KARLA','CELIA','LATOYA','PATTY','SHELIA','GAYLE','DELLA','VICKY','LYNNE','SHERI','MARIANNE','KARA','JACQUELYN','ERMA','BLANCA','MYRA','LETICIA','PAT','KRISTA','ROXANNE','ANGELICA','JOHNNIE','ROBYN','FRANCIS','ADRIENNE','ROSALIE','ALEXANDRA','BROOKE','BETHANY','SADIE','BERNADETTE','TRACI','JODY','KENDRA','JASMINE','NICHOLE','RACHAEL','CHELSEA','MABLE','ERNESTINE','MURIEL','MARCELLA','ELENA','KRYSTAL','ANGELINA','NADINE','KARI','ESTELLE','DIANNA','PAULETTE','LORA','MONA','DOREEN','ROSEMARIE','ANGEL','DESIREE','ANTONIA','HOPE','GINGER','JANIS','BETSY','CHRISTIE','FREDA','MERCEDES','MEREDITH','LYNETTE','TERI','CRISTINA','EULA','LEIGH','MEGHAN','SOPHIA','ELOISE','ROCHELLE','GRETCHEN','CECELIA','RAQUEL','HENRIETTA','ALYSSA','JANA','KELLEY','GWEN','KERRY','JENNA','TRICIA','LAVERNE','OLIVE','ALEXIS','TASHA','SILVIA','ELVIRA','CASEY','DELIA','SOPHIE','KATE','PATTI','LORENA','KELLIE','SONJA','LILA','LANA','DARLA','MAY','MINDY','ESSIE','MANDY','LORENE','ELSA','JOSEFINA','JEANNIE','MIRANDA','DIXIE','LUCIA','MARTA','FAITH','LELA','JOHANNA','SHARI','CAMILLE','TAMI','SHAWNA','ELISA','EBONY','MELBA','ORA','NETTIE','TABITHA','OLLIE','JAIME','WINIFRED','KRISTIE','MARINA','ALISHA','AIMEE','RENA','MYRNA','MARLA','TAMMIE','LATASHA','BONITA','PATRICE','RONDA','SHERRIE','ADDIE','FRANCINE','DELORIS','STACIE','ADRIANA','CHERI','SHELBY','ABIGAIL','CELESTE','JEWEL','CARA','ADELE','REBEKAH','LUCINDA','DORTHY','CHRIS','EFFIE','TRINA','REBA','SHAWN','SALLIE','AURORA','LENORA','ETTA','LOTTIE','KERRI','TRISHA','NIKKI','ESTELLA','FRANCISCA','JOSIE','TRACIE','MARISSA','KARIN','BRITTNEY','JANELLE','LOURDES','LAUREL','HELENE','FERN','ELVA','CORINNE','KELSEY','INA','BETTIE','ELISABETH','AIDA','CAITLIN','INGRID','IVA','EUGENIA','CHRISTA','GOLDIE','CASSIE','MAUDE','JENIFER','THERESE','FRANKIE','DENA','LORNA','JANETTE','LATONYA','CANDY','MORGAN','CONSUELO','TAMIKA','ROSETTA','DEBORA','CHERIE','POLLY','DINA','JEWELL','FAY','JILLIAN','DOROTHEA','NELL','TRUDY','ESPERANZA','PATRICA','KIMBERLEY','SHANNA','HELENA','CAROLINA','CLEO','STEFANIE','ROSARIO','OLA','JANINE','MOLLIE','LUPE','ALISA','LOU','MARIBEL','SUSANNE','BETTE','SUSANA','ELISE','CECILE','ISABELLE','LESLEY','JOCELYN','PAIGE','JONI','RACHELLE','LEOLA','DAPHNE','ALTA','ESTER','PETRA','GRACIELA','IMOGENE','JOLENE','KEISHA','LACEY','GLENNA','GABRIELA','KERI','URSULA','LIZZIE','KIRSTEN','SHANA','ADELINE','MAYRA','JAYNE','JACLYN','GRACIE','SONDRA','CARMELA','MARISA','ROSALIND','CHARITY','TONIA','BEATRIZ','MARISOL','CLARICE','JEANINE','SHEENA','ANGELINE','FRIEDA','LILY','ROBBIE','SHAUNA','MILLIE','CLAUDETTE','CATHLEEN','ANGELIA','GABRIELLE','AUTUMN','KATHARINE','SUMMER','JODIE','STACI','LEA','CHRISTI','JIMMIE','JUSTINE','ELMA','LUELLA','MARGRET','DOMINIQUE','SOCORRO','RENE','MARTINA','MARGO','MAVIS','CALLIE','BOBBI','MARITZA','LUCILE','LEANNE','JEANNINE','DEANA','AILEEN','LORIE','LADONNA','WILLA','MANUELA','GALE','SELMA','DOLLY','SYBIL','ABBY','LARA','DALE','IVY','DEE','WINNIE','MARCY','LUISA','JERI','MAGDALENA','OFELIA','MEAGAN','AUDRA','MATILDA','LEILA','CORNELIA','BIANCA','SIMONE','BETTYE','RANDI','VIRGIE','LATISHA','BARBRA','GEORGINA','ELIZA','LEANN','BRIDGETTE','RHODA','HALEY','ADELA','NOLA','BERNADINE','FLOSSIE','ILA','GRETA','RUTHIE','NELDA','MINERVA','LILLY','TERRIE','LETHA','HILARY','ESTELA','VALARIE','BRIANNA','ROSALYN','EARLINE','CATALINA','AVA','MIA','CLARISSA','LIDIA','CORRINE','ALEXANDRIA','CONCEPCION','TIA','SHARRON','RAE','DONA','ERICKA','JAMI','ELNORA','CHANDRA','LENORE','NEVA','MARYLOU','MELISA','TABATHA','SERENA','AVIS','ALLIE','SOFIA','JEANIE','ODESSA','NANNIE','HARRIETT','LORAINE','PENELOPE','MILAGROS','EMILIA','BENITA','ALLYSON','ASHLEE','TANIA','TOMMIE','ESMERALDA','KARINA','EVE','PEARLIE','ZELMA','MALINDA','NOREEN','TAMEKA','SAUNDRA','HILLARY','AMIE','ALTHEA','ROSALINDA','JORDAN','LILIA','ALANA','GAY','CLARE','ALEJANDRA','ELINOR','MICHAEL','LORRIE','JERRI','DARCY','EARNESTINE','CARMELLA','TAYLOR','NOEMI','MARCIE','LIZA','ANNABELLE','LOUISA','EARLENE','MALLORY','CARLENE','NITA','SELENA','TANISHA','KATY','JULIANNE','JOHN','LAKISHA','EDWINA','MARICELA','MARGERY','KENYA','DOLLIE','ROXIE','ROSLYN','KATHRINE','NANETTE','CHARMAINE','LAVONNE','ILENE','KRIS','TAMMI','SUZETTE','CORINE','KAYE','JERRY','MERLE','CHRYSTAL','LINA','DEANNE','LILIAN','JULIANA','ALINE','LUANN','KASEY','MARYANNE','EVANGELINE','COLETTE','MELVA','LAWANDA','YESENIA','NADIA','MADGE','KATHIE','EDDIE','OPHELIA','VALERIA','NONA','MITZI','MARI','GEORGETTE','CLAUDINE','FRAN','ALISSA','ROSEANN','LAKEISHA','SUSANNA','REVA','DEIDRE','CHASITY','SHEREE','CARLY','JAMES','ELVIA','ALYCE','DEIRDRE','GENA','BRIANA','ARACELI','KATELYN','ROSANNE','WENDI','TESSA','BERTA','MARVA','IMELDA','MARIETTA','MARCI','LEONOR','ARLINE','SASHA','MADELYN','JANNA','JULIETTE','DEENA','AURELIA','JOSEFA','AUGUSTA','LILIANA','YOUNG','CHRISTIAN','LESSIE','AMALIA','SAVANNAH','ANASTASIA','VILMA','NATALIA','ROSELLA','LYNNETTE','CORINA','ALFREDA','LEANNA','CAREY','AMPARO','COLEEN','TAMRA','AISHA','WILDA','KARYN','CHERRY','QUEEN','MAURA','MAI','EVANGELINA','ROSANNA','HALLIE','ERNA','ENID','MARIANA','LACY','JULIET','JACKLYN','FREIDA','MADELEINE','MARA','HESTER','CATHRYN','LELIA','CASANDRA','BRIDGETT','ANGELITA','JANNIE','DIONNE','ANNMARIE','KATINA','BERYL','PHOEBE','MILLICENT','KATHERYN','DIANN','CARISSA','MARYELLEN','LIZ','LAURI','HELGA','GILDA','ADRIAN','RHEA','MARQUITA','HOLLIE','TISHA','TAMERA','ANGELIQUE','FRANCESCA','BRITNEY','KAITLIN','LOLITA','FLORINE','ROWENA','REYNA','TWILA','FANNY','JANELL','INES','CONCETTA','BERTIE','ALBA','BRIGITTE','ALYSON','VONDA','PANSY','ELBA','NOELLE','LETITIA','KITTY','DEANN','BRANDIE','LOUELLA','LETA','FELECIA','SHARLENE','LESA','BEVERLEY','ROBERT','ISABELLA','HERMINIA','TERRA','CELINA','TORI','OCTAVIA','JADE','DENICE','GERMAINE','SIERRA','MICHELL','CORTNEY','NELLY','DORETHA','SYDNEY','DEIDRA','MONIKA','LASHONDA','JUDI','CHELSEY','ANTIONETTE','MARGOT','BOBBY','ADELAIDE','NAN','LEEANN','ELISHA','DESSIE','LIBBY','KATHI','GAYLA','LATANYA','MINA','MELLISA','KIMBERLEE','JASMIN','RENAE','ZELDA','ELDA','MA','JUSTINA','GUSSIE','EMILIE','CAMILLA','ABBIE','ROCIO','KAITLYN','JESSE','EDYTHE','ASHLEIGH','SELINA','LAKESHA','GERI','ALLENE','PAMALA','MICHAELA','DAYNA','CARYN','ROSALIA','SUN','JACQULINE','REBECA','MARYBETH','KRYSTLE','IOLA','DOTTIE','BENNIE','BELLE','AUBREY','GRISELDA','ERNESTINA','ELIDA','ADRIANNE','DEMETRIA','DELMA','CHONG','JAQUELINE','DESTINY','ARLEEN','VIRGINA','RETHA','FATIMA','TILLIE','ELEANORE','CARI','TREVA','BIRDIE','WILHELMINA','ROSALEE','MAURINE','LATRICE','YONG','JENA','TARYN','ELIA','DEBBY','MAUDIE','JEANNA','DELILAH','CATRINA','SHONDA','HORTENCIA','THEODORA','TERESITA','ROBBIN','DANETTE','MARYJANE','FREDDIE','DELPHINE','BRIANNE','NILDA','DANNA','CINDI','BESS','IONA','HANNA','ARIEL','WINONA','VIDA','ROSITA','MARIANNA','WILLIAM','RACHEAL','GUILLERMINA','ELOISA','CELESTINE','CAREN','MALISSA','LONA','CHANTEL','SHELLIE','MARISELA','LEORA','AGATHA','SOLEDAD','MIGDALIA','IVETTE','CHRISTEN','ATHENA','JANEL','CHLOE','VEDA','PATTIE','TESSIE','TERA','MARILYNN','LUCRETIA','KARRIE','DINAH','DANIELA','ALECIA','ADELINA','VERNICE','SHIELA','PORTIA','MERRY','LASHAWN','DEVON','DARA','TAWANA','OMA','VERDA','CHRISTIN','ALENE','ZELLA','SANDI','RAFAELA','MAYA','KIRA','CANDIDA','ALVINA','SUZAN','SHAYLA','LYN','LETTIE','ALVA','SAMATHA','ORALIA','MATILDE','MADONNA','LARISSA','VESTA','RENITA','INDIA','DELOIS','SHANDA','PHILLIS','LORRI','ERLINDA','CRUZ','CATHRINE','BARB','ZOE','ISABELL','IONE','GISELA','CHARLIE','VALENCIA','ROXANNA','MAYME','KISHA','ELLIE','MELLISSA','DORRIS','DALIA','BELLA','ANNETTA','ZOILA','RETA','REINA','LAURETTA','KYLIE','CHRISTAL','PILAR','CHARLA','ELISSA','TIFFANI','TANA','PAULINA','LEOTA','BREANNA','JAYME','CARMEL','VERNELL','TOMASA','MANDI','DOMINGA','SANTA','MELODIE','LURA','ALEXA','TAMELA','RYAN','MIRNA','KERRIE','VENUS','NOEL','FELICITA','CRISTY','CARMELITA','BERNIECE','ANNEMARIE','TIARA','ROSEANNE','MISSY','CORI','ROXANA','PRICILLA','KRISTAL','JUNG','ELYSE','HAYDEE','ALETHA','BETTINA','MARGE','GILLIAN','FILOMENA','CHARLES','ZENAIDA','HARRIETTE','CARIDAD','VADA','UNA','ARETHA','PEARLINE','MARJORY','MARCELA','FLOR','EVETTE','ELOUISE','ALINA','TRINIDAD','DAVID','DAMARIS','CATHARINE','CARROLL','BELVA','NAKIA','MARLENA','LUANNE','LORINE','KARON','DORENE','DANITA','BRENNA','TATIANA','SAMMIE','LOUANN','LOREN','JULIANNA','ANDRIA','PHILOMENA','LUCILA','LEONORA','DOVIE','ROMONA','MIMI','JACQUELIN','GAYE','TONJA','MISTI','JOE','GENE','CHASTITY','STACIA','ROXANN','MICAELA','NIKITA','MEI','VELDA','MARLYS','JOHNNA','AURA','LAVERN','IVONNE','HAYLEY','NICKI','MAJORIE','HERLINDA','GEORGE','ALPHA','YADIRA','PERLA','GREGORIA','DANIEL','ANTONETTE','SHELLI','MOZELLE','MARIAH','JOELLE','CORDELIA','JOSETTE','CHIQUITA','TRISTA','LOUIS','LAQUITA','GEORGIANA','CANDI','SHANON','LONNIE','HILDEGARD','CECIL','VALENTINA','STEPHANY','MAGDA','KAROL','GERRY','GABRIELLA','TIANA','ROMA','RICHELLE','RAY','PRINCESS','OLETA','JACQUE','IDELLA','ALAINA','SUZANNA','JOVITA','BLAIR','TOSHA','RAVEN','NEREIDA','MARLYN','KYLA','JOSEPH','DELFINA','TENA','STEPHENIE','SABINA','NATHALIE','MARCELLE','GERTIE','DARLEEN','THEA','SHARONDA','SHANTEL','BELEN','VENESSA','ROSALINA','ONA','GENOVEVA','COREY','CLEMENTINE','ROSALBA','RENATE','RENATA','MI','IVORY','GEORGIANNA','FLOY','DORCAS','ARIANA','TYRA','THEDA','MARIAM','JULI','JESICA','DONNIE','VIKKI','VERLA','ROSELYN','MELVINA','JANNETTE','GINNY','DEBRAH','CORRIE','ASIA','VIOLETA','MYRTIS','LATRICIA','COLLETTE','CHARLEEN','ANISSA','VIVIANA','TWYLA','PRECIOUS','NEDRA','LATONIA','LAN','HELLEN','FABIOLA','ANNAMARIE','ADELL','SHARYN','CHANTAL','NIKI','MAUD','LIZETTE','LINDY','KIA','KESHA','JEANA','DANELLE','CHARLINE','CHANEL','CARROL','VALORIE','LIA','DORTHA','CRISTAL','SUNNY','LEONE','LEILANI','GERRI','DEBI','ANDRA','KESHIA','IMA','EULALIA','EASTER','DULCE','NATIVIDAD','LINNIE','KAMI','GEORGIE','CATINA','BROOK','ALDA','WINNIFRED','SHARLA','RUTHANN','MEAGHAN','MAGDALENE','LISSETTE','ADELAIDA','VENITA','TRENA','SHIRLENE','SHAMEKA','ELIZEBETH','DIAN','SHANTA','MICKEY','LATOSHA','CARLOTTA','WINDY','SOON','ROSINA','MARIANN','LEISA','JONNIE','DAWNA','CATHIE','BILLY','ASTRID','SIDNEY','LAUREEN','JANEEN','HOLLI','FAWN','VICKEY','TERESSA','SHANTE','RUBYE','MARCELINA','CHANDA','CARY','TERESE','SCARLETT','MARTY','MARNIE','LULU','LISETTE','JENIFFER','ELENOR','DORINDA','DONITA','CARMAN','BERNITA','ALTAGRACIA','ALETA','ADRIANNA','ZORAIDA','RONNIE','NICOLA','LYNDSEY','KENDALL','JANINA','CHRISSY','AMI','STARLA','PHYLIS','PHUONG','KYRA','CHARISSE','BLANCH','SANJUANITA','RONA','NANCI','MARILEE','MARANDA','CORY','BRIGETTE','SANJUANA','MARITA','KASSANDRA','JOYCELYN','IRA','FELIPA','CHELSIE','BONNY','MIREYA','LORENZA','KYONG','ILEANA','CANDELARIA','TONY','TOBY','SHERIE','OK','MARK','LUCIE','LEATRICE','LAKESHIA','GERDA','EDIE','BAMBI','MARYLIN','LAVON','HORTENSE','GARNET','EVIE','TRESSA','SHAYNA','LAVINA','KYUNG','JEANETTA','SHERRILL','SHARA','PHYLISS','MITTIE','ANABEL','ALESIA','THUY','TAWANDA','RICHARD','JOANIE','TIFFANIE','LASHANDA','KARISSA','ENRIQUETA','DARIA','DANIELLA','CORINNA','ALANNA','ABBEY','ROXANE','ROSEANNA','MAGNOLIA','LIDA','KYLE','JOELLEN','ERA','CORAL','CARLEEN','TRESA','PEGGIE','NOVELLA','NILA','MAYBELLE','JENELLE','CARINA','NOVA','MELINA','MARQUERITE','MARGARETTE','JOSEPHINA','EVONNE','DEVIN','CINTHIA','ALBINA','TOYA','TAWNYA','SHERITA','SANTOS','MYRIAM','LIZABETH','LISE','KEELY','JENNI','GISELLE','CHERYLE','ARDITH','ARDIS','ALESHA','ADRIANE','SHAINA','LINNEA','KAROLYN','HONG','FLORIDA','FELISHA','DORI','DARCI','ARTIE','ARMIDA','ZOLA','XIOMARA','VERGIE','SHAMIKA','NENA','NANNETTE','MAXIE','LOVIE','JEANE','JAIMIE','INGE','FARRAH','ELAINA','CAITLYN','STARR','FELICITAS','CHERLY','CARYL','YOLONDA','YASMIN','TEENA','PRUDENCE','PENNIE','NYDIA','MACKENZIE','ORPHA','MARVEL','LIZBETH','LAURETTE','JERRIE','HERMELINDA','CAROLEE','TIERRA','MIRIAN','META','MELONY','KORI','JENNETTE','JAMILA','ENA','ANH','YOSHIKO','SUSANNAH','SALINA','RHIANNON','JOLEEN','CRISTINE','ASHTON','ARACELY','TOMEKA','SHALONDA','MARTI','LACIE','KALA','JADA','ILSE','HAILEY','BRITTANI','ZONA','SYBLE','SHERRYL','RANDY','NIDIA','MARLO','KANDICE','KANDI','DEB','DEAN','AMERICA','ALYCIA','TOMMY','RONNA','NORENE','MERCY','JOSE','INGEBORG','GIOVANNA','GEMMA','CHRISTEL','AUDRY','ZORA','VITA','VAN','TRISH','STEPHAINE','SHIRLEE','SHANIKA','MELONIE','MAZIE','JAZMIN','INGA','HOA','HETTIE','GERALYN','FONDA','ESTRELLA','ADELLA','SU','SARITA','RINA','MILISSA','MARIBETH','GOLDA','EVON','ETHELYN','ENEDINA','CHERISE','CHANA','VELVA','TAWANNA','SADE','MIRTA','LI','KARIE','JACINTA','ELNA','DAVINA','CIERRA','ASHLIE','ALBERTHA','TANESHA','STEPHANI','NELLE','MINDI','LU','LORINDA','LARUE','FLORENE','DEMETRA','DEDRA','CIARA','CHANTELLE','ASHLY','SUZY','ROSALVA','NOELIA','LYDA','LEATHA','KRYSTYNA','KRISTAN','KARRI','DARLINE','DARCIE','CINDA','CHEYENNE','CHERRIE','AWILDA','ALMEDA','ROLANDA','LANETTE','JERILYN','GISELE','EVALYN','CYNDI','CLETA','CARIN','ZINA','ZENA','VELIA','TANIKA','PAUL','CHARISSA','THOMAS','TALIA','MARGARETE','LAVONDA','KAYLEE','KATHLENE','JONNA','IRENA','ILONA','IDALIA','CANDIS','CANDANCE','BRANDEE','ANITRA','ALIDA','SIGRID','NICOLETTE','MARYJO','LINETTE','HEDWIG','CHRISTIANA','CASSIDY','ALEXIA','TRESSIE','MODESTA','LUPITA','LITA','GLADIS','EVELIA','DAVIDA','CHERRI','CECILY','ASHELY','ANNABEL','AGUSTINA','WANITA','SHIRLY','ROSAURA','HULDA','EUN','BAILEY','YETTA','VERONA','THOMASINA','SIBYL','SHANNAN','MECHELLE','LUE','LEANDRA','LANI','KYLEE','KANDY','JOLYNN','FERNE','EBONI','CORENE','ALYSIA','ZULA','NADA','MOIRA','LYNDSAY','LORRETTA','JUAN','JAMMIE','HORTENSIA','GAYNELL','CAMERON','ADRIA','VINA','VICENTA','TANGELA','STEPHINE','NORINE','NELLA','LIANA','LESLEE','KIMBERELY','ILIANA','GLORY','FELICA','EMOGENE','ELFRIEDE','EDEN','EARTHA','CARMA','BEA','OCIE','MARRY','LENNIE','KIARA','JACALYN','CARLOTA','ARIELLE','YU','STAR','OTILIA','KIRSTIN','KACEY','JOHNETTA','JOEY','JOETTA','JERALDINE','JAUNITA','ELANA','DORTHEA','CAMI','AMADA','ADELIA','VERNITA','TAMAR','SIOBHAN','RENEA','RASHIDA','OUIDA','ODELL','NILSA','MERYL','KRISTYN','JULIETA','DANICA','BREANNE','AUREA','ANGLEA','SHERRON','ODETTE','MALIA','LORELEI','LIN','LEESA','KENNA','KATHLYN','FIONA','CHARLETTE','SUZIE','SHANTELL','SABRA','RACQUEL','MYONG','MIRA','MARTINE','LUCIENNE','LAVADA','JULIANN','JOHNIE','ELVERA','DELPHIA','CLAIR','CHRISTIANE','CHAROLETTE','CARRI','AUGUSTINE','ASHA','ANGELLA','PAOLA','NINFA','LEDA','LAI','EDA','SUNSHINE','STEFANI','SHANELL','PALMA','MACHELLE','LISSA','KECIA','KATHRYNE','KARLENE','JULISSA','JETTIE','JENNIFFER','HUI','CORRINA','CHRISTOPHER','CAROLANN','ALENA','TESS','ROSARIA','MYRTICE','MARYLEE','LIANE','KENYATTA','JUDIE','JANEY','IN','ELMIRA','ELDORA','DENNA','CRISTI','CATHI','ZAIDA','VONNIE','VIVA','VERNIE','ROSALINE','MARIELA','LUCIANA','LESLI','KARAN','FELICE','DENEEN','ADINA','WYNONA','TARSHA','SHERON','SHASTA','SHANITA','SHANI','SHANDRA','RANDA','PINKIE','PARIS','NELIDA','MARILOU','LYLA','LAURENE','LACI','JOI','JANENE','DOROTHA','DANIELE','DANI','CAROLYNN','CARLYN','BERENICE','AYESHA','ANNELIESE','ALETHEA','THERSA','TAMIKO','RUFINA','OLIVA','MOZELL','MARYLYN','MADISON','KRISTIAN','KATHYRN','KASANDRA','KANDACE','JANAE','GABRIEL','DOMENICA','DEBBRA','DANNIELLE','CHUN','BUFFY','BARBIE','ARCELIA','AJA','ZENOBIA','SHAREN','SHAREE','PATRICK','PAGE','MY','LAVINIA','KUM','KACIE','JACKELINE','HUONG','FELISA','EMELIA','ELEANORA','CYTHIA','CRISTIN','CLYDE','CLARIBEL','CARON','ANASTACIA','ZULMA','ZANDRA','YOKO','TENISHA','SUSANN','SHERILYN','SHAY','SHAWANDA','SABINE','ROMANA','MATHILDA','LINSEY','KEIKO','JOANA','ISELA','GRETTA','GEORGETTA','EUGENIE','DUSTY','DESIRAE','DELORA','CORAZON','ANTONINA','ANIKA','WILLENE','TRACEE','TAMATHA','REGAN','NICHELLE','MICKIE','MAEGAN','LUANA','LANITA','KELSIE','EDELMIRA','BREE','AFTON','TEODORA','TAMIE','SHENA','MEG','LINH','KELI','KACI','DANYELLE','BRITT','ARLETTE','ALBERTINE','ADELLE','TIFFINY','STORMY','SIMONA','NUMBERS','NICOLASA','NICHOL','NIA','NAKISHA','MEE','MAIRA','LOREEN','KIZZY','JOHNNY','JAY','FALLON','CHRISTENE','BOBBYE','ANTHONY','YING','VINCENZA','TANJA','RUBIE','RONI','QUEENIE','MARGARETT','KIMBERLI','IRMGARD','IDELL','HILMA','EVELINA','ESTA','EMILEE','DENNISE','DANIA','CARL','CARIE','ANTONIO','WAI','SANG','RISA','RIKKI','PARTICIA','MUI','MASAKO','MARIO','LUVENIA','LOREE','LONI','LIEN','KEVIN','GIGI','FLORENCIA','DORIAN','DENITA','DALLAS','CHI','BILLYE','ALEXANDER','TOMIKA','SHARITA','RANA','NIKOLE','NEOMA','MARGARITE','MADALYN','LUCINA','LAILA','KALI','JENETTE','GABRIELE','EVELYNE','ELENORA','CLEMENTINA','ALEJANDRINA','ZULEMA','VIOLETTE','VANNESSA','THRESA','RETTA','PIA','PATIENCE','NOELLA','NICKIE','JONELL','DELTA','CHUNG','CHAYA','CAMELIA','BETHEL','ANYA','ANDREW','THANH','SUZANN','SPRING','SHU','MILA','LILLA','LAVERNA','KEESHA','KATTIE','GIA','GEORGENE','EVELINE','ESTELL','ELIZBETH','VIVIENNE','VALLIE','TRUDIE','STEPHANE','MICHEL','MAGALY','MADIE','KENYETTA','KARREN','JANETTA','HERMINE','HARMONY','DRUCILLA','DEBBI','CELESTINA','CANDIE','BRITNI','BECKIE','AMINA','ZITA','YUN','YOLANDE','VIVIEN','VERNETTA','TRUDI','SOMMER','PEARLE','PATRINA','OSSIE','NICOLLE','LOYCE','LETTY','LARISA','KATHARINA','JOSELYN','JONELLE','JENELL','IESHA','HEIDE','FLORINDA','FLORENTINA','FLO','ELODIA','DORINE','BRUNILDA','BRIGID','ASHLI','ARDELLA','TWANA','THU','TARAH','SUNG','SHEA','SHAVON','SHANE','SERINA','RAYNA','RAMONITA','NGA','MARGURITE','LUCRECIA','KOURTNEY','KATI','JESUS','JESENIA','DIAMOND','CRISTA','AYANA','ALICA','ALIA','VINNIE','SUELLEN','ROMELIA','RACHELL','PIPER','OLYMPIA','MICHIKO','KATHALEEN','JOLIE','JESSI','JANESSA','HANA','HA','ELEASE','CARLETTA','BRITANY','SHONA','SALOME','ROSAMOND','REGENA','RAINA','NGOC','NELIA','LOUVENIA','LESIA','LATRINA','LATICIA','LARHONDA','JINA','JACKI','HOLLIS','HOLLEY','EMMY','DEEANN','CORETTA','ARNETTA','VELVET','THALIA','SHANICE','NETA','MIKKI','MICKI','LONNA','LEANA','LASHUNDA','KILEY','JOYE','JACQULYN','IGNACIA','HYUN','HIROKO','HENRY','HENRIETTE','ELAYNE','DELINDA','DARNELL','DAHLIA','COREEN','CONSUELA','CONCHITA','CELINE','BABETTE','AYANNA','ANETTE','ALBERTINA','SKYE','SHAWNEE','SHANEKA','QUIANA','PAMELIA','MIN','MERRI','MERLENE','MARGIT','KIESHA','KIERA','KAYLENE','JODEE','JENISE','ERLENE','EMMIE','ELSE','DARYL','DALILA','DAISEY','CODY','CASIE','BELIA','BABARA','VERSIE','VANESA','SHELBA','SHAWNDA','SAM','NORMAN','NIKIA','NAOMA','MARNA','MARGERET','MADALINE','LAWANA','KINDRA','JUTTA','JAZMINE','JANETT','HANNELORE','GLENDORA','GERTRUD','GARNETT','FREEDA','FREDERICA','FLORANCE','FLAVIA','DENNIS','CARLINE','BEVERLEE','ANJANETTE','VALDA','TRINITY','TAMALA','STEVIE','SHONNA','SHA','SARINA','ONEIDA','MICAH','MERILYN','MARLEEN','LURLINE','LENNA','KATHERIN','JIN','JENI','HAE','GRACIA','GLADY','FARAH','ERIC','ENOLA','EMA','DOMINQUE','DEVONA','DELANA','CECILA','CAPRICE','ALYSHA','ALI','ALETHIA','VENA','THERESIA','TAWNY','SONG','SHAKIRA','SAMARA','SACHIKO','RACHELE','PAMELLA','NICKY','MARNI','MARIEL','MAREN','MALISA','LIGIA','LERA','LATORIA','LARAE','KIMBER','KATHERN','KAREY','JENNEFER','JANETH','HALINA','FREDIA','DELISA','DEBROAH','CIERA','CHIN','ANGELIKA','ANDREE','ALTHA','YEN','VIVAN','TERRESA','TANNA','SUK','SUDIE','SOO','SIGNE','SALENA','RONNI','REBBECCA','MYRTIE','MCKENZIE','MALIKA','MAIDA','LOAN','LEONARDA','KAYLEIGH','FRANCE','ETHYL','ELLYN','DAYLE','CAMMIE','BRITTNI','BIRGIT','AVELINA','ASUNCION','ARIANNA','AKIKO','VENICE','TYESHA','TONIE','TIESHA','TAKISHA','STEFFANIE','SINDY','SANTANA','MEGHANN','MANDA','MACIE','LADY','KELLYE','KELLEE','JOSLYN','JASON','INGER','INDIRA','GLINDA','GLENNIS','FERNANDA','FAUSTINA','ENEIDA','ELICIA','DOT','DIGNA','DELL','ARLETTA','ANDRE','WILLIA','TAMMARA','TABETHA','SHERRELL','SARI','REFUGIO','REBBECA','PAULETTA','NIEVES','NATOSHA','NAKITA','MAMMIE','KENISHA','KAZUKO','KASSIE','GARY','EARLEAN','DAPHINE','CORLISS','CLOTILDE','CAROLYNE','BERNETTA','AUGUSTINA','AUDREA','ANNIS','ANNABELL','YAN','TENNILLE','TAMICA','SELENE','SEAN','ROSANA','REGENIA','QIANA','MARKITA','MACY','LEEANNE','LAURINE','KYM','JESSENIA','JANITA','GEORGINE','GENIE','EMIKO','ELVIE','DEANDRA','DAGMAR','CORIE','COLLEN','CHERISH','ROMAINE','PORSHA','PEARLENE','MICHELINE','MERNA','MARGORIE','MARGARETTA','LORE','KENNETH','JENINE','HERMINA','FREDERICKA','ELKE','DRUSILLA','DORATHY','DIONE','DESIRE','CELENA','BRIGIDA','ANGELES','ALLEGRA','THEO','TAMEKIA','SYNTHIA','STEPHEN','SOOK','SLYVIA','ROSANN','REATHA','RAYE','MARQUETTA','MARGART','LING','LAYLA','KYMBERLY','KIANA','KAYLEEN','KATLYN','KARMEN','JOELLA','IRINA','EMELDA','ELENI','DETRA','CLEMMIE','CHERYLL','CHANTELL','CATHEY','ARNITA','ARLA','ANGLE','ANGELIC','ALYSE','ZOFIA','THOMASINE','TENNIE','SON','SHERLY','SHERLEY','SHARYL','REMEDIOS','PETRINA','NICKOLE','MYUNG','MYRLE','MOZELLA','LOUANNE','LISHA','LATIA','LANE','KRYSTA','JULIENNE','JOEL','JEANENE','JACQUALINE','ISAURA','GWENDA','EARLEEN','DONALD','CLEOPATRA','CARLIE','AUDIE','ANTONIETTA','ALISE','ALEX','VERDELL','VAL','TYLER','TOMOKO','THAO','TALISHA','STEVEN','SO','SHEMIKA','SHAUN','SCARLET','SAVANNA','SANTINA','ROSIA','RAEANN','ODILIA','NANA','MINNA','MAGAN','LYNELLE','LE','KARMA','JOEANN','IVANA','INELL','ILANA','HYE','HONEY','HEE','GUDRUN','FRANK','DREAMA','CRISSY','CHANTE','CARMELINA','ARVILLA','ARTHUR','ANNAMAE','ALVERA','ALEIDA','AARON','YEE','YANIRA','VANDA','TIANNA','TAM','STEFANIA','SHIRA','PERRY','NICOL','NANCIE','MONSERRATE','MINH','MELYNDA','MELANY','MATTHEW','LOVELLA','LAURE','KIRBY','KACY','JACQUELYNN','HYON','GERTHA','FRANCISCO','ELIANA','CHRISTENA','CHRISTEEN','CHARISE','CATERINA','CARLEY','CANDYCE','ARLENA','AMMIE','YANG','WILLETTE','VANITA','TUYET','TINY','SYREETA','SILVA','SCOTT','RONALD','PENNEY','NYLA','MICHAL','MAURICE','MARYAM','MARYA','MAGEN','LUDIE','LOMA','LIVIA','LANELL','KIMBERLIE','JULEE','DONETTA','DIEDRA','DENISHA','DEANE','DAWNE','CLARINE','CHERRYL','BRONWYN','BRANDON','ALLA','VALERY','TONDA','SUEANN','SORAYA','SHOSHANA','SHELA','SHARLEEN','SHANELLE','NERISSA','MICHEAL','MERIDITH','MELLIE','MAYE','MAPLE','MAGARET','LUIS','LILI','LEONILA','LEONIE','LEEANNA','LAVONIA','LAVERA','KRISTEL','KATHEY','KATHE','JUSTIN','JULIAN','JIMMY','JANN','ILDA','HILDRED','HILDEGARDE','GENIA','FUMIKO','EVELIN','ERMELINDA','ELLY','DUNG','DOLORIS','DIONNA','DANAE','BERNEICE','ANNICE','ALIX','VERENA','VERDIE','TRISTAN','SHAWNNA','SHAWANA','SHAUNNA','ROZELLA','RANDEE','RANAE','MILAGRO','LYNELL','LUISE','LOUIE','LOIDA','LISBETH','KARLEEN','JUNITA','JONA','ISIS','HYACINTH','HEDY','GWENN','ETHELENE','ERLINE','EDWARD','DONYA','DOMONIQUE','DELICIA','DANNETTE','CICELY','BRANDA','BLYTHE','BETHANN','ASHLYN','ANNALEE','ALLINE','YUKO','VELLA','TRANG','TOWANDA','TESHA','SHERLYN','NARCISA','MIGUELINA','MERI','MAYBELL','MARLANA','MARGUERITA','MADLYN','LUNA','LORY','LORIANN','LIBERTY','LEONORE','LEIGHANN','LAURICE','LATESHA','LARONDA','KATRICE','KASIE','KARL','KALEY','JADWIGA','GLENNIE','GEARLDINE','FRANCINA','EPIFANIA','DYAN','DORIE','DIEDRE','DENESE','DEMETRICE','DELENA','DARBY','CRISTIE','CLEORA','CATARINA','CARISA','BERNIE','BARBERA','ALMETA','TRULA','TEREASA','SOLANGE','SHEILAH','SHAVONNE','SANORA','ROCHELL','MATHILDE','MARGARETA','MAIA','LYNSEY','LAWANNA','LAUNA','KENA','KEENA','KATIA','JAMEY','GLYNDA','GAYLENE','ELVINA','ELANOR','DANUTA','DANIKA','CRISTEN','CORDIE','COLETTA','CLARITA','CARMON','BRYNN','AZUCENA','AUNDREA','ANGELE','YI','WALTER','VERLIE','VERLENE','TAMESHA','SILVANA','SEBRINA','SAMIRA','REDA','RAYLENE','PENNI','PANDORA','NORAH','NOMA','MIREILLE','MELISSIA','MARYALICE','LARAINE','KIMBERY','KARYL','KARINE','KAM','JOLANDA','JOHANA','JESUSA','JALEESA','JAE','JACQUELYNE','IRISH','ILUMINADA','HILARIA','HANH','GENNIE','FRANCIE','FLORETTA','EXIE','EDDA','DREMA','DELPHA','BEV','BARBAR','ASSUNTA','ARDELL','ANNALISA','ALISIA','YUKIKO','YOLANDO','WONDA','WEI','WALTRAUD','VETA','TEQUILA','TEMEKA','TAMEIKA','SHIRLEEN','SHENITA','PIEDAD','OZELLA','MIRTHA','MARILU','KIMIKO','JULIANE','JENICE','JEN','JANAY','JACQUILINE','HILDE','FE','FAE','EVAN','EUGENE','ELOIS','ECHO','DEVORAH','CHAU','BRINDA','BETSEY','ARMINDA','ARACELIS','APRYL','ANNETT','ALISHIA','VEOLA','USHA','TOSHIKO','THEOLA','TASHIA','TALITHA','SHERY','RUDY','RENETTA','REIKO','RASHEEDA','OMEGA','OBDULIA','MIKA','MELAINE','MEGGAN','MARTIN','MARLEN','MARGET','MARCELINE','MANA','MAGDALEN','LIBRADA','LEZLIE','LEXIE','LATASHIA','LASANDRA','KELLE','ISIDRA','ISA','INOCENCIA','GWYN','FRANCOISE','ERMINIA','ERINN','DIMPLE','DEVORA','CRISELDA','ARMANDA','ARIE','ARIANE','ANGELO','ANGELENA','ALLEN','ALIZA','ADRIENE','ADALINE','XOCHITL','TWANNA','TRAN','TOMIKO','TAMISHA','TAISHA','SUSY','SIU','RUTHA','ROXY','RHONA','RAYMOND','OTHA','NORIKO','NATASHIA','MERRIE','MELVIN','MARINDA','MARIKO','MARGERT','LORIS','LIZZETTE','LEISHA','KAILA','KA','JOANNIE','JERRICA','JENE','JANNET','JANEE','JACINDA','HERTA','ELENORE','DORETTA','DELAINE','DANIELL','CLAUDIE','CHINA','BRITTA','APOLONIA','AMBERLY','ALEASE','YURI','YUK','WEN','WANETA','UTE','TOMI','SHARRI','SANDIE','ROSELLE','REYNALDA','RAGUEL','PHYLICIA','PATRIA','OLIMPIA','ODELIA','MITZIE','MITCHELL','MISS','MINDA','MIGNON','MICA','MENDY','MARIVEL','MAILE','LYNETTA','LAVETTE','LAURYN','LATRISHA','LAKIESHA','KIERSTEN','KARY','JOSPHINE','JOLYN','JETTA','JANISE','JACQUIE','IVELISSE','GLYNIS','GIANNA','GAYNELLE','EMERALD','DEMETRIUS','DANYELL','DANILLE','DACIA','CORALEE','CHER','CEOLA','BRETT','BELL','ARIANNE','ALESHIA','YUNG','WILLIEMAE','TROY','TRINH','THORA','TAI','SVETLANA','SHERIKA','SHEMEKA','SHAUNDA','ROSELINE','RICKI','MELDA','MALLIE','LAVONNA','LATINA','LARRY','LAQUANDA','LALA','LACHELLE','KLARA','KANDIS','JOHNA','JEANMARIE','JAYE','HANG','GRAYCE','GERTUDE','EMERITA','EBONIE','CLORINDA','CHING','CHERY','CAROLA','BREANN','BLOSSOM','BERNARDINE','BECKI','ARLETHA','ARGELIA','ARA','ALITA','YULANDA','YON','YESSENIA','TOBI','TASIA','SYLVIE','SHIRL','SHIRELY','SHERIDAN','SHELLA','SHANTELLE','SACHA','ROYCE','REBECKA','REAGAN','PROVIDENCIA','PAULENE','MISHA','MIKI','MARLINE','MARICA','LORITA','LATOYIA','LASONYA','KERSTIN','KENDA','KEITHA','KATHRIN','JAYMIE','JACK','GRICELDA','GINETTE','ERYN','ELINA','ELFRIEDA','DANYEL','CHEREE','CHANELLE','BARRIE','AVERY','AURORE','ANNAMARIA','ALLEEN','AILENE','AIDE','YASMINE','VASHTI','VALENTINE','TREASA','TORY','TIFFANEY','SHERYLL','SHARIE','SHANAE','SAU','RAISA','PA','NEDA','MITSUKO','MIRELLA','MILDA','MARYANNA','MARAGRET','MABELLE','LUETTA','LORINA','LETISHA','LATARSHA','LANELLE','LAJUANA','KRISSY','KARLY','KARENA','JON','JESSIKA','JERICA','JEANELLE','JANUARY','JALISA','JACELYN','IZOLA','IVEY','GREGORY','EUNA','ETHA','DREW','DOMITILA','DOMINICA','DAINA','CREOLA','CARLI','CAMIE','BUNNY','BRITTNY','ASHANTI','ANISHA','ALEEN','ADAH','YASUKO','WINTER','VIKI','VALRIE','TONA','TINISHA','THI','TERISA','TATUM','TANEKA','SIMONNE','SHALANDA','SERITA','RESSIE','REFUGIA','PAZ','OLENE','NA','MERRILL','MARGHERITA','MANDIE','MAN','MAIRE','LYNDIA','LUCI','LORRIANE','LORETA','LEONIA','LAVONA','LASHAWNDA','LAKIA','KYOKO','KRYSTINA','KRYSTEN','KENIA','KELSI','JUDE','JEANICE','ISOBEL','GEORGIANN','GENNY','FELICIDAD','EILENE','DEON','DELOISE','DEEDEE','DANNIE','CONCEPTION','CLORA','CHERILYN','CHANG','CALANDRA','BERRY','ARMANDINA','ANISA','ULA','TIMOTHY','TIERA','THERESSA','STEPHANIA','SIMA','SHYLA','SHONTA','SHERA','SHAQUITA','SHALA','SAMMY','ROSSANA','NOHEMI','NERY','MORIAH','MELITA','MELIDA','MELANI','MARYLYNN','MARISHA','MARIETTE','MALORIE','MADELENE','LUDIVINA','LORIA','LORETTE','LORALEE','LIANNE','LEON','LAVENIA','LAURINDA','LASHON','KIT','KIMI','KEILA','KATELYNN','KAI','JONE','JOANE','JI','JAYNA','JANELLA','JA','HUE','HERTHA','FRANCENE','ELINORE','DESPINA','DELSIE','DEEDRA','CLEMENCIA','CARRY','CAROLIN','CARLOS','BULAH','BRITTANIE','BOK','BLONDELL','BIBI','BEAULAH','BEATA','ANNITA','AGRIPINA','VIRGEN','VALENE','UN','TWANDA','TOMMYE','TOI','TARRA','TARI','TAMMERA','SHAKIA','SADYE','RUTHANNE','ROCHEL','RIVKA','PURA','NENITA','NATISHA','MING','MERRILEE','MELODEE','MARVIS','LUCILLA','LEENA','LAVETA','LARITA','LANIE','KEREN','ILEEN','GEORGEANN','GENNA','GENESIS','FRIDA','EWA','EUFEMIA','EMELY','ELA','EDYTH','DEONNA','DEADRA','DARLENA','CHANELL','CHAN','CATHERN','CASSONDRA','CASSAUNDRA','BERNARDA','BERNA','ARLINDA','ANAMARIA','ALBERT','WESLEY','VERTIE','VALERI','TORRI','TATYANA','STASIA','SHERISE','SHERILL','SEASON','SCOTTIE','SANDA','RUTHE','ROSY','ROBERTO','ROBBI','RANEE','QUYEN','PEARLY','PALMIRA','ONITA','NISHA','NIESHA','NIDA','NEVADA','NAM','MERLYN','MAYOLA','MARYLOUISE','MARYLAND','MARX','MARTH','MARGENE','MADELAINE','LONDA','LEONTINE','LEOMA','LEIA','LAWRENCE','LAURALEE','LANORA','LAKITA','KIYOKO','KETURAH','KATELIN','KAREEN','JONIE','JOHNETTE','JENEE','JEANETT','IZETTA','HIEDI','HEIKE','HASSIE','HAROLD','GIUSEPPINA','GEORGANN','FIDELA','FERNANDE','ELWANDA','ELLAMAE','ELIZ','DUSTI','DOTTY','CYNDY','CORALIE','CELESTA','ARGENTINA','ALVERTA','XENIA','WAVA','VANETTA','TORRIE','TASHINA','TANDY','TAMBRA','TAMA','STEPANIE','SHILA','SHAUNTA','SHARAN','SHANIQUA','SHAE','SETSUKO','SERAFINA','SANDEE','ROSAMARIA','PRISCILA','OLINDA','NADENE','MUOI','MICHELINA','MERCEDEZ','MARYROSE','MARIN','MARCENE','MAO','MAGALI','MAFALDA','LOGAN','LINN','LANNIE','KAYCE','KAROLINE','KAMILAH','KAMALA','JUSTA','JOLINE','JENNINE','JACQUETTA','IRAIDA','GERALD','GEORGEANNA','FRANCHESCA','FAIRY','EMELINE','ELANE','EHTEL','EARLIE','DULCIE','DALENE','CRIS','CLASSIE','CHERE','CHARIS','CAROYLN','CARMINA','CARITA','BRIAN','BETHANIE','AYAKO','ARICA','AN','ALYSA','ALESSANDRA','AKILAH','ADRIEN','ZETTA','YOULANDA','YELENA','YAHAIRA','XUAN','WENDOLYN','VICTOR','TIJUANA','TERRELL','TERINA','TERESIA','SUZI','SUNDAY','SHERELL','SHAVONDA','SHAUNTE','SHARDA','SHAKITA','SENA','RYANN','RUBI','RIVA','REGINIA','REA','RACHAL','PARTHENIA','PAMULA','MONNIE','MONET','MICHAELE','MELIA','MARINE','MALKA','MAISHA','LISANDRA','LEO','LEKISHA','LEAN','LAURENCE','LAKENDRA','KRYSTIN','KORTNEY','KIZZIE','KITTIE','KERA','KENDAL','KEMBERLY','KANISHA','JULENE','JULE','JOSHUA','JOHANNE','JEFFREY','JAMEE','HAN','HALLEY','GIDGET','GALINA','FREDRICKA','FLETA','FATIMAH','EUSEBIA','ELZA','ELEONORE','DORTHEY','DORIA','DONELLA','DINORAH','DELORSE','CLARETHA','CHRISTINIA','CHARLYN','BONG','BELKIS','AZZIE','ANDERA','AIKO','ADENA','YER','YAJAIRA','WAN','VANIA','ULRIKE','TOSHIA','TIFANY','STEFANY','SHIZUE','SHENIKA','SHAWANNA','SHAROLYN','SHARILYN','SHAQUANA','SHANTAY','SEE','ROZANNE','ROSELEE','RICKIE','REMONA','REANNA','RAELENE','QUINN','PHUNG','PETRONILA','NATACHA','NANCEY','MYRL','MIYOKO','MIESHA','MERIDETH','MARVELLA','MARQUITTA','MARHTA','MARCHELLE','LIZETH','LIBBIE','LAHOMA','LADAWN','KINA','KATHELEEN','KATHARYN','KARISA','KALEIGH','JUNIE','JULIEANN','JOHNSIE','JANEAN','JAIMEE','JACKQUELINE','HISAKO','HERMA','HELAINE','GWYNETH','GLENN','GITA','EUSTOLIA','EMELINA','ELIN','EDRIS','DONNETTE','DONNETTA','DIERDRE','DENAE','DARCEL','CLAUDE','CLARISA','CINDERELLA','CHIA','CHARLESETTA','CHARITA','CELSA','CASSY','CASSI','CARLEE','BRUNA','BRITTANEY','BRANDE','BILLI','BAO','ANTONETTA','ANGLA','ANGELYN','ANALISA','ALANE','WENONA','WENDIE','VERONIQUE','VANNESA','TOBIE','TEMPIE','SUMIKO','SULEMA','SPARKLE','SOMER','SHEBA','SHAYNE','SHARICE','SHANEL','SHALON','SAGE','ROY','ROSIO','ROSELIA','RENAY','REMA','REENA','PORSCHE','PING','PEG','OZIE','ORETHA','ORALEE','ODA','NU','NGAN','NAKESHA','MILLY','MARYBELLE','MARLIN','MARIS','MARGRETT','MARAGARET','MANIE','LURLENE','LILLIA','LIESELOTTE','LAVELLE','LASHAUNDA','LAKEESHA','KEITH','KAYCEE','KALYN','JOYA','JOETTE','JENAE','JANIECE','ILLA','GRISEL','GLAYDS','GENEVIE','GALA','FREDDA','FRED','ELMER','ELEONOR','DEBERA','DEANDREA','DAN','CORRINNE','CORDIA','CONTESSA','COLENE','CLEOTILDE','CHARLOTT','CHANTAY','CECILLE','BEATRIS','AZALEE','ARLEAN','ARDATH','ANJELICA','ANJA','ALFREDIA','ALEISHA','ADAM','ZADA','YUONNE','XIAO','WILLODEAN','WHITLEY','VENNIE','VANNA','TYISHA','TOVA','TORIE','TONISHA','TILDA','TIEN','TEMPLE','SIRENA','SHERRIL','SHANTI','SHAN','SENAIDA','SAMELLA','ROBBYN','RENDA','REITA','PHEBE','PAULITA','NOBUKO','NGUYET','NEOMI','MOON','MIKAELA','MELANIA','MAXIMINA','MARG','MAISIE','LYNNA','LILLI','LAYNE','LASHAUN','LAKENYA','LAEL','KIRSTIE','KATHLINE','KASHA','KARLYN','KARIMA','JOVAN','JOSEFINE','JENNELL','JACQUI','JACKELYN','HYO','HIEN','GRAZYNA','FLORRIE','FLORIA','ELEONORA','DWANA','DORLA','DONG','DELMY','DEJA','DEDE','DANN','CRYSTA','CLELIA','CLARIS','CLARENCE','CHIEKO','CHERLYN','CHERELLE','CHARMAIN','CHARA','CAMMY','BEE','ARNETTE','ARDELLE','ANNIKA','AMIEE','AMEE','ALLENA','YVONE','YUKI','YOSHIE','YEVETTE','YAEL','WILLETTA','VONCILE','VENETTA','TULA','TONETTE','TIMIKA','TEMIKA','TELMA','TEISHA','TAREN','TA','STACEE','SHIN','SHAWNTA','SATURNINA','RICARDA','POK','PASTY','ONIE','NUBIA','MORA','MIKE','MARIELLE','MARIELLA','MARIANELA','MARDELL','MANY','LUANNA','LOISE','LISABETH','LINDSY','LILLIANA','LILLIAM','LELAH','LEIGHA','LEANORA','LANG','KRISTEEN','KHALILAH','KEELEY','KANDRA','JUNKO','JOAQUINA','JERLENE','JANI','JAMIKA','JAME','HSIU','HERMILA','GOLDEN','GENEVIVE','EVIA','EUGENA','EMMALINE','ELFREDA','ELENE','DONETTE','DELCIE','DEEANNA','DARCEY','CUC','CLARINDA','CIRA','CHAE','CELINDA','CATHERYN','CATHERIN','CASIMIRA','CARMELIA','CAMELLIA','BREANA','BOBETTE','BERNARDINA','BEBE','BASILIA','ARLYNE','AMAL','ALAYNA','ZONIA','ZENIA','YURIKO','YAEKO','WYNELL','WILLOW','WILLENA','VERNIA','TU','TRAVIS','TORA','TERRILYN','TERICA','TENESHA','TAWNA','TAJUANA','TAINA','STEPHNIE','SONA','SOL','SINA','SHONDRA','SHIZUKO','SHERLENE','SHERICE','SHARIKA','ROSSIE','ROSENA','RORY','RIMA','RIA','RHEBA','RENNA','PETER','NATALYA','NANCEE','MELODI','MEDA','MAXIMA','MATHA','MARKETTA','MARICRUZ','MARCELENE','MALVINA','LUBA','LOUETTA','LEIDA','LECIA','LAURAN','LASHAWNA','LAINE','KHADIJAH','KATERINE','KASI','KALLIE','JULIETTA','JESUSITA','JESTINE','JESSIA','JEREMY','JEFFIE','JANYCE','ISADORA','GEORGIANNE','FIDELIA','EVITA','EURA','EULAH','ESTEFANA','ELSY','ELIZABET','ELADIA','DODIE','DION','DIA','DENISSE','DELORAS','DELILA','DAYSI','DAKOTA','CURTIS','CRYSTLE','CONCHA','COLBY','CLARETTA','CHU','CHRISTIA','CHARLSIE','CHARLENA','CARYLON','BETTYANN','ASLEY','ASHLEA','AMIRA','AI','AGUEDA','AGNUS','YUETTE','VINITA','VICTORINA','TYNISHA','TREENA','TOCCARA','TISH','THOMASENA','TEGAN','SOILA','SHILOH','SHENNA','SHARMAINE','SHANTAE','SHANDI','SEPTEMBER','SARAN','SARAI','SANA','SAMUEL','SALLEY','ROSETTE','ROLANDE','REGINE','OTELIA','OSCAR','OLEVIA','NICHOLLE','NECOLE','NAIDA','MYRTA','MYESHA','MITSUE','MINTA','MERTIE','MARGY','MAHALIA','MADALENE','LOVE','LOURA','LOREAN','LEWIS','LESHA','LEONIDA','LENITA','LAVONE','LASHELL','LASHANDRA','LAMONICA','KIMBRA','KATHERINA','KARRY','KANESHA','JULIO','JONG','JENEVA','JAQUELYN','HWA','GILMA','GHISLAINE','GERTRUDIS','FRANSISCA','FERMINA','ETTIE','ETSUKO','ELLIS','ELLAN','ELIDIA','EDRA','DORETHEA','DOREATHA','DENYSE','DENNY','DEETTA','DAINE','CYRSTAL','CORRIN','CAYLA','CARLITA','CAMILA','BURMA','BULA','BUENA','BLAKE','BARABARA','AVRIL','AUSTIN','ALAINE','ZANA','WILHEMINA','WANETTA','VIRGIL','VI','VERONIKA','VERNON','VERLINE','VASILIKI','TONITA','TISA','TEOFILA','TAYNA','TAUNYA','TANDRA','TAKAKO','SUNNI','SUANNE','SIXTA','SHARELL','SEEMA','RUSSELL','ROSENDA','ROBENA','RAYMONDE','PEI','PAMILA','OZELL','NEIDA','NEELY','MISTIE','MICHA','MERISSA','MAURITA','MARYLN','MARYETTA','MARSHALL','MARCELL','MALENA','MAKEDA','MADDIE','LOVETTA','LOURIE','LORRINE','LORILEE','LESTER','LAURENA','LASHAY','LARRAINE','LAREE','LACRESHA','KRISTLE','KRISHNA','KEVA','KEIRA','KAROLE','JOIE','JINNY','JEANNETTA','JAMA','HEIDY','GILBERTE','GEMA','FAVIOLA','EVELYNN','ENDA','ELLI','ELLENA','DIVINA','DAGNY','COLLENE','CODI','CINDIE','CHASSIDY','CHASIDY','CATRICE','CATHERINA','CASSEY','CAROLL','CARLENA','CANDRA','CALISTA','BRYANNA','BRITTENY','BEULA','BARI','AUDRIE','AUDRIA','ARDELIA','ANNELLE','ANGILA','ALONA','ALLYN','DOUGLAS','ROGER','JONATHAN','RALPH','NICHOLAS','BENJAMIN','BRUCE','HARRY','WAYNE','STEVE','HOWARD','ERNEST','PHILLIP','TODD','CRAIG','ALAN','PHILIP','EARL','DANNY','BRYAN','STANLEY','LEONARD','NATHAN','MANUEL','RODNEY','MARVIN','VINCENT','JEFFERY','JEFF','CHAD','JACOB','ALFRED','BRADLEY','HERBERT','FREDERICK','EDWIN','DON','RICKY','RANDALL','BARRY','BERNARD','LEROY','MARCUS','THEODORE','CLIFFORD','MIGUEL','JIM','TOM','CALVIN','BILL','LLOYD','DEREK','WARREN','DARRELL','JEROME','FLOYD','ALVIN','TIM','GORDON','GREG','JORGE','DUSTIN','PEDRO','DERRICK','ZACHARY','HERMAN','GLEN','HECTOR','RICARDO','RICK','BRENT','RAMON','GILBERT','MARC','REGINALD','RUBEN','NATHANIEL','RAFAEL','EDGAR','MILTON','RAUL','BEN','CHESTER','DUANE','FRANKLIN','BRAD','RON','ROLAND','ARNOLD','HARVEY','JARED','ERIK','DARRYL','NEIL','JAVIER','FERNANDO','CLINTON','TED','MATHEW','TYRONE','DARREN','LANCE','KURT','ALLAN','NELSON','GUY','CLAYTON','HUGH','MAX','DWAYNE','DWIGHT','ARMANDO','FELIX','EVERETT','IAN','WALLACE','KEN','BOB','ALFREDO','ALBERTO','DAVE','IVAN','BYRON','ISAAC','MORRIS','CLIFTON','WILLARD','ROSS','ANDY','SALVADOR','KIRK','SERGIO','SETH','KENT','TERRANCE','EDUARDO','TERRENCE','ENRIQUE','WADE','STUART','FREDRICK','ARTURO','ALEJANDRO','NICK','LUTHER','WENDELL','JEREMIAH','JULIUS','OTIS','TREVOR','OLIVER','LUKE','HOMER','GERARD','DOUG','KENNY','HUBERT','LYLE','MATT','ALFONSO','ORLANDO','REX','CARLTON','ERNESTO','NEAL','PABLO','LORENZO','OMAR','WILBUR','GRANT','HORACE','RODERICK','ABRAHAM','WILLIS','RICKEY','ANDRES','CESAR','JOHNATHAN','MALCOLM','RUDOLPH','DAMON','KELVIN','PRESTON','ALTON','ARCHIE','MARCO','WM','PETE','RANDOLPH','GARRY','GEOFFREY','JONATHON','FELIPE','GERARDO','ED','DOMINIC','DELBERT','COLIN','GUILLERMO','EARNEST','LUCAS','BENNY','SPENCER','RODOLFO','MYRON','EDMUND','GARRETT','SALVATORE','CEDRIC','LOWELL','GREGG','SHERMAN','WILSON','SYLVESTER','ROOSEVELT','ISRAEL','JERMAINE','FORREST','WILBERT','LELAND','SIMON','CLARK','IRVING','BRYANT','OWEN','RUFUS','WOODROW','KRISTOPHER','MACK','LEVI','MARCOS','GUSTAVO','JAKE','LIONEL','GILBERTO','CLINT','NICOLAS','ISMAEL','ORVILLE','ERVIN','DEWEY','AL','WILFRED','JOSH','HUGO','IGNACIO','CALEB','TOMAS','SHELDON','ERICK','STEWART','DOYLE','DARREL','ROGELIO','TERENCE','SANTIAGO','ALONZO','ELIAS','BERT','ELBERT','RAMIRO','CONRAD','NOAH','GRADY','PHIL','CORNELIUS','LAMAR','ROLANDO','CLAY','PERCY','DEXTER','BRADFORD','DARIN','AMOS','MOSES','IRVIN','SAUL','ROMAN','RANDAL','TIMMY','DARRIN','WINSTON','BRENDAN','ABEL','DOMINICK','BOYD','EMILIO','ELIJAH','DOMINGO','EMMETT','MARLON','EMANUEL','JERALD','EDMOND','EMIL','DEWAYNE','WILL','OTTO','TEDDY','REYNALDO','BRET','JESS','TRENT','HUMBERTO','EMMANUEL','STEPHAN','VICENTE','LAMONT','GARLAND','MILES','EFRAIN','HEATH','RODGER','HARLEY','ETHAN','ELDON','ROCKY','PIERRE','JUNIOR','FREDDY','ELI','BRYCE','ANTOINE','STERLING','CHASE','GROVER','ELTON','CLEVELAND','DYLAN','CHUCK','DAMIAN','REUBEN','STAN','AUGUST','LEONARDO','JASPER','RUSSEL','ERWIN','BENITO','HANS','MONTE','BLAINE','ERNIE','CURT','QUENTIN','AGUSTIN','MURRAY','JAMAL','ADOLFO','HARRISON','TYSON','BURTON','BRADY','ELLIOTT','WILFREDO','BART','JARROD','VANCE','DENIS','DAMIEN','JOAQUIN','HARLAN','DESMOND','ELLIOT','DARWIN','GREGORIO','BUDDY','XAVIER','KERMIT','ROSCOE','ESTEBAN','ANTON','SOLOMON','SCOTTY','NORBERT','ELVIN','WILLIAMS','NOLAN','ROD','QUINTON','HAL','BRAIN','ROB','ELWOOD','KENDRICK','DARIUS','MOISES','FIDEL','THADDEUS','CLIFF','MARCEL','JACKSON','RAPHAEL','BRYON','ARMAND','ALVARO','JEFFRY','DANE','JOESPH','THURMAN','NED','RUSTY','MONTY','FABIAN','REGGIE','MASON','GRAHAM','ISAIAH','VAUGHN','GUS','LOYD','DIEGO','ADOLPH','NORRIS','MILLARD','ROCCO','GONZALO','DERICK','RODRIGO','WILEY','RIGOBERTO','ALPHONSO','TY','NOE','VERN','REED','JEFFERSON','ELVIS','BERNARDO','MAURICIO','HIRAM','DONOVAN','BASIL','RILEY','NICKOLAS','MAYNARD','SCOT','VINCE','QUINCY','EDDY','SEBASTIAN','FEDERICO','ULYSSES','HERIBERTO','DONNELL','COLE','DAVIS','GAVIN','EMERY','WARD','ROMEO','JAYSON','DANTE','CLEMENT','COY','MAXWELL','JARVIS','BRUNO','ISSAC','DUDLEY','BROCK','SANFORD','CARMELO','BARNEY','NESTOR','STEFAN','DONNY','ART','LINWOOD','BEAU','WELDON','GALEN','ISIDRO','TRUMAN','DELMAR','JOHNATHON','SILAS','FREDERIC','DICK','IRWIN','MERLIN','CHARLEY','MARCELINO','HARRIS','CARLO','TRENTON','KURTIS','HUNTER','AURELIO','WINFRED','VITO','COLLIN','DENVER','CARTER','LEONEL','EMORY','PASQUALE','MOHAMMAD','MARIANO','DANIAL','LANDON','DIRK','BRANDEN','ADAN','BUFORD','GERMAN','WILMER','EMERSON','ZACHERY','FLETCHER','JACQUES','ERROL','DALTON','MONROE','JOSUE','EDWARDO','BOOKER','WILFORD','SONNY','SHELTON','CARSON','THERON','RAYMUNDO','DAREN','HOUSTON','ROBBY','LINCOLN','GENARO','BENNETT','OCTAVIO','CORNELL','HUNG','ARRON','ANTONY','HERSCHEL','GIOVANNI','GARTH','CYRUS','CYRIL','RONNY','LON','FREEMAN','DUNCAN','KENNITH','CARMINE','ERICH','CHADWICK','WILBURN','RUSS','REID','MYLES','ANDERSON','MORTON','JONAS','FOREST','MITCHEL','MERVIN','ZANE','RICH','JAMEL','LAZARO','ALPHONSE','RANDELL','MAJOR','JARRETT','BROOKS','ABDUL','LUCIANO','SEYMOUR','EUGENIO','MOHAMMED','VALENTIN','CHANCE','ARNULFO','LUCIEN','FERDINAND','THAD','EZRA','ALDO','RUBIN','ROYAL','MITCH','EARLE','ABE','WYATT','MARQUIS','LANNY','KAREEM','JAMAR','BORIS','ISIAH','EMILE','ELMO','ARON','LEOPOLDO','EVERETTE','JOSEF','ELOY','RODRICK','REINALDO','LUCIO','JERROD','WESTON','HERSHEL','BARTON','PARKER','LEMUEL','BURT','JULES','GIL','ELISEO','AHMAD','NIGEL','EFREN','ANTWAN','ALDEN','MARGARITO','COLEMAN','DINO','OSVALDO','LES','DEANDRE','NORMAND','KIETH','TREY','NORBERTO','NAPOLEON','JEROLD','FRITZ','ROSENDO','MILFORD','CHRISTOPER','ALFONZO','LYMAN','JOSIAH','BRANT','WILTON','RICO','JAMAAL','DEWITT','BRENTON','OLIN','FOSTER','FAUSTINO','CLAUDIO','JUDSON','GINO','EDGARDO','ALEC','TANNER','JARRED','DONN','TAD','PRINCE','PORFIRIO','ODIS','LENARD','CHAUNCEY','TOD','MEL','MARCELO','KORY','AUGUSTUS','KEVEN','HILARIO','BUD','SAL','ORVAL','MAURO','ZACHARIAH','OLEN','ANIBAL','MILO','JED','DILLON','AMADO','NEWTON','LENNY','RICHIE','HORACIO','BRICE','MOHAMED','DELMER','DARIO','REYES','MAC','JONAH','JERROLD','ROBT','HANK','RUPERT','ROLLAND','KENTON','DAMION','ANTONE','WALDO','FREDRIC','BRADLY','KIP','BURL','WALKER','TYREE','JEFFEREY','AHMED','WILLY','STANFORD','OREN','NOBLE','MOSHE','MIKEL','ENOCH','BRENDON','QUINTIN','JAMISON','FLORENCIO','DARRICK','TOBIAS','HASSAN','GIUSEPPE','DEMARCUS','CLETUS','TYRELL','LYNDON','KEENAN','WERNER','GERALDO','COLUMBUS','CHET','BERTRAM','MARKUS','HUEY','HILTON','DWAIN','DONTE','TYRON','OMER','ISAIAS','HIPOLITO','FERMIN','ADALBERTO','BO','BARRETT','TEODORO','MCKINLEY','MAXIMO','GARFIELD','RALEIGH','LAWERENCE','ABRAM','RASHAD','KING','EMMITT','DARON','SAMUAL','MIQUEL','EUSEBIO','DOMENIC','DARRON','BUSTER','WILBER','RENATO','JC','HOYT','HAYWOOD','EZEKIEL','CHAS','FLORENTINO','ELROY','CLEMENTE','ARDEN','NEVILLE','EDISON','DESHAWN','NATHANIAL','JORDON','DANILO','CLAUD','SHERWOOD','RAYMON','RAYFORD','CRISTOBAL','AMBROSE','TITUS','HYMAN','FELTON','EZEQUIEL','ERASMO','STANTON','LONNY','LEN','IKE','MILAN','LINO','JAROD','HERB','ANDREAS','WALTON','RHETT','PALMER','DOUGLASS','CORDELL','OSWALDO','ELLSWORTH','VIRGILIO','TONEY','NATHANAEL','DEL','BENEDICT','MOSE','JOHNSON','ISREAL','GARRET','FAUSTO','ASA','ARLEN','ZACK','WARNER','MODESTO','FRANCESCO','MANUAL','GAYLORD','GASTON','FILIBERTO','DEANGELO','MICHALE','GRANVILLE','WES','MALIK','ZACKARY','TUAN','ELDRIDGE','CRISTOPHER','CORTEZ','ANTIONE','MALCOM','LONG','KOREY','JOSPEH','COLTON','WAYLON','VON','HOSEA','SHAD','SANTO','RUDOLF','ROLF','REY','RENALDO','MARCELLUS','LUCIUS','KRISTOFER','BOYCE','BENTON','HAYDEN','HARLAND','ARNOLDO','RUEBEN','LEANDRO','KRAIG','JERRELL','JEROMY','HOBERT','CEDRICK','ARLIE','WINFORD','WALLY','LUIGI','KENETH','JACINTO','GRAIG','FRANKLYN','EDMUNDO','SID','PORTER','LEIF','JERAMY','BUCK','WILLIAN','VINCENZO','SHON','LYNWOOD','JERE','HAI','ELDEN','DORSEY','DARELL','BRODERICK','ALONSO'];",
          "tail": ""
        }
      },
      "name": "Problem 22 Names scores",
      "dashedName": "problem-22-names-scores"
    },
    {
      "id": "5900f3831000cf542c50fe96",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>sumOfNonAbundantNumbers(10000)</code> should return 3731004.",
          "testString":
            "assert(sumOfNonAbundantNumbers(10000) === 3731004, '<code>sumOfNonAbundantNumbers(10000)</code> should return 3731004.');"
        },
        {
          "text":
            "<code>sumOfNonAbundantNumbers(15000)</code> should return 4039939.",
          "testString":
            "assert(sumOfNonAbundantNumbers(15000) === 4039939, '<code>sumOfNonAbundantNumbers(15000)</code> should return 4039939.');"
        },
        {
          "text":
            "<code>sumOfNonAbundantNumbers(20000)</code> should return 4159710.",
          "testString":
            "assert(sumOfNonAbundantNumbers(20000) === 4159710, '<code>sumOfNonAbundantNumbers(20000)</code> should return 4159710.');"
        },
        {
          "text":
            "<code>sumOfNonAbundantNumbers(28123)</code> should return 4179871.",
          "testString":
            "assert(sumOfNonAbundantNumbers(28123) === 4179871, '<code>sumOfNonAbundantNumbers(28123)</code> should return 4179871.');"
        }
      ],
      "description": [
        "A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.",
        "A number <var>n</var> is called deficient if the sum of its proper divisors is less than <var>n</var> and it is called abundant if this sum exceeds <var>n</var>.",
        "As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.",
        "Find the sum of all positive integers <= <var>n</var> which cannot be written as the sum of two abundant numbers."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sumOfNonAbundantNumbers(n) {\n  // Good luck!\n  return n;\n}\n\nsumOfNonAbundantNumbers(28123);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 23 Nonabundant sums",
      "dashedName": "problem-23-nonabundant-sums"
    },
    {
      "id": "5900f3841000cf542c50fe97",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>lexicographicPermutations(699999)</code> should return 1938246570.",
          "testString":
            "assert(lexicographicPermutations(699999) == 1938246570, '<code>lexicographicPermutations(699999)</code> should return 1938246570.');"
        },
        {
          "text":
            "<code>lexicographicPermutations(899999)</code> should return 2536987410.",
          "testString":
            "assert(lexicographicPermutations(899999) == 2536987410, '<code>lexicographicPermutations(899999)</code> should return 2536987410.');"
        },
        {
          "text":
            "<code>lexicographicPermutations(900000)</code> should return 2537014689.",
          "testString":
            "assert(lexicographicPermutations(900000) == 2537014689, '<code>lexicographicPermutations(900000)</code> should return 2537014689.');"
        },
        {
          "text":
            "<code>lexicographicPermutations(999999)</code> should return 2783915460.",
          "testString":
            "assert(lexicographicPermutations(999999) == 2783915460, '<code>lexicographicPermutations(999999)</code> should return 2783915460.');"
        }
      ],
      "description": [
        "A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:",
        "<div style='text-align: center;'>012   021   102   120   201   210</div>",
        "What is the <var>n</var>th lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function lexicographicPermutations(n) {\n  // Good luck!\n  return n;\n}\n\nlexicographicPermutations(999999);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 24 Lexicographic permutations",
      "dashedName": "problem-24-lexicographic-permutations"
    },
    {
      "id": "5900f3851000cf542c50fe98",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>digitFibonacci(5)</code> should return 20.",
          "testString":
            "assert(digitFibonacci(5) == 20, '<code>digitFibonacci(5)</code> should return 20.');"
        },
        {
          "text": "<code>digitFibonacci(10)</code> should return 44.",
          "testString":
            "assert(digitFibonacci(10) == 44, '<code>digitFibonacci(10)</code> should return 44.');"
        },
        {
          "text": "<code>digitFibonacci(15)</code> should return 68.",
          "testString":
            "assert(digitFibonacci(15) == 68, '<code>digitFibonacci(15)</code> should return 68.');"
        },
        {
          "text": "<code>digitFibonacci(20)</code> should return 92.",
          "testString":
            "assert(digitFibonacci(20) == 92, '<code>digitFibonacci(20)</code> should return 92.');"
        }
      ],
      "description": [
        "The Fibonacci sequence is defined by the recurrence relation:",
        "<div style='padding-left: 4em;'>F<sub>n</sub> = F<sub>n−1</sub> + F<sub>n−2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.</div>",
        "Hence the first 12 terms will be:",
        "<div style='padding-left: 4em; display: inline-grid; grid-template-rows: auto; row-gap: 7px;'><div>F<sub>1</sub> = 1</div><div>F<sub>2</sub> = 1</div><div>F<sub>3</sub> = 2</div><div>F<sub>4</sub> = 3</div><div>F<sub>5</sub> = 5</div><div>F<sub>6</sub> = 8</div><div>F<sub>7</sub> = 13</div><div>F<sub>8</sub> = 21</div><div>F<sub>9</sub> = 34</div><div>F<sub>10</sub> = 55</div><div>F<sub>11</sub> = 89</div><div>F<sub>12</sub> = 144</div></div>",
        "The 12th term, F<sub>12</sub>, is the first term to contain three digits.",
        "What is the index of the first term in the Fibonacci sequence to contain <var>n</var> digits?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function digitFibonacci(n) {\n  // Good luck!\n  return n;\n}\n\ndigitFibonacci(20);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 25 1000digit Fibonacci number",
      "dashedName": "problem-25-1000digit-fibonacci-number"
    },
    {
      "id": "5900f3861000cf542c50fe99",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>reciprocalCycles(700)</code> should return 659.",
          "testString":
            "assert(reciprocalCycles(700) == 659, '<code>reciprocalCycles(700)</code> should return 659.');"
        },
        {
          "text": "<code>reciprocalCycles(800)</code> should return 743.",
          "testString":
            "assert(reciprocalCycles(800) == 743, '<code>reciprocalCycles(800)</code> should return 743.');"
        },
        {
          "text": "<code>reciprocalCycles(900)</code> should return 887.",
          "testString":
            "assert(reciprocalCycles(900) == 887, '<code>reciprocalCycles(900)</code> should return 887.');"
        },
        {
          "text": "<code>reciprocalCycles(1000)</code> should return 983.",
          "testString":
            "assert(reciprocalCycles(1000) == 983, '<code>reciprocalCycles(1000)</code> should return 983.');"
        }
      ],
      "description": [
        "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:",
        "<div style='padding-left: 4em; display: inline-grid; grid-template-rows: auto; row-gap: 7px;'><div><sup>1</sup>/<sub>2</sub> = 0.5</div><div><sup>1</sup>/<sub>3</sub> = 0.(3)</div><div><sup>1</sup>/<sub>4</sub> = 0.25</div><div><sup>1</sup>/<sub>5</sub> = 0.2</div><div><sup>1</sup>/<sub>6</sub> = 0.1(6)</div><div><sup>1</sup>/<sub>7</sub> = 0.(142857)</div><div><sup>1</sup>/<sub>8</sub> = 0.125</div><div><sup>1</sup>/<sub>9</sub> = 0.(1)</div><div><sup>1</sup>/<sub>10</sub> = 0.1</div></div>",
        "Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that <sup>1</sup>/<sub>7</sub> has a 6-digit recurring cycle.",
        "Find the value of <var>d</var> < <var>n</var> for which <sup>1</sup>/<sub>d</sub> contains the longest recurring cycle in its decimal fraction part."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function reciprocalCycles(n) {\n  // Good luck!\n  return n;\n}\n\nreciprocalCycles(1000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 26 Reciprocal cycles",
      "dashedName": "problem-26-reciprocal-cycles"
    },
    {
      "id": "5900f3871000cf542c50fe9a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>quadraticPrimes(200)</code> should return -4925.",
          "testString":
            "assert(quadraticPrimes(200) == -4925, '<code>quadraticPrimes(200)</code> should return -4925.');"
        },
        {
          "text": "<code>quadraticPrimes(500)</code> should return -18901.",
          "testString":
            "assert(quadraticPrimes(500) == -18901, '<code>quadraticPrimes(500)</code> should return -18901.');"
        },
        {
          "text": "<code>quadraticPrimes(800)</code> should return -43835.",
          "testString":
            "assert(quadraticPrimes(800) == -43835, '<code>quadraticPrimes(800)</code> should return -43835.');"
        },
        {
          "text": "<code>quadraticPrimes(1000)</code> should return -59231.",
          "testString":
            "assert(quadraticPrimes(1000) == -59231, '<code>quadraticPrimes(1000)</code> should return -59231.');"
        }
      ],
      "description": [
        "Euler discovered the remarkable quadratic formula:",
        "$n^2 + n + 41$",
        "It turns out that the formula will produce 40 primes for the consecutive integer values $0 \\le n \\le 39$. However, when $n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when $n = 41, 41^2 + 41 + 41$ is clearly divisible by 41.",
        "The incredible formula $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values $0 \\le n \\le 79$. The product of the coefficients, −79 and 1601, is −126479.",
        "Considering quadratics of the form:",
        "",
        "$n^2 + an + b$, where $|a| < range$ and $|b| \\le range$where $|n|$ is the modulus/absolute value of $n$e.g. $|11| = 11$ and $|-4| = 4$",
        "",
        "Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function quadraticPrimes(range) {\n  // Good luck!\n  return range;\n}\n\nquadraticPrimes(1000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 27 Quadratic primes",
      "dashedName": "problem-27-quadratic-primes"
    },
    {
      "id": "5900f3881000cf542c50fe9b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>spiralDiagonals(101)</code> should return 692101.",
          "testString":
            "assert(spiralDiagonals(101) == 692101, '<code>spiralDiagonals(101)</code> should return 692101.');"
        },
        {
          "text": "<code>spiralDiagonals(303)</code> should return 18591725.",
          "testString":
            "assert(spiralDiagonals(303) == 18591725, '<code>spiralDiagonals(303)</code> should return 18591725.');"
        },
        {
          "text": "<code>spiralDiagonals(505)</code> should return 85986601.",
          "testString":
            "assert(spiralDiagonals(505) == 85986601, '<code>spiralDiagonals(505)</code> should return 85986601.');"
        },
        {
          "text": "<code>spiralDiagonals(1001)</code> should return 669171001.",
          "testString":
            "assert(spiralDiagonals(1001) == 669171001, '<code>spiralDiagonals(1001)</code> should return 669171001.');"
        }
      ],
      "description": [
        "Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:",
        "21 22 23 24 25",
        "20  7  8  9 10",
        "19  6  1  2 11",
        "18  5  4  3 12",
        "17 16 15 14 13",
        "It can be verified that the sum of the numbers on the diagonals is 101.",
        "What is the sum of the numbers on the diagonals in a n by n spiral formed in the same way?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function spiralDiagonals(n) {\n  // Good luck!\n  return n;\n}\n\nspiralDiagonals(1001);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 28 Number spiral diagonals",
      "dashedName": "problem-28-number-spiral-diagonals"
    },
    {
      "id": "5900f3891000cf542c50fe9c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>distinctPowers(15)</code> should return 177.",
          "testString":
            "assert.strictEqual(distinctPowers(15), 177, '<code>distinctPowers(15)</code> should return 177.');"
        },
        {
          "text": "<code>distinctPowers(20)</code> should return 324.",
          "testString":
            "assert.strictEqual(distinctPowers(20), 324, '<code>distinctPowers(20)</code> should return 324.');"
        },
        {
          "text": "<code>distinctPowers(25)</code> should return 519.",
          "testString":
            "assert.strictEqual(distinctPowers(25), 519, '<code>distinctPowers(25)</code> should return 519.');"
        },
        {
          "text": "<code>distinctPowers(30)</code> should return 755.",
          "testString":
            "assert.strictEqual(distinctPowers(30), 755, '<code>distinctPowers(30)</code> should return 755.');"
        }
      ],
      "description": [
        "Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:",
        "22=4, 23=8, 24=16, 25=32",
        "32=9, 33=27, 34=81, 35=243",
        "42=16, 43=64, 44=256, 45=1024",
        "52=25, 53=125, 54=625, 55=3125",
        "If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:",
        "4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125",
        "How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ n and 2 ≤ b ≤ n?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function distinctPowers(n) {\n  // Good luck!\n  return n;\n}\n\ndistinctPowers(30);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 29 Distinct powers",
      "dashedName": "problem-29-distinct-powers"
    },
    {
      "id": "5900f38a1000cf542c50fe9d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>digitnPowers(2)</code> should return 0.",
          "testString":
            "assert(digitnPowers(2) == 0, '<code>digitnPowers(2)</code> should return 0.');"
        },
        {
          "text": "<code>digitnPowers(3)</code> should return 1301.",
          "testString":
            "assert(digitnPowers(3) == 1301, '<code>digitnPowers(3)</code> should return 1301.');"
        },
        {
          "text": "<code>digitnPowers(4)</code> should return 19316.",
          "testString":
            "assert(digitnPowers(4) == 19316, '<code>digitnPowers(4)</code> should return 19316.');"
        },
        {
          "text": "<code>digitnPowers(5)</code> should return 443839.",
          "testString":
            "assert(digitnPowers(5) == 443839, '<code>digitnPowers(5)</code> should return 443839.');"
        }
      ],
      "description": [
        "Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:",
        "1634 = 14 + 64 + 34 + 44",
        "8208 = 84 + 24 + 04 + 84",
        "9474 = 94 + 44 + 74 + 44",
        "As 1 = 14 is not a sum it is not included.",
        "The sum of these numbers is 1634 + 8208 + 9474 = 19316.",
        "Find the sum of all the numbers that can be written as the sum of n powers of their digits."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function digitnPowers(n) {\n  // Good luck!\n  return n;\n}\n\ndigitnPowers(5);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 30 Digit n powers",
      "dashedName": "problem-30-digit-n-powers"
    },
    {
      "id": "5900f38b1000cf542c50fe9e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>coinSums(50)</code> should return 451.",
          "testString":
            "assert(coinSums(50) == 451, '<code>coinSums(50)</code> should return 451.');"
        },
        {
          "text": "<code>coinSums(100)</code> should return 4563.",
          "testString":
            "assert(coinSums(100) == 4563, '<code>coinSums(100)</code> should return 4563.');"
        },
        {
          "text": "<code>coinSums(150)</code> should return 21873.",
          "testString":
            "assert(coinSums(150) == 21873, '<code>coinSums(150)</code> should return 21873.');"
        },
        {
          "text": "<code>coinSums(200)</code> should return 73682.",
          "testString":
            "assert(coinSums(200) == 73682, '<code>coinSums(200)</code> should return 73682.');"
        }
      ],
      "description": [
        "In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:",
        "1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).",
        "It is possible to make £2 in the following way:",
        "1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p",
        "How many different ways can £(n) be made using any number of coins?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function coinSums(n) {\n  // Good luck!\n  return n;\n}\n\ncoinSums(200);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 31 Coin sums",
      "dashedName": "problem-31-coin-sums"
    },
    {
      "id": "5900f38c1000cf542c50fe9f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>pandigitalProducts()</code> is a function.",
          "testString":
            "assert(typeof pandigitalProducts === 'function', '<code>pandigitalProducts()</code> is a function.');"
        },
        {
          "text": "<code>pandigitalProducts()</code> should return 45228.",
          "testString":
            "assert.strictEqual(pandigitalProducts(), 45228, '<code>pandigitalProducts()</code> should return 45228.');"
        }
      ],
      "description": [
        "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.",
        "",
        "The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.",
        "",
        "Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.",
        "",
        "HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pandigitalProducts() {\n  // Good luck!\n  return true;\n}\n\npandigitalProducts();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 32 Pandigital products",
      "dashedName": "problem-32-pandigital-products"
    },
    {
      "id": "5900f38d1000cf542c50fea0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>digitCancellingFractions()</code> should return 100.",
          "testString":
            "assert.strictEqual(digitCancellingFractions(), 100, '<code>digitCancellingFractions()</code> should return 100.');"
        }
      ],
      "description": [
        "The fraction <sup>49</sup>/<sub>98</sub> is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that <sup>49</sup>/<sub>98</sub> = <sup>4</sup>/<sub>8</sub>, which is correct, is obtained by cancelling the 9s.",
        "We shall consider fractions like, <sup>30</sup>/<sub>50</sub> = <sup>3</sup>/<sub>5</sub>, to be trivial examples.",
        "There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.",
        "If the product of these four fractions is given in its lowest common terms, find the value of the denominator."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function digitCancellingFractions() {\n  // Good luck!\n  return true;\n}\n\ndigitCancellingFractions();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 33 Digit cancelling fractions",
      "dashedName": "problem-33-digit-cancelling-fractions"
    },
    {
      "id": "5900f38e1000cf542c50fea1",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>digitFactorial()</code> should return { sum: 40730, numbers: [145, 40585] }.",
          "testString":
            "assert.deepEqual(digitFactorial(), { sum: 40730, numbers: [145, 40585] }, '<code>digitFactorial()</code> should return { sum: 40730, numbers: [145, 40585] }.');"
        }
      ],
      "description": [
        "145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.",
        "Find the numbers and the sum of the numbers which are equal to the sum of the factorial of their digits.",
        "Note: as 1! = 1 and 2! = 2 are not sums they are not included."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function digitFactorial() {\n  // Good luck!\n  var sum = 0;\n  var numbers = [];\n  return { sum, numbers };\n}\n\ndigitFactorial();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 34 Digit factorials",
      "dashedName": "problem-34-digit-factorials"
    },
    {
      "id": "5900f38f1000cf542c50fea2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>circularPrimes(100)</code> should return 13.",
          "testString":
            "assert(circularPrimes(100) == 13, '<code>circularPrimes(100)</code> should return 13.');"
        },
        {
          "text": "<code>circularPrimes(100000)</code> should return 43.",
          "testString":
            "assert(circularPrimes(100000) == 43, '<code>circularPrimes(100000)</code> should return 43.');"
        },
        {
          "text": "<code>circularPrimes(250000)</code> should return 45.",
          "testString":
            "assert(circularPrimes(250000) == 45, '<code>circularPrimes(250000)</code> should return 45.');"
        },
        {
          "text": "<code>circularPrimes(500000)</code> should return 49.",
          "testString":
            "assert(circularPrimes(500000) == 49, '<code>circularPrimes(500000)</code> should return 49.');"
        },
        {
          "text": "<code>circularPrimes(750000)</code> should return 49.",
          "testString":
            "assert(circularPrimes(750000) == 49, '<code>circularPrimes(750000)</code> should return 49.');"
        },
        {
          "text": "<code>circularPrimes(1000000)</code> should return 55.",
          "testString":
            "assert(circularPrimes(1000000) == 55, '<code>circularPrimes(1000000)</code> should return 55.');"
        }
      ],
      "description": [
        "The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.",
        "There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.",
        "How many circular primes are there below n, whereas 100 <= n <= 1000000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function circularPrimes(n) {\n  // Good luck!\n  return n;\n}\n\ncircularPrimes(1000000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 35 Circular primes",
      "dashedName": "problem-35-circular-primes"
    },
    {
      "id": "5900f3901000cf542c50fea3",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>doubleBasePalindromes(1000)</code> should return 1772.",
          "testString":
            "assert(doubleBasePalindromes(1000) == 1772, '<code>doubleBasePalindromes(1000)</code> should return 1772.');"
        },
        {
          "text":
            "<code>doubleBasePalindromes(50000)</code> should return 105795.",
          "testString":
            "assert(doubleBasePalindromes(50000) == 105795, '<code>doubleBasePalindromes(50000)</code> should return 105795.');"
        },
        {
          "text":
            "<code>doubleBasePalindromes(500000)</code> should return 286602.",
          "testString":
            "assert(doubleBasePalindromes(500000) == 286602, '<code>doubleBasePalindromes(500000)</code> should return 286602.');"
        },
        {
          "text":
            "<code>doubleBasePalindromes(1000000)</code> should return 872187.",
          "testString":
            "assert(doubleBasePalindromes(1000000) == 872187, '<code>doubleBasePalindromes(1000000)</code> should return 872187.');"
        }
      ],
      "description": [
        "The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.",
        "Find the sum of all numbers, less than n, whereas 1000 <= n <= 1000000, which are palindromic in base 10 and base 2.",
        "(Please note that the palindromic number, in either base, may not include leading zeros.)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function doubleBasePalindromes(n) {\n  // Good luck!\n  return n;\n}\n\ndoubleBasePalindromes(1000000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 36 Doublebase palindromes",
      "dashedName": "problem-36-doublebase-palindromes"
    },
    {
      "id": "5900f3911000cf542c50fea4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>truncatablePrimes(8)</code> should return 1986.",
          "testString":
            "assert(truncatablePrimes(8) == 1986, '<code>truncatablePrimes(8)</code> should return 1986.');"
        },
        {
          "text": "<code>truncatablePrimes(9)</code> should return 5123.",
          "testString":
            "assert(truncatablePrimes(9) == 5123, '<code>truncatablePrimes(9)</code> should return 5123.');"
        },
        {
          "text": "<code>truncatablePrimes(10)</code> should return 8920.",
          "testString":
            "assert(truncatablePrimes(10) == 8920, '<code>truncatablePrimes(10)</code> should return 8920.');"
        },
        {
          "text": "<code>truncatablePrimes(11)</code> should return 748317.",
          "testString":
            "assert(truncatablePrimes(11) == 748317, '<code>truncatablePrimes(11)</code> should return 748317.');"
        }
      ],
      "description": [
        "The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.",
        "Find the sum of the only n (8 <= n <= 11) primes that are both truncatable from left to right and right to left.",
        "NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function truncatablePrimes(n) {\n  // Good luck!\n  return n;\n}\n\ntruncatablePrimes(11);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 37 Truncatable primes",
      "dashedName": "problem-37-truncatable-primes"
    },
    {
      "id": "5900f3931000cf542c50fea5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>pandigitalMultiples()</code> should return 932718654.",
          "testString":
            "assert.strictEqual(pandigitalMultiples(), 932718654, '<code>pandigitalMultiples()</code> should return 932718654.');"
        }
      ],
      "description": [
        "Take the number 192 and multiply it by each of 1, 2, and 3:",
        "192 × 1 = 192",
        "192 × 2 = 384",
        "192 × 3 = 576",
        "By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1, 2, 3).",
        "The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5).",
        "What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1, 2, ... , <var>n</var>) where <var>n</var> > 1?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pandigitalMultiples() {\n  // Good luck!\n  return true;\n}\n\npandigitalMultiples();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 38 Pandigital multiples",
      "dashedName": "problem-38-pandigital-multiples"
    },
    {
      "id": "5900f3931000cf542c50fea6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>intRightTriangles(500)</code> should return 420.",
          "testString":
            "assert(intRightTriangles(500) == 420, '<code>intRightTriangles(500)</code> should return 420.');"
        },
        {
          "text": "<code>intRightTriangles(800)</code> should return 420.",
          "testString":
            "assert(intRightTriangles(800) == 420, '<code>intRightTriangles(800)</code> should return 420.');"
        },
        {
          "text": "<code>intRightTriangles(900)</code> should return 840.",
          "testString":
            "assert(intRightTriangles(900) == 840, '<code>intRightTriangles(900)</code> should return 840.');"
        },
        {
          "text": "<code>intRightTriangles(1000)</code> should return 840.",
          "testString":
            "assert(intRightTriangles(1000) == 840, '<code>intRightTriangles(1000)</code> should return 840.');"
        }
      ],
      "description": [
        "If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.",
        "{20,48,52}, {24,45,51}, {30,40,50}",
        "For which value of p ≤ n, is the number of solutions maximised?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function intRightTriangles(n) {\n  // Good luck!\n  return n;\n}\n\nintRightTriangles(1000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 39 Integer right triangles",
      "dashedName": "problem-39-integer-right-triangles"
    },
    {
      "id": "5900f3941000cf542c50fea7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>champernownesConstant(100)</code> should return 5.",
          "testString":
            "assert.strictEqual(champernownesConstant(100), 5, '<code>champernownesConstant(100)</code> should return 5.');"
        },
        {
          "text": "<code>champernownesConstant(1000)</code> should return 15.",
          "testString":
            "assert.strictEqual(champernownesConstant(1000), 15, '<code>champernownesConstant(1000)</code> should return 15.');"
        },
        {
          "text":
            "<code>champernownesConstant(1000000)</code> should return 210.",
          "testString":
            "assert.strictEqual(champernownesConstant(1000000), 210, '<code>champernownesConstant(1000000)</code> should return 210.');"
        }
      ],
      "description": [
        "An irrational decimal fraction is created by concatenating the positive integers:",
        "<span style='display: block; text-align: center;'>0.12345678910<b style='color: red;'>1</b>112131415161718192021...</span>",
        "It can be seen that the 12<sup>th</sup> digit of the fractional part is 1.",
        "If <i>d<sub>n</sub></i> represents the <i>n</i><sup>th</sup> digit of the fractional part, find the value of the following expression.",
        "<span style='display: block; text-align: center;'>d<sub>1</sub> × d<sub>10</sub> × d<sub>100</sub> × d<sub>1000</sub> × d<sub>10000</sub> × d<sub>100000</sub> × d<sub>1000000</sub></span>"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function champernownesConstant(n) {\n  // Good luck!\n  return true;\n}\n\nchampernownesConstant(100);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 40 Champernownes constant",
      "dashedName": "problem-40-champernownes-constant"
    },
    {
      "id": "5900f3951000cf542c50fea8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>pandigitalPrime(4)</code> should return 4231.",
          "testString":
            "assert(pandigitalPrime(4) == 4231, '<code>pandigitalPrime(4)</code> should return 4231.');"
        },
        {
          "text": "<code>pandigitalPrime(7)</code> should return 7652413.",
          "testString":
            "assert(pandigitalPrime(7) == 7652413, '<code>pandigitalPrime(7)</code> should return 7652413.');"
        }
      ],
      "description": [
        "We shall say that an <i>n</i>-digit number is pandigital if it makes use of all the digits 1 to <i>n</i> exactly once. For example, 2143 is a 4-digit pandigital and is also prime.",
        "What is the largest <i>n</i>-length digit pandigital prime that exists?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pandigitalPrime(n) {\n  // Good luck!\n  return n;\n}\n\npandigitalPrime(7);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 41 Pandigital prime",
      "dashedName": "problem-41-pandigital-prime"
    },
    {
      "id": "5900f3961000cf542c50fea9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>codedTriangleNumbers(1400)</code> should return 129.",
          "testString":
            "assert(codedTriangleNumbers(1400) == 129, '<code>codedTriangleNumbers(1400)</code> should return 129.');"
        },
        {
          "text": "<code>codedTriangleNumbers(1500)</code> should return 137.",
          "testString":
            "assert(codedTriangleNumbers(1500) == 137, '<code>codedTriangleNumbers(1500)</code> should return 137.');"
        },
        {
          "text": "<code>codedTriangleNumbers(1600)</code> should return 141.",
          "testString":
            "assert(codedTriangleNumbers(1600) == 141, '<code>codedTriangleNumbers(1600)</code> should return 141.');"
        },
        {
          "text": "<code>codedTriangleNumbers(1786)</code> should return 162.",
          "testString":
            "assert(codedTriangleNumbers(1786) == 162, '<code>codedTriangleNumbers(1786)</code> should return 162.');"
        }
      ],
      "description": [
        "The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:",
        "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...",
        "By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.",
        "Using words array of n-length, how many are triangle words?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function codedTriangleNumbers(n) {\n  // Good luck!\n  return 1;\n}\n// only change code above this line\n\nconst words = ['A','ABILITY','ABLE','ABOUT','ABOVE','ABSENCE','ABSOLUTELY','ACADEMIC','ACCEPT','ACCESS','ACCIDENT','ACCOMPANY','ACCORDING','ACCOUNT','ACHIEVE','ACHIEVEMENT','ACID','ACQUIRE','ACROSS','ACT','ACTION','ACTIVE','ACTIVITY','ACTUAL','ACTUALLY','ADD','ADDITION','ADDITIONAL','ADDRESS','ADMINISTRATION','ADMIT','ADOPT','ADULT','ADVANCE','ADVANTAGE','ADVICE','ADVISE','AFFAIR','AFFECT','AFFORD','AFRAID','AFTER','AFTERNOON','AFTERWARDS','AGAIN','AGAINST','AGE','AGENCY','AGENT','AGO','AGREE','AGREEMENT','AHEAD','AID','AIM','AIR','AIRCRAFT','ALL','ALLOW','ALMOST','ALONE','ALONG','ALREADY','ALRIGHT','ALSO','ALTERNATIVE','ALTHOUGH','ALWAYS','AMONG','AMONGST','AMOUNT','AN','ANALYSIS','ANCIENT','AND','ANIMAL','ANNOUNCE','ANNUAL','ANOTHER','ANSWER','ANY','ANYBODY','ANYONE','ANYTHING','ANYWAY','APART','APPARENT','APPARENTLY','APPEAL','APPEAR','APPEARANCE','APPLICATION','APPLY','APPOINT','APPOINTMENT','APPROACH','APPROPRIATE','APPROVE','AREA','ARGUE','ARGUMENT','ARISE','ARM','ARMY','AROUND','ARRANGE','ARRANGEMENT','ARRIVE','ART','ARTICLE','ARTIST','AS','ASK','ASPECT','ASSEMBLY','ASSESS','ASSESSMENT','ASSET','ASSOCIATE','ASSOCIATION','ASSUME','ASSUMPTION','AT','ATMOSPHERE','ATTACH','ATTACK','ATTEMPT','ATTEND','ATTENTION','ATTITUDE','ATTRACT','ATTRACTIVE','AUDIENCE','AUTHOR','AUTHORITY','AVAILABLE','AVERAGE','AVOID','AWARD','AWARE','AWAY','AYE','BABY','BACK','BACKGROUND','BAD','BAG','BALANCE','BALL','BAND','BANK','BAR','BASE','BASIC','BASIS','BATTLE','BE','BEAR','BEAT','BEAUTIFUL','BECAUSE','BECOME','BED','BEDROOM','BEFORE','BEGIN','BEGINNING','BEHAVIOUR','BEHIND','BELIEF','BELIEVE','BELONG','BELOW','BENEATH','BENEFIT','BESIDE','BEST','BETTER','BETWEEN','BEYOND','BIG','BILL','BIND','BIRD','BIRTH','BIT','BLACK','BLOCK','BLOOD','BLOODY','BLOW','BLUE','BOARD','BOAT','BODY','BONE','BOOK','BORDER','BOTH','BOTTLE','BOTTOM','BOX','BOY','BRAIN','BRANCH','BREAK','BREATH','BRIDGE','BRIEF','BRIGHT','BRING','BROAD','BROTHER','BUDGET','BUILD','BUILDING','BURN','BUS','BUSINESS','BUSY','BUT','BUY','BY','CABINET','CALL','CAMPAIGN','CAN','CANDIDATE','CAPABLE','CAPACITY','CAPITAL','CAR','CARD','CARE','CAREER','CAREFUL','CAREFULLY','CARRY','CASE','CASH','CAT','CATCH','CATEGORY','CAUSE','CELL','CENTRAL','CENTRE','CENTURY','CERTAIN','CERTAINLY','CHAIN','CHAIR','CHAIRMAN','CHALLENGE','CHANCE','CHANGE','CHANNEL','CHAPTER','CHARACTER','CHARACTERISTIC','CHARGE','CHEAP','CHECK','CHEMICAL','CHIEF','CHILD','CHOICE','CHOOSE','CHURCH','CIRCLE','CIRCUMSTANCE','CITIZEN','CITY','CIVIL','CLAIM','CLASS','CLEAN','CLEAR','CLEARLY','CLIENT','CLIMB','CLOSE','CLOSELY','CLOTHES','CLUB','COAL','CODE','COFFEE','COLD','COLLEAGUE','COLLECT','COLLECTION','COLLEGE','COLOUR','COMBINATION','COMBINE','COME','COMMENT','COMMERCIAL','COMMISSION','COMMIT','COMMITMENT','COMMITTEE','COMMON','COMMUNICATION','COMMUNITY','COMPANY','COMPARE','COMPARISON','COMPETITION','COMPLETE','COMPLETELY','COMPLEX','COMPONENT','COMPUTER','CONCENTRATE','CONCENTRATION','CONCEPT','CONCERN','CONCERNED','CONCLUDE','CONCLUSION','CONDITION','CONDUCT','CONFERENCE','CONFIDENCE','CONFIRM','CONFLICT','CONGRESS','CONNECT','CONNECTION','CONSEQUENCE','CONSERVATIVE','CONSIDER','CONSIDERABLE','CONSIDERATION','CONSIST','CONSTANT','CONSTRUCTION','CONSUMER','CONTACT','CONTAIN','CONTENT','CONTEXT','CONTINUE','CONTRACT','CONTRAST','CONTRIBUTE','CONTRIBUTION','CONTROL','CONVENTION','CONVERSATION','COPY','CORNER','CORPORATE','CORRECT','COS','COST','COULD','COUNCIL','COUNT','COUNTRY','COUNTY','COUPLE','COURSE','COURT','COVER','CREATE','CREATION','CREDIT','CRIME','CRIMINAL','CRISIS','CRITERION','CRITICAL','CRITICISM','CROSS','CROWD','CRY','CULTURAL','CULTURE','CUP','CURRENT','CURRENTLY','CURRICULUM','CUSTOMER','CUT','DAMAGE','DANGER','DANGEROUS','DARK','DATA','DATE','DAUGHTER','DAY','DEAD','DEAL','DEATH','DEBATE','DEBT','DECADE','DECIDE','DECISION','DECLARE','DEEP','DEFENCE','DEFENDANT','DEFINE','DEFINITION','DEGREE','DELIVER','DEMAND','DEMOCRATIC','DEMONSTRATE','DENY','DEPARTMENT','DEPEND','DEPUTY','DERIVE','DESCRIBE','DESCRIPTION','DESIGN','DESIRE','DESK','DESPITE','DESTROY','DETAIL','DETAILED','DETERMINE','DEVELOP','DEVELOPMENT','DEVICE','DIE','DIFFERENCE','DIFFERENT','DIFFICULT','DIFFICULTY','DINNER','DIRECT','DIRECTION','DIRECTLY','DIRECTOR','DISAPPEAR','DISCIPLINE','DISCOVER','DISCUSS','DISCUSSION','DISEASE','DISPLAY','DISTANCE','DISTINCTION','DISTRIBUTION','DISTRICT','DIVIDE','DIVISION','DO','DOCTOR','DOCUMENT','DOG','DOMESTIC','DOOR','DOUBLE','DOUBT','DOWN','DRAW','DRAWING','DREAM','DRESS','DRINK','DRIVE','DRIVER','DROP','DRUG','DRY','DUE','DURING','DUTY','EACH','EAR','EARLY','EARN','EARTH','EASILY','EAST','EASY','EAT','ECONOMIC','ECONOMY','EDGE','EDITOR','EDUCATION','EDUCATIONAL','EFFECT','EFFECTIVE','EFFECTIVELY','EFFORT','EGG','EITHER','ELDERLY','ELECTION','ELEMENT','ELSE','ELSEWHERE','EMERGE','EMPHASIS','EMPLOY','EMPLOYEE','EMPLOYER','EMPLOYMENT','EMPTY','ENABLE','ENCOURAGE','END','ENEMY','ENERGY','ENGINE','ENGINEERING','ENJOY','ENOUGH','ENSURE','ENTER','ENTERPRISE','ENTIRE','ENTIRELY','ENTITLE','ENTRY','ENVIRONMENT','ENVIRONMENTAL','EQUAL','EQUALLY','EQUIPMENT','ERROR','ESCAPE','ESPECIALLY','ESSENTIAL','ESTABLISH','ESTABLISHMENT','ESTATE','ESTIMATE','EVEN','EVENING','EVENT','EVENTUALLY','EVER','EVERY','EVERYBODY','EVERYONE','EVERYTHING','EVIDENCE','EXACTLY','EXAMINATION','EXAMINE','EXAMPLE','EXCELLENT','EXCEPT','EXCHANGE','EXECUTIVE','EXERCISE','EXHIBITION','EXIST','EXISTENCE','EXISTING','EXPECT','EXPECTATION','EXPENDITURE','EXPENSE','EXPENSIVE','EXPERIENCE','EXPERIMENT','EXPERT','EXPLAIN','EXPLANATION','EXPLORE','EXPRESS','EXPRESSION','EXTEND','EXTENT','EXTERNAL','EXTRA','EXTREMELY','EYE','FACE','FACILITY','FACT','FACTOR','FACTORY','FAIL','FAILURE','FAIR','FAIRLY','FAITH','FALL','FAMILIAR','FAMILY','FAMOUS','FAR','FARM','FARMER','FASHION','FAST','FATHER','FAVOUR','FEAR','FEATURE','FEE','FEEL','FEELING','FEMALE','FEW','FIELD','FIGHT','FIGURE','FILE','FILL','FILM','FINAL','FINALLY','FINANCE','FINANCIAL','FIND','FINDING','FINE','FINGER','FINISH','FIRE','FIRM','FIRST','FISH','FIT','FIX','FLAT','FLIGHT','FLOOR','FLOW','FLOWER','FLY','FOCUS','FOLLOW','FOLLOWING','FOOD','FOOT','FOOTBALL','FOR','FORCE','FOREIGN','FOREST','FORGET','FORM','FORMAL','FORMER','FORWARD','FOUNDATION','FREE','FREEDOM','FREQUENTLY','FRESH','FRIEND','FROM','FRONT','FRUIT','FUEL','FULL','FULLY','FUNCTION','FUND','FUNNY','FURTHER','FUTURE','GAIN','GAME','GARDEN','GAS','GATE','GATHER','GENERAL','GENERALLY','GENERATE','GENERATION','GENTLEMAN','GET','GIRL','GIVE','GLASS','GO','GOAL','GOD','GOLD','GOOD','GOVERNMENT','GRANT','GREAT','GREEN','GREY','GROUND','GROUP','GROW','GROWING','GROWTH','GUEST','GUIDE','GUN','HAIR','HALF','HALL','HAND','HANDLE','HANG','HAPPEN','HAPPY','HARD','HARDLY','HATE','HAVE','HE','HEAD','HEALTH','HEAR','HEART','HEAT','HEAVY','HELL','HELP','HENCE','HER','HERE','HERSELF','HIDE','HIGH','HIGHLY','HILL','HIM','HIMSELF','HIS','HISTORICAL','HISTORY','HIT','HOLD','HOLE','HOLIDAY','HOME','HOPE','HORSE','HOSPITAL','HOT','HOTEL','HOUR','HOUSE','HOUSEHOLD','HOUSING','HOW','HOWEVER','HUGE','HUMAN','HURT','HUSBAND','I','IDEA','IDENTIFY','IF','IGNORE','ILLUSTRATE','IMAGE','IMAGINE','IMMEDIATE','IMMEDIATELY','IMPACT','IMPLICATION','IMPLY','IMPORTANCE','IMPORTANT','IMPOSE','IMPOSSIBLE','IMPRESSION','IMPROVE','IMPROVEMENT','IN','INCIDENT','INCLUDE','INCLUDING','INCOME','INCREASE','INCREASED','INCREASINGLY','INDEED','INDEPENDENT','INDEX','INDICATE','INDIVIDUAL','INDUSTRIAL','INDUSTRY','INFLUENCE','INFORM','INFORMATION','INITIAL','INITIATIVE','INJURY','INSIDE','INSIST','INSTANCE','INSTEAD','INSTITUTE','INSTITUTION','INSTRUCTION','INSTRUMENT','INSURANCE','INTEND','INTENTION','INTEREST','INTERESTED','INTERESTING','INTERNAL','INTERNATIONAL','INTERPRETATION','INTERVIEW','INTO','INTRODUCE','INTRODUCTION','INVESTIGATE','INVESTIGATION','INVESTMENT','INVITE','INVOLVE','IRON','IS','ISLAND','ISSUE','IT','ITEM','ITS','ITSELF','JOB','JOIN','JOINT','JOURNEY','JUDGE','JUMP','JUST','JUSTICE','KEEP','KEY','KID','KILL','KIND','KING','KITCHEN','KNEE','KNOW','KNOWLEDGE','LABOUR','LACK','LADY','LAND','LANGUAGE','LARGE','LARGELY','LAST','LATE','LATER','LATTER','LAUGH','LAUNCH','LAW','LAWYER','LAY','LEAD','LEADER','LEADERSHIP','LEADING','LEAF','LEAGUE','LEAN','LEARN','LEAST','LEAVE','LEFT','LEG','LEGAL','LEGISLATION','LENGTH','LESS','LET','LETTER','LEVEL','LIABILITY','LIBERAL','LIBRARY','LIE','LIFE','LIFT','LIGHT','LIKE','LIKELY','LIMIT','LIMITED','LINE','LINK','LIP','LIST','LISTEN','LITERATURE','LITTLE','LIVE','LIVING','LOAN','LOCAL','LOCATION','LONG','LOOK','LORD','LOSE','LOSS','LOT','LOVE','LOVELY','LOW','LUNCH','MACHINE','MAGAZINE','MAIN','MAINLY','MAINTAIN','MAJOR','MAJORITY','MAKE','MALE','MAN','MANAGE','MANAGEMENT','MANAGER','MANNER','MANY','MAP','MARK','MARKET','MARRIAGE','MARRIED','MARRY','MASS','MASTER','MATCH','MATERIAL','MATTER','MAY','MAYBE','ME','MEAL','MEAN','MEANING','MEANS','MEANWHILE','MEASURE','MECHANISM','MEDIA','MEDICAL','MEET','MEETING','MEMBER','MEMBERSHIP','MEMORY','MENTAL','MENTION','MERELY','MESSAGE','METAL','METHOD','MIDDLE','MIGHT','MILE','MILITARY','MILK','MIND','MINE','MINISTER','MINISTRY','MINUTE','MISS','MISTAKE','MODEL','MODERN','MODULE','MOMENT','MONEY','MONTH','MORE','MORNING','MOST','MOTHER','MOTION','MOTOR','MOUNTAIN','MOUTH','MOVE','MOVEMENT','MUCH','MURDER','MUSEUM','MUSIC','MUST','MY','MYSELF','NAME','NARROW','NATION','NATIONAL','NATURAL','NATURE','NEAR','NEARLY','NECESSARILY','NECESSARY','NECK','NEED','NEGOTIATION','NEIGHBOUR','NEITHER','NETWORK','NEVER','NEVERTHELESS','NEW','NEWS','NEWSPAPER','NEXT','NICE','NIGHT','NO','NOBODY','NOD','NOISE','NONE','NOR','NORMAL','NORMALLY','NORTH','NORTHERN','NOSE','NOT','NOTE','NOTHING','NOTICE','NOTION','NOW','NUCLEAR','NUMBER','NURSE','OBJECT','OBJECTIVE','OBSERVATION','OBSERVE','OBTAIN','OBVIOUS','OBVIOUSLY','OCCASION','OCCUR','ODD','OF','OFF','OFFENCE','OFFER','OFFICE','OFFICER','OFFICIAL','OFTEN','OIL','OKAY','OLD','ON','ONCE','ONE','ONLY','ONTO','OPEN','OPERATE','OPERATION','OPINION','OPPORTUNITY','OPPOSITION','OPTION','OR','ORDER','ORDINARY','ORGANISATION','ORGANISE','ORGANIZATION','ORIGIN','ORIGINAL','OTHER','OTHERWISE','OUGHT','OUR','OURSELVES','OUT','OUTCOME','OUTPUT','OUTSIDE','OVER','OVERALL','OWN','OWNER','PACKAGE','PAGE','PAIN','PAINT','PAINTING','PAIR','PANEL','PAPER','PARENT','PARK','PARLIAMENT','PART','PARTICULAR','PARTICULARLY','PARTLY','PARTNER','PARTY','PASS','PASSAGE','PAST','PATH','PATIENT','PATTERN','PAY','PAYMENT','PEACE','PENSION','PEOPLE','PER','PERCENT','PERFECT','PERFORM','PERFORMANCE','PERHAPS','PERIOD','PERMANENT','PERSON','PERSONAL','PERSUADE','PHASE','PHONE','PHOTOGRAPH','PHYSICAL','PICK','PICTURE','PIECE','PLACE','PLAN','PLANNING','PLANT','PLASTIC','PLATE','PLAY','PLAYER','PLEASE','PLEASURE','PLENTY','PLUS','POCKET','POINT','POLICE','POLICY','POLITICAL','POLITICS','POOL','POOR','POPULAR','POPULATION','POSITION','POSITIVE','POSSIBILITY','POSSIBLE','POSSIBLY','POST','POTENTIAL','POUND','POWER','POWERFUL','PRACTICAL','PRACTICE','PREFER','PREPARE','PRESENCE','PRESENT','PRESIDENT','PRESS','PRESSURE','PRETTY','PREVENT','PREVIOUS','PREVIOUSLY','PRICE','PRIMARY','PRIME','PRINCIPLE','PRIORITY','PRISON','PRISONER','PRIVATE','PROBABLY','PROBLEM','PROCEDURE','PROCESS','PRODUCE','PRODUCT','PRODUCTION','PROFESSIONAL','PROFIT','PROGRAM','PROGRAMME','PROGRESS','PROJECT','PROMISE','PROMOTE','PROPER','PROPERLY','PROPERTY','PROPORTION','PROPOSE','PROPOSAL','PROSPECT','PROTECT','PROTECTION','PROVE','PROVIDE','PROVIDED','PROVISION','PUB','PUBLIC','PUBLICATION','PUBLISH','PULL','PUPIL','PURPOSE','PUSH','PUT','QUALITY','QUARTER','QUESTION','QUICK','QUICKLY','QUIET','QUITE','RACE','RADIO','RAILWAY','RAIN','RAISE','RANGE','RAPIDLY','RARE','RATE','RATHER','REACH','REACTION','READ','READER','READING','READY','REAL','REALISE','REALITY','REALIZE','REALLY','REASON','REASONABLE','RECALL','RECEIVE','RECENT','RECENTLY','RECOGNISE','RECOGNITION','RECOGNIZE','RECOMMEND','RECORD','RECOVER','RED','REDUCE','REDUCTION','REFER','REFERENCE','REFLECT','REFORM','REFUSE','REGARD','REGION','REGIONAL','REGULAR','REGULATION','REJECT','RELATE','RELATION','RELATIONSHIP','RELATIVE','RELATIVELY','RELEASE','RELEVANT','RELIEF','RELIGION','RELIGIOUS','RELY','REMAIN','REMEMBER','REMIND','REMOVE','REPEAT','REPLACE','REPLY','REPORT','REPRESENT','REPRESENTATION','REPRESENTATIVE','REQUEST','REQUIRE','REQUIREMENT','RESEARCH','RESOURCE','RESPECT','RESPOND','RESPONSE','RESPONSIBILITY','RESPONSIBLE','REST','RESTAURANT','RESULT','RETAIN','RETURN','REVEAL','REVENUE','REVIEW','REVOLUTION','RICH','RIDE','RIGHT','RING','RISE','RISK','RIVER','ROAD','ROCK','ROLE','ROLL','ROOF','ROOM','ROUND','ROUTE','ROW','ROYAL','RULE','RUN','RURAL','SAFE','SAFETY','SALE','SAME','SAMPLE','SATISFY','SAVE','SAY','SCALE','SCENE','SCHEME','SCHOOL','SCIENCE','SCIENTIFIC','SCIENTIST','SCORE','SCREEN','SEA','SEARCH','SEASON','SEAT','SECOND','SECONDARY','SECRETARY','SECTION','SECTOR','SECURE','SECURITY','SEE','SEEK','SEEM','SELECT','SELECTION','SELL','SEND','SENIOR','SENSE','SENTENCE','SEPARATE','SEQUENCE','SERIES','SERIOUS','SERIOUSLY','SERVANT','SERVE','SERVICE','SESSION','SET','SETTLE','SETTLEMENT','SEVERAL','SEVERE','SEX','SEXUAL','SHAKE','SHALL','SHAPE','SHARE','SHE','SHEET','SHIP','SHOE','SHOOT','SHOP','SHORT','SHOT','SHOULD','SHOULDER','SHOUT','SHOW','SHUT','SIDE','SIGHT','SIGN','SIGNAL','SIGNIFICANCE','SIGNIFICANT','SILENCE','SIMILAR','SIMPLE','SIMPLY','SINCE','SING','SINGLE','SIR','SISTER','SIT','SITE','SITUATION','SIZE','SKILL','SKIN','SKY','SLEEP','SLIGHTLY','SLIP','SLOW','SLOWLY','SMALL','SMILE','SO','SOCIAL','SOCIETY','SOFT','SOFTWARE','SOIL','SOLDIER','SOLICITOR','SOLUTION','SOME','SOMEBODY','SOMEONE','SOMETHING','SOMETIMES','SOMEWHAT','SOMEWHERE','SON','SONG','SOON','SORRY','SORT','SOUND','SOURCE','SOUTH','SOUTHERN','SPACE','SPEAK','SPEAKER','SPECIAL','SPECIES','SPECIFIC','SPEECH','SPEED','SPEND','SPIRIT','SPORT','SPOT','SPREAD','SPRING','STAFF','STAGE','STAND','STANDARD','STAR','START','STATE','STATEMENT','STATION','STATUS','STAY','STEAL','STEP','STICK','STILL','STOCK','STONE','STOP','STORE','STORY','STRAIGHT','STRANGE','STRATEGY','STREET','STRENGTH','STRIKE','STRONG','STRONGLY','STRUCTURE','STUDENT','STUDIO','STUDY','STUFF','STYLE','SUBJECT','SUBSTANTIAL','SUCCEED','SUCCESS','SUCCESSFUL','SUCH','SUDDENLY','SUFFER','SUFFICIENT','SUGGEST','SUGGESTION','SUITABLE','SUM','SUMMER','SUN','SUPPLY','SUPPORT','SUPPOSE','SURE','SURELY','SURFACE','SURPRISE','SURROUND','SURVEY','SURVIVE','SWITCH','SYSTEM','TABLE','TAKE','TALK','TALL','TAPE','TARGET','TASK','TAX','TEA','TEACH','TEACHER','TEACHING','TEAM','TEAR','TECHNICAL','TECHNIQUE','TECHNOLOGY','TELEPHONE','TELEVISION','TELL','TEMPERATURE','TEND','TERM','TERMS','TERRIBLE','TEST','TEXT','THAN','THANK','THANKS','THAT','THE','THEATRE','THEIR','THEM','THEME','THEMSELVES','THEN','THEORY','THERE','THEREFORE','THESE','THEY','THIN','THING','THINK','THIS','THOSE','THOUGH','THOUGHT','THREAT','THREATEN','THROUGH','THROUGHOUT','THROW','THUS','TICKET','TIME','TINY','TITLE','TO','TODAY','TOGETHER','TOMORROW','TONE','TONIGHT','TOO','TOOL','TOOTH','TOP','TOTAL','TOTALLY','TOUCH','TOUR','TOWARDS','TOWN','TRACK','TRADE','TRADITION','TRADITIONAL','TRAFFIC','TRAIN','TRAINING','TRANSFER','TRANSPORT','TRAVEL','TREAT','TREATMENT','TREATY','TREE','TREND','TRIAL','TRIP','TROOP','TROUBLE','TRUE','TRUST','TRUTH','TRY','TURN','TWICE','TYPE','TYPICAL','UNABLE','UNDER','UNDERSTAND','UNDERSTANDING','UNDERTAKE','UNEMPLOYMENT','UNFORTUNATELY','UNION','UNIT','UNITED','UNIVERSITY','UNLESS','UNLIKELY','UNTIL','UP','UPON','UPPER','URBAN','US','USE','USED','USEFUL','USER','USUAL','USUALLY','VALUE','VARIATION','VARIETY','VARIOUS','VARY','VAST','VEHICLE','VERSION','VERY','VIA','VICTIM','VICTORY','VIDEO','VIEW','VILLAGE','VIOLENCE','VISION','VISIT','VISITOR','VITAL','VOICE','VOLUME','VOTE','WAGE','WAIT','WALK','WALL','WANT','WAR','WARM','WARN','WASH','WATCH','WATER','WAVE','WAY','WE','WEAK','WEAPON','WEAR','WEATHER','WEEK','WEEKEND','WEIGHT','WELCOME','WELFARE','WELL','WEST','WESTERN','WHAT','WHATEVER','WHEN','WHERE','WHEREAS','WHETHER','WHICH','WHILE','WHILST','WHITE','WHO','WHOLE','WHOM','WHOSE','WHY','WIDE','WIDELY','WIFE','WILD','WILL','WIN','WIND','WINDOW','WINE','WING','WINNER','WINTER','WISH','WITH','WITHDRAW','WITHIN','WITHOUT','WOMAN','WONDER','WONDERFUL','WOOD','WORD','WORK','WORKER','WORKING','WORKS','WORLD','WORRY','WORTH','WOULD','WRITE','WRITER','WRITING','WRONG','YARD','YEAH','YEAR','YES','YESTERDAY','YET','YOU','YOUNG','YOUR','YOURSELF','YOUTH'];\n\ncodedTriangleNumbers(1786);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 42 Coded triangle numbers",
      "dashedName": "problem-42-coded-triangle-numbers"
    },
    {
      "id": "5900f3971000cf542c50feaa",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>substringDivisibility()</code> should return [ 1430952867, 1460357289, 1406357289, 4130952867, 4160357289, 4106357289 ].",
          "testString":
            "assert.deepEqual(substringDivisibility(), [ 1430952867, 1460357289, 1406357289, 4130952867, 4160357289, 4106357289 ], '<code>substringDivisibility()</code> should return [ 1430952867, 1460357289, 1406357289, 4130952867, 4160357289, 4106357289 ].');"
        }
      ],
      "description": [
        "The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.",
        "Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:",
        "d2d3d4=406 is divisible by 2",
        "d3d4d5=063 is divisible by 3",
        "d4d5d6=635 is divisible by 5",
        "d5d6d7=357 is divisible by 7",
        "d6d7d8=572 is divisible by 11",
        "d7d8d9=728 is divisible by 13",
        "d8d9d10=289 is divisible by 17",
        "Find the numbers of all 0 to 9 pandigital numbers with this property."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function substringDivisibility() {\n  // Good luck!\n  return [];\n}\n\nsubstringDivisibility();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 43 Substring divisibility",
      "dashedName": "problem-43-substring-divisibility"
    },
    {
      "id": "5900f3981000cf542c50feab",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>pentagonNumbers()</code> should return 5482660.",
          "testString":
            "assert.strictEqual(pentagonNumbers(), 5482660, '<code>pentagonNumbers()</code> should return 5482660.');"
        }
      ],
      "description": [
        "Pentagonal numbers are generated by the formula, P<sub>n</sub>=<var>n</var>(3<var>n</var>−1)/2. The first ten pentagonal numbers are:",
        "<span style='display: block; text-align: center;'>1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...</span>",
        "It can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>. However, their difference, 70 − 22 = 48, is not pentagonal.",
        "Find the pair of pentagonal numbers, P<sub>j</sub> and P<sub>k</sub>, for which their sum and difference are pentagonal and D = |P<sub>k</sub> − P<sub>j</sub>| is minimised; what is the value of D?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pentagonNumbers() {\n  // Good luck!\n  return true;\n}\n\npentagonNumbers();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 44 Pentagon numbers",
      "dashedName": "problem-44-pentagon-numbers"
    },
    {
      "id": "5900f3991000cf542c50feac",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>triPentaHexa(40756)</code> should return 1533776805.",
          "testString":
            "assert.strictEqual(triPentaHexa(40756), 1533776805, '<code>triPentaHexa(40756)</code> should return 1533776805.');"
        }
      ],
      "description": [
        "Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:",
        "<div style='display: inline-grid; text-align: center; grid-template-columns: repeat(3, minmax(117px, 12%)); grid-template-rows: auto;'><div>Triangle</div><div>T<sub>n</sub>=<var>n</var>(<var>n</var>+1)/2</div><div>1, 3, 6, 10, 15, ...</div></div>",
        "<div style='display: inline-grid; text-align: center; grid-template-columns: repeat(3, minmax(117px, 12%)); grid-template-rows: auto;'><div>Pentagonal</div><div>P<sub>n</sub>=<var>n</var>(3<var>n</var>−1)/2</div><div>1, 5, 12, 22, 35, ...</div></div>",
        "<div style='display: inline-grid; text-align: center; grid-template-columns: repeat(3, minmax(117px, 12%)); grid-template-rows: auto;'><div>Hexagonal</div><div>H<sub>n</sub>=<var>n</var>(2<var>n</var>−1)</div><div>1, 6, 15, 28, 45, ...</div></div>",
        "It can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.",
        "Find the next triangle number that is also pentagonal and hexagonal."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function triPentaHexa(n) {\n  // Good luck!\n  return true;\n}\n\ntriPentaHexa(40756);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 45 Triangular pentagonal and hexagonal",
      "dashedName": "problem-45-triangular-pentagonal-and-hexagonal"
    },
    {
      "id": "5900f39a1000cf542c50fead",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>goldbachsOtherConjecture()</code> should return 5777.",
          "testString":
            "assert.strictEqual(goldbachsOtherConjecture(), 5777, '<code>goldbachsOtherConjecture()</code> should return 5777.');"
        }
      ],
      "description": [
        "It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.",
        "9 = 7 + 2×1<sup>2</sup>",
        "15 = 7 + 2×2<sup>2</sup>",
        "21 = 3 + 2×3<sup>2</sup>",
        "25 = 7 + 2×3<sup>2</sup>",
        "27 = 19 + 2×2<sup>2</sup>",
        "33 = 31 + 2×1<sup>2</sup>",
        "It turns out that the conjecture was false.",
        "What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function goldbachsOtherConjecture() {\n  // Good luck!\n  return true;\n}\n\ngoldbachsOtherConjecture();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 46 Goldbachs other conjecture",
      "dashedName": "problem-46-goldbachs-other-conjecture"
    },
    {
      "id": "5900f39c1000cf542c50feae",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>distinctPrimeFactors(2, 2)</code> should return 14.",
          "testString":
            "assert.strictEqual(distinctPrimeFactors(2, 2), 14, '<code>distinctPrimeFactors(2, 2)</code> should return 14.');"
        },
        {
          "text": "<code>distinctPrimeFactors(3, 3)</code> should return 644.",
          "testString":
            "assert.strictEqual(distinctPrimeFactors(3, 3), 644, '<code>distinctPrimeFactors(3, 3)</code> should return 644.');"
        },
        {
          "text":
            "<code>distinctPrimeFactors(4, 4)</code> should return 134043.",
          "testString":
            "assert.strictEqual(distinctPrimeFactors(4, 4), 134043, '<code>distinctPrimeFactors(4, 4)</code> should return 134043.');"
        }
      ],
      "description": [
        "The first two consecutive numbers to have two distinct prime factors are:",
        "<div style='padding-left: 4em;'>14 = 2 × 7</div>",
        "<div style='padding-left: 4em;'>15 = 3 × 5</div>",
        "The first three consecutive numbers to have three distinct prime factors are:",
        "<div style='padding-left: 4em;'>644 = 2² × 7 × 23</div>",
        "<div style='padding-left: 4em;'>645 = 3 × 5 × 43</div>",
        "<div style='padding-left: 4em;'>646 = 2 × 17 × 19</div>",
        "Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function distinctPrimeFactors(targetNumPrimes, targetConsecutive) {\n  // Good luck!\n  return true;\n}\n\ndistinctPrimeFactors(4, 4);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 47 Distinct primes factors",
      "dashedName": "problem-47-distinct-primes-factors"
    },
    {
      "id": "5900f39c1000cf542c50feaf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>selfPowers(10, 3)</code> should return 317.",
          "testString":
            "assert.strictEqual(selfPowers(10, 3), 317, '<code>selfPowers(10, 3)</code> should return 317.');"
        },
        {
          "text": "<code>selfPowers(150, 6)</code> should return 29045.",
          "testString":
            "assert.strictEqual(selfPowers(150, 6), 29045, '<code>selfPowers(150, 6)</code> should return 29045.');"
        },
        {
          "text": "<code>selfPowers(673, 7)</code> should return 2473989.",
          "testString":
            "assert.strictEqual(selfPowers(673, 7), 2473989, '<code>selfPowers(673, 7)</code> should return 2473989.');"
        },
        {
          "text": "<code>selfPowers(1000, 10)</code> should return 9110846700.",
          "testString":
            "assert.strictEqual(selfPowers(1000, 10), 9110846700, '<code>selfPowers(1000, 10)</code> should return 9110846700.');"
        }
      ],
      "description": [
        "The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.",
        "Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function selfPowers(power, lastDigits) {\n  // Good luck!\n  return true;\n}\n\nselfPowers(1000, 10);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 48 Self powers",
      "dashedName": "problem-48-self-powers"
    },
    {
      "id": "5900f39d1000cf542c50feb0",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>primePermutations()</code> should return 296962999629.",
          "testString":
            "assert.strictEqual(primePermutations(), 296962999629, '<code>primePermutations()</code> should return 296962999629.');"
        }
      ],
      "description": [
        "The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.",
        "There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.",
        "What 12-digit number do you form by concatenating the three terms in this sequence?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function primePermutations() {\n  // Good luck!\n  return true;\n}\n\nprimePermutations();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 49 Prime permutations",
      "dashedName": "problem-49-prime-permutations"
    },
    {
      "id": "5900f39e1000cf542c50feb1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>consecutivePrimeSum(1000)</code> should return 953.",
          "testString":
            "assert.strictEqual(consecutivePrimeSum(1000), 953, '<code>consecutivePrimeSum(1000)</code> should return 953.');"
        },
        {
          "text":
            "<code>consecutivePrimeSum(1000000)</code> should return 997651.",
          "testString":
            "assert.strictEqual(consecutivePrimeSum(1000000), 997651, '<code>consecutivePrimeSum(1000000)</code> should return 997651.');"
        }
      ],
      "description": [
        "The prime 41, can be written as the sum of six consecutive primes:",
        "41 = 2 + 3 + 5 + 7 + 11 + 13",
        "This is the longest sum of consecutive primes that adds to a prime below one-hundred.",
        "The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.",
        "Which prime, below one-million, can be written as the sum of the most consecutive primes?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function consecutivePrimeSum(limit) {\n  // Good luck!\n  return true;\n}\n\nconsecutivePrimeSum(1000000);",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 50 Consecutive prime sum",
      "dashedName": "problem-50-consecutive-prime-sum"
    },
    {
      "id": "5900f39f1000cf542c50feb2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler51()</code> should return 121313.",
          "testString":
            "assert.strictEqual(euler51(), 121313, '<code>euler51()</code> should return 121313.');"
        }
      ],
      "description": [
        "By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.",
        "By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.",
        "Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler51() {\n  // Good luck!\n  return true;\n}\n\neuler51();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 51 Prime digit replacements",
      "dashedName": "problem-51-prime-digit-replacements"
    },
    {
      "id": "5900f3a01000cf542c50feb3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler52()</code> should return 142857.",
          "testString":
            "assert.strictEqual(euler52(), 142857, '<code>euler52()</code> should return 142857.');"
        }
      ],
      "description": [
        "It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.",
        "Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler52() {\n  // Good luck!\n  return true;\n}\n\neuler52();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 52 Permuted multiples",
      "dashedName": "problem-52-permuted-multiples"
    },
    {
      "id": "5900f3a11000cf542c50feb4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler53()</code> should return 4075.",
          "testString":
            "assert.strictEqual(euler53(), 4075, '<code>euler53()</code> should return 4075.');"
        }
      ],
      "description": [
        "There are exactly ten ways of selecting three from five, 12345:",
        "123, 124, 125, 134, 135, 145, 234, 235, 245, and 345",
        "In combinatorics, we use the notation, 5C3 = 10.",
        "In general,",
        "",
        "nCr = ",
        "n!r!(n−r)!",
        ",where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.",
        "",
        "It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.",
        "How many, not necessarily distinct, values of  nCr, for 1 ≤ n ≤ 100, are greater than one-million?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler53() {\n  // Good luck!\n  return true;\n}\n\neuler53();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 53 Combinatoric selections",
      "dashedName": "problem-53-combinatoric-selections"
    },
    {
      "id": "5900f3a21000cf542c50feb5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler54()</code> should return 376.",
          "testString":
            "assert.strictEqual(euler54(), 376, '<code>euler54()</code> should return 376.');"
        }
      ],
      "description": [
        "In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:",
        "High Card: Highest value card.",
        "One Pair: Two cards of the same value.",
        "Two Pairs: Two different pairs.",
        "Three of a Kind: Three cards of the same value.",
        "Straight: All cards are consecutive values.",
        "Flush: All cards of the same suit.",
        "Full House: Three of a kind and a pair.",
        "Four of a Kind: Four cards of the same value.",
        "Straight Flush: All cards are consecutive values of same suit.",
        "Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.",
        "The cards are valued in the order:2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.",
        "If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.",
        "Consider the following five hands dealt to two players:",
        "",
        "Hand Player 1 Player 2 Winner",
        "1 5H 5C 6S 7S KDPair of Fives 2C 3S 8S 8D TDPair of Eights Player 2",
        "2 5D 8C 9S JS ACHighest card Ace 2C 5C 7D 8S QHHighest card Queen Player 1",
        "3 2D 9C AS AH ACThree Aces 3D 6D 7D TD QDFlush  with Diamonds Player 2",
        "4 4D 6S 9H QH QCPair of QueensHighest card Nine 3D 6D 7H QD QSPair of QueensHighest card Seven Player 1",
        "5 2H 2D 4C 4D 4SFull HouseWith Three Fours 3C 3D 3S 9S 9DFull Housewith Three Threes Player 1",
        "",
        "The file, poker.txt, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.",
        "How many hands does Player 1 win?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler54() {\n  // Good luck!\n  return true;\n}\n\neuler54();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 54 Poker hands",
      "dashedName": "problem-54-poker-hands"
    },
    {
      "id": "5900f3a31000cf542c50feb6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler55()</code> should return 249.",
          "testString":
            "assert.strictEqual(euler55(), 249, '<code>euler55()</code> should return 249.');"
        }
      ],
      "description": [
        "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.",
        "Not all numbers produce palindromes so quickly. For example,",
        "349 + 943 = 1292,",
        "1292 + 2921 = 4213",
        "4213 + 3124 = 7337",
        "That is, 349 took three iterations to arrive at a palindrome.",
        "Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).",
        "Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.",
        "How many Lychrel numbers are there below ten-thousand?",
        "NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler55() {\n  // Good luck!\n  return true;\n}\n\neuler55();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 55 Lychrel numbers",
      "dashedName": "problem-55-lychrel-numbers"
    },
    {
      "id": "5900f3a41000cf542c50feb7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler56()</code> should return 972.",
          "testString":
            "assert.strictEqual(euler56(), 972, '<code>euler56()</code> should return 972.');"
        }
      ],
      "description": [
        "A googol (10100) is a massive number: one followed by one-hundred zeros; 100100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.",
        "Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler56() {\n  // Good luck!\n  return true;\n}\n\neuler56();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 56 Powerful digit sum",
      "dashedName": "problem-56-powerful-digit-sum"
    },
    {
      "id": "5900f3a51000cf542c50feb8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler57()</code> should return 153.",
          "testString":
            "assert.strictEqual(euler57(), 153, '<code>euler57()</code> should return 153.');"
        }
      ],
      "description": [
        "It is possible to show that the square root of two can be expressed as an infinite continued fraction.",
        "√ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...",
        "By expanding this for the first four iterations, we get:",
        "1 + 1/2 = 3/2 = 1.5",
        "1 + 1/(2 + 1/2) = 7/5 = 1.4",
        "1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...",
        "1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...",
        "The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion, 1393/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.",
        "In the first one-thousand expansions, how many fractions contain a numerator with more digits than denominator?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler57() {\n  // Good luck!\n  return true;\n}\n\neuler57();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 57 Square root convergents",
      "dashedName": "problem-57-square-root-convergents"
    },
    {
      "id": "5900f3a61000cf542c50feb9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler58()</code> should return 26241.",
          "testString":
            "assert.strictEqual(euler58(), 26241, '<code>euler58()</code> should return 26241.');"
        }
      ],
      "description": [
        "Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.",
        "37 36 35 34 33 32 31",
        "38 17 16 15 14 13 30",
        "39 18  5  4  3 12 29",
        "40 19  6  1  2 11 28",
        "41 20  7  8  9 10 27",
        "42 21 22 23 24 25 2643 44 45 46 47 48 49",
        "It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.",
        "If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler58() {\n  // Good luck!\n  return true;\n}\n\neuler58();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 58 Spiral primes",
      "dashedName": "problem-58-spiral-primes"
    },
    {
      "id": "5900f3a81000cf542c50feba",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler59()</code> should return 107359.",
          "testString":
            "assert.strictEqual(euler59(), 107359, '<code>euler59()</code> should return 107359.');"
        }
      ],
      "description": [
        "Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.",
        "A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.",
        "For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both \"halves\", it is impossible to decrypt the message.",
        "Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.",
        "Your task has been made easy, as the encryption key consists of three lower case characters. Using cipher.txt (right click and 'Save Link/Target As...'), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler59() {\n  // Good luck!\n  return true;\n}\n\neuler59();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 59 XOR decryption",
      "dashedName": "problem-59-xor-decryption"
    },
    {
      "id": "5900f3a81000cf542c50febb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler60()</code> should return 26033.",
          "testString":
            "assert.strictEqual(euler60(), 26033, '<code>euler60()</code> should return 26033.');"
        }
      ],
      "description": [
        "The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.",
        "Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler60() {\n  // Good luck!\n  return true;\n}\n\neuler60();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 60 Prime pair sets",
      "dashedName": "problem-60-prime-pair-sets"
    },
    {
      "id": "5900f3a91000cf542c50febc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler61()</code> should return 28684.",
          "testString":
            "assert.strictEqual(euler61(), 28684, '<code>euler61()</code> should return 28684.');"
        }
      ],
      "description": [
        "Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:",
        "Triangle",
        "",
        "P3,n=n(n+1)/2",
        "",
        "1, 3, 6, 10, 15, ...",
        "Square",
        "",
        "P4,n=n2",
        "",
        "1, 4, 9, 16, 25, ...",
        "Pentagonal",
        "",
        "P5,n=n(3n−1)/2",
        "",
        "1, 5, 12, 22, 35, ...",
        "Hexagonal",
        "",
        "P6,n=n(2n−1)",
        "",
        "1, 6, 15, 28, 45, ...",
        "Heptagonal",
        "",
        "P7,n=n(5n−3)/2",
        "",
        "1, 7, 18, 34, 55, ...",
        "Octagonal",
        "",
        "P8,n=n(3n−2)",
        "",
        "1, 8, 21, 40, 65, ...",
        "The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.",
        "The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).",
        "Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.",
        "This is the only set of 4-digit numbers with this property.",
        "Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler61() {\n  // Good luck!\n  return true;\n}\n\neuler61();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 61 Cyclical figurate numbers",
      "dashedName": "problem-61-cyclical-figurate-numbers"
    },
    {
      "id": "5900f3aa1000cf542c50febd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler62()</code> should return 127035954683.",
          "testString":
            "assert.strictEqual(euler62(), 127035954683, '<code>euler62()</code> should return 127035954683.');"
        }
      ],
      "description": [
        "The cube, 41063625 (3453), can be permuted to produce two other cubes: 56623104 (3843) and 66430125 (4053). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.",
        "Find the smallest cube for which exactly five permutations of its digits are cube."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler62() {\n  // Good luck!\n  return true;\n}\n\neuler62();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 62 Cubic permutations",
      "dashedName": "problem-62-cubic-permutations"
    },
    {
      "id": "5900f3ab1000cf542c50febe",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler63()</code> should return 49.",
          "testString":
            "assert.strictEqual(euler63(), 49, '<code>euler63()</code> should return 49.');"
        }
      ],
      "description": [
        "The 5-digit number, 16807=75, is also a fifth power. Similarly, the 9-digit number, 134217728=89, is a ninth power.",
        "How many n-digit positive integers exist which are also an nth power?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler63() {\n  // Good luck!\n  return true;\n}\n\neuler63();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 63 Powerful digit counts",
      "dashedName": "problem-63-powerful-digit-counts"
    },
    {
      "id": "5900f3ac1000cf542c50febf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler64()</code> should return 1322.",
          "testString":
            "assert.strictEqual(euler64(), 1322, '<code>euler64()</code> should return 1322.');"
        }
      ],
      "description": [
        "All square roots are periodic when written as continued fractions and can be written in the form:",
        "",
        "√N = a0 +",
        "1",
        "",
        "a1 +",
        "1",
        "",
        "",
        "a2 +",
        "1",
        "",
        "",
        "",
        "a3 + ...",
        "",
        "For example, let us consider √23:",
        "",
        "√23 = 4 + √23 — 4 = 4 + ",
        "1",
        " = 4 + ",
        "1",
        "",
        "1√23—4",
        "",
        "1 + ",
        "√23 – 37",
        "",
        "If we continue we would get the following expansion:",
        "",
        "√23 = 4 +",
        "1",
        "",
        "1 +",
        "1",
        "",
        "",
        "3 +",
        "1",
        "",
        "",
        "",
        "1 +",
        "1",
        "",
        "",
        "",
        "",
        "8 + ...",
        "",
        "The process can be summarised as follows:",
        "",
        "a0 = 4,",
        "",
        "1√23—4",
        " = ",
        "√23+47",
        " = 1 + ",
        "√23—37",
        "a1 = 1,",
        "",
        "7√23—3",
        " = ",
        "7(√23+3)14",
        " = 3 + ",
        "√23—32",
        "a2 = 3,",
        "",
        "2√23—3",
        " = ",
        "2(√23+3)14",
        " = 1 + ",
        "√23—47",
        "a3 = 1,",
        "",
        "7√23—4",
        " = ",
        "7(√23+4)7",
        " = 8 + ",
        "√23—4",
        "a4 = 8,",
        "",
        "1√23—4",
        " = ",
        "√23+47",
        " = 1 + ",
        "√23—37",
        "a5 = 1,",
        "",
        "7√23—3",
        " = ",
        "7(√23+3)14",
        " = 3 + ",
        "√23—32",
        "a6 = 3,",
        "",
        "2√23—3",
        " = ",
        "2(√23+3)14",
        " = 1 + ",
        "√23—47",
        "a7 = 1,",
        "",
        "7√23—4",
        " = ",
        "7(√23+4)7",
        " = 8 + ",
        "√23—4",
        "",
        "It can be seen that the sequence is repeating. For conciseness, we use the notation √23 = [4;(1,3,1,8)], to indicate that the block (1,3,1,8) repeats indefinitely.",
        "",
        "The first ten continued fraction representations of (irrational) square roots are:",
        "√2=[1;(2)], period=1",
        "√3=[1;(1,2)], period=2",
        "√5=[2;(4)], period=1",
        "√6=[2;(2,4)], period=2",
        "√7=[2;(1,1,1,4)], period=4",
        "√8=[2;(1,4)], period=2",
        "√10=[3;(6)], period=1",
        "√11=[3;(3,6)], period=2",
        "√12= [3;(2,6)], period=2",
        "√13=[3;(1,1,1,1,6)], period=5",
        "Exactly four continued fractions, for N ≤ 13, have an odd period.",
        "How many continued fractions for N ≤ 10000 have an odd period?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler64() {\n  // Good luck!\n  return true;\n}\n\neuler64();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 64 Odd period square roots",
      "dashedName": "problem-64-odd-period-square-roots"
    },
    {
      "id": "5900f3ad1000cf542c50fec0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler65()</code> should return 272.",
          "testString":
            "assert.strictEqual(euler65(), 272, '<code>euler65()</code> should return 272.');"
        }
      ],
      "description": [
        "The square root of 2 can be written as an infinite continued fraction.",
        "",
        "√2 = 1 +",
        "1",
        "",
        "2 +",
        "1",
        "",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "",
        "2 + ...",
        "",
        "The infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].",
        "It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for √2.",
        "",
        "",
        "1 +",
        "1",
        "= 3/2",
        "",
        "2",
        "",
        "1 +",
        "1",
        "= 7/5",
        "",
        "2 +",
        "1",
        "",
        "",
        "2",
        "",
        "1 +",
        "1",
        "= 17/12",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "",
        "2",
        "",
        "1 +",
        "1",
        "= 41/29",
        "",
        "2 +",
        "1",
        "",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "",
        "2 +",
        "1",
        "",
        "",
        "",
        "",
        "",
        "2",
        "",
        "",
        "Hence the sequence of the first ten convergents for √2 are:",
        "1, 3/2, 7/5, 17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, ...",
        "What is most surprising is that the important mathematical constant,e = [2; 1,2,1, 1,4,1, 1,6,1 , ... , 1,2k,1, ...].",
        "The first ten terms in the sequence of convergents for e are:",
        "2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, ...",
        "The sum of digits in the numerator of the 10th convergent is 1+4+5+7=17.",
        "Find the sum of digits in the numerator of the 100th convergent of the continued fraction for e."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler65() {\n  // Good luck!\n  return true;\n}\n\neuler65();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 65 Convergents of e",
      "dashedName": "problem-65-convergents-of-e"
    },
    {
      "id": "5900f3ae1000cf542c50fec1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler66()</code> should return 661.",
          "testString":
            "assert.strictEqual(euler66(), 661, '<code>euler66()</code> should return 661.');"
        }
      ],
      "description": [
        "Consider quadratic Diophantine equations of the form:",
        "x2 – Dy2 = 1",
        "For example, when D=13, the minimal solution in x is 6492 – 13×1802 = 1.",
        "It can be assumed that there are no solutions in positive integers when D is square.",
        "By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:",
        "32 – 2×22 = 1",
        "22 – 3×12 = 192 – 5×42 = 1",
        "52 – 6×22 = 1",
        "82 – 7×32 = 1",
        "Hence, by considering minimal solutions in x for D ≤ 7, the largest x is obtained when D=5.",
        "Find the value of D ≤ 1000 in minimal solutions of x for which the largest value of x is obtained."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler66() {\n  // Good luck!\n  return true;\n}\n\neuler66();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 66 Diophantine equation",
      "dashedName": "problem-66-diophantine-equation"
    },
    {
      "id": "5900f3b01000cf542c50fec2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler67()</code> should return 7273.",
          "testString":
            "assert.strictEqual(euler67(), 7273, '<code>euler67()</code> should return 7273.');"
        }
      ],
      "description": [
        "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.",
        "37 4",
        "2 4 6",
        "8 5 9 3",
        "That is, 3 + 7 + 4 + 9 = 23.",
        "Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows.",
        "NOTE: This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 299 altogether! If you could check one trillion (1012) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler67() {\n  // Good luck!\n  return true;\n}\n\neuler67();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 67 Maximum path sum II",
      "dashedName": "problem-67-maximum-path-sum-ii"
    },
    {
      "id": "5900f3b01000cf542c50fec3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler68()</code> should return 6531031914842725.",
          "testString":
            "assert.strictEqual(euler68(), 6531031914842725, '<code>euler68()</code> should return 6531031914842725.');"
        }
      ],
      "description": [
        "Consider the following \"magic\" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.",
        "",
        "",
        "Working clockwise, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3.",
        "It is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.",
        "",
        "TotalSolution Set",
        "94,2,3; 5,3,1; 6,1,2",
        "94,3,2; 6,2,1; 5,1,3",
        "102,3,5; 4,5,1; 6,1,3",
        "102,5,3; 6,3,1; 4,1,5",
        "111,4,6; 3,6,2; 5,2,4",
        "111,6,4; 5,4,2; 3,2,6",
        "121,5,6; 2,6,4; 3,4,5",
        "121,6,5; 3,5,4; 2,4,6",
        "",
        "By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.",
        "Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum 16-digit string for a \"magic\" 5-gon ring?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler68() {\n  // Good luck!\n  return true;\n}\n\neuler68();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 68 Magic 5gon ring",
      "dashedName": "problem-68-magic-5gon-ring"
    },
    {
      "id": "5900f3b11000cf542c50fec4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler69()</code> should return 510510.",
          "testString":
            "assert.strictEqual(euler69(), 510510, '<code>euler69()</code> should return 510510.');"
        }
      ],
      "description": [
        "Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.",
        "",
        "n",
        "Relatively Prime",
        "φ(n)",
        "n/φ(n)",
        "2",
        "1",
        "1",
        "2",
        "3",
        "1,2",
        "2",
        "1.5",
        "4",
        "1,3",
        "2",
        "2",
        "5",
        "1,2,3,4",
        "4",
        "1.25",
        "6",
        "1,5",
        "2",
        "3",
        "7",
        "1,2,3,4,5,6",
        "6",
        "1.1666...",
        "8",
        "1,3,5,7",
        "4",
        "2",
        "9",
        "1,2,4,5,7,8",
        "6",
        "1.5",
        "10",
        "1,3,7,9",
        "4",
        "2.5",
        "",
        "It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.",
        "Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler69() {\n  // Good luck!\n  return true;\n}\n\neuler69();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 69 Totient maximum",
      "dashedName": "problem-69-totient-maximum"
    },
    {
      "id": "5900f3b21000cf542c50fec5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler70()</code> should return 8319823.",
          "testString":
            "assert.strictEqual(euler70(), 8319823, '<code>euler70()</code> should return 8319823.');"
        }
      ],
      "description": [
        "Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of positive numbers less than or equal to n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.The number 1 is considered to be relatively prime to every positive number, so φ(1)=1. ",
        "Interestingly, φ(87109)=79180, and it can be seen that 87109 is a permutation of 79180.",
        "Find the value of n, 1 < n < 107, for which φ(n) is a permutation of n and the ratio n/φ(n) produces a minimum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler70() {\n  // Good luck!\n  return true;\n}\n\neuler70();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 70 Totient permutation",
      "dashedName": "problem-70-totient-permutation"
    },
    {
      "id": "5900f3b31000cf542c50fec6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler71()</code> should return 428570.",
          "testString":
            "assert.strictEqual(euler71(), 428570, '<code>euler71()</code> should return 428570.');"
        }
      ],
      "description": [
        "Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.",
        "If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:",
        "1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8",
        "It can be seen that 2/5 is the fraction immediately to the left of 3/7.",
        "By listing the set of reduced proper fractions for d ≤ 1,000,000 in ascending order of size, find the numerator of the fraction immediately to the left of 3/7."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler71() {\n  // Good luck!\n  return true;\n}\n\neuler71();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 71 Ordered fractions",
      "dashedName": "problem-71-ordered-fractions"
    },
    {
      "id": "5900f3b41000cf542c50fec7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler72()</code> should return 303963552391.",
          "testString":
            "assert.strictEqual(euler72(), 303963552391, '<code>euler72()</code> should return 303963552391.');"
        }
      ],
      "description": [
        "Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.",
        "If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:",
        "1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8",
        "It can be seen that there are 21 elements in this set.",
        "How many elements would be contained in the set of reduced proper fractions for d ≤ 1,000,000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler72() {\n  // Good luck!\n  return true;\n}\n\neuler72();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 72 Counting fractions",
      "dashedName": "problem-72-counting-fractions"
    },
    {
      "id": "5900f3b61000cf542c50fec8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler73()</code> should return 7295372.",
          "testString":
            "assert.strictEqual(euler73(), 7295372, '<code>euler73()</code> should return 7295372.');"
        }
      ],
      "description": [
        "Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.",
        "If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:",
        "1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8",
        "It can be seen that there are 3 fractions between 1/3 and 1/2.",
        "How many fractions lie between 1/3 and 1/2 in the sorted set of reduced proper fractions for d ≤ 12,000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler73() {\n  // Good luck!\n  return true;\n}\n\neuler73();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 73 Counting fractions in a range",
      "dashedName": "problem-73-counting-fractions-in-a-range"
    },
    {
      "id": "5900f3b61000cf542c50fec9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler74()</code> should return 402.",
          "testString":
            "assert.strictEqual(euler74(), 402, '<code>euler74()</code> should return 402.');"
        }
      ],
      "description": [
        "The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:",
        "1! + 4! + 5! = 1 + 24 + 120 = 145",
        "Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:",
        "169 → 363601 → 1454 → 169",
        "871 → 45361 → 871",
        "872 → 45362 → 872",
        "It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,",
        "69 → 363600 → 1454 → 169 → 363601 (→ 1454)",
        "78 → 45360 → 871 → 45361 (→ 871)",
        "540 → 145 (→ 145)",
        "Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.",
        "How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler74() {\n  // Good luck!\n  return true;\n}\n\neuler74();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 74 Digit factorial chains",
      "dashedName": "problem-74-digit-factorial-chains"
    },
    {
      "id": "5900f3b71000cf542c50feca",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler75()</code> should return 161667.",
          "testString":
            "assert.strictEqual(euler75(), 161667, '<code>euler75()</code> should return 161667.');"
        }
      ],
      "description": [
        "It turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples.",
        "12 cm: (3,4,5)24 cm: (6,8,10)30 cm: (5,12,13)36 cm: (9,12,15)40 cm: (8,15,17)48 cm: (12,16,20)",
        "In contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles.",
        "120 cm: (30,40,50), (20,48,52), (24,45,51)",
        "Given that L is the length of the wire, for how many values of L ≤ 1,500,000 can exactly one integer sided right angle triangle be formed?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler75() {\n  // Good luck!\n  return true;\n}\n\neuler75();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 75 Singular integer right triangles",
      "dashedName": "problem-75-singular-integer-right-triangles"
    },
    {
      "id": "5900f3b81000cf542c50fecb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler76()</code> should return 190569291.",
          "testString":
            "assert.strictEqual(euler76(), 190569291, '<code>euler76()</code> should return 190569291.');"
        }
      ],
      "description": [
        "It is possible to write five as a sum in exactly six different ways:",
        "4 + 1",
        "3 + 2",
        "3 + 1 + 1",
        "2 + 2 + 1",
        "2 + 1 + 1 + 1",
        "1 + 1 + 1 + 1 + 1",
        "How many different ways can one hundred be written as a sum of at least two positive integers?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler76() {\n  // Good luck!\n  return true;\n}\n\neuler76();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 76 Counting summations",
      "dashedName": "problem-76-counting-summations"
    },
    {
      "id": "5900f3b91000cf542c50fecc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler77()</code> should return 71.",
          "testString":
            "assert.strictEqual(euler77(), 71, '<code>euler77()</code> should return 71.');"
        }
      ],
      "description": [
        "It is possible to write ten as the sum of primes in exactly five different ways:",
        "7 + 3",
        "5 + 5",
        "5 + 3 + 2",
        "3 + 3 + 2 + 2",
        "2 + 2 + 2 + 2 + 2",
        "What is the first value which can be written as the sum of primes in over five thousand different ways?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler77() {\n  // Good luck!\n  return true;\n}\n\neuler77();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 77 Prime summations",
      "dashedName": "problem-77-prime-summations"
    },
    {
      "id": "5900f3ba1000cf542c50fecd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler78()</code> should return 55374.",
          "testString":
            "assert.strictEqual(euler78(), 55374, '<code>euler78()</code> should return 55374.');"
        }
      ],
      "description": [
        "Let p(n) represent the number of different ways in which n coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so p(5)=7.",
        "",
        "OOOOO",
        "OOOO   O",
        "OOO   OO",
        "OOO   O   O",
        "OO   OO   O",
        "OO   O   O   O",
        "O   O   O   O   O",
        "",
        "Find the least value of n for which p(n) is divisible by one million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler78() {\n  // Good luck!\n  return true;\n}\n\neuler78();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 78 Coin partitions",
      "dashedName": "problem-78-coin-partitions"
    },
    {
      "id": "5900f3bb1000cf542c50fece",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler79()</code> should return 73162890.",
          "testString":
            "assert.strictEqual(euler79(), 73162890, '<code>euler79()</code> should return 73162890.');"
        }
      ],
      "description": [
        "A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.",
        "The text file, keylog.txt, contains fifty successful login attempts.",
        "Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler79() {\n  // Good luck!\n  return true;\n}\n\neuler79();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 79 Passcode derivation",
      "dashedName": "problem-79-passcode-derivation"
    },
    {
      "id": "5900f3bc1000cf542c50fecf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler80()</code> should return 40886.",
          "testString":
            "assert.strictEqual(euler80(), 40886, '<code>euler80()</code> should return 40886.');"
        }
      ],
      "description": [
        "It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.",
        "The square root of two is 1.41421356237309504880..., and the digital sum of the first one hundred decimal digits is 475.",
        "For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler80() {\n  // Good luck!\n  return true;\n}\n\neuler80();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 80 Square root digital expansion",
      "dashedName": "problem-80-square-root-digital-expansion"
    },
    {
      "id": "5900f3bd1000cf542c50fed0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler81()</code> should return 427337.",
          "testString":
            "assert.strictEqual(euler81(), 427337, '<code>euler81()</code> should return 427337.');"
        }
      ],
      "description": [
        "In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by only moving to the right and down, is indicated in bold red and is equal to 2427.",
        "",
        "$$",
        "\\begin{pmatrix}",
        "\\color{red}{131} & 673 & 234 & 103 & 18\\\\",
        "\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\",
        "630 & 803 & \\color{red}{746} & \\color{red}{422} & 111\\\\",
        "537 & 699 & 497 & \\color{red}{121} & 956\\\\",
        "805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}",
        "\\end{pmatrix}",
        "$$",
        "",
        "Find the minimal path sum, in matrix.txt (right click and \"Save Link/Target As...\"), a 31K text file containing a 80 by 80 matrix, from the top left to the bottom right by only moving right and down."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler81() {\n  // Good luck!\n  return true;\n}\n\neuler81();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 81 Path sum two ways",
      "dashedName": "problem-81-path-sum-two-ways"
    },
    {
      "id": "5900f3be1000cf542c50fed1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler82()</code> should return 260324.",
          "testString":
            "assert.strictEqual(euler82(), 260324, '<code>euler82()</code> should return 260324.');"
        }
      ],
      "description": [
        "NOTE: This problem is a more challenging version of Problem 81.",
        "The minimal path sum in the 5 by 5 matrix below, by starting in any cell in the left column and finishing in any cell in the right column, and only moving up, down, and right, is indicated in red and bold; the sum is equal to 994.",
        "",
        "$$",
        "\\begin{pmatrix}",
        "131 & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\",
        "\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\",
        "630 & 803 & 746 & 422 & 111\\\\",
        "537 & 699 & 497 & 121 & 956\\\\",
        "805 & 732 & 524 & 37 & 331",
        "\\end{pmatrix}",
        "$$",
        "",
        "Find the minimal path sum, in matrix.txt (right click and \"Save Link/Target As...\"), a 31K text file containing a 80 by 80 matrix, from the left column to the right column."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler82() {\n  // Good luck!\n  return true;\n}\n\neuler82();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 82 Path sum three ways",
      "dashedName": "problem-82-path-sum-three-ways"
    },
    {
      "id": "5900f3bf1000cf542c50fed2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler83()</code> should return 425185.",
          "testString":
            "assert.strictEqual(euler83(), 425185, '<code>euler83()</code> should return 425185.');"
        }
      ],
      "description": [
        "NOTE: This problem is a significantly more challenging version of Problem 81.",
        "In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by moving left, right, up, and down, is indicated in bold red and is equal to 2297.",
        "",
        "$$",
        "\\begin{pmatrix}",
        "\\color{red}{131} & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\",
        "\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & \\color{red}{150}\\\\",
        "630 & 803 & 746 & \\color{red}{422} & \\color{red}{111}\\\\",
        "537 & 699 & 497 & \\color{red}{121} & 956\\\\",
        "805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}",
        "\\end{pmatrix}",
        "$$",
        "",
        "Find the minimal path sum, in matrix.txt (right click and ",
        "\"Save Link/Target As...\"), a 31K text file containing a 80 by 80 matrix, from the top left to the bottom right by moving left, right, up, and down."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler83() {\n  // Good luck!\n  return true;\n}\n\neuler83();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 83 Path sum four ways",
      "dashedName": "problem-83-path-sum-four-ways"
    },
    {
      "id": "5900f3c11000cf542c50fed3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler84()</code> should return 101524.",
          "testString":
            "assert.strictEqual(euler84(), 101524, '<code>euler84()</code> should return 101524.');"
        }
      ],
      "description": [
        "In the game, Monopoly, the standard board is set up in the following way:",
        "",
        "GO",
        "A1",
        "CC1",
        "A2",
        "T1",
        "R1",
        "B1",
        "CH1",
        "B2",
        "B3",
        "JAIL",
        "H2",
        "",
        "C1",
        "T2",
        "",
        "U1",
        "H1",
        "",
        "C2",
        "CH3",
        "",
        "C3",
        "R4",
        "",
        "R2",
        "G3",
        "",
        "D1",
        "CC3",
        "",
        "CC2",
        "G2",
        "",
        "D2",
        "G1",
        "",
        "D3",
        "G2J",
        "F3",
        "U2",
        "F2",
        "F1",
        "R3",
        "E3",
        "E2",
        "CH2",
        "E1",
        "FP",
        "",
        "A player starts on the GO square and adds the scores on two 6-sided dice to determine the number of squares they advance in a clockwise direction. Without any further rules we would expect to visit each square with equal probability: 2.5%. However, landing on G2J (Go To Jail), CC (community chest), and CH (chance) changes this distribution.",
        "In addition to G2J, and one card from each of CC and CH, that orders the player to go directly to jail, if a player rolls three consecutive doubles, they do not advance the result of their 3rd roll. Instead they proceed directly to jail.",
        "At the beginning of the game, the CC and CH cards are shuffled. When a player lands on CC or CH they take a card from the top of the respective pile and, after following the instructions, it is returned to the bottom of the pile. There are sixteen cards in each pile, but for the purpose of this problem we are only concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square.",
        "Community Chest (2/16 cards):",
        "Advance to GO",
        "Go to JAIL",
        "",
        "Chance (10/16 cards):",
        "Advance to GO",
        "Go to JAIL",
        "Go to C1",
        "Go to E3",
        "Go to H2",
        "Go to R1",
        "Go to next R (railway company)",
        "Go to next R",
        "Go to next U (utility company)",
        "Go back 3 squares.",
        "",
        "The heart of this problem concerns the likelihood of visiting a particular square. That is, the probability of finishing at that square after a roll. For this reason it should be clear that, with the exception of G2J for which the probability of finishing on it is zero, the CH squares will have the lowest probabilities, as 5/8 request a movement to another square, and it is the final square that the player finishes at on each roll that we are interested in. We shall make no distinction between \"Just Visiting\" and being sent to JAIL, and we shall also ignore the rule about requiring a double to \"get out of jail\", assuming that they pay to get out on their next turn.",
        "By starting at GO and numbering the squares sequentially from 00 to 39 we can concatenate these two-digit numbers to produce strings that correspond with sets of squares.",
        "Statistically it can be shown that the three most popular squares, in order, are JAIL (6.24%) = Square 10, E3 (3.18%) = Square 24, and GO (3.09%) = Square 00. So these three most popular squares can be listed with the six-digit modal string: 102400.",
        "If, instead of using two 6-sided dice, two 4-sided dice are used, find the six-digit modal string."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler84() {\n  // Good luck!\n  return true;\n}\n\neuler84();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 84 Monopoly odds",
      "dashedName": "problem-84-monopoly-odds"
    },
    {
      "id": "5900f3c11000cf542c50fed4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler85()</code> should return 2772.",
          "testString":
            "assert.strictEqual(euler85(), 2772, '<code>euler85()</code> should return 2772.');"
        }
      ],
      "description": [
        "By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles:",
        "",
        "",
        "Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler85() {\n  // Good luck!\n  return true;\n}\n\neuler85();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 85 Counting rectangles",
      "dashedName": "problem-85-counting-rectangles"
    },
    {
      "id": "5900f3c31000cf542c50fed5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler86()</code> should return 1818.",
          "testString":
            "assert.strictEqual(euler86(), 1818, '<code>euler86()</code> should return 1818.');"
        }
      ],
      "description": [
        "A spider, S, sits in one corner of a cuboid room, measuring 6 by 5 by 3, and a fly, F, sits in the opposite corner. By travelling on the surfaces of the room the shortest \"straight line\" distance from S to F is 10 and the path is shown on the diagram.",
        "",
        "",
        "However, there are up to three \"shortest\" path candidates for any given cuboid and the shortest route doesn't always have integer length.",
        "It can be shown that there are exactly 2060 distinct cuboids, ignoring rotations, with integer dimensions, up to a maximum size of M by M by M, for which the shortest route has integer length when M = 100. This is the least value of M for which the number of solutions first exceeds two thousand; the number of solutions when M = 99 is 1975.",
        "Find the least value of M such that the number of solutions first exceeds one million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler86() {\n  // Good luck!\n  return true;\n}\n\neuler86();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 86 Cuboid route",
      "dashedName": "problem-86-cuboid-route"
    },
    {
      "id": "5900f3c51000cf542c50fed8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler87()</code> should return 1097343.",
          "testString":
            "assert.strictEqual(euler87(), 1097343, '<code>euler87()</code> should return 1097343.');"
        }
      ],
      "description": [
        "The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is 28. In fact, there are exactly four numbers below fifty that can be expressed in such a way:",
        "28 = 22 + 23 + 24",
        "33 = 32 + 23 + 24",
        "49 = 52 + 23 + 24",
        "47 = 22 + 33 + 24",
        "How many numbers below fifty million can be expressed as the sum of a prime square, prime cube, and prime fourth power?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler87() {\n  // Good luck!\n  return true;\n}\n\neuler87();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 87 Prime power triples",
      "dashedName": "problem-87-prime-power-triples"
    },
    {
      "id": "5900f3c51000cf542c50fed6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler88()</code> should return 7587457.",
          "testString":
            "assert.strictEqual(euler88(), 7587457, '<code>euler88()</code> should return 7587457.');"
        }
      ],
      "description": [
        "A natural number, N, that can be written as the sum and product of a given set of at least two natural numbers, {a1, a2, ... , ak} is called a product-sum number: N = a1 + a2 + ... + ak = a1 × a2 × ... × ak.",
        "For example, 6 = 1 + 2 + 3 = 1 × 2 × 3.",
        "For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.",
        "k=2: 4 = 2 × 2 = 2 + 2k=3: 6 = 1 × 2 × 3 = 1 + 2 + 3k=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4k=5: 8 = 1 × 1 × 2 × 2 × 2  = 1 + 1 + 2 + 2 + 2k=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6",
        "Hence for 2≤k≤6, the sum of all the minimal product-sum numbers is 4+6+8+12 = 30; note that 8 is only counted once in the sum.",
        "In fact, as the complete set of minimal product-sum numbers for 2≤k≤12 is {4, 6, 8, 12, 15, 16}, the sum is 61.",
        "What is the sum of all the minimal product-sum numbers for 2≤k≤12000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler88() {\n  // Good luck!\n  return true;\n}\n\neuler88();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 88 Productsum numbers",
      "dashedName": "problem-88-productsum-numbers"
    },
    {
      "id": "5900f3c51000cf542c50fed7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler89()</code> should return 743.",
          "testString":
            "assert.strictEqual(euler89(), 743, '<code>euler89()</code> should return 743.');"
        }
      ],
      "description": [
        "For a number written in Roman numerals to be considered valid there are basic rules which must be followed. Even though the rules allow some numbers to be expressed in more than one way there is always a \"best\" way of writing a particular number.",
        "For example, it would appear that there are at least six ways of writing the number sixteen:",
        "IIIIIIIIIIIIIIII",
        "VIIIIIIIIIII",
        "VVIIIIII",
        "XIIIIII",
        "VVVI",
        "XVI",
        "However, according to the rules only XIIIIII and XVI are valid, and the last example is considered to be the most efficient, as it uses the least number of numerals.",
        "The 11K text file, roman.txt (right click and 'Save Link/Target As...'), contains one thousand numbers written in valid, but not necessarily minimal, Roman numerals; see About... Roman Numerals for the definitive rules for this problem.",
        "Find the number of characters saved by writing each of these in their minimal form.",
        "Note: You can assume that all the Roman numerals in the file contain no more than four consecutive identical units."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler89() {\n  // Good luck!\n  return true;\n}\n\neuler89();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 89 Roman numerals",
      "dashedName": "problem-89-roman-numerals"
    },
    {
      "id": "5900f3c61000cf542c50fed9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler90()</code> should return 1217.",
          "testString":
            "assert.strictEqual(euler90(), 1217, '<code>euler90()</code> should return 1217.');"
        }
      ],
      "description": [
        "Each of the six faces on a cube has a different digit (0 to 9) written on it; the same is done to a second cube. By placing the two cubes side-by-side in different positions we can form a variety of 2-digit numbers.",
        "",
        "For example, the square number 64 could be formed:",
        "",
        "",
        "",
        "",
        "In fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: 01, 04, 09, 16, 25, 36, 49, 64, and 81.",
        "",
        "For example, one way this can be achieved is by placing {0, 5, 6, 7, 8, 9} on one cube and {1, 2, 3, 4, 8, 9} on the other cube.",
        "",
        "However, for this problem we shall allow the 6 or 9 to be turned upside-down so that an arrangement like {0, 5, 6, 7, 8, 9} and {1, 2, 3, 4, 6, 7} allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain 09.",
        "",
        "In determining a distinct arrangement we are interested in the digits on each cube, not the order.",
        "",
        "{1, 2, 3, 4, 5, 6} is equivalent to {3, 6, 4, 1, 2, 5}",
        "{1, 2, 3, 4, 5, 6} is distinct from {1, 2, 3, 4, 5, 9}",
        "",
        "But because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers.",
        "",
        "How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler90() {\n  // Good luck!\n  return true;\n}\n\neuler90();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 90 Cube digit pairs",
      "dashedName": "problem-90-cube-digit-pairs"
    },
    {
      "id": "5900f3c71000cf542c50feda",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler91()</code> should return 14234.",
          "testString":
            "assert.strictEqual(euler91(), 14234, '<code>euler91()</code> should return 14234.');"
        }
      ],
      "description": [
        "The points P (x1, y1) and Q (x2, y2) are plotted at integer co-ordinates and are joined to the origin, O(0,0), to form ΔOPQ.",
        "",
        "",
        "",
        "",
        "There are exactly fourteen triangles containing a right angle that can be formed when each co-ordinate lies between 0 and 2 inclusive; that is,0 ≤ x1, y1, x2, y2 ≤ 2.",
        "",
        "",
        "",
        "",
        "Given that 0 ≤ x1, y1, x2, y2 ≤ 50, how many right triangles can be formed?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler91() {\n  // Good luck!\n  return true;\n}\n\neuler91();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 91 Right triangles with integer coordinates",
      "dashedName": "problem-91-right-triangles-with-integer-coordinates"
    },
    {
      "id": "5900f3c81000cf542c50fedb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler92()</code> should return 8581146.",
          "testString":
            "assert.strictEqual(euler92(), 8581146, '<code>euler92()</code> should return 8581146.');"
        }
      ],
      "description": [
        "A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before.",
        "For example,",
        "44 → 32 → 13 → 10 → 1 → 1",
        "85 → 89 → 145 → 42 → 20 → 4 → 16 → 37 → 58 → 89",
        "Therefore any chain that arrives at 1 or 89 will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at 1 or 89.",
        "How many starting numbers below ten million will arrive at 89?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler92() {\n  // Good luck!\n  return true;\n}\n\neuler92();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 92 Square digit chains",
      "dashedName": "problem-92-square-digit-chains"
    },
    {
      "id": "5900f3ca1000cf542c50fedc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler93()</code> should return 1258.",
          "testString":
            "assert.strictEqual(euler93(), 1258, '<code>euler93()</code> should return 1258.');"
        }
      ],
      "description": [
        "By using each of the digits from the set, {1, 2, 3, 4}, exactly once, and making use of the four arithmetic operations (+, −, *, /) and brackets/parentheses, it is possible to form different positive integer targets.",
        "For example,",
        "8 = (4 * (1 + 3)) / 2",
        "14 = 4 * (3 + 1 / 2)",
        "19 = 4 * (2 + 3) − 1",
        "36 = 3 * 4 * (2 + 1)",
        "Note that concatenations of the digits, like 12 + 34, are not allowed.",
        "Using the set, {1, 2, 3, 4}, it is possible to obtain thirty-one different target numbers of which 36 is the maximum, and each of the numbers 1 to 28 can be obtained before encountering the first non-expressible number.",
        "Find the set of four distinct digits, a < b < c < d, for which the longest set of consecutive positive integers, 1 to n, can be obtained, giving your answer as a string: abcd."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler93() {\n  // Good luck!\n  return true;\n}\n\neuler93();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 93 Arithmetic expressions",
      "dashedName": "problem-93-arithmetic-expressions"
    },
    {
      "id": "5900f3ca1000cf542c50fedd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler94()</code> should return 518408346.",
          "testString":
            "assert.strictEqual(euler94(), 518408346, '<code>euler94()</code> should return 518408346.');"
        }
      ],
      "description": [
        "It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the almost equilateral triangle 5-5-6 has an area of 12 square units.",
        "We shall define an almost equilateral triangle to be a triangle for which two sides are equal and the third differs by no more than one unit.",
        "Find the sum of the perimeters of all almost equilateral triangles with integral side lengths and area and whose perimeters do not exceed one billion (1,000,000,000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler94() {\n  // Good luck!\n  return true;\n}\n\neuler94();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 94 Almost equilateral triangles",
      "dashedName": "problem-94-almost-equilateral-triangles"
    },
    {
      "id": "5900f3cc1000cf542c50fede",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler95()</code> should return 14316.",
          "testString":
            "assert.strictEqual(euler95(), 14316, '<code>euler95()</code> should return 14316.');"
        }
      ],
      "description": [
        "The proper divisors of a number are all the divisors excluding the number itself. For example, the proper divisors of 28 are 1, 2, 4, 7, and 14. As the sum of these divisors is equal to 28, we call it a perfect number.",
        "Interestingly the sum of the proper divisors of 220 is 284 and the sum of the proper divisors of 284 is 220, forming a chain of two numbers. For this reason, 220 and 284 are called an amicable pair.",
        "Perhaps less well known are longer chains. For example, starting with 12496, we form a chain of five numbers:",
        "12496 → 14288 → 15472 → 14536 → 14264 (→ 12496 → ...)",
        "Since this chain returns to its starting point, it is called an amicable chain.",
        "Find the smallest member of the longest amicable chain with no element exceeding one million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler95() {\n  // Good luck!\n  return true;\n}\n\neuler95();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 95 Amicable chains",
      "dashedName": "problem-95-amicable-chains"
    },
    {
      "id": "5900f3cc1000cf542c50fedf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler96()</code> should return 24702.",
          "testString":
            "assert.strictEqual(euler96(), 24702, '<code>euler96()</code> should return 24702.');"
        }
      ],
      "description": [
        "Su Doku (Japanese meaning number place) is the name given to a popular puzzle concept. Its origin is unclear, but credit must be attributed to Leonhard Euler who invented a similar, and much more difficult, puzzle idea called Latin Squares. The objective of Su Doku puzzles, however, is to replace the blanks (or zeros) in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9. Below is an example of a typical starting puzzle grid and its solution grid.",
        "",
        "",
        "0 0 39 0 00 0 1",
        "0 2 03 0 58 0 6",
        "6 0 00 0 14 0 0",
        "0 0 87 0 00 0 6",
        "1 0 20 0 07 0 8",
        "9 0 00 0 82 0 0",
        "0 0 28 0 00 0 5",
        "6 0 92 0 30 1 0",
        "5 0 00 0 93 0 0",
        "",
        "",
        "",
        "4 8 39 6 72 5 1",
        "9 2 13 4 58 7 6",
        "6 5 78 2 14 9 3",
        "5 4 87 2 91 3 6",
        "1 3 25 6 47 9 8",
        "9 7 61 3 82 4 5",
        "3 7 28 1 46 9 5",
        "6 8 92 5 34 1 7",
        "5 1 47 6 93 8 2",
        "",
        "",
        "A well constructed Su Doku puzzle has a unique solution and can be solved by logic, although it may be necessary to employ \"guess and test\" methods in order to eliminate options (there is much contested opinion over this). The complexity of the search determines the difficulty of the puzzle; the example above is considered easy because it can be solved by straight forward direct deduction.",
        "The 6K text file, sudoku.txt (right click and 'Save Link/Target As...'), contains fifty different Su Doku puzzles ranging in difficulty, but all with unique solutions (the first puzzle in the file is the example above).",
        "By solving all fifty puzzles find the sum of the 3-digit numbers found in the top left corner of each solution grid; for example, 483 is the 3-digit number found in the top left corner of the solution grid above."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler96() {\n  // Good luck!\n  return true;\n}\n\neuler96();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 96 Su Doku",
      "dashedName": "problem-96-su-doku"
    },
    {
      "id": "5900f3ce1000cf542c50fee0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler97()</code> should return 8739992577.",
          "testString":
            "assert.strictEqual(euler97(), 8739992577, '<code>euler97()</code> should return 8739992577.');"
        }
      ],
      "description": [
        "The first known prime found to exceed one million digits was discovered in 1999, and is a Mersenne prime of the form 26972593−1; it contains exactly 2,098,960 digits. Subsequently other Mersenne primes, of the form 2p−1, have been found which contain more digits.",
        "However, in 2004 there was found a massive non-Mersenne prime which contains 2,357,207 digits: 28433×27830457+1.",
        "Find the last ten digits of this prime number."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler97() {\n  // Good luck!\n  return true;\n}\n\neuler97();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 97 Large nonMersenne prime",
      "dashedName": "problem-97-large-nonmersenne-prime"
    },
    {
      "id": "5900f3cf1000cf542c50fee1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler98()</code> should return 18769.",
          "testString":
            "assert.strictEqual(euler98(), 18769, '<code>euler98()</code> should return 18769.');"
        }
      ],
      "description": [
        "By replacing each of the letters in the word CARE with 1, 2, 9, and 6 respectively, we form a square number: 1296 = 362. What is remarkable is that, by using the same digital substitutions, the anagram, RACE, also forms a square number: 9216 = 962. We shall call CARE (and RACE) a square anagram word pair and specify further that leading zeroes are not permitted, neither may a different letter have the same digital value as another letter.",
        "Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, find all the square anagram word pairs (a palindromic word is NOT considered to be an anagram of itself).",
        "What is the largest square number formed by any member of such a pair?",
        "NOTE: All anagrams formed must be contained in the given text file."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler98() {\n  // Good luck!\n  return true;\n}\n\neuler98();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 98 Anagramic squares",
      "dashedName": "problem-98-anagramic-squares"
    },
    {
      "id": "5900f3d01000cf542c50fee2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler99()</code> should return 709.",
          "testString":
            "assert.strictEqual(euler99(), 709, '<code>euler99()</code> should return 709.');"
        }
      ],
      "description": [
        "Comparing two numbers written in index form like 211 and 37 is not difficult, as any calculator would confirm that 211 = 2048 < 37 = 2187.",
        "However, confirming that 632382518061 > 519432525806 would be much more difficult, as both numbers contain over three million digits.",
        "Using base_exp.txt (right click and 'Save Link/Target As...'), a 22K text file containing one thousand lines with a base/exponent pair on each line, determine which line number has the greatest numerical value.",
        "NOTE: The first two lines in the file represent the numbers in the example given above."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler99() {\n  // Good luck!\n  return true;\n}\n\neuler99();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 99 Largest exponential",
      "dashedName": "problem-99-largest-exponential"
    },
    {
      "id": "5900f3d01000cf542c50fee3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler100()</code> should return 756872327473.",
          "testString":
            "assert.strictEqual(euler100(), 756872327473, '<code>euler100()</code> should return 756872327473.');"
        }
      ],
      "description": [
        "If a box contains twenty-one coloured discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs, P(BB) = (15/21)×(14/20) = 1/2.",
        "The next such arrangement, for which there is exactly 50% chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs.",
        "By finding the first arrangement to contain over 1012 = 1,000,000,000,000 discs in total, determine the number of blue discs that the box would contain."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler100() {\n  // Good luck!\n  return true;\n}\n\neuler100();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 100 Arranged probability",
      "dashedName": "problem-100-arranged-probability"
    },
    {
      "id": "5900f3d21000cf542c50fee4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler101()</code> should return 37076114526.",
          "testString":
            "assert.strictEqual(euler101(), 37076114526, '<code>euler101()</code> should return 37076114526.');"
        }
      ],
      "description": [
        "If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.",
        "As an example, let us consider the sequence of cube numbers. This is defined by the generating function, un = n3: 1, 8, 27, 64, 125, 216, ...",
        "Suppose we were only given the first two terms of this sequence. Working on the principle that \"simple is best\" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.",
        "We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n ≤ k, and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).",
        "As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n ≥ 2, OP(1, n) = u1.",
        "Hence we obtain the following OPs for the cubic sequence:",
        "",
        "OP(1, n) = 1",
        "1, 1, 1, 1, ...",
        "OP(2, n) = 7n−6",
        "1, 8, 15, ...",
        "OP(3, n) = 6n2−11n+6     ",
        "1, 8, 27, 58, ...",
        "OP(4, n) = n3",
        "1, 8, 27, 64, 125, ...",
        "",
        "Clearly no BOPs exist for k ≥ 4.",
        "By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.",
        "Consider the following tenth degree polynomial generating function:",
        "un = 1 − n + n2 − n3 + n4 − n5 + n6 − n7 + n8 − n9 + n10",
        "Find the sum of FITs for the BOPs."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler101() {\n  // Good luck!\n  return true;\n}\n\neuler101();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 101 Optimum polynomial",
      "dashedName": "problem-101-optimum-polynomial"
    },
    {
      "id": "5900f3d21000cf542c50fee5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler102()</code> should return 228.",
          "testString":
            "assert.strictEqual(euler102(), 228, '<code>euler102()</code> should return 228.');"
        }
      ],
      "description": [
        "Three distinct points are plotted at random on a Cartesian plane, for which -1000 ≤ x, y ≤ 1000, such that a triangle is formed.",
        "Consider the following two triangles:",
        "A(-340,495), B(-153,-910), C(835,-947)",
        "X(-175,41), Y(-421,-714), Z(574,-645)",
        "It can be verified that triangle ABC contains the origin, whereas triangle XYZ does not.",
        "Using triangles.txt (right click and 'Save Link/Target As...'), a 27K text file containing the co-ordinates of one thousand \"random\" triangles, find the number of triangles for which the interior contains the origin.",
        "NOTE: The first two examples in the file represent the triangles in the example given above."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler102() {\n  // Good luck!\n  return true;\n}\n\neuler102();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 102 Triangle containment",
      "dashedName": "problem-102-triangle-containment"
    },
    {
      "id": "5900f3d61000cf542c50fee7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler103()</code> should return 20313839404245.",
          "testString":
            "assert.strictEqual(euler103(), 20313839404245, '<code>euler103()</code> should return 20313839404245.');"
        }
      ],
      "description": [
        "Let S(A) represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:",
        "S(B) ≠ S(C); that is, sums of subsets cannot be equal.",
        "If B contains more elements than C then S(B) > S(C).",
        "If S(A) is minimised for a given n, we shall call it an optimum special sum set. The first five optimum special sum sets are given below.",
        "n = 1: {1}n = 2: {1, 2}n = 3: {2, 3, 4}n = 4: {3, 5, 6, 7}n = 5: {6, 9, 11, 12, 13}",
        "It seems that for a given optimum set, A = {a1, a2, ... , an}, the next optimum set is of the form B = {b, a1+b, a2+b, ... ,an+b}, where b is the \"middle\" element on the previous row.",
        "By applying this \"rule\" we would expect the optimum set for n = 6 to be A = {11, 17, 20, 22, 23, 24}, with S(A) = 117. However, this is not the optimum set, as we have merely applied an algorithm to provide a near optimum set. The optimum set for n = 6 is A = {11, 18, 19, 20, 22, 25}, with S(A) = 115 and corresponding set string: 111819202225.",
        "Given that A is an optimum special sum set for n = 7, find its set string.",
        "NOTE: This problem is related to Problem 105 and Problem 106."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler103() {\n  // Good luck!\n  return true;\n}\n\neuler103();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 103 Special subset sums optimum",
      "dashedName": "problem-103-special-subset-sums-optimum"
    },
    {
      "id": "5900f3d51000cf542c50fee6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler104()</code> should return 329468.",
          "testString":
            "assert.strictEqual(euler104(), 329468, '<code>euler104()</code> should return 329468.');"
        }
      ],
      "description": [
        "The Fibonacci sequence is defined by the recurrence relation:",
        "Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.",
        "It turns out that F541, which contains 113 digits, is the first Fibonacci number for which the last nine digits are 1-9 pandigital (contain all the digits 1 to 9, but not necessarily in order). And F2749, which contains 575 digits, is the first Fibonacci number for which the first nine digits are 1-9 pandigital.",
        "Given that Fk is the first Fibonacci number for which the first nine digits AND the last nine digits are 1-9 pandigital, find k."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler104() {\n  // Good luck!\n  return true;\n}\n\neuler104();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 104 Pandigital Fibonacci ends",
      "dashedName": "problem-104-pandigital-fibonacci-ends"
    },
    {
      "id": "5900f3d61000cf542c50fee8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler105()</code> should return 73702.",
          "testString":
            "assert.strictEqual(euler105(), 73702, '<code>euler105()</code> should return 73702.');"
        }
      ],
      "description": [
        "Let S(A) represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:",
        "S(B) ≠ S(C); that is, sums of subsets cannot be equal.",
        "If B contains more elements than C then S(B) > S(C).",
        "For example, {81, 88, 75, 42, 87, 84, 86, 65} is not a special sum set because 65 + 87 + 88 = 75 + 81 + 84, whereas {157, 150, 164, 119, 79, 159, 161, 139, 158} satisfies both rules for all possible subset pair combinations and S(A) = 1286.",
        "Using sets.txt (right click and \"Save Link/Target As...\"), a 4K text file with one-hundred sets containing seven to twelve elements (the two examples given above are the first two sets in the file), identify all the special sum sets, A1, A2, ..., Ak, and find the value of S(A1) + S(A2) + ... + S(Ak).",
        "NOTE: This problem is related to Problem 103 and Problem 106."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler105() {\n  // Good luck!\n  return true;\n}\n\neuler105();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 105 Special subset sums testing",
      "dashedName": "problem-105-special-subset-sums-testing"
    },
    {
      "id": "5900f3d71000cf542c50fee9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler106()</code> should return 21384.",
          "testString":
            "assert.strictEqual(euler106(), 21384, '<code>euler106()</code> should return 21384.');"
        }
      ],
      "description": [
        "Let S(A) represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:",
        "S(B) ≠ S(C); that is, sums of subsets cannot be equal.",
        "If B contains more elements than C then S(B) > S(C).",
        "For this problem we shall assume that a given set contains n strictly increasing elements and it already satisfies the second rule.",
        "Surprisingly, out of the 25 possible subset pairs that can be obtained from a set for which n = 4, only 1 of these pairs need to be tested for equality (first rule). Similarly, when n = 7, only 70 out of the 966 subset pairs need to be tested.",
        "For n = 12, how many of the 261625 subset pairs that can be obtained need to be tested for equality?",
        "NOTE: This problem is related to Problem 103 and Problem 105."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler106() {\n  // Good luck!\n  return true;\n}\n\neuler106();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 106 Special subset sums metatesting",
      "dashedName": "problem-106-special-subset-sums-metatesting"
    },
    {
      "id": "5900f3d91000cf542c50feea",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler107()</code> should return 259679.",
          "testString":
            "assert.strictEqual(euler107(), 259679, '<code>euler107()</code> should return 259679.');"
        }
      ],
      "description": [
        "The following undirected network consists of seven vertices and twelve edges with a total weight of 243.",
        "",
        "",
        "The same network can be represented by the matrix below.",
        "    ABCDEFG",
        "A-161221---",
        "B16--1720--",
        "C12--28-31-",
        "D211728-181923",
        "E-20-18--11",
        "F--3119--27",
        "G---231127-",
        "However, it is possible to optimise the network by removing some edges and still ensure that all points on the network remain connected. The network which achieves the maximum saving is shown below. It has a weight of 93, representing a saving of 243 − 93 = 150 from the original network.",
        "",
        "",
        "Using network.txt (right click and 'Save Link/Target As...'), a 6K text file containing a network with forty vertices, and given in matrix form, find the maximum saving which can be achieved by removing redundant edges whilst ensuring that the network remains connected."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler107() {\n  // Good luck!\n  return true;\n}\n\neuler107();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 107 Minimal network",
      "dashedName": "problem-107-minimal-network"
    },
    {
      "id": "5900f3d91000cf542c50feeb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>diophantineOne()</code> should return 180180.",
          "testString":
            "assert.strictEqual(diophantineOne(), 180180, '<code>diophantineOne()</code> should return 180180.');"
        }
      ],
      "description": [
        "In the following equation x, y, and n are positive integers.",
        "1/<var>x</var> + 1/<var>y</var> = 1/<var>n</var>",
        "For <var>n</var> = 4 there are exactly three distinct solutions:",
        "1/5 + 1/20 = 1/4<br />1/6 + 1/12 = 1/4<br />1/8 + 1/8 = 1/4",
        "What is the least value of <var>n</var> for which the number of distinct solutions exceeds one-thousand?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function diophantineOne() {\n  // Good luck!\n  return true;\n}\n\ndiophantineOne();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 108 Diophantine Reciprocals I",
      "dashedName": "problem-108-diophantine-reciprocals-i"
    },
    {
      "id": "5900f3db1000cf542c50feec",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler109()</code> should return 38182.",
          "testString":
            "assert.strictEqual(euler109(), 38182, '<code>euler109()</code> should return 38182.');"
        }
      ],
      "description": [
        "In the game of darts a player throws three darts at a target board which is split into twenty equal sized sections numbered one to twenty.",
        "",
        "",
        "The score of a dart is determined by the number of the region that the dart lands in. A dart landing outside the red/green outer ring scores zero. The black and cream regions inside this ring represent single scores. However, the red/green outer ring and middle ring score double and treble scores respectively.",
        "At the centre of the board are two concentric circles called the bull region, or bulls-eye. The outer bull is worth 25 points and the inner bull is a double, worth 50 points.",
        "There are many variations of rules but in the most popular game the players will begin with a score 301 or 501 and the first player to reduce their running total to zero is a winner. However, it is normal to play a \"doubles out\" system, which means that the player must land a double (including the double bulls-eye at the centre of the board) on their final dart to win; any other dart that would reduce their running total to one or lower means the score for that set of three darts is \"bust\".",
        "When a player is able to finish  on their current score it is called a \"checkout\" and the highest checkout is 170: T20 T20 D25 (two treble 20s and double bull).",
        "There are exactly eleven distinct ways to checkout on a score of 6:",
        "",
        "D3",
        "",
        "",
        "D1",
        "D2",
        "",
        "S2",
        "D2",
        "",
        "D2",
        "D1",
        "",
        "S4",
        "D1",
        "",
        "S1",
        "S1",
        "D2",
        "S1",
        "T1",
        "D1",
        "S1",
        "S3",
        "D1",
        "D1",
        "D1",
        "D1",
        "D1",
        "S2",
        "D1",
        "S2",
        "S2",
        "D1",
        "",
        "Note that D1 D2 is considered different to D2 D1 as they finish on different doubles. However, the combination S1 T1 D1 is considered the same as T1 S1 D1.",
        "In addition we shall not include misses in considering combinations; for example, D3 is the same as 0 D3 and 0 0 D3.",
        "Incredibly there are 42336 distinct ways of checking out in total.",
        "How many distinct ways can a player checkout with a score less than 100?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler109() {\n  // Good luck!\n  return true;\n}\n\neuler109();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 109 Darts",
      "dashedName": "problem-109-darts"
    },
    {
      "id": "5900f3db1000cf542c50feed",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>diophantineTwo</code> should return 9350130049860600.",
          "testString":
            "assert.strictEqual(diophantineTwo(), 9350130049860600, '<code>diophantineTwo()</code> should return 9350130049860600.');"
        }
      ],
      "description": [
        "In the following equation x, y, and n are positive integers.",
        "1/<var>x</var> + 1/<var>y</var> = 1/<var>n</var>",
        "It can be verified that when <var>n</var> = 1260 there are 113 distinct solutions and this is the least value of <var>n</var> for which the total number of distinct solutions exceeds one hundred.",
        "What is the least value of <var>n</var> for which the number of distinct solutions exceeds four million?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function diophantineTwo() {\n  // Good luck!\n  return true;\n}\n\ndiophantineTwo();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 110 Diophantine Reciprocals II",
      "dashedName": "problem-110-diophantine-reciprocals-ii"
    },
    {
      "id": "5900f3db1000cf542c50feee",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler111()</code> should return 612407567715.",
          "testString":
            "assert.strictEqual(euler111(), 612407567715, '<code>euler111()</code> should return 612407567715.');"
        }
      ],
      "description": [
        "Considering 4-digit primes containing repeated digits it is clear that they cannot all be the same: 1111 is divisible by 11, 2222 is divisible by 22, and so on. But there are nine 4-digit primes containing three ones:",
        "1117, 1151, 1171, 1181, 1511, 1811, 2111, 4111, 8111",
        "We shall say that M(n, d) represents the maximum number of repeated digits for an n-digit prime where d is the repeated digit, N(n, d) represents the number of such primes, and S(n, d) represents the sum of these primes.",
        "So M(4, 1) = 3 is the maximum number of repeated digits for a 4-digit prime where one is the repeated digit, there are N(4, 1) = 9 such primes, and the sum of these primes is S(4, 1) = 22275. It turns out that for d = 0, it is only possible to have M(4, 0) = 2 repeated digits, but there are N(4, 0) = 13 such cases.",
        "In the same way we obtain the following results for 4-digit primes.",
        "",
        "Digit, d",
        "M(4, d)",
        "N(4, d)",
        "S(4, d)",
        "0",
        "2",
        "13",
        "67061",
        "1",
        "3",
        "9",
        "22275",
        "2",
        "3",
        "1",
        "2221",
        "3",
        "3",
        "12",
        "46214",
        "4",
        "3",
        "2",
        "8888",
        "5",
        "3",
        "1",
        "5557",
        "6",
        "3",
        "1",
        "6661",
        "7",
        "3",
        "9",
        "57863",
        "8",
        "3",
        "1",
        "8887",
        "9",
        "3",
        "7",
        "48073",
        "",
        "For d = 0 to 9, the sum of all S(4, d) is 273700.",
        "Find the sum of all S(10, d)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler111() {\n  // Good luck!\n  return true;\n}\n\neuler111();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 111 Primes with runs",
      "dashedName": "problem-111-primes-with-runs"
    },
    {
      "id": "5900f3dd1000cf542c50feef",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler112()</code> should return 1587000.",
          "testString":
            "assert.strictEqual(euler112(), 1587000, '<code>euler112()</code> should return 1587000.');"
        }
      ],
      "description": [
        "Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.",
        "Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.",
        "We shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.",
        "Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.",
        "Surprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.",
        "Find the least number for which the proportion of bouncy numbers is exactly 99%."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler112() {\n  // Good luck!\n  return true;\n}\n\neuler112();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 112 Bouncy numbers",
      "dashedName": "problem-112-bouncy-numbers"
    },
    {
      "id": "5900f3dd1000cf542c50fef0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler113()</code> should return 51161058134250.",
          "testString":
            "assert.strictEqual(euler113(), 51161058134250, '<code>euler113()</code> should return 51161058134250.');"
        }
      ],
      "description": [
        "Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.",
        "Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.",
        "We shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.",
        "As n increases, the proportion of bouncy numbers below n increases such that there are only 12951 numbers below one-million that are not bouncy and only 277032 non-bouncy numbers below 1010.",
        "How many numbers below a googol (10100) are not bouncy?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler113() {\n  // Good luck!\n  return true;\n}\n\neuler113();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 113 Nonbouncy numbers",
      "dashedName": "problem-113-nonbouncy-numbers"
    },
    {
      "id": "5900f3e01000cf542c50fef2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler114()</code> should return 16475640049.",
          "testString":
            "assert.strictEqual(euler114(), 16475640049, '<code>euler114()</code> should return 16475640049.');"
        }
      ],
      "description": [
        "A row measuring seven units in length has red blocks with a minimum length of three units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square. There are exactly seventeen ways of doing this.",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "How many ways can a row measuring fifty units in length be filled?",
        "NOTE: Although the example above does not lend itself to the possibility, in general it is permitted to mix block sizes. For example, on a row measuring eight units in length you could use red (3), black (1), and red (4)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler114() {\n  // Good luck!\n  return true;\n}\n\neuler114();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 114 Counting block combinations I",
      "dashedName": "problem-114-counting-block-combinations-i"
    },
    {
      "id": "5900f3df1000cf542c50fef1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler115()</code> should return 168.",
          "testString":
            "assert.strictEqual(euler115(), 168, '<code>euler115()</code> should return 168.');"
        }
      ],
      "description": [
        "NOTE: This is a more difficult version of Problem 114.",
        "A row measuring n units in length has red blocks with a minimum length of m units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square.",
        "Let the fill-count function, F(m, n), represent the number of ways that a row can be filled.",
        "For example, F(3, 29) = 673135 and F(3, 30) = 1089155.",
        "That is, for m = 3, it can be seen that n = 30 is the smallest value for which the fill-count function first exceeds one million.",
        "In the same way, for m = 10, it can be verified that F(10, 56) = 880711 and F(10, 57) = 1148904, so n = 57 is the least value for which the fill-count function first exceeds one million.",
        "For m = 50, find the least value of n for which the fill-count function first exceeds one million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler115() {\n  // Good luck!\n  return true;\n}\n\neuler115();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 115 Counting block combinations II",
      "dashedName": "problem-115-counting-block-combinations-ii"
    },
    {
      "id": "5900f3e01000cf542c50fef3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler116()</code> should return 20492570929.",
          "testString":
            "assert.strictEqual(euler116(), 20492570929, '<code>euler116()</code> should return 20492570929.');"
        }
      ],
      "description": [
        "A row of five black square tiles is to have a number of its tiles replaced with coloured oblong tiles chosen from red (length two), green (length three), or blue (length four).",
        "If red tiles are chosen there are exactly seven ways this can be done.",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "If green tiles are chosen there are three ways.",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "And if blue tiles are chosen there are two ways.",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "Assuming that colours cannot be mixed there are 7 + 3 + 2 = 12 ways of replacing the black tiles in a row measuring five units in length.",
        "How many different ways can the black tiles in a row measuring fifty units in length be replaced if colours cannot be mixed and at least one coloured tile must be used?",
        "NOTE: This is related to Problem 117."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler116() {\n  // Good luck!\n  return true;\n}\n\neuler116();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 116 Red green or blue tiles",
      "dashedName": "problem-116-red-green-or-blue-tiles"
    },
    {
      "id": "5900f3e21000cf542c50fef4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler117()</code> should return 100808458960497.",
          "testString":
            "assert.strictEqual(euler117(), 100808458960497, '<code>euler117()</code> should return 100808458960497.');"
        }
      ],
      "description": [
        "Using a combination of black square tiles and oblong tiles chosen from: red tiles measuring two units, green tiles measuring three units, and blue tiles measuring four units, it is possible to tile a row measuring five units in length in exactly fifteen different ways.",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "How many ways can a row measuring fifty units in length be tiled?",
        "NOTE: This is related to Problem 116."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler117() {\n  // Good luck!\n  return true;\n}\n\neuler117();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 117 Red green and blue tiles",
      "dashedName": "problem-117-red-green-and-blue-tiles"
    },
    {
      "id": "5900f3e21000cf542c50fef5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler118()</code> should return 44680.",
          "testString":
            "assert.strictEqual(euler118(), 44680, '<code>euler118()</code> should return 44680.');"
        }
      ],
      "description": [
        "Using all of the digits 1 through 9 and concatenating them freely to form decimal integers, different sets can be formed. Interestingly with the set {2,5,47,89,631}, all of the elements belonging to it are prime.",
        "How many distinct sets containing each of the digits one through nine exactly once contain only prime elements?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler118() {\n  // Good luck!\n  return true;\n}\n\neuler118();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 118 Pandigital prime sets",
      "dashedName": "problem-118-pandigital-prime-sets"
    },
    {
      "id": "5900f3e41000cf542c50fef6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler119()</code> should return 248155780267521.",
          "testString":
            "assert.strictEqual(euler119(), 248155780267521, '<code>euler119()</code> should return 248155780267521.');"
        }
      ],
      "description": [
        "The number 512 is interesting because it is equal to the sum of its digits raised to some power: 5 + 1 + 2 = 8, and 83 = 512. Another example of a number with this property is 614656 = 284.",
        "We shall define an to be the nth term of this sequence and insist that a number must contain at least two digits to have a sum.",
        "You are given that a2 = 512 and a10 = 614656.",
        "Find a30."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler119() {\n  // Good luck!\n  return true;\n}\n\neuler119();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 119 Digit power sum",
      "dashedName": "problem-119-digit-power-sum"
    },
    {
      "id": "5900f3e41000cf542c50fef7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler120()</code> should return 333082500.",
          "testString":
            "assert.strictEqual(euler120(), 333082500, '<code>euler120()</code> should return 333082500.');"
        }
      ],
      "description": [
        "Let r be the remainder when (a−1)n + (a+1)n is divided by a2.",
        "For example, if a = 7 and n = 3, then r = 42: 63 + 83 = 728 ≡ 42 mod 49. And as n varies, so too will r, but for a = 7 it turns out that rmax = 42.",
        "For 3 ≤ a ≤ 1000, find ∑ rmax."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler120() {\n  // Good luck!\n  return true;\n}\n\neuler120();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 120 Square remainders",
      "dashedName": "problem-120-square-remainders"
    },
    {
      "id": "5900f3e51000cf542c50fef8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler121()</code> should return 2269.",
          "testString":
            "assert.strictEqual(euler121(), 2269, '<code>euler121()</code> should return 2269.');"
        }
      ],
      "description": [
        "A bag contains one red disc and one blue disc. In a game of chance a player takes a disc at random and its colour is noted. After each turn the disc is returned to the bag, an extra red disc is added, and another disc is taken at random.",
        "The player pays £1 to play and wins if they have taken more blue discs than red discs at the end of the game.",
        "If the game is played for four turns, the probability of a player winning is exactly 11/120, and so the maximum prize fund the banker should allocate for winning in this game would be £10 before they would expect to incur a loss. Note that any payout will be a whole number of pounds and also includes the original £1 paid to play the game, so in the example given the player actually wins £9.",
        "Find the maximum prize fund that should be allocated to a single game in which fifteen turns are played."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler121() {\n  // Good luck!\n  return true;\n}\n\neuler121();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 121 Disc game prize fund",
      "dashedName": "problem-121-disc-game-prize-fund"
    },
    {
      "id": "5900f3e61000cf542c50fef9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler122()</code> should return 1582.",
          "testString":
            "assert.strictEqual(euler122(), 1582, '<code>euler122()</code> should return 1582.');"
        }
      ],
      "description": [
        "The most naive way of computing n15 requires fourteen multiplications:",
        "n × n × ... × n = n15",
        "But using a \"binary\" method you can compute it in six multiplications:",
        "n × n = n2n2 × n2 = n4n4 × n4 = n8n8 × n4 = n12n12 × n2 = n14n14 × n = n15",
        "However it is yet possible to compute it in only five multiplications:",
        "n × n = n2n2 × n = n3n3 × n3 = n6n6 × n6 = n12n12 × n3 = n15",
        "We shall define m(k) to be the minimum number of multiplications to compute nk; for example m(15) = 5.",
        "For 1 ≤ k ≤ 200, find ∑ m(k)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler122() {\n  // Good luck!\n  return true;\n}\n\neuler122();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 122 Efficient exponentiation",
      "dashedName": "problem-122-efficient-exponentiation"
    },
    {
      "id": "5900f3e71000cf542c50fefa",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler123()</code> should return 21035.",
          "testString":
            "assert.strictEqual(euler123(), 21035, '<code>euler123()</code> should return 21035.');"
        }
      ],
      "description": [
        "Let pn be the nth prime: 2, 3, 5, 7, 11, ..., and let r be the remainder when (pn−1)n + (pn+1)n is divided by pn2.",
        "For example, when n = 3, p3 = 5, and 43 + 63 = 280 ≡ 5 mod 25.",
        "The least value of n for which the remainder first exceeds 109 is 7037.",
        "Find the least value of n for which the remainder first exceeds 1010."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler123() {\n  // Good luck!\n  return true;\n}\n\neuler123();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 123 Prime square remainders",
      "dashedName": "problem-123-prime-square-remainders"
    },
    {
      "id": "5900f3e81000cf542c50fefb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler124()</code> should return 21417.",
          "testString":
            "assert.strictEqual(euler124(), 21417, '<code>euler124()</code> should return 21417.');"
        }
      ],
      "description": [
        "The radical of n, rad(n), is the product of the distinct prime factors of n. For example, 504 = 23 × 32 × 7, so rad(504) = 2 × 3 × 7 = 42.",
        "If we calculate rad(n) for 1 ≤ n ≤ 10, then sort them on rad(n), and sorting on n if the radical values are equal, we get:",
        "Unsorted",
        "",
        "Sorted",
        "n",
        "rad(n)",
        "",
        "n",
        "rad(n)",
        "k",
        "11",
        "",
        "111",
        "22",
        "",
        "222",
        "33",
        "",
        "423",
        "42",
        "",
        "824",
        "55",
        "",
        "335",
        "66",
        "",
        "936",
        "77",
        "",
        "557",
        "82",
        "",
        "668",
        "93",
        "",
        "779",
        "1010",
        "",
        "101010",
        "Let E(k) be the kth element in the sorted n column; for example, E(4) = 8 and E(6) = 9.",
        "If rad(n) is sorted for 1 ≤ n ≤ 100000, find E(10000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler124() {\n  // Good luck!\n  return true;\n}\n\neuler124();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 124 Ordered radicals",
      "dashedName": "problem-124-ordered-radicals"
    },
    {
      "id": "5900f3e91000cf542c50fefc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler125()</code> should return 2906969179.",
          "testString":
            "assert.strictEqual(euler125(), 2906969179, '<code>euler125()</code> should return 2906969179.');"
        }
      ],
      "description": [
        "The palindromic number 595 is interesting because it can be written as the sum of consecutive squares: 62 + 72 + 82 + 92 + 102 + 112 + 122.",
        "There are exactly eleven palindromes below one-thousand that can be written as consecutive square sums, and the sum of these palindromes is 4164. Note that 1 = 02 + 12 has not been included as this problem is concerned with the squares of positive integers.",
        "Find the sum of all the numbers less than 108 that are both palindromic and can be written as the sum of consecutive squares."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler125() {\n  // Good luck!\n  return true;\n}\n\neuler125();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 125 Palindromic sums",
      "dashedName": "problem-125-palindromic-sums"
    },
    {
      "id": "5900f3ea1000cf542c50fefd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler126()</code> should return 18522.",
          "testString":
            "assert.strictEqual(euler126(), 18522, '<code>euler126()</code> should return 18522.');"
        }
      ],
      "description": [
        "The minimum number of cubes to cover every visible face on a cuboid measuring 3 x 2 x 1 is twenty-two.",
        "",
        "",
        "If we then add a second layer to this solid it would require forty-six cubes to cover every visible face, the third layer would require seventy-eight cubes, and the fourth layer would require one-hundred and eighteen cubes to cover every visible face.",
        "However, the first layer on a cuboid measuring 5 x 1 x 1 also requires twenty-two cubes; similarly the first layer on cuboids measuring 5 x 3 x 1, 7 x 2 x 1, and 11 x 1 x 1 all contain forty-six cubes.",
        "We shall define C(n) to represent the number of cuboids that contain n cubes in one of its layers. So C(22) = 2, C(46) = 4, C(78) = 5, and C(118) = 8.",
        "It turns out that 154 is the least value of n for which C(n) = 10.",
        "Find the least value of n for which C(n) = 1000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler126() {\n  // Good luck!\n  return true;\n}\n\neuler126();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 126 Cuboid layers",
      "dashedName": "problem-126-cuboid-layers"
    },
    {
      "id": "5900f3ec1000cf542c50fefe",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler127()</code> should return 18407904.",
          "testString":
            "assert.strictEqual(euler127(), 18407904, '<code>euler127()</code> should return 18407904.');"
        }
      ],
      "description": [
        "The radical of n, rad(n), is the product of distinct prime factors of n. For example, 504 = 23 × 32 × 7, so rad(504) = 2 × 3 × 7 = 42.",
        "We shall define the triplet of positive integers (a, b, c) to be an abc-hit if:",
        "GCD(a, b) = GCD(a, c) = GCD(b, c) = 1",
        "a < b",
        "a + b = c",
        "rad(abc) < c",
        "For example, (5, 27, 32) is an abc-hit, because:",
        "GCD(5, 27) = GCD(5, 32) = GCD(27, 32) = 1",
        "5 < 27",
        "5 + 27 = 32",
        "rad(4320) = 30 < 32",
        "It turns out that abc-hits are quite rare and there are only thirty-one abc-hits for c < 1000, with ∑c = 12523.",
        "Find ∑c for c < 120000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler127() {\n  // Good luck!\n  return true;\n}\n\neuler127();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 127 abchits",
      "dashedName": "problem-127-abchits"
    },
    {
      "id": "5900f3ec1000cf542c50feff",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler128()</code> should return 14516824220.",
          "testString":
            "assert.strictEqual(euler128(), 14516824220, '<code>euler128()</code> should return 14516824220.');"
        }
      ],
      "description": [
        "A hexagonal tile with number 1 is surrounded by a ring of six hexagonal tiles, starting at \"12 o'clock\" and numbering the tiles 2 to 7 in an anti-clockwise direction.",
        "New rings are added in the same fashion, with the next rings being numbered 8 to 19, 20 to 37, 38 to 61, and so on. The diagram below shows the first three rings.",
        "",
        "",
        "By finding the difference between tile n and each of its six neighbours we shall define PD(n) to be the number of those differences which are prime.",
        "For example, working clockwise around tile 8 the differences are 12, 29, 11, 6, 1, and 13. So PD(8) = 3.",
        "In the same way, the differences around tile 17 are 1, 17, 16, 1, 11, and 10, hence PD(17) = 2.",
        "It can be shown that the maximum value of PD(n) is 3.",
        "If all of the tiles for which PD(n) = 3 are listed in ascending order to form a sequence, the 10th tile would be 271.",
        "Find the 2000th tile in this sequence."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler128() {\n  // Good luck!\n  return true;\n}\n\neuler128();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 128 Hexagonal tile differences",
      "dashedName": "problem-128-hexagonal-tile-differences"
    },
    {
      "id": "5900f3ef1000cf542c50ff01",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler129()</code> should return 1000023.",
          "testString":
            "assert.strictEqual(euler129(), 1000023, '<code>euler129()</code> should return 1000023.');"
        }
      ],
      "description": [
        "A number consisting entirely of ones is called a repunit. We shall define R(k) to be a repunit of length k; for example, R(6) = 111111.",
        "Given that n is a positive integer and GCD(n, 10) = 1, it can be shown that there always exists a value, k, for which R(k) is divisible by n, and let A(n) be the least such value of k; for example, A(7) = 6 and A(41) = 5.",
        "The least value of n for which A(n) first exceeds ten is 17.",
        "Find the least value of n for which A(n) first exceeds one-million."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler129() {\n  // Good luck!\n  return true;\n}\n\neuler129();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 129 Repunit divisibility",
      "dashedName": "problem-129-repunit-divisibility"
    },
    {
      "id": "5900f3ee1000cf542c50ff00",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler130()</code> should return 149253.",
          "testString":
            "assert.strictEqual(euler130(), 149253, '<code>euler130()</code> should return 149253.');"
        }
      ],
      "description": [
        "A number consisting entirely of ones is called a repunit. We shall define R(k) to be a repunit of length k; for example, R(6) = 111111.",
        "Given that n is a positive integer and GCD(n, 10) = 1, it can be shown that there always exists a value, k, for which R(k) is divisible by n, and let A(n) be the least such value of k; for example, A(7) = 6 and A(41) = 5.",
        "You are given that for all primes, p > 5, that p − 1 is divisible by A(p). For example, when p = 41, A(41) = 5, and 40 is divisible by 5.",
        "However, there are rare composite values for which this is also true; the first five examples being 91, 259, 451, 481, and 703.",
        "Find the sum of the first twenty-five composite values of n for whichGCD(n, 10) = 1 and n − 1 is divisible by A(n)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler130() {\n  // Good luck!\n  return true;\n}\n\neuler130();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 130 Composites with prime repunit property",
      "dashedName": "problem-130-composites-with-prime-repunit-property"
    },
    {
      "id": "5900f3ef1000cf542c50ff02",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler131()</code> should return 173.",
          "testString":
            "assert.strictEqual(euler131(), 173, '<code>euler131()</code> should return 173.');"
        }
      ],
      "description": [
        "There are some prime values, p, for which there exists a positive integer, n, such that the expression n3 + n2p is a perfect cube.",
        "For example, when p = 19, 83 + 82×19 = 123.",
        "What is perhaps most surprising is that for each prime with this property the value of n is unique, and there are only four such primes below one-hundred.",
        "How many primes below one million have this remarkable property?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler131() {\n  // Good luck!\n  return true;\n}\n\neuler131();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 131 Prime cube partnership",
      "dashedName": "problem-131-prime-cube-partnership"
    },
    {
      "id": "5900f3f11000cf542c50ff03",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler132()</code> should return 843296.",
          "testString":
            "assert.strictEqual(euler132(), 843296, '<code>euler132()</code> should return 843296.');"
        }
      ],
      "description": [
        "A number consisting entirely of ones is called a repunit. We shall define R(k) to be a repunit of length k.",
        "For example, R(10) = 1111111111 = 11×41×271×9091, and the sum of these prime factors is 9414.",
        "Find the sum of the first forty prime factors of R(109)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler132() {\n  // Good luck!\n  return true;\n}\n\neuler132();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 132 Large repunit factors",
      "dashedName": "problem-132-large-repunit-factors"
    },
    {
      "id": "5900f3f21000cf542c50ff04",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler133()</code> should return 453647705.",
          "testString":
            "assert.strictEqual(euler133(), 453647705, '<code>euler133()</code> should return 453647705.');"
        }
      ],
      "description": [
        "A number consisting entirely of ones is called a repunit. We shall define R(k) to be a repunit of length k; for example, R(6) = 111111.",
        "Let us consider repunits of the form R(10n).",
        "Although R(10), R(100), or R(1000) are not divisible by 17, R(10000) is divisible by 17. Yet there is no value of n for which R(10n) will divide by 19. In fact, it is remarkable that 11, 17, 41, and 73 are the only four primes below one-hundred that can  be a factor of R(10n).",
        "Find the sum of all the primes below one-hundred thousand that will never be a factor of R(10n)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler133() {\n  // Good luck!\n  return true;\n}\n\neuler133();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 133 Repunit nonfactors",
      "dashedName": "problem-133-repunit-nonfactors"
    },
    {
      "id": "5900f3f21000cf542c50ff05",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler134()</code> should return 18613426663617120.",
          "testString":
            "assert.strictEqual(euler134(), 18613426663617120, '<code>euler134()</code> should return 18613426663617120.');"
        }
      ],
      "description": [
        "Consider the consecutive primes p1 = 19 and p2 = 23. It can be verified that 1219 is the smallest number such that the last digits are formed by p1 whilst also being divisible by p2.",
        "In fact, with the exception of p1 = 3 and p2 = 5, for every pair of consecutive primes, p2 > p1, there exist values of n for which the last digits are formed by p1 and n is divisible by p2. Let S be the smallest of these values of n.",
        "Find ∑ S for every pair of consecutive primes with 5 ≤ p1 ≤ 1000000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler134() {\n  // Good luck!\n  return true;\n}\n\neuler134();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 134 Prime pair connection",
      "dashedName": "problem-134-prime-pair-connection"
    },
    {
      "id": "5900f3f31000cf542c50ff06",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler135()</code> should return 4989.",
          "testString":
            "assert.strictEqual(euler135(), 4989, '<code>euler135()</code> should return 4989.');"
        }
      ],
      "description": [
        "Given the positive integers, x, y, and z, are consecutive terms of an arithmetic progression, the least value of the positive integer, n, for which the equation, x2 − y2 − z2 = n, has exactly two solutions is n = 27:",
        "342 − 272 − 202 = 122 − 92 − 62 = 27",
        "It turns out that n = 1155 is the least value which has exactly ten solutions.",
        "How many values of n less than one million have exactly ten distinct solutions?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler135() {\n  // Good luck!\n  return true;\n}\n\neuler135();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 135 Same differences",
      "dashedName": "problem-135-same-differences"
    },
    {
      "id": "5900f3f51000cf542c50ff07",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler136()</code> should return 2544559.",
          "testString":
            "assert.strictEqual(euler136(), 2544559, '<code>euler136()</code> should return 2544559.');"
        }
      ],
      "description": [
        "The positive integers, x, y, and z, are consecutive terms of an arithmetic progression. Given that n is a positive integer, the equation, x2 − y2 − z2 = n, has exactly one solution when n = 20:",
        "132 − 102 − 72 = 20",
        "In fact there are twenty-five values of n below one hundred for which the equation has a unique solution.",
        "How many values of n less than fifty million have exactly one solution?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler136() {\n  // Good luck!\n  return true;\n}\n\neuler136();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 136 Singleton difference",
      "dashedName": "problem-136-singleton-difference"
    },
    {
      "id": "5900f3f51000cf542c50ff08",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler137()</code> should return 1120149658760.",
          "testString":
            "assert.strictEqual(euler137(), 1120149658760, '<code>euler137()</code> should return 1120149658760.');"
        }
      ],
      "description": [
        "Consider the infinite polynomial series AF(x) = xF1 + x2F2 + x3F3 + ..., where Fk is the kth term in the Fibonacci sequence: 1, 1, 2, 3, 5, 8, ... ; that is, Fk = Fk−1 + Fk−2, F1 = 1 and F2 = 1.",
        "For this problem we shall be interested in values of x for which AF(x) is a positive integer.",
        "Surprisingly AF(1/2)",
        " = ",
        "(1/2).1 + (1/2)2.1 + (1/2)3.2 + (1/2)4.3 + (1/2)5.5 + ...",
        "",
        " = ",
        "1/2 + 1/4 + 2/8 + 3/16 + 5/32 + ...",
        "",
        " = ",
        "2",
        "The corresponding values of x for the first five natural numbers are shown below.",
        "",
        "xAF(x)",
        "√2−11",
        "1/22",
        "(√13−2)/33",
        "(√89−5)/84",
        "(√34−3)/55",
        "",
        "We shall call AF(x) a golden nugget if x is rational, because they become increasingly rarer; for example, the 10th golden nugget is 74049690.",
        "Find the 15th golden nugget."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler137() {\n  // Good luck!\n  return true;\n}\n\neuler137();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 137 Fibonacci golden nuggets",
      "dashedName": "problem-137-fibonacci-golden-nuggets"
    },
    {
      "id": "5900f3f61000cf542c50ff09",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler138()</code> should return 1118049290473932.",
          "testString":
            "assert.strictEqual(euler138(), 1118049290473932, '<code>euler138()</code> should return 1118049290473932.');"
        }
      ],
      "description": [
        "Consider the isosceles triangle with base length, b = 16, and legs, L = 17.",
        "",
        "",
        "By using the Pythagorean theorem it can be seen that the height of the triangle, h = √(172 − 82) = 15, which is one less than the base length.",
        "With b = 272 and L = 305, we get h = 273, which is one more than the base length, and this is the second smallest isosceles triangle with the property that h = b ± 1.",
        "Find ∑ L for the twelve smallest isosceles triangles for which h = b ± 1 and b, L are positive integers."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler138() {\n  // Good luck!\n  return true;\n}\n\neuler138();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 138 Special isosceles triangles",
      "dashedName": "problem-138-special-isosceles-triangles"
    },
    {
      "id": "5900f3f71000cf542c50ff0a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler139()</code> should return 10057761.",
          "testString":
            "assert.strictEqual(euler139(), 10057761, '<code>euler139()</code> should return 10057761.');"
        }
      ],
      "description": [
        "Let (a, b, c) represent the three sides of a right angle triangle with integral length sides. It is possible to place four such triangles together to form a square with length c.",
        "For example, (3, 4, 5) triangles can be placed together to form a 5 by 5 square with a 1 by 1 hole in the middle and it can be seen that the 5 by 5 square can be tiled with twenty-five 1 by 1 squares.",
        "",
        "",
        "However, if (5, 12, 13) triangles were used then the hole would measure 7 by 7 and these could not be used to tile the 13 by 13 square.",
        "Given that the perimeter of the right triangle is less than one-hundred million, how many Pythagorean triangles would allow such a tiling to take place?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler139() {\n  // Good luck!\n  return true;\n}\n\neuler139();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 139 Pythagorean tiles",
      "dashedName": "problem-139-pythagorean-tiles"
    },
    {
      "id": "5900f3fa1000cf542c50ff0c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler140()</code> should return 5673835352990.",
          "testString":
            "assert.strictEqual(euler140(), 5673835352990, '<code>euler140()</code> should return 5673835352990.');"
        }
      ],
      "description": [
        "Consider the infinite polynomial series AG(x) = xG1 + x2G2 + x3G3 + ..., where Gk is the kth term of the second order recurrence relation Gk = Gk−1 + Gk−2, G1 = 1 and G2 = 4; that is, 1, 4, 5, 9, 14, 23, ... .",
        "For this problem we shall be concerned with values of x for which AG(x) is a positive integer.",
        "The corresponding values of x for the first five natural numbers are shown below.",
        "",
        "xAG(x)",
        "(√5−1)/41",
        "2/52",
        "(√22−2)/63",
        "(√137−5)/144",
        "1/25",
        "",
        "We shall call AG(x) a golden nugget if x is rational, because they become increasingly rarer; for example, the 20th golden nugget is 211345365.",
        "Find the sum of the first thirty golden nuggets."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler140() {\n  // Good luck!\n  return true;\n}\n\neuler140();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 140 Modified Fibonacci golden nuggets",
      "dashedName": "problem-140-modified-fibonacci-golden-nuggets"
    },
    {
      "id": "5900f3f91000cf542c50ff0b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler141()</code> should return 878454337159.",
          "testString":
            "assert.strictEqual(euler141(), 878454337159, '<code>euler141()</code> should return 878454337159.');"
        }
      ],
      "description": [
        "A positive integer, n, is divided by d and the quotient and remainder are q and r respectively. In addition d, q, and r are consecutive positive integer terms in a geometric sequence, but not necessarily in that order.",
        "For example, 58 divided by 6 has quotient 9 and remainder 4. It can also be seen that 4, 6, 9 are consecutive terms in a geometric sequence (common ratio 3/2).",
        "We will call such numbers, n, progressive.",
        "Some progressive numbers, such as 9 and 10404 = 1022, happen to also be perfect squares. The sum of all progressive perfect squares below one hundred thousand is 124657.",
        "Find the sum of all progressive perfect squares below one trillion (1012)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler141() {\n  // Good luck!\n  return true;\n}\n\neuler141();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 141 Investigating progressive numbers n which are also square",
      "dashedName":
        "problem-141-investigating-progressive-numbers-n-which-are-also-square"
    },
    {
      "id": "5900f3fa1000cf542c50ff0d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler142()</code> should return 1006193.",
          "testString":
            "assert.strictEqual(euler142(), 1006193, '<code>euler142()</code> should return 1006193.');"
        }
      ],
      "description": [
        "Find the smallest x + y + z with integers x > y > z > 0 such that x + y, x − y, x + z, x − z, y + z, y − z are all perfect squares."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler142() {\n  // Good luck!\n  return true;\n}\n\neuler142();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 142 Perfect Square Collection",
      "dashedName": "problem-142-perfect-square-collection"
    },
    {
      "id": "5900f3fc1000cf542c50ff0e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler143()</code> should return 30758397.",
          "testString":
            "assert.strictEqual(euler143(), 30758397, '<code>euler143()</code> should return 30758397.');"
        }
      ],
      "description": [
        "Let ABC be a triangle with all interior angles being less than 120 degrees. Let X be any point inside the triangle and let XA = p, XC = q, and XB = r.",
        "Fermat challenged Torricelli to find the position of X such that p + q + r was minimised.",
        "Torricelli was able to prove that if equilateral triangles AOB, BNC and AMC are constructed on each side of triangle ABC, the circumscribed circles of AOB, BNC, and AMC will intersect at a single point, T, inside the triangle. Moreover he proved that T, called the Torricelli/Fermat point, minimises p + q + r. Even more remarkable, it can be shown that when the sum is minimised, AN = BM = CO = p + q + r and that AN, BM and CO also intersect at T.",
        "",
        "If the sum is minimised and a, b, c, p, q and r are all positive integers we shall call triangle ABC a Torricelli triangle. For example, a = 399, b = 455, c = 511 is an example of a Torricelli triangle, with p + q + r = 784.",
        "Find the sum of all distinct values of p + q + r ≤ 120000 for Torricelli triangles."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler143() {\n  // Good luck!\n  return true;\n}\n\neuler143();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 143 Investigating the Torricelli point of a triangle",
      "dashedName":
        "problem-143-investigating-the-torricelli-point-of-a-triangle"
    },
    {
      "id": "5900f3fc1000cf542c50ff0f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler144()</code> should return 354.",
          "testString":
            "assert.strictEqual(euler144(), 354, '<code>euler144()</code> should return 354.');"
        }
      ],
      "description": [
        "In laser physics, a \"white cell\" is a mirror system that acts as a delay line for the laser beam. The beam enters the cell, bounces around on the mirrors, and eventually works its way back out.",
        "The specific white cell we will be considering is an ellipse with the equation 4x2 + y2 = 100",
        "The section corresponding to −0.01 ≤ x ≤ +0.01 at the top is missing, allowing the light to enter and exit through the hole.",
        "",
        "The light beam in this problem starts at the point (0.0,10.1) just outside the white cell, and the beam first impacts the mirror at (1.4,-9.6).",
        "Each time the laser beam hits the surface of the ellipse, it follows the usual law of reflection \"angle of incidence equals angle of reflection.\" That is, both the incident and reflected beams make the same angle with the normal line at the point of incidence.",
        "In the figure on the left, the red line shows the first two points of contact between the laser beam and the wall of the white cell; the blue line shows the line tangent to the ellipse at the point of incidence of the first bounce.The slope m of the tangent line at any point (x,y) of the given ellipse is: m = −4x/yThe normal line is perpendicular to this tangent line at the point of incidence.",
        "The animation on the right shows the first 10 reflections of the beam.",
        "",
        "How many times does the beam hit the internal surface of the white cell before exiting?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler144() {\n  // Good luck!\n  return true;\n}\n\neuler144();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 144 Investigating multiple reflections of a laser beam",
      "dashedName":
        "problem-144-investigating-multiple-reflections-of-a-laser-beam"
    },
    {
      "id": "5900f3fd1000cf542c50ff10",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler145()</code> should return 608720.",
          "testString":
            "assert.strictEqual(euler145(), 608720, '<code>euler145()</code> should return 608720.');"
        }
      ],
      "description": [
        "Some positive integers n have the property that the sum [ n + reverse(n) ] consists entirely of odd (decimal) digits. For instance, 36 + 63 = 99 and 409 + 904 = 1313. We will call such numbers reversible; so 36, 63, 409, and 904 are reversible. Leading zeroes are not allowed in either n or reverse(n).",
        "",
        "There are 120 reversible numbers below one-thousand.",
        "",
        "How many reversible numbers are there below one-billion (109)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler145() {\n  // Good luck!\n  return true;\n}\n\neuler145();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 145 How many reversible numbers are there below onebillion",
      "dashedName":
        "problem-145-how-many-reversible-numbers-are-there-below-onebillion"
    },
    {
      "id": "5900f3fe1000cf542c50ff11",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler146()</code> should return 676333270.",
          "testString":
            "assert.strictEqual(euler146(), 676333270, '<code>euler146()</code> should return 676333270.');"
        }
      ],
      "description": [
        "The smallest positive integer n for which the numbers n2+1, n2+3, n2+7, n2+9, n2+13, and n2+27 are consecutive primes is 10. The sum of all such integers n below one-million is 1242490.",
        "",
        "What is the sum of all such integers n below 150 million?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler146() {\n  // Good luck!\n  return true;\n}\n\neuler146();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 146 Investigating a Prime Pattern",
      "dashedName": "problem-146-investigating-a-prime-pattern"
    },
    {
      "id": "5900f3ff1000cf542c50ff12",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler147()</code> should return 846910284.",
          "testString":
            "assert.strictEqual(euler147(), 846910284, '<code>euler147()</code> should return 846910284.');"
        }
      ],
      "description": [
        "In a 3x2 cross-hatched grid, a total of 37 different rectangles could be situated within that grid as indicated in the sketch.",
        "",
        "There are 5 grids smaller than 3x2, vertical and horizontal dimensions being important, i.e. 1x1, 2x1, 3x1, 1x2 and 2x2. If each of them is cross-hatched, the following number of different rectangles could be situated within those smaller grids:",
        "1x1: 1",
        "2x1: 4",
        "3x1: 8",
        "1x2: 4",
        "2x2: 18",
        "",
        "Adding those to the 37 of the 3x2 grid, a total of 72 different rectangles could be situated within 3x2 and smaller grids.",
        "",
        "How many different rectangles could be situated within 47x43 and smaller grids?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler147() {\n  // Good luck!\n  return true;\n}\n\neuler147();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 147 Rectangles in crosshatched grids",
      "dashedName": "problem-147-rectangles-in-crosshatched-grids"
    },
    {
      "id": "5900f4021000cf542c50ff14",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler148()</code> should return 2129970655314432.",
          "testString":
            "assert.strictEqual(euler148(), 2129970655314432, '<code>euler148()</code> should return 2129970655314432.');"
        }
      ],
      "description": [
        "We can easily verify that none of the entries in the first seven rows of Pascal's triangle are divisible by 7:",
        "",
        "",
        "",
        "",
        "",
        "",
        " 1",
        "",
        "",
        "",
        "",
        "",
        " 1",
        "",
        " 1",
        "",
        "",
        "",
        "",
        " 1",
        "",
        " 2",
        "",
        " 1",
        "",
        "",
        "",
        " 1",
        "",
        " 3",
        "",
        " 3",
        "",
        " 1",
        "",
        "",
        " 1",
        "",
        " 4",
        "",
        " 6",
        "",
        " 4",
        "",
        " 1",
        "",
        " 1",
        "",
        " 5",
        "",
        "10",
        "",
        "10",
        "",
        " 5",
        "",
        " 1",
        "1",
        "",
        " 6",
        "",
        "15",
        "",
        "20",
        "",
        "15",
        "",
        " 6",
        "",
        " 1",
        "However, if we check the first one hundred rows, we will find that only 2361 of the 5050 entries are not divisible by 7.",
        "",
        "Find the number of entries which are not divisible by 7 in the first one billion (109) rows of Pascal's triangle."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler148() {\n  // Good luck!\n  return true;\n}\n\neuler148();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 148 Exploring Pascals triangle",
      "dashedName": "problem-148-exploring-pascals-triangle"
    },
    {
      "id": "5900f4021000cf542c50ff13",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler149()</code> should return 52852124.",
          "testString":
            "assert.strictEqual(euler149(), 52852124, '<code>euler149()</code> should return 52852124.');"
        }
      ],
      "description": [
        "Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is 16 (= 8 + 7 + 1).",
        "",
        "",
        "−25329−6513273−18−4  8",
        "",
        "Now, let us repeat the search, but on a much larger scale:",
        "",
        "First, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":",
        "",
        "For 1 ≤ k ≤ 55, sk = [100003 − 200003k + 300007k3] (modulo 1000000) − 500000.",
        "For 56 ≤ k ≤ 4000000, sk = [sk−24 + sk−55 + 1000000] (modulo 1000000) − 500000.",
        "",
        "Thus, s10 = −393027 and s100 = 86613.",
        "",
        "The terms of s are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.",
        "",
        "Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler149() {\n  // Good luck!\n  return true;\n}\n\neuler149();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 149 Searching for a maximumsum subsequence",
      "dashedName": "problem-149-searching-for-a-maximumsum-subsequence"
    },
    {
      "id": "5900f4031000cf542c50ff15",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler150()</code> should return -271248680.",
          "testString":
            "assert.strictEqual(euler150(), -271248680, '<code>euler150()</code> should return -271248680.');"
        }
      ],
      "description": [
        "In a triangular array of positive and negative integers, we wish to find a sub-triangle such that the sum of the numbers it contains is the smallest possible.",
        "In the example below, it can be easily verified that the marked triangle satisfies this condition having a sum of −42.",
        "",
        "",
        "We wish to make such a triangular array with one thousand rows, so we generate 500500 pseudo-random numbers sk in the range ±219, using a type of random number generator (known as a Linear Congruential Generator) as follows:",
        "t := 0",
        "",
        "for k = 1 up to k = 500500:",
        "",
        "    t := (615949*t + 797807) modulo 220",
        "    sk := t−219",
        "Thus: s1 = 273519, s2 = −153582, s3 = 450905 etc",
        "Our triangular array is then formed using the pseudo-random numbers thus:",
        "",
        "s1",
        "s2  s3",
        "s4  s5  s6  ",
        "",
        "s7  s8  s9  s10",
        "...",
        "",
        "Sub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on).",
        "",
        "The \"sum of a sub-triangle\" is defined as the sum of all the elements it contains.",
        "",
        "Find the smallest possible sub-triangle sum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler150() {\n  // Good luck!\n  return true;\n}\n\neuler150();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 150 Searching a triangular array for a subtriangle having minimumsum",
      "dashedName":
        "problem-150-searching-a-triangular-array-for-a-subtriangle-having-minimumsum"
    },
    {
      "id": "5900f4031000cf542c50ff16",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler151()</code> should return 0.464399.",
          "testString":
            "assert.strictEqual(euler151(), 0.464399, '<code>euler151()</code> should return 0.464399.');"
        }
      ],
      "description": [
        "A printing shop runs 16 batches (jobs) every week and each batch requires a sheet of special colour-proofing paper of size A5.",
        "Every Monday morning, the foreman opens a new envelope, containing a large sheet of the special paper with size A1.",
        "He proceeds to cut it in half, thus getting two sheets of size A2. Then he cuts one of them in half to get two sheets of size A3 and so on until he obtains the A5-size sheet needed for the first batch of the week.",
        "All the unused sheets are placed back in the envelope.",
        "",
        "At the beginning of each subsequent batch, he takes from the envelope one sheet of paper at random. If it is of size A5, he uses it. If it is larger, he repeats the 'cut-in-half' procedure until he has what he needs and any remaining sheets are always placed back in the envelope.",
        "Excluding the first and last batch of the week, find the expected number of times (during each week) that the foreman finds a single sheet of paper in the envelope.",
        "Give your answer rounded to six decimal places using the format x.xxxxxx ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler151() {\n  // Good luck!\n  return true;\n}\n\neuler151();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 151 Paper sheets of standard sizes an expectedvalue problem",
      "dashedName":
        "problem-151-paper-sheets-of-standard-sizes-an-expectedvalue-problem"
    },
    {
      "id": "5900f4041000cf542c50ff17",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler152()</code> should return 301.",
          "testString":
            "assert.strictEqual(euler152(), 301, '<code>euler152()</code> should return 301.');"
        }
      ],
      "description": [
        "There are several ways to write the number 1/2 as a sum of inverse squares using distinct integers.",
        "For instance, the numbers {2,3,4,5,7,12,15,20,28,35} can be used:",
        "",
        "In fact, only using integers between 2 and 45 inclusive, there are exactly three ways to do it, the remaining two being: {2,3,4,6,7,9,10,20,28,35,36,45} and {2,3,4,6,7,9,12,15,28,30,35,36,45}.",
        "How many ways are there to write the number 1/2 as a sum of inverse squares using distinct integers between 2 and 80 inclusive?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler152() {\n  // Good luck!\n  return true;\n}\n\neuler152();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 152 Writing 12 as a sum of inverse squares",
      "dashedName": "problem-152-writing-12-as-a-sum-of-inverse-squares"
    },
    {
      "id": "5900f4051000cf542c50ff18",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler153()</code> should return 17971254122360636.",
          "testString":
            "assert.strictEqual(euler153(), 17971254122360636, '<code>euler153()</code> should return 17971254122360636.');"
        }
      ],
      "description": [
        "As we all know the equation x2=-1 has no solutions for real x.",
        "",
        "If we however introduce the imaginary number i this equation has two solutions: x=i and x=-i.",
        "",
        "If we go a step further the equation (x-3)2=-4 has two complex solutions: x=3+2i and x=3-2i.",
        "x=3+2i and x=3-2i are called each others' complex conjugate.",
        "",
        "Numbers of the form a+bi are called complex numbers.",
        "",
        "In general a+bi and a−bi are each other's complex conjugate.",
        "A Gaussian Integer is a complex number a+bi such that both a and b are integers.",
        "",
        "The regular integers are also Gaussian integers (with b=0).",
        "",
        "To distinguish them from Gaussian integers with b ≠ 0 we call such integers \"rational integers.\"",
        "",
        "A Gaussian integer is called a divisor of a rational integer n if the result is also a Gaussian integer.",
        "",
        "If for example we divide 5 by 1+2i we can simplify  in the following manner:",
        "",
        "Multiply numerator and denominator by the complex conjugate of 1+2i: 1−2i.",
        "",
        "The result is ",
        ".",
        "",
        "So 1+2i is a divisor of 5.",
        "",
        "Note that 1+i is not a divisor of 5 because .",
        "",
        "Note also that if the Gaussian Integer (a+bi) is a divisor of a rational integer n, then its complex conjugate (a−bi) is also a divisor of n.",
        "In fact, 5 has six divisors such that the real part is positive: {1, 1 + 2i, 1 − 2i, 2 + i, 2 − i, 5}.",
        "",
        "The following is a table of all of the divisors for the first five positive rational integers:",
        "",
        "n Gaussian integer divisors",
        "with positive real partSum s(n) of these",
        "",
        "divisors111",
        "21, 1+i, 1-i, 25",
        "31, 34",
        "41, 1+i, 1-i, 2, 2+2i, 2-2i,413",
        "51, 1+2i, 1-2i, 2+i, 2-i, 512",
        "For divisors with positive real parts, then, we have: .",
        "For 1 ≤ n ≤ 105, ∑ s(n)=17924657155.",
        "What is ∑ s(n) for 1 ≤ n ≤ 108?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler153() {\n  // Good luck!\n  return true;\n}\n\neuler153();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 153 Investigating Gaussian Integers",
      "dashedName": "problem-153-investigating-gaussian-integers"
    },
    {
      "id": "5900f4071000cf542c50ff19",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler154()</code> should return 479742450.",
          "testString":
            "assert.strictEqual(euler154(), 479742450, '<code>euler154()</code> should return 479742450.');"
        }
      ],
      "description": [
        "A triangular pyramid is constructed using spherical balls so that each ball rests on exactly three balls of the next lower level.",
        "",
        "Then, we calculate the number of paths leading from the apex to each position:",
        "A path starts at the apex and progresses downwards to any of the three spheres directly below the current position.",
        "Consequently, the number of paths to reach a certain position is the sum of the numbers immediately above it (depending on the position, there are up to three numbers above it).",
        "The result is Pascal's pyramid and the numbers at each level n are the coefficients of the trinomial expansion ",
        "(x + y + z)n.",
        "How many coefficients in the expansion of (x + y + z)200000 are multiples of 1012?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler154() {\n  // Good luck!\n  return true;\n}\n\neuler154();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 154 Exploring Pascals pyramid",
      "dashedName": "problem-154-exploring-pascals-pyramid"
    },
    {
      "id": "5900f4081000cf542c50ff1a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler155()</code> should return 3857447.",
          "testString":
            "assert.strictEqual(euler155(), 3857447, '<code>euler155()</code> should return 3857447.');"
        }
      ],
      "description": [
        "An electric circuit uses exclusively identical capacitors of the same value C.",
        "",
        "The capacitors can be connected in series or in parallel to form sub-units, which can then be connected in series or in parallel with other capacitors or other sub-units to form larger sub-units, and so on up to a final circuit.",
        "Using this simple procedure and up to n identical capacitors, we can make circuits having a range of different total capacitances. For example, using up to n=3 capacitors of 60 F each, we can obtain the following 7 distinct total capacitance values: ",
        "",
        "If we denote by D(n) the number of distinct total capacitance values we can obtain when using up to n equal-valued capacitors and the simple procedure described above, we have: D(1)=1, D(2)=3, D(3)=7 ...",
        "Find D(18).",
        "Reminder : When connecting capacitors C1, C2 etc in parallel, the total capacitance is CT = C1 + C2 +...,",
        "",
        "whereas when connecting them in series, the overall capacitance is given by:"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler155() {\n  // Good luck!\n  return true;\n}\n\neuler155();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 155 Counting Capacitor Circuits",
      "dashedName": "problem-155-counting-capacitor-circuits"
    },
    {
      "id": "5900f4091000cf542c50ff1b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler156()</code> should return 21295121502550.",
          "testString":
            "assert.strictEqual(euler156(), 21295121502550, '<code>euler156()</code> should return 21295121502550.');"
        }
      ],
      "description": [
        "Starting from zero the natural numbers are written down in base 10 like this:",
        "",
        "0 1 2 3 4 5 6 7 8 9 10 11 12....",
        "",
        "Consider the digit d=1. After we write down each number n, we will update the number of ones that have occurred and call this number f(n,1). The first values for f(n,1), then, are as follows:",
        "",
        "nf(n,1)",
        "00",
        "11",
        "21",
        "31",
        "41",
        "51",
        "61",
        "71",
        "81",
        "91",
        "102",
        "114",
        "125",
        "",
        "Note that f(n,1) never equals 3.",
        "",
        "So the first two solutions of the equation f(n,1)=n are n=0 and n=1. The next solution is n=199981.",
        "In the same manner the function f(n,d) gives the total number of digits d that have been written down after the number n has been written.",
        "",
        "In fact, for every digit d ≠ 0, 0 is the first solution of the equation f(n,d)=n.",
        "Let s(d) be the sum of all the solutions for which f(n,d)=n.",
        "",
        "You are given that s(1)=22786974071.",
        "Find  ∑ s(d) for 1 ≤ d ≤ 9.",
        "Note: if, for some n, f(n,d)=n",
        " for more than one value of d this value of n is counted again for every value of d for which f(n,d)=n."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler156() {\n  // Good luck!\n  return true;\n}\n\neuler156();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 156 Counting Digits",
      "dashedName": "problem-156-counting-digits"
    },
    {
      "id": "5900f4091000cf542c50ff1c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler157()</code> should return 53490.",
          "testString":
            "assert.strictEqual(euler157(), 53490, '<code>euler157()</code> should return 53490.');"
        }
      ],
      "description": [
        "Consider the diophantine equation 1/a+1/b= p/10n with a, b, p, n positive integers and a ≤ b.",
        "For n=1 this equation has 20 solutions that are listed below:",
        "1/1+1/1=20/10",
        "1/1+1/2=15/10",
        "1/1+1/5=12/10",
        "1/1+1/10=11/10",
        "1/2+1/2=10/10",
        "1/2+1/5=7/10",
        "1/2+1/10=6/10",
        "1/3+1/6=5/10",
        "1/3+1/15=4/10",
        "1/4+1/4=5/10",
        "1/4+1/20=3/10",
        "1/5+1/5=4/10",
        "1/5+1/10=3/10",
        "1/6+1/30=2/10",
        "1/10+1/10=2/10",
        "1/11+1/110=1/10",
        "1/12+1/60=1/10",
        "1/14+1/35=1/10",
        "1/15+1/30=1/10",
        "1/20+1/20=1/10",
        "How many solutions has this equation for 1 ≤ n ≤ 9?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler157() {\n  // Good luck!\n  return true;\n}\n\neuler157();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 157 Solving the diophantine equation 1a1b p10n",
      "dashedName": "problem-157-solving-the-diophantine-equation-1a1b-p10n"
    },
    {
      "id": "5900f40a1000cf542c50ff1d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler158()</code> should return 409511334375.",
          "testString":
            "assert.strictEqual(euler158(), 409511334375, '<code>euler158()</code> should return 409511334375.');"
        }
      ],
      "description": [
        "Taking three different letters from the 26 letters of the alphabet, character strings of length three can be formed.",
        "Examples are 'abc', 'hat' and 'zyx'.",
        "When we study these three examples we see that for 'abc' two characters come lexicographically after its neighbour to the left. ",
        "For 'hat' there is exactly one character that comes lexicographically after its neighbour to the left. For 'zyx' there are zero characters that come lexicographically after its neighbour to the left.",
        "In all there are 10400 strings of length 3 for which exactly one character comes lexicographically after its neighbour to the left.",
        "We now consider strings of n ≤ 26 different characters from the alphabet. ",
        "For every n, p(n) is the number of strings of length n for which exactly one character comes lexicographically after its neighbour to the left. ",
        "What is the maximum value of p(n)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler158() {\n  // Good luck!\n  return true;\n}\n\neuler158();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 158 Exploring strings for which only one character comes lexicographically after its neighbour to the left",
      "dashedName":
        "problem-158-exploring-strings-for-which-only-one-character-comes-lexicographically-after-its-neighbour-to-the-left"
    },
    {
      "id": "5900f40c1000cf542c50ff1e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler159()</code> should return 14489159.",
          "testString":
            "assert.strictEqual(euler159(), 14489159, '<code>euler159()</code> should return 14489159.');"
        }
      ],
      "description": [
        "A composite number can be factored many different ways.  ",
        "For instance, not including multiplication by one, 24 can be factored in 7 distinct ways:",
        "",
        "24 = 2x2x2x3",
        "24 = 2x3x4",
        "24 = 2x2x6",
        "24 = 4x6",
        "24 = 3x8",
        "24 = 2x12",
        "24 = 24",
        "",
        "Recall that the digital root of a number, in base 10, is found by adding together the digits of that number, ",
        "and repeating that process until a number is arrived at that is less than 10.  ",
        "Thus the digital root of 467 is 8.",
        "We shall call a Digital Root Sum (DRS) the sum of the digital roots of the individual factors of our number.",
        " The chart below demonstrates all of the DRS values for 24.",
        "FactorisationDigital Root Sum2x2x2x3",
        "92x3x4",
        "92x2x6",
        "104x6",
        "103x8",
        "112x12",
        "524",
        "6The maximum Digital Root Sum  of 24 is 11.",
        "The function mdrs(n) gives the maximum Digital Root Sum of n. So  mdrs(24)=11.",
        "Find ∑mdrs(n) for 1 < n < 1,000,000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler159() {\n  // Good luck!\n  return true;\n}\n\neuler159();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 159 Digital root sums of factorisations",
      "dashedName": "problem-159-digital-root-sums-of-factorisations"
    },
    {
      "id": "5900f40d1000cf542c50ff1f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler160()</code> should return 16576.",
          "testString":
            "assert.strictEqual(euler160(), 16576, '<code>euler160()</code> should return 16576.');"
        }
      ],
      "description": [
        "For any N, let f(N) be the last five digits before the trailing zeroes in N!.",
        "For example,",
        "9! = 362880 so f(9)=36288",
        "10! = 3628800 so f(10)=36288",
        "20! = 2432902008176640000 so f(20)=17664",
        "Find f(1,000,000,000,000)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler160() {\n  // Good luck!\n  return true;\n}\n\neuler160();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 160 Factorial trailing digits",
      "dashedName": "problem-160-factorial-trailing-digits"
    },
    {
      "id": "5900f40d1000cf542c50ff20",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler161()</code> should return 20574308184277972.",
          "testString":
            "assert.strictEqual(euler161(), 20574308184277972, '<code>euler161()</code> should return 20574308184277972.');"
        }
      ],
      "description": [
        "A triomino is a shape consisting of three squares joined via the edges.",
        "There are two basic forms:",
        "",
        "",
        "",
        "If all possible orientations are taken into account there are six:",
        "",
        "",
        "",
        "Any n by m grid for which nxm is divisible by 3 can be tiled with triominoes.",
        "If we consider tilings that can be obtained by reflection or rotation from another tiling as different there are 41 ways a 2 by 9 grid can be  tiled with triominoes:",
        "",
        "",
        "",
        "In how many ways can a 9 by 12 grid be tiled in this way by triominoes?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler161() {\n  // Good luck!\n  return true;\n}\n\neuler161();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 161 Triominoes",
      "dashedName": "problem-161-triominoes"
    },
    {
      "id": "5900f40e1000cf542c50ff21",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler162()</code> should return 3D58725572C62302.",
          "testString":
            "assert.strictEqual(euler162(), 3D58725572C62302, '<code>euler162()</code> should return 3D58725572C62302.');"
        }
      ],
      "description": [
        "In  the hexadecimal number system numbers are represented using 16 different digits:",
        "0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F",
        "The hexadecimal number AF when written in the decimal number system equals 10x16+15=175.",
        "In the 3-digit hexadecimal numbers 10A, 1A0, A10, and A01 the digits 0,1 and A are all present.",
        "Like numbers written in base ten we write hexadecimal numbers without leading zeroes.",
        "How many hexadecimal numbers containing at most sixteen hexadecimal digits exist with all of the digits 0,1, and A present at least once?",
        "Give your answer as a hexadecimal number.",
        "(A,B,C,D,E and F in upper case, without any leading or trailing code that marks the number as hexadecimal and without leading zeroes , e.g. 1A3F and not: 1a3f and not 0x1a3f and not $1A3F and not #1A3F and not 0000001A3F)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler162() {\n  // Good luck!\n  return true;\n}\n\neuler162();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 162 Hexadecimal numbers",
      "dashedName": "problem-162-hexadecimal-numbers"
    },
    {
      "id": "5900f40f1000cf542c50ff22",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler163()</code> should return 343047.",
          "testString":
            "assert.strictEqual(euler163(), 343047, '<code>euler163()</code> should return 343047.');"
        }
      ],
      "description": [
        "Consider an equilateral triangle in which straight lines are drawn from each vertex to the middle of the opposite side, such as in the size 1 triangle in the sketch below.",
        "",
        "Sixteen triangles of either different shape or size or orientation or location can now be observed in that triangle. Using size 1 triangles as building blocks, larger triangles can be formed, such as the size 2 triangle in the above sketch. One-hundred and four triangles of either different shape or size or orientation or location can now be observed in that size 2 triangle.",
        "It can be observed that the size 2 triangle contains 4 size 1 triangle building blocks. A size 3 triangle would contain 9 size 1 triangle building blocks and a size n triangle would thus contain n2 size 1 triangle building blocks.",
        "If we denote T(n) as the number of triangles present in a triangle of size n, then",
        "T(1) = 16",
        "T(2) = 104",
        "Find T(36)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler163() {\n  // Good luck!\n  return true;\n}\n\neuler163();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 163 Crosshatched triangles",
      "dashedName": "problem-163-crosshatched-triangles"
    },
    {
      "id": "5900f4111000cf542c50ff23",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler164()</code> should return 378158756814587.",
          "testString":
            "assert.strictEqual(euler164(), 378158756814587, '<code>euler164()</code> should return 378158756814587.');"
        }
      ],
      "description": [
        "How many 20 digit numbers n (without any leading zero) exist such that no three consecutive digits of n have a sum greater than 9?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler164() {\n  // Good luck!\n  return true;\n}\n\neuler164();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 164 Numbers for which no three consecutive digits have a sum greater than a given value",
      "dashedName":
        "problem-164-numbers-for-which-no-three-consecutive-digits-have-a-sum-greater-than-a-given-value"
    },
    {
      "id": "5900f4111000cf542c50ff24",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler165()</code> should return 2868868.",
          "testString":
            "assert.strictEqual(euler165(), 2868868, '<code>euler165()</code> should return 2868868.');"
        }
      ],
      "description": [
        "A segment is uniquely defined by its two endpoints. By considering two line segments in plane geometry there are three possibilities: ",
        "the segments have zero points, one point, or infinitely many points in common.",
        "Moreover when two segments have exactly one point in common it might be the case that that common point is an endpoint of either one of the segments or of both. If a common point of two segments is not an endpoint of either of the segments it is an interior point of both segments.",
        "We will call a common point T of two segments L1 and L2 a true intersection point of L1 and L2  if T is the only common point of L1 and L2  and T is an interior point of both segments.",
        "",
        "Consider the three segments L1, L2, and L3:",
        "L1: (27, 44) to (12, 32)",
        "L2: (46, 53) to (17, 62)",
        "L3: (46, 70) to (22, 40)",
        "It can be verified that line segments L2 and L3 have a true intersection point. We note that as the one of the end points of L3: (22,40) lies on L1 this is not considered to be a true point of intersection. L1 and L2 have no common point. So among the three line segments, we find one true intersection point.",
        "Now let us do the same for 5000 line segments. To this end, we generate 20000 numbers using the so-called \"Blum Blum Shub\" pseudo-random number generator.",
        "s0 = 290797",
        "sn+1 = sn×sn (modulo 50515093)",
        "tn = sn (modulo 500)",
        "To create each line segment, we use four consecutive numbers tn. That is, the first line segment is given by:",
        "(t1, t2) to (t3, t4)",
        "The first four numbers computed according to the above generator should be: 27, 144, 12 and 232. The first segment would thus be (27,144) to (12,232).",
        "How many distinct true intersection points are found among the 5000 line segments?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler165() {\n  // Good luck!\n  return true;\n}\n\neuler165();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 165 Intersections",
      "dashedName": "problem-165-intersections"
    },
    {
      "id": "5900f4131000cf542c50ff25",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler166()</code> should return 7130034.",
          "testString":
            "assert.strictEqual(euler166(), 7130034, '<code>euler166()</code> should return 7130034.');"
        }
      ],
      "description": [
        "A 4x4 grid is filled with digits d, 0 ≤ d ≤ 9.",
        "",
        "It can be seen that in the grid",
        "",
        "",
        "6 3 3 0",
        "5 0 4 3",
        "0 7 1 4",
        "1 2 4 5",
        "",
        "the sum of each row and each column has the value 12. Moreover the sum of each diagonal is also 12.",
        "",
        "In how many ways can you fill a 4x4 grid with the digits d, 0 ≤ d ≤ 9 so that each row, each column, and both diagonals have the same sum?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler166() {\n  // Good luck!\n  return true;\n}\n\neuler166();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 166 Criss Cross",
      "dashedName": "problem-166-criss-cross"
    },
    {
      "id": "5900f4141000cf542c50ff26",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler167()</code> should return 3916160068885.",
          "testString":
            "assert.strictEqual(euler167(), 3916160068885, '<code>euler167()</code> should return 3916160068885.');"
        }
      ],
      "description": [
        "For two positive integers a and b, the Ulam sequence U(a,b) is defined by U(a,b)1 = a, U(a,b)2 = b and for k > 2,",
        "U(a,b)k is the smallest integer greater than U(a,b)(k-1) which can be written in exactly one way as the sum of two distinct previous members of U(a,b).",
        "For example, the sequence U(1,2) begins with",
        "1, 2, 3 = 1 + 2, 4 = 1 + 3, 6 = 2 + 4, 8 = 2 + 6, 11 = 3 + 8;",
        "5 does not belong to it because 5 = 1 + 4 = 2 + 3 has two representations as the sum of two previous members, likewise 7 = 1 + 6 = 3 + 4.",
        "Find ∑U(2,2n+1)k for 2 ≤ n ≤10, where k = 1011."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler167() {\n  // Good luck!\n  return true;\n}\n\neuler167();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 167 Investigating Ulam sequences",
      "dashedName": "problem-167-investigating-ulam-sequences"
    },
    {
      "id": "5900f4151000cf542c50ff27",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler168()</code> should return 59206.",
          "testString":
            "assert.strictEqual(euler168(), 59206, '<code>euler168()</code> should return 59206.');"
        }
      ],
      "description": [
        "Consider the number 142857. We can right-rotate this number by moving the last digit (7) to the front of it, giving us 714285.",
        "It can be verified that 714285=5×142857.",
        "This demonstrates an unusual property of 142857: it is a divisor of its right-rotation.",
        "Find the last 5 digits of the sum of all integers n, 10 < n < 10100, that have this property."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler168() {\n  // Good luck!\n  return true;\n}\n\neuler168();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 168 Number Rotations",
      "dashedName": "problem-168-number-rotations"
    },
    {
      "id": "5900f4151000cf542c50ff28",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler169()</code> should return 178653872807.",
          "testString":
            "assert.strictEqual(euler169(), 178653872807, '<code>euler169()</code> should return 178653872807.');"
        }
      ],
      "description": [
        "Define f(0)=1 and f(n) to be the number of different ways n can be expressed as a sum of integer powers of 2 using each power no more than twice.",
        "For example, f(10)=5 since there are five different ways to express 10:",
        "1 + 1 + 8",
        "1 + 1 + 4 + 41 + 1 + 2 + 2 + 4",
        "2 + 4 + 4",
        "2 + 8",
        "What is f(1025)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler169() {\n  // Good luck!\n  return true;\n}\n\neuler169();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 169 Exploring the number of different ways a number can be expressed as a sum of powers of 2",
      "dashedName":
        "problem-169-exploring-the-number-of-different-ways-a-number-can-be-expressed-as-a-sum-of-powers-of-2"
    },
    {
      "id": "5900f4161000cf542c50ff29",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler170()</code> should return 9857164023.",
          "testString":
            "assert.strictEqual(euler170(), 9857164023, '<code>euler170()</code> should return 9857164023.');"
        }
      ],
      "description": [
        "Take the number 6 and multiply it by each of 1273 and 9854:",
        "",
        "6 × 1273 =  7638",
        "6 × 9854 = 59124",
        "",
        "By concatenating these products we get the 1 to 9 pandigital 763859124. We will call 763859124 the \"concatenated product of 6 and (1273,9854)\". Notice too, that the concatenation of the input numbers, 612739854, is also 1 to 9 pandigital.",
        "",
        "The same can be done for 0 to 9 pandigital numbers.",
        "",
        "What is the largest 0 to 9 pandigital 10-digit concatenated product of an integer with two or more other integers, such that the concatenation of the input numbers is also a 0 to 9 pandigital 10-digit number?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler170() {\n  // Good luck!\n  return true;\n}\n\neuler170();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 170 Find the largest 0 to 9 pandigital that can be formed by concatenating products",
      "dashedName":
        "problem-170-find-the-largest-0-to-9-pandigital-that-can-be-formed-by-concatenating-products"
    },
    {
      "id": "5900f4181000cf542c50ff2a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler171()</code> should return 142989277.",
          "testString":
            "assert.strictEqual(euler171(), 142989277, '<code>euler171()</code> should return 142989277.');"
        }
      ],
      "description": [
        "For a positive integer n, let f(n) be the sum of the squares of the digits (in base 10) of n, e.g.",
        "f(3) = 32 = 9,",
        "f(25) = 22 + 52 = 4 + 25 = 29,",
        "f(442) = 42 + 42 + 22 = 16 + 16 + 4 = 36",
        "Find the last nine digits of the sum of all n, 0 < n < 1020, such that f(n) is a perfect square."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler171() {\n  // Good luck!\n  return true;\n}\n\neuler171();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 171 Finding numbers for which the sum of the squares of the digits is a square",
      "dashedName":
        "problem-171-finding-numbers-for-which-the-sum-of-the-squares-of-the-digits-is-a-square"
    },
    {
      "id": "5900f4181000cf542c50ff2b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler172()</code> should return 227485267000992000.",
          "testString":
            "assert.strictEqual(euler172(), 227485267000992000, '<code>euler172()</code> should return 227485267000992000.');"
        }
      ],
      "description": [
        "How many 18-digit numbers n (without leading zeros) are there such that no digit occurs more than three times in n?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler172() {\n  // Good luck!\n  return true;\n}\n\neuler172();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 172 Investigating numbers with few repeated digits",
      "dashedName": "problem-172-investigating-numbers-with-few-repeated-digits"
    },
    {
      "id": "5900f41a1000cf542c50ff2c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler173()</code> should return 1572729.",
          "testString":
            "assert.strictEqual(euler173(), 1572729, '<code>euler173()</code> should return 1572729.');"
        }
      ],
      "description": [
        "We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry. For example, using exactly thirty-two square tiles we can form two different square laminae:",
        "",
        "",
        "With one-hundred tiles, and not necessarily using all of the tiles at one time, it is possible to form forty-one different square laminae.",
        "Using up to one million tiles how many different square laminae can be formed?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler173() {\n  // Good luck!\n  return true;\n}\n\neuler173();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 173 Using up to one million tiles how many different hollow square laminae can be formed",
      "dashedName":
        "problem-173-using-up-to-one-million-tiles-how-many-different-hollow-square-laminae-can-be-formed"
    },
    {
      "id": "5900f41a1000cf542c50ff2d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler174()</code> should return 209566.",
          "testString":
            "assert.strictEqual(euler174(), 209566, '<code>euler174()</code> should return 209566.');"
        }
      ],
      "description": [
        "We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry.",
        "Given eight tiles it is possible to form a lamina in only one way: 3x3 square with a 1x1 hole in the middle. However, using thirty-two tiles it is possible to form two distinct laminae.",
        "",
        "",
        "If t represents the number of tiles used, we shall say that t = 8 is type L(1) and t = 32 is type L(2).",
        "Let N(n) be the number of t ≤ 1000000 such that t is type L(n); for example, N(15) = 832.",
        "What is ∑ N(n) for 1 ≤ n ≤ 10?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler174() {\n  // Good luck!\n  return true;\n}\n\neuler174();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 174 Counting the number of hollow square laminae that can form one two three  distinct arrangements",
      "dashedName":
        "problem-174-counting-the-number-of-hollow-square-laminae-that-can-form-one-two-three--distinct-arrangements"
    },
    {
      "id": "5900f41c1000cf542c50ff2e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler175()</code> should return 1, 13717420, 8.",
          "testString":
            "assert.strictEqual(euler175(), 1, 13717420, 8, '<code>euler175()</code> should return 1, 13717420, 8.');"
        }
      ],
      "description": [
        "Define f(0)=1 and f(n) to be the number of ways to write n as a sum of powers of 2 where no power occurs more than twice. ",
        "",
        "For example, f(10)=5 since there are five different ways to express 10:10 = 8+2 = 8+1+1 = 4+4+2 = 4+2+2+1+1 = 4+4+1+1",
        "",
        "It can be shown that for every fraction p/q (p>0, q>0) there exists at least one integer n such that f(n)/f(n-1)=p/q.",
        "For instance, the smallest n for which f(n)/f(n-1)=13/17 is 241.",
        "The binary expansion of 241 is 11110001.",
        "Reading this binary number from the most significant bit to the least significant bit there are 4 one's, 3 zeroes and 1 one. We shall call the string 4,3,1 the Shortened Binary Expansion of 241.",
        "Find the Shortened Binary Expansion of the smallest n for which f(n)/f(n-1)=123456789/987654321.",
        "Give your answer as comma separated integers, without any whitespaces."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler175() {\n  // Good luck!\n  return true;\n}\n\neuler175();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 175 Fractions involving the number of different ways a number can be expressed as a sum of powers of 2",
      "dashedName":
        "problem-175-fractions-involving-the-number-of-different-ways-a-number-can-be-expressed-as-a-sum-of-powers-of-2"
    },
    {
      "id": "5900f41c1000cf542c50ff2f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler176()</code> should return 96818198400000.",
          "testString":
            "assert.strictEqual(euler176(), 96818198400000, '<code>euler176()</code> should return 96818198400000.');"
        }
      ],
      "description": [
        "The four right-angled triangles with sides (9,12,15), (12,16,20), (5,12,13) and (12,35,37) all have one of the shorter sides (catheti) equal to 12. It can be shown that no other integer sided right-angled triangle exists with one of the catheti equal to 12.",
        "Find the smallest integer that can be the length of a cathetus of exactly 47547 different integer sided right-angled triangles."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler176() {\n  // Good luck!\n  return true;\n}\n\neuler176();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 176 Rightangled triangles that share a cathetus",
      "dashedName": "problem-176-rightangled-triangles-that-share-a-cathetus"
    },
    {
      "id": "5900f41e1000cf542c50ff30",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler177()</code> should return 129325.",
          "testString":
            "assert.strictEqual(euler177(), 129325, '<code>euler177()</code> should return 129325.');"
        }
      ],
      "description": [
        "Let ABCD be a convex quadrilateral, with diagonals AC and BD. At each vertex the diagonal makes an angle with each of the two sides, creating eight corner angles.",
        "",
        "For example, at vertex A, the two angles are CAD, CAB.",
        "We call such a quadrilateral for which all eight corner angles have integer values when measured in degrees an \"integer angled quadrilateral\". An example of an integer angled quadrilateral is a square, where all eight corner angles are 45°. Another example is given by DAC = 20°, BAC = 60°, ABD = 50°, CBD = 30°, BCA = 40°, DCA = 30°, CDB = 80°, ADB = 50°.",
        "What is the total number of non-similar integer angled quadrilaterals?",
        "Note: In your calculations you may assume that a calculated angle is integral if it is within a tolerance of 10-9 of an integer value."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler177() {\n  // Good luck!\n  return true;\n}\n\neuler177();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 177 Integer angled Quadrilaterals",
      "dashedName": "problem-177-integer-angled-quadrilaterals"
    },
    {
      "id": "5900f41e1000cf542c50ff31",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler178()</code> should return 126461847755.",
          "testString":
            "assert.strictEqual(euler178(), 126461847755, '<code>euler178()</code> should return 126461847755.');"
        }
      ],
      "description": [
        "Consider the number 45656. ",
        "It can be seen that each pair of consecutive digits of 45656 has a difference of one.",
        "A number for which every pair of consecutive digits has a difference of one is called a step number.",
        "A pandigital number  contains every decimal digit from 0 to 9 at least once.",
        "",
        "How many pandigital step numbers less than 1040 are there?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler178() {\n  // Good luck!\n  return true;\n}\n\neuler178();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 178 Step Numbers",
      "dashedName": "problem-178-step-numbers"
    },
    {
      "id": "5900f41f1000cf542c50ff32",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler179()</code> should return 986262.",
          "testString":
            "assert.strictEqual(euler179(), 986262, '<code>euler179()</code> should return 986262.');"
        }
      ],
      "description": [
        "Find the number of integers 1 < n < 107, for which n and n + 1 have the same number of positive divisors. For example, 14 has the positive divisors 1, 2, 7, 14 while 15 has 1, 3, 5, 15."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler179() {\n  // Good luck!\n  return true;\n}\n\neuler179();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 179 Consecutive positive divisors",
      "dashedName": "problem-179-consecutive-positive-divisors"
    },
    {
      "id": "5900f4201000cf542c50ff33",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler180()</code> should return 285196020571078980.",
          "testString":
            "assert.strictEqual(euler180(), 285196020571078980, '<code>euler180()</code> should return 285196020571078980.');"
        }
      ],
      "description": [
        "For any integer n, consider the three functions",
        "f1,n(x,y,z) = xn+1 + yn+1 − zn+1f2,n(x,y,z) = (xy + yz + zx)*(xn-1 + yn-1 − zn-1)f3,n(x,y,z) = xyz*(xn-2 + yn-2 − zn-2)",
        "and their combination",
        "fn(x,y,z) = f1,n(x,y,z) + f2,n(x,y,z) − f3,n(x,y,z)",
        "We call (x,y,z) a golden triple of order k if x, y, and z are all rational numbers of the form a / b with",
        "0 < a < b ≤ k and there is (at least) one integer n, so that fn(x,y,z) = 0.",
        "Let s(x,y,z) = x + y + z.",
        "Let t = u / v be the sum of all distinct s(x,y,z) for all golden triples (x,y,z) of order 35. All the s(x,y,z) and t  must be in reduced form.",
        "Find u + v."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler180() {\n  // Good luck!\n  return true;\n}\n\neuler180();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 180 Rational zeros of a function of three variables",
      "dashedName":
        "problem-180-rational-zeros-of-a-function-of-three-variables"
    },
    {
      "id": "5900f4231000cf542c50ff34",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler181()</code> should return 83735848679360670.",
          "testString":
            "assert.strictEqual(euler181(), 83735848679360670, '<code>euler181()</code> should return 83735848679360670.');"
        }
      ],
      "description": [
        "Having three black objects B and one white object W they can be grouped in 7 ways like this:",
        "(BBBW)(B,BBW)(B,B,BW)(B,B,B,W)",
        "(B,BB,W)(BBB,W)(BB,BW)",
        "In how many ways can sixty black objects B and forty white objects W be  thus grouped?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler181() {\n  // Good luck!\n  return true;\n}\n\neuler181();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 181 Investigating in how many ways objects of two different colours can be grouped",
      "dashedName":
        "problem-181-investigating-in-how-many-ways-objects-of-two-different-colours-can-be-grouped"
    },
    {
      "id": "5900f4231000cf542c50ff35",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler182()</code> should return 399788195976.",
          "testString":
            "assert.strictEqual(euler182(), 399788195976, '<code>euler182()</code> should return 399788195976.');"
        }
      ],
      "description": [
        "The RSA encryption is based on the following procedure:",
        "Generate two distinct primes p and q.Compute n=pq and φ=(p-1)(q-1).",
        "Find an integer e, 1<e<φ, such that gcd(e,φ)=1.",
        "A message in this system is a number in the interval [0,n-1].",
        "A text to be encrypted is then somehow converted to messages (numbers in the interval [0,n-1]).",
        "To encrypt the text,  for each message, m, c=me mod n is calculated.",
        "To decrypt the text, the following procedure is needed: calculate d such that ed=1 mod φ, then for each encrypted message, c, calculate m=cd mod n.",
        "There exist values of e and m  such that me mod n=m.We call messages m for which me mod n=m unconcealed messages.",
        "An issue when choosing e is that there should not be too many unconcealed messages.  For instance, let p=19 and q=37.",
        "Then n=19*37=703 and φ=18*36=648.",
        "If we choose e=181, then, although gcd(181,648)=1 it turns out that all possible messagesm (0≤m≤n-1) are unconcealed when calculating me mod n.",
        "For any valid choice of e there exist some unconcealed messages.",
        "It's important that the number of unconcealed messages is at a minimum.",
        "Choose p=1009 and q=3643.",
        "Find the sum of all values of e, 1<e<φ(1009,3643) and gcd(e,φ)=1, so that the number of unconcealed messages for this value of e is at a minimum."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler182() {\n  // Good luck!\n  return true;\n}\n\neuler182();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 182 RSA encryption",
      "dashedName": "problem-182-rsa-encryption"
    },
    {
      "id": "5900f4231000cf542c50ff36",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler183()</code> should return 48861552.",
          "testString":
            "assert.strictEqual(euler183(), 48861552, '<code>euler183()</code> should return 48861552.');"
        }
      ],
      "description": [
        "Let N be a positive integer and let N be split into k equal parts, r = N/k, so that N = r + r + ... + r.",
        "Let P be the product of these parts, P = r × r × ... × r = rk.",
        "",
        "For example, if 11 is split into five equal parts, 11 = 2.2 + 2.2 + 2.2 + 2.2 + 2.2, then P = 2.25 = 51.53632.",
        "",
        "Let M(N) = Pmax for a given value of N.",
        "",
        "It turns out that the maximum for N = 11 is found by splitting eleven into four equal parts which leads to Pmax = (11/4)4; that is, M(11) = 14641/256 = 57.19140625, which is a terminating decimal.",
        "",
        "However, for N = 8 the maximum is achieved by splitting it into three equal parts, so M(8) = 512/27, which is a non-terminating decimal.",
        "",
        "Let D(N) = N if M(N) is a non-terminating decimal and D(N) = -N if M(N) is a terminating decimal.",
        "",
        "For example, ΣD(N) for 5 ≤ N ≤ 100 is 2438.",
        "",
        "Find ΣD(N) for 5 ≤ N ≤ 10000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler183() {\n  // Good luck!\n  return true;\n}\n\neuler183();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 183 Maximum product of parts",
      "dashedName": "problem-183-maximum-product-of-parts"
    },
    {
      "id": "5900f4241000cf542c50ff37",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler184()</code> should return 1725323624056.",
          "testString":
            "assert.strictEqual(euler184(), 1725323624056, '<code>euler184()</code> should return 1725323624056.');"
        }
      ],
      "description": [
        "Consider the set Ir of points (x,y) with integer co-ordinates in the interior of the circle with radius r, centered at the origin, i.e. x2 + y2 < r2.",
        "For a radius of 2, I2 contains the nine points (0,0), (1,0), (1,1), (0,1), (-1,1), (-1,0), (-1,-1), (0,-1) and (1,-1). There are eight triangles having all three vertices in I2 which contain the origin in the interior. Two of them are shown below, the others are obtained from these by rotation.",
        "",
        "",
        "For a radius of 3, there are 360 triangles containing the origin in the interior and having all vertices in I3 and for I5 the number is 10600.",
        "",
        "How many triangles are there containing the origin in the interior and having all three vertices in I105?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler184() {\n  // Good luck!\n  return true;\n}\n\neuler184();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 184 Triangles containing the origin",
      "dashedName": "problem-184-triangles-containing-the-origin"
    },
    {
      "id": "5900f4251000cf542c50ff38",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler185()</code> should return 4640261571849533.",
          "testString":
            "assert.strictEqual(euler185(), 4640261571849533, '<code>euler185()</code> should return 4640261571849533.');"
        }
      ],
      "description": [
        "The game Number Mind is a variant of the well known game Master Mind.",
        "Instead of coloured pegs, you have to guess a secret sequence of digits. After each guess you're only told in how many places you've guessed the correct digit. So, if the sequence was 1234 and you guessed 2036, you'd be told that you have one correct digit; however, you would NOT be told that you also have another digit in the wrong place.",
        "",
        "For instance, given the following guesses for a 5-digit secret sequence,",
        "90342 ;2 correct",
        "70794 ;0 correct",
        "39458 ;2 correct",
        "34109 ;1 correct",
        "51545 ;2 correct",
        "12531 ;1 correct",
        "The correct sequence 39542 is unique.",
        "",
        "Based on the following guesses,",
        "",
        "5616185650518293 ;2 correct",
        "3847439647293047 ;1 correct",
        "5855462940810587 ;3 correct",
        "9742855507068353 ;3 correct",
        "4296849643607543 ;3 correct",
        "3174248439465858 ;1 correct",
        "4513559094146117 ;2 correct",
        "7890971548908067 ;3 correct",
        "8157356344118483 ;1 correct",
        "2615250744386899 ;2 correct",
        "8690095851526254 ;3 correct",
        "6375711915077050 ;1 correct",
        "6913859173121360 ;1 correct",
        "6442889055042768 ;2 correct",
        "2321386104303845 ;0 correct",
        "2326509471271448 ;2 correct",
        "5251583379644322 ;2 correct",
        "1748270476758276 ;3 correct",
        "4895722652190306 ;1 correct",
        "3041631117224635 ;3 correct",
        "1841236454324589 ;3 correct",
        "2659862637316867 ;2 correct",
        "",
        "Find the unique 16-digit secret sequence."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler185() {\n  // Good luck!\n  return true;\n}\n\neuler185();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 185 Number Mind",
      "dashedName": "problem-185-number-mind"
    },
    {
      "id": "5900f4281000cf542c50ff39",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler186()</code> should return 2325629.",
          "testString":
            "assert.strictEqual(euler186(), 2325629, '<code>euler186()</code> should return 2325629.');"
        }
      ],
      "description": [
        "Here are the records from a busy telephone system with one million users:",
        "",
        "RecNrCallerCalled120000710005326001835004393600863701497.........",
        "The telephone number of the caller and the called number in record n are Caller(n) = S2n-1 and Called(n) = S2n where S1,2,3,... come from the \"Lagged Fibonacci Generator\":",
        "",
        "For 1 ≤ k ≤ 55, Sk = [100003 - 200003k + 300007k3] (modulo 1000000)",
        "For 56 ≤ k, Sk = [Sk-24 + Sk-55] (modulo 1000000)",
        "",
        "If Caller(n) = Called(n) then the user is assumed to have misdialled and the call fails; otherwise the call is successful.",
        "",
        "From the start of the records, we say that any pair of users X and Y are friends if X calls Y or vice-versa. Similarly, X is a friend of a friend of Z if X is a friend of Y and Y is a friend of Z; and so on for longer chains.",
        "",
        "The Prime Minister's phone number is 524287. After how many successful calls, not counting misdials, will 99% of the users (including the PM) be a friend, or a friend of a friend etc., of the Prime Minister?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler186() {\n  // Good luck!\n  return true;\n}\n\neuler186();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 186 Connectedness of a network",
      "dashedName": "problem-186-connectedness-of-a-network"
    },
    {
      "id": "5900f4291000cf542c50ff3a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler187()</code> should return 17427258.",
          "testString":
            "assert.strictEqual(euler187(), 17427258, '<code>euler187()</code> should return 17427258.');"
        }
      ],
      "description": [
        "A composite is a number containing at least two prime factors. For example, 15 = 3 × 5; 9 = 3 × 3; 12 = 2 × 2 × 3.",
        "",
        "There are ten composites below thirty containing precisely two, not necessarily distinct, prime factors:",
        "4, 6, 9, 10, 14, 15, 21, 22, 25, 26.",
        "",
        "How many composite integers, n < 108, have precisely two, not necessarily distinct, prime factors?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler187() {\n  // Good luck!\n  return true;\n}\n\neuler187();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 187 Semiprimes",
      "dashedName": "problem-187-semiprimes"
    },
    {
      "id": "5900f4291000cf542c50ff3b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler188()</code> should return 95962097.",
          "testString":
            "assert.strictEqual(euler188(), 95962097, '<code>euler188()</code> should return 95962097.');"
        }
      ],
      "description": [
        "The hyperexponentiation or tetration of a number a by a positive integer b, denoted by a↑↑b or ba, is recursively defined by:",
        "a↑↑1 = a,",
        "a↑↑(k+1) = a(a↑↑k).",
        "",
        "Thus we have e.g. 3↑↑2 = 33 = 27, hence 3↑↑3 = 327 = 7625597484987 and 3↑↑4 is roughly 103.6383346400240996*10^12.",
        "Find the last 8 digits of 1777↑↑1855."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler188() {\n  // Good luck!\n  return true;\n}\n\neuler188();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 188 The hyperexponentiation of a number",
      "dashedName": "problem-188-the-hyperexponentiation-of-a-number"
    },
    {
      "id": "5900f4291000cf542c50ff3c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler189()</code> should return 10834893628237824.",
          "testString":
            "assert.strictEqual(euler189(), 10834893628237824, '<code>euler189()</code> should return 10834893628237824.');"
        }
      ],
      "description": [
        "Consider the following configuration of 64 triangles:",
        "",
        "",
        "",
        "We wish to colour the interior of each triangle with one of three colours: red, green or blue, so that no two neighbouring triangles have the same colour. Such a colouring shall be called valid. Here, two triangles are said to be neighbouring if they share an edge.",
        "Note: if they only share a vertex, then they are not neighbours. ",
        "",
        "For example, here is a valid colouring of the above grid:",
        "",
        "",
        "A colouring C' which is obtained from a colouring C by rotation or reflection is considered distinct from C unless the two are identical.",
        "",
        "How many distinct valid colourings are there for the above configuration?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler189() {\n  // Good luck!\n  return true;\n}\n\neuler189();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 189 Tricolouring a triangular grid",
      "dashedName": "problem-189-tricolouring-a-triangular-grid"
    },
    {
      "id": "5900f42b1000cf542c50ff3d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler190()</code> should return 371048281.",
          "testString":
            "assert.strictEqual(euler190(), 371048281, '<code>euler190()</code> should return 371048281.');"
        }
      ],
      "description": [
        "Let Sm = (x1, x2, ... , xm) be the m-tuple of positive real numbers with x1 + x2 + ... + xm = m for which Pm = x1 * x22 * ... * xmm is maximised.",
        "",
        "For example, it can be verified that [P10] = 4112 ([ ] is the integer part function).",
        "",
        "Find Σ[Pm] for 2 ≤ m ≤ 15."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler190() {\n  // Good luck!\n  return true;\n}\n\neuler190();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 190 Maximising a weighted product",
      "dashedName": "problem-190-maximising-a-weighted-product"
    },
    {
      "id": "5900f42b1000cf542c50ff3e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler191()</code> should return 1918080160.",
          "testString":
            "assert.strictEqual(euler191(), 1918080160, '<code>euler191()</code> should return 1918080160.');"
        }
      ],
      "description": [
        "A particular school offers cash rewards to children with good attendance and punctuality. If they are absent for three consecutive days or late on more than one occasion then they forfeit their prize.",
        "",
        "During an n-day period a trinary string is formed for each child consisting of L's (late), O's (on time), and A's (absent).",
        "",
        "Although there are eighty-one trinary strings for a 4-day period that can be formed, exactly forty-three strings would lead to a prize:",
        "",
        "OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA",
        "OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO",
        "AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL",
        "AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA",
        "LAOO LAOA LAAO",
        "",
        "How many \"prize\" strings exist over a 30-day period?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler191() {\n  // Good luck!\n  return true;\n}\n\neuler191();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 191 Prize Strings",
      "dashedName": "problem-191-prize-strings"
    },
    {
      "id": "5900f42c1000cf542c50ff3f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler192()</code> should return 57060635927998344.",
          "testString":
            "assert.strictEqual(euler192(), 57060635927998344, '<code>euler192()</code> should return 57060635927998344.');"
        }
      ],
      "description": [
        "Let x be a real number.",
        "A best approximation to x for the denominator bound d is a rational number r/s in reduced form, with s ≤ d, such that any rational number which is closer to x than r/s has a denominator larger than d:",
        "",
        "|p/q-x| < |r/s-x| ⇒ q > d",
        "",
        "For example, the best approximation to √13 for the denominator bound 20 is 18/5 and the best approximation to √13 for the denominator bound 30 is 101/28.",
        "",
        "Find the sum of all denominators of the best approximations to √n for the denominator bound 1012, where n is not a perfect square and 1 < n ≤ 100000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler192() {\n  // Good luck!\n  return true;\n}\n\neuler192();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 192 Best Approximations",
      "dashedName": "problem-192-best-approximations"
    },
    {
      "id": "5900f42f1000cf542c50ff41",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler193()</code> should return 684465067343069.",
          "testString":
            "assert.strictEqual(euler193(), 684465067343069, '<code>euler193()</code> should return 684465067343069.');"
        }
      ],
      "description": [
        "A positive integer n is called squarefree, if no square of a prime divides n, thus 1, 2, 3, 5, 6, 7, 10, 11 are squarefree, but not 4, 8, 9, 12.",
        "",
        "How many squarefree numbers are there below 250?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler193() {\n  // Good luck!\n  return true;\n}\n\neuler193();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 193 Squarefree Numbers",
      "dashedName": "problem-193-squarefree-numbers"
    },
    {
      "id": "5900f42f1000cf542c50ff40",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler194()</code> should return 61190912.",
          "testString":
            "assert.strictEqual(euler194(), 61190912, '<code>euler194()</code> should return 61190912.');"
        }
      ],
      "description": [
        "Consider graphs built with the units A: ",
        "and B: , where the units are glued along",
        "the vertical edges as in the graph .",
        "",
        "A configuration of type (a,b,c) is a graph thus built of a units A and b units B, where the graph's vertices are coloured using up to c colours, so that no two adjacent vertices have the same colour.",
        "The compound graph above is an example of a configuration of type (2,2,6), in fact of type (2,2,c) for all c ≥ 4.",
        "",
        "Let N(a,b,c) be the number of configurations of type (a,b,c).",
        "For example, N(1,0,3) = 24, N(0,2,4) = 92928 and N(2,2,3) = 20736.",
        "",
        "Find the last 8 digits of N(25,75,1984)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler194() {\n  // Good luck!\n  return true;\n}\n\neuler194();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 194 Coloured Configurations",
      "dashedName": "problem-194-coloured-configurations"
    },
    {
      "id": "5900f4311000cf542c50ff43",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler195()</code> should return 75085391.",
          "testString":
            "assert.strictEqual(euler195(), 75085391, '<code>euler195()</code> should return 75085391.');"
        }
      ],
      "description": [
        "Let's call an integer sided triangle with exactly one angle of 60 degrees a 60-degree triangle.",
        "Let r be the radius of the inscribed circle of such a 60-degree triangle.",
        "There are 1234 60-degree triangles for which r ≤ 100.",
        "Let T(n) be the number of 60-degree triangles for which r ≤ n, so",
        " T(100) = 1234,  T(1000) = 22767, and  T(10000) = 359912.",
        "",
        "Find T(1053779)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler195() {\n  // Good luck!\n  return true;\n}\n\neuler195();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 195 Inscribed circles of triangles with one angle of 60 degrees",
      "dashedName":
        "problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees"
    },
    {
      "id": "5900f4301000cf542c50ff42",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler196()</code> should return 322303240771079940.",
          "testString":
            "assert.strictEqual(euler196(), 322303240771079940, '<code>euler196()</code> should return 322303240771079940.');"
        }
      ],
      "description": [
        "Build a triangle from all positive integers in the following way:",
        "",
        " 1",
        " 2  3",
        " 4  5  6",
        " 7  8  9 1011 12 13 14 15",
        "16 17 18 19 20 21",
        "22 23 24 25 26 27 2829 30 31 32 33 34 35 3637 38 39 40 41 42 43 44 45",
        "46 47 48 49 50 51 52 53 54 55",
        "56 57 58 59 60 61 62 63 64 65 66",
        ". . .",
        "",
        "Each positive integer has up to eight neighbours in the triangle.",
        "",
        "A set of three primes is called a prime triplet if one of the three primes has the other two as neighbours in the triangle.",
        "",
        "For example, in the second row, the prime numbers 2 and 3 are elements of some prime triplet.",
        "",
        "If row 8 is considered, it contains two primes which are elements of some prime triplet, i.e. 29 and 31.",
        "If row 9 is considered, it contains only one prime which is an element of some prime triplet: 37.",
        "",
        "Define S(n) as the sum of the primes in row n which are elements of any prime triplet.",
        "Then S(8)=60 and S(9)=37.",
        "",
        "You are given that S(10000)=950007619.",
        "",
        "Find  S(5678027) + S(7208785)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler196() {\n  // Good luck!\n  return true;\n}\n\neuler196();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 196 Prime triplets",
      "dashedName": "problem-196-prime-triplets"
    },
    {
      "id": "5900f4311000cf542c50ff44",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler197()</code> should return 1.710637717.",
          "testString":
            "assert.strictEqual(euler197(), 1.710637717, '<code>euler197()</code> should return 1.710637717.');"
        }
      ],
      "description": [
        "Given is the function f(x) = ⌊230.403243784-x2⌋ × 10-9 ( ⌊ ⌋ is the floor-function),",
        "the sequence un is defined by u0 = -1 and un+1 = f(un).",
        "",
        "Find un + un+1 for n = 1012.",
        "Give your answer with 9 digits after the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler197() {\n  // Good luck!\n  return true;\n}\n\neuler197();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 197 Investigating the behaviour of a recursively defined sequence",
      "dashedName":
        "problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence"
    },
    {
      "id": "5900f4331000cf542c50ff45",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler198()</code> should return 52374425.",
          "testString":
            "assert.strictEqual(euler198(), 52374425, '<code>euler198()</code> should return 52374425.');"
        }
      ],
      "description": [
        "A best approximation to a real number x for the denominator bound d is a rational number r/s (in reduced form) with s ≤ d, so that any rational number p/q which is closer to x than r/s has q > d.",
        "",
        "Usually the best approximation to a real number is uniquely determined for all denominator bounds. However, there are some exceptions, e.g. 9/40 has the two best approximations 1/4 and 1/5 for the denominator bound 6.",
        "We shall call a real number x ambiguous, if there is at least one denominator bound for which x possesses two best approximations. Clearly, an ambiguous number is necessarily rational.",
        "",
        "How many ambiguous numbers x = p/q,",
        "0 < x < 1/100, are there whose denominator q does not exceed 108?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler198() {\n  // Good luck!\n  return true;\n}\n\neuler198();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 198 Ambiguous Numbers",
      "dashedName": "problem-198-ambiguous-numbers"
    },
    {
      "id": "5900f4341000cf542c50ff46",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler199()</code> should return 0.00396087.",
          "testString":
            "assert.strictEqual(euler199(), 0.00396087, '<code>euler199()</code> should return 0.00396087.');"
        }
      ],
      "description": [
        "Three circles of equal radius are placed inside a larger circle such that each pair of circles is tangent to one another and the inner circles do not overlap. There are four uncovered \"gaps\" which are to be filled iteratively with more tangent circles.",
        "",
        "",
        "",
        "At each iteration, a maximally sized circle is placed in each gap, which creates more gaps for the next iteration. After 3 iterations (pictured), there are 108 gaps and the fraction of the area which is not covered by circles is 0.06790342, rounded to eight decimal places.",
        "",
        "",
        "What fraction of the area is not covered by circles after 10 iterations?",
        "Give your answer rounded to eight decimal places using the format x.xxxxxxxx ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler199() {\n  // Good luck!\n  return true;\n}\n\neuler199();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 199 Iterative Circle Packing",
      "dashedName": "problem-199-iterative-circle-packing"
    },
    {
      "id": "5900f4351000cf542c50ff47",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler200()</code> should return 229161792008.",
          "testString":
            "assert.strictEqual(euler200(), 229161792008, '<code>euler200()</code> should return 229161792008.');"
        }
      ],
      "description": [
        "We shall define a sqube to be a number of the form, p2q3, where p and q are distinct primes.",
        "For example, 200 = 5223 or 120072949 = 232613.",
        "",
        "The first five squbes are 72, 108, 200, 392, and 500.",
        "",
        "Interestingly, 200 is also the first number for which you cannot change any single digit to make a prime; we shall call such numbers, prime-proof. The next prime-proof sqube which contains the contiguous sub-string \"200\" is 1992008.",
        "",
        "Find the 200th prime-proof sqube containing the contiguous sub-string \"200\"."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler200() {\n  // Good luck!\n  return true;\n}\n\neuler200();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 200 Find the 200th primeproof sqube containing the contiguous substring 200",
      "dashedName":
        "problem-200-find-the-200th-primeproof-sqube-containing-the-contiguous-substring-200"
    },
    {
      "id": "5900f4361000cf542c50ff48",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler201()</code> should return 115039000.",
          "testString":
            "assert.strictEqual(euler201(), 115039000, '<code>euler201()</code> should return 115039000.');"
        }
      ],
      "description": [
        "For any set A of numbers, let sum(A) be the sum of the elements of A.",
        "Consider the set B = {1,3,6,8,10,11}. There are 20 subsets of B containing three elements, and their sums are:",
        "",
        "",
        "sum({1,3,6}) = 10,",
        "sum({1,3,8}) = 12,",
        "sum({1,3,10}) = 14,",
        "sum({1,3,11}) = 15,",
        "sum({1,6,8}) = 15,",
        "sum({1,6,10}) = 17,",
        "sum({1,6,11}) = 18,",
        "sum({1,8,10}) = 19,",
        "sum({1,8,11}) = 20,",
        "sum({1,10,11}) = 22,",
        "sum({3,6,8}) = 17,",
        "sum({3,6,10}) = 19,",
        "sum({3,6,11}) = 20,",
        "sum({3,8,10}) = 21,",
        "sum({3,8,11}) = 22,",
        "sum({3,10,11}) = 24,",
        "sum({6,8,10}) = 24,",
        "sum({6,8,11}) = 25,",
        "sum({6,10,11}) = 27,",
        "sum({8,10,11}) = 29.",
        "",
        "Some of these sums occur more than once, others are unique.",
        "For a set A, let U(A,k) be the set of unique sums of k-element subsets of A, in our example we find U(B,3) = {10,12,14,18,21,25,27,29} and sum(U(B,3)) = 156.",
        "",
        "Now consider the 100-element set S = {12, 22, ... , 1002}.",
        "S has 100891344545564193334812497256 50-element subsets.",
        "",
        "Determine the sum of all integers which are the sum of exactly one of the 50-element subsets of S, i.e. find sum(U(S,50))."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler201() {\n  // Good luck!\n  return true;\n}\n\neuler201();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 201 Subsets with a unique sum",
      "dashedName": "problem-201-subsets-with-a-unique-sum"
    },
    {
      "id": "5900f4371000cf542c50ff49",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler202()</code> should return 1209002624.",
          "testString":
            "assert.strictEqual(euler202(), 1209002624, '<code>euler202()</code> should return 1209002624.');"
        }
      ],
      "description": [
        "Three mirrors are arranged in the shape of an equilateral triangle, with their reflective surfaces pointing inwards. There is an infinitesimal gap at each vertex of the triangle through which a laser beam may pass.",
        "",
        "Label the vertices A, B and C. There are 2 ways in which a laser beam may enter vertex C, bounce off 11 surfaces, then exit through the same vertex: one way is shown below; the other is the reverse of that.",
        "",
        "",
        "",
        "",
        "There are 80840 ways in which a laser beam may enter vertex C, bounce off 1000001 surfaces, then exit through the same vertex.",
        "",
        "In how many ways can a laser beam enter at vertex C, bounce off 12017639147 surfaces, then exit through the same vertex?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler202() {\n  // Good luck!\n  return true;\n}\n\neuler202();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 202 Laserbeam",
      "dashedName": "problem-202-laserbeam"
    },
    {
      "id": "5900f4381000cf542c50ff4a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler203()</code> should return 34029210557338.",
          "testString":
            "assert.strictEqual(euler203(), 34029210557338, '<code>euler203()</code> should return 34029210557338.');"
        }
      ],
      "description": [
        "The binomial coefficients nCk can be arranged in triangular form, Pascal's triangle, like this:",
        "",
        "",
        "111121133114641151010511615201561172135352171",
        ".........",
        "",
        "",
        "It can be seen that the first eight rows of Pascal's triangle contain twelve distinct numbers: 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 21 and 35.",
        "",
        "A positive integer n is called squarefree if no square of a prime divides n.",
        "Of the twelve distinct numbers in the first eight rows of Pascal's triangle, all except 4 and 20 are squarefree.",
        "The sum of the distinct squarefree numbers in the first eight rows is 105.",
        "",
        "Find the sum of the distinct squarefree numbers in the first 51 rows of Pascal's triangle."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler203() {\n  // Good luck!\n  return true;\n}\n\neuler203();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 203 Squarefree Binomial Coefficients",
      "dashedName": "problem-203-squarefree-binomial-coefficients"
    },
    {
      "id": "5900f4381000cf542c50ff4b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler204()</code> should return 2944730.",
          "testString":
            "assert.strictEqual(euler204(), 2944730, '<code>euler204()</code> should return 2944730.');"
        }
      ],
      "description": [
        "A Hamming number is a positive number which has no prime factor larger than 5.",
        "So the first few Hamming numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15.",
        "There are 1105 Hamming numbers not exceeding 108.",
        "",
        "We will call a positive number a generalised Hamming number of type n, if it has no prime factor larger than n.",
        "Hence the Hamming numbers are the generalised Hamming numbers of type 5.",
        "",
        "How many generalised Hamming numbers of type 100 are there which don't exceed 109?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler204() {\n  // Good luck!\n  return true;\n}\n\neuler204();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 204 Generalised Hamming Numbers",
      "dashedName": "problem-204-generalised-hamming-numbers"
    },
    {
      "id": "5900f4391000cf542c50ff4c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler205()</code> should return 0.5731441.",
          "testString":
            "assert.strictEqual(euler205(), 0.5731441, '<code>euler205()</code> should return 0.5731441.');"
        }
      ],
      "description": [
        "Peter has nine four-sided (pyramidal) dice, each with faces numbered 1, 2, 3, 4.",
        "Colin has six six-sided (cubic) dice, each with faces numbered 1, 2, 3, 4, 5, 6.",
        "",
        "Peter and Colin roll their dice and compare totals: the highest total wins. The result is a draw if the totals are equal.",
        "",
        "What is the probability that Pyramidal Pete beats Cubic Colin? Give your answer rounded to seven decimal places in the form 0.abcdefg"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler205() {\n  // Good luck!\n  return true;\n}\n\neuler205();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 205 Dice Game",
      "dashedName": "problem-205-dice-game"
    },
    {
      "id": "5900f43a1000cf542c50ff4d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler206()</code> should return 1389019170.",
          "testString":
            "assert.strictEqual(euler206(), 1389019170, '<code>euler206()</code> should return 1389019170.');"
        }
      ],
      "description": [
        "Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0, where each “_” is a single digit."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler206() {\n  // Good luck!\n  return true;\n}\n\neuler206();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 206 Concealed Square",
      "dashedName": "problem-206-concealed-square"
    },
    {
      "id": "5900f43c1000cf542c50ff4e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler207()</code> should return 44043947822.",
          "testString":
            "assert.strictEqual(euler207(), 44043947822, '<code>euler207()</code> should return 44043947822.');"
        }
      ],
      "description": [
        "For some positive integers k, there exists an integer partition of the form   4t = 2t + k,",
        "where 4t, 2t, and k are all positive integers and t is a real number.",
        "",
        "The first two such partitions are 41 = 21 + 2 and 41.5849625... = 21.5849625... + 6.",
        "",
        "Partitions where t is also an integer are called perfect. ",
        "For any m ≥ 1 let P(m) be the proportion of such partitions that are perfect with k ≤ m.",
        "Thus P(6) = 1/2.",
        "",
        "In the following table are listed some values of P(m)",
        "   P(5) = 1/1",
        "   P(10) = 1/2",
        "   P(15) = 2/3",
        "   P(20) = 1/2",
        "   P(25) = 1/2",
        "   P(30) = 2/5",
        "   ...",
        "   P(180) = 1/4",
        "   P(185) = 3/13",
        "",
        "",
        "Find the smallest m for which P(m) < 1/12345"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler207() {\n  // Good luck!\n  return true;\n}\n\neuler207();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 207 Integer partition equations",
      "dashedName": "problem-207-integer-partition-equations"
    },
    {
      "id": "5900f43f1000cf542c50ff51",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler208()</code> should return 331951449665644800.",
          "testString":
            "assert.strictEqual(euler208(), 331951449665644800, '<code>euler208()</code> should return 331951449665644800.');"
        }
      ],
      "description": [
        "A robot moves in a series of one-fifth circular arcs (72°), with a free choice of a clockwise or an anticlockwise arc for each step, but no turning on the spot.",
        "",
        "One of 70932 possible closed paths of 25 arcs starting northward is",
        "",
        "",
        "",
        "Given that the robot starts facing North, how many journeys of 70 arcs in length can it take that return it, after the final arc, to its starting position?",
        "(Any arc may be traversed multiple times.)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler208() {\n  // Good luck!\n  return true;\n}\n\neuler208();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 208 Robot Walks",
      "dashedName": "problem-208-robot-walks"
    },
    {
      "id": "5900f43e1000cf542c50ff4f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler209()</code> should return 15964587728784.",
          "testString":
            "assert.strictEqual(euler209(), 15964587728784, '<code>euler209()</code> should return 15964587728784.');"
        }
      ],
      "description": [
        "A k-input binary truth table is a map from k input bits",
        "(binary digits, 0 [false] or 1 [true]) to 1 output bit. For example, the 2-input binary truth tables for the logical AND and XOR functions are:",
        "",
        "x",
        "y",
        "x AND y000010100111x",
        "y",
        "x XOR y000011101110How many 6-input binary truth tables, τ, satisfy the formula",
        "",
        "τ(a, b, c, d, e, f) AND τ(b, c, d, e, f, a XOR (b AND c)) = 0",
        "for all 6-bit inputs (a, b, c, d, e, f)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler209() {\n  // Good luck!\n  return true;\n}\n\neuler209();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 209 Circular Logic",
      "dashedName": "problem-209-circular-logic"
    },
    {
      "id": "5900f43e1000cf542c50ff50",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler210()</code> should return 1598174770174689500.",
          "testString":
            "assert.strictEqual(euler210(), 1598174770174689500, '<code>euler210()</code> should return 1598174770174689500.');"
        }
      ],
      "description": [
        "Consider the set S(r) of points (x,y) with integer coordinates satisfying |x| + |y| ≤ r. ",
        "Let O be the point (0,0) and C the point (r/4,r/4). ",
        "Let N(r) be the number of points B in S(r), so that the triangle OBC has an obtuse angle, i.e. the largest angle α satisfies 90°<α<180°.",
        "So, for example, N(4)=24 and N(8)=100.",
        "",
        "What is N(1,000,000,000)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler210() {\n  // Good luck!\n  return true;\n}\n\neuler210();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 210 Obtuse Angled Triangles",
      "dashedName": "problem-210-obtuse-angled-triangles"
    },
    {
      "id": "5900f43f1000cf542c50ff52",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler211()</code> should return 1922364685.",
          "testString":
            "assert.strictEqual(euler211(), 1922364685, '<code>euler211()</code> should return 1922364685.');"
        }
      ],
      "description": [
        "For a positive integer n, let σ2(n) be the sum of the squares of its divisors. For example,",
        "σ2(10) = 1 + 4 + 25 + 100 = 130.",
        "Find the sum of all n, 0 < n < 64,000,000 such that σ2(n) is a perfect square."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler211() {\n  // Good luck!\n  return true;\n}\n\neuler211();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 211 Divisor Square Sum",
      "dashedName": "problem-211-divisor-square-sum"
    },
    {
      "id": "5900f4411000cf542c50ff53",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler212()</code> should return 328968937309.",
          "testString":
            "assert.strictEqual(euler212(), 328968937309, '<code>euler212()</code> should return 328968937309.');"
        }
      ],
      "description": [
        "An axis-aligned cuboid, specified by parameters { (x0,y0,z0), (dx,dy,dz) }, consists of all points (X,Y,Z) such that x0 ≤ X ≤ x0+dx, y0 ≤ Y ≤ y0+dy and z0 ≤ Z ≤ z0+dz.  The volume of the cuboid is the product, dx × dy × dz.  The combined volume of a collection of cuboids is the volume of their union and will be less than the sum of the individual volumes if any cuboids overlap.",
        "",
        "Let C1,...,C50000 be a collection of 50000 axis-aligned cuboids such that Cn has parameters",
        "",
        "x0 = S6n-5 modulo 10000y0 = S6n-4 modulo 10000z0 = S6n-3 modulo 10000dx = 1 + (S6n-2 modulo 399)dy = 1 + (S6n-1 modulo 399)dz = 1 + (S6n modulo 399)",
        "",
        "where S1,...,S300000 come from the \"Lagged Fibonacci Generator\":",
        "",
        "For 1 ≤ k ≤ 55, Sk = [100003 - 200003k + 300007k3]   (modulo 1000000)For 56 ≤ k, Sk = [Sk-24 + Sk-55]   (modulo 1000000)",
        "",
        "Thus, C1 has parameters {(7,53,183),(94,369,56)}, C2 has parameters {(2383,3563,5079),(42,212,344)}, and so on.",
        "",
        "The combined volume of the first 100 cuboids, C1,...,C100, is 723581599.",
        "",
        "What is the combined volume of all 50000 cuboids, C1,...,C50000 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler212() {\n  // Good luck!\n  return true;\n}\n\neuler212();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 212 Combined Volume of Cuboids",
      "dashedName": "problem-212-combined-volume-of-cuboids"
    },
    {
      "id": "5900f4411000cf542c50ff54",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler213()</code> should return 330.721154.",
          "testString":
            "assert.strictEqual(euler213(), 330.721154, '<code>euler213()</code> should return 330.721154.');"
        }
      ],
      "description": [
        "A 30×30 grid of squares contains 900 fleas, initially one flea per square.",
        "When a bell is rung, each flea jumps to an adjacent square at random (usually 4 possibilities, except for fleas on the edge of the grid or at the corners).",
        "",
        "What is the expected number of unoccupied squares after 50 rings of the bell? Give your answer rounded to six decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler213() {\n  // Good luck!\n  return true;\n}\n\neuler213();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 213 Flea Circus",
      "dashedName": "problem-213-flea-circus"
    },
    {
      "id": "5900f4421000cf542c50ff55",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler214()</code> should return 1677366278943.",
          "testString":
            "assert.strictEqual(euler214(), 1677366278943, '<code>euler214()</code> should return 1677366278943.');"
        }
      ],
      "description": [
        "Let φ be Euler's totient function, i.e. for a natural number n,",
        "φ(n) is the number of k, 1 ≤ k ≤ n, for which gcd(k,n) = 1.",
        "",
        "By iterating φ, each positive integer generates a decreasing chain of numbers ending in 1.",
        "E.g. if we start with 5 the sequence 5,4,2,1 is generated.",
        "Here is a listing of all chains with length 4:",
        "",
        "",
        "5,4,2,1",
        "7,6,2,1",
        "8,4,2,1",
        "9,6,2,1",
        "10,4,2,1",
        "12,4,2,1",
        "14,6,2,1",
        "18,6,2,1",
        "",
        "Only two of these chains start with a prime, their sum is 12.",
        "",
        "What is the sum of all primes less than 40000000 which generate a chain of length 25?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler214() {\n  // Good luck!\n  return true;\n}\n\neuler214();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 214 Totient Chains",
      "dashedName": "problem-214-totient-chains"
    },
    {
      "id": "5900f4431000cf542c50ff56",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler215()</code> should return 806844323190414.",
          "testString":
            "assert.strictEqual(euler215(), 806844323190414, '<code>euler215()</code> should return 806844323190414.');"
        }
      ],
      "description": [
        "Consider the problem of building a wall out of 2×1 and 3×1 bricks (horizontal×vertical dimensions) such that, for extra strength, the gaps between horizontally-adjacent bricks never line up in consecutive layers, i.e. never form a \"running crack\".",
        "",
        "For example, the following 9×3 wall is not acceptable due to the running crack shown in red:",
        "",
        "",
        "",
        "",
        "There are eight ways of forming a crack-free 9×3 wall, written W(9,3) = 8.",
        "",
        "Calculate W(32,10)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler215() {\n  // Good luck!\n  return true;\n}\n\neuler215();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 215 Crackfree Walls",
      "dashedName": "problem-215-crackfree-walls"
    },
    {
      "id": "5900f4451000cf542c50ff57",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler216()</code> should return 5437849.",
          "testString":
            "assert.strictEqual(euler216(), 5437849, '<code>euler216()</code> should return 5437849.');"
        }
      ],
      "description": [
        "Consider numbers t(n) of the form t(n) = 2n2-1 with n > 1.",
        "The first such numbers are 7, 17, 31, 49, 71, 97, 127 and 161.",
        "It turns out that only 49 = 7*7 and 161 = 7*23 are not prime.",
        "For n ≤ 10000 there are 2202 numbers t(n)  that are prime.",
        "",
        "How many numbers t(n) are prime for n ≤ 50,000,000 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler216() {\n  // Good luck!\n  return true;\n}\n\neuler216();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 216 Investigating the primality of numbers of the form 2n21",
      "dashedName":
        "problem-216-investigating-the-primality-of-numbers-of-the-form-2n21"
    },
    {
      "id": "5900f4461000cf542c50ff58",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler217()</code> should return 6273134.",
          "testString":
            "assert.strictEqual(euler217(), 6273134, '<code>euler217()</code> should return 6273134.');"
        }
      ],
      "description": [
        "A positive integer with k (decimal) digits is called balanced if its first ⌈k/2⌉ digits sum to the same value as its last ⌈k/2⌉ digits, where ⌈x⌉, pronounced ceiling of x, is the smallest integer ≥ x, thus ⌈π⌉ = 4 and ⌈5⌉ = 5.",
        "So, for example, all palindromes are balanced, as is 13722.",
        "Let T(n) be the sum of all balanced numbers less than 10n. ",
        "Thus: T(1) = 45, T(2) = 540 and T(5) = 334795890. ",
        "Find T(47) mod 315"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler217() {\n  // Good luck!\n  return true;\n}\n\neuler217();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 217 Balanced Numbers",
      "dashedName": "problem-217-balanced-numbers"
    },
    {
      "id": "5900f4461000cf542c50ff59",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler218()</code> should return 0.",
          "testString":
            "assert.strictEqual(euler218(), 0, '<code>euler218()</code> should return 0.');"
        }
      ],
      "description": [
        "Consider the right angled triangle with sides a=7, b=24 and c=25.",
        "The area of this triangle is 84, which is divisible by the perfect numbers 6 and 28.",
        "Moreover it is a primitive right angled triangle as gcd(a,b)=1 and gcd(b,c)=1.",
        "Also c is a perfect square.",
        "",
        "We will call a right angled triangle perfect if",
        "-it is a primitive right angled triangle",
        "-its hypotenuse is a perfect square",
        "",
        "We will call a right angled triangle super-perfect if",
        "-it is a perfect right angled triangle and",
        "-its area is a multiple of the perfect numbers 6 and 28.",
        "",
        "",
        "How many perfect right-angled triangles with c≤1016 exist that are not super-perfect?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler218() {\n  // Good luck!\n  return true;\n}\n\neuler218();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 218 Perfect rightangled triangles",
      "dashedName": "problem-218-perfect-rightangled-triangles"
    },
    {
      "id": "5900f4481000cf542c50ff5a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler219()</code> should return 64564225042.",
          "testString":
            "assert.strictEqual(euler219(), 64564225042, '<code>euler219()</code> should return 64564225042.');"
        }
      ],
      "description": [
        "Let A and B be bit strings (sequences of 0's and 1's).",
        "If A is equal to the leftmost length(A) bits of B, then A is said to be a prefix of B.",
        "For example, 00110 is a prefix of 001101001, but not of 00111 or 100110.",
        "",
        "A prefix-free code of size n is a collection of n distinct bit strings such that no string is a prefix of any other.  For example, this is a prefix-free code of size 6:",
        "",
        "0000, 0001, 001, 01, 10, 11",
        "",
        "Now suppose that it costs one penny to transmit a '0' bit, but four pence to transmit a '1'.",
        "Then the total cost of the prefix-free code shown above is 35 pence, which happens to be the cheapest possible for the skewed pricing scheme in question.",
        "In short, we write Cost(6) = 35.",
        "",
        "What is Cost(109) ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler219() {\n  // Good luck!\n  return true;\n}\n\neuler219();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 219 Skewcost coding",
      "dashedName": "problem-219-skewcost-coding"
    },
    {
      "id": "5900f4481000cf542c50ff5b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler220()</code> should return 139776, 963904.",
          "testString":
            "assert.strictEqual(euler220(), 139776, 963904, '<code>euler220()</code> should return 139776, 963904.');"
        }
      ],
      "description": [
        "Let D0 be the two-letter string \"Fa\".  For n≥1, derive Dn from Dn-1 by the string-rewriting rules:",
        "",
        "\"a\" → \"aRbFR\"",
        "\"b\" → \"LFaLb\"",
        "",
        "Thus, D0 = \"Fa\", D1 = \"FaRbFR\", D2 = \"FaRbFRRLFaLbFR\", and so on.",
        "",
        "These strings can be interpreted as instructions to a computer graphics program, with \"F\" meaning \"draw forward one unit\", \"L\" meaning \"turn left 90 degrees\", \"R\" meaning \"turn right 90 degrees\", and \"a\" and \"b\" being ignored.  The initial position of the computer cursor is (0,0), pointing up towards (0,1).",
        "",
        "Then Dn is an exotic drawing known as the Heighway Dragon of order n.  For example, D10 is shown below; counting each \"F\" as one step, the highlighted spot at (18,16) is the position reached after 500 steps.",
        "",
        "",
        "",
        "",
        "What is the position of the cursor after 1012 steps in D50 ?",
        "Give your answer in the form x,y with no spaces."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler220() {\n  // Good luck!\n  return true;\n}\n\neuler220();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 220 Heighway Dragon",
      "dashedName": "problem-220-heighway-dragon"
    },
    {
      "id": "5900f4491000cf542c50ff5c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler221()</code> should return 1884161251122450.",
          "testString":
            "assert.strictEqual(euler221(), 1884161251122450, '<code>euler221()</code> should return 1884161251122450.');"
        }
      ],
      "description": [
        "We shall call a positive integer A an \"Alexandrian integer\", if there exist integers p, q, r such that:",
        "",
        "",
        "      A = p · q · r    and  ",
        "",
        "",
        "      1A",
        "   =",
        "",
        "      1p",
        "   +",
        "",
        "      1q",
        "   +",
        "",
        "      1r",
        "For example, 630 is an Alexandrian integer (p = 5, q = −7, r = −18).",
        "In fact, 630 is the 6th Alexandrian integer,  the first 6 Alexandrian integers being: 6, 42, 120, 156, 420 and 630.",
        "",
        "Find the 150000th Alexandrian integer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler221() {\n  // Good luck!\n  return true;\n}\n\neuler221();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 221 Alexandrian Integers",
      "dashedName": "problem-221-alexandrian-integers"
    },
    {
      "id": "5900f44b1000cf542c50ff5d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler222()</code> should return 1590933.",
          "testString":
            "assert.strictEqual(euler222(), 1590933, '<code>euler222()</code> should return 1590933.');"
        }
      ],
      "description": [
        "What is the length of the shortest pipe, of internal radius 50mm, that can fully contain 21 balls of radii 30mm, 31mm, ..., 50mm?",
        "",
        "Give your answer in micrometres (10-6 m) rounded to the nearest integer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler222() {\n  // Good luck!\n  return true;\n}\n\neuler222();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 222 Sphere Packing",
      "dashedName": "problem-222-sphere-packing"
    },
    {
      "id": "5900f44b1000cf542c50ff5e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler223()</code> should return 61614848.",
          "testString":
            "assert.strictEqual(euler223(), 61614848, '<code>euler223()</code> should return 61614848.');"
        }
      ],
      "description": [
        "Let us call an integer sided triangle with sides a ≤ b ≤ c barely acute if the sides satisfy a2 + b2 = c2 + 1.",
        "",
        "How many barely acute triangles are there with perimeter ≤ 25,000,000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler223() {\n  // Good luck!\n  return true;\n}\n\neuler223();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 223 Almost rightangled triangles I",
      "dashedName": "problem-223-almost-rightangled-triangles-i"
    },
    {
      "id": "5900f44e1000cf542c50ff5f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler224()</code> should return 4137330.",
          "testString":
            "assert.strictEqual(euler224(), 4137330, '<code>euler224()</code> should return 4137330.');"
        }
      ],
      "description": [
        "Let us call an integer sided triangle with sides a ≤ b ≤ c barely obtuse if the sides satisfy a2 + b2 = c2 - 1.",
        "",
        "How many barely obtuse triangles are there with perimeter ≤ 75,000,000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler224() {\n  // Good luck!\n  return true;\n}\n\neuler224();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 224 Almost rightangled triangles II",
      "dashedName": "problem-224-almost-rightangled-triangles-ii"
    },
    {
      "id": "5900f44e1000cf542c50ff60",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler225()</code> should return 2009.",
          "testString":
            "assert.strictEqual(euler225(), 2009, '<code>euler225()</code> should return 2009.');"
        }
      ],
      "description": [
        "The sequence 1, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 653, 1201 ...",
        "is defined by T1 = T2 = T3 = 1 and Tn = Tn-1 + Tn-2 + Tn-3.",
        "",
        "",
        "It can be shown that 27 does not divide any terms of this sequence.In fact, 27 is the first odd number with this property.",
        "",
        "Find the 124th odd number that does not divide any terms of the above sequence."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler225() {\n  // Good luck!\n  return true;\n}\n\neuler225();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 225 Tribonacci nondivisors",
      "dashedName": "problem-225-tribonacci-nondivisors"
    },
    {
      "id": "5900f4511000cf542c50ff62",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler226()</code> should return 0.11316017.",
          "testString":
            "assert.strictEqual(euler226(), 0.11316017, '<code>euler226()</code> should return 0.11316017.');"
        }
      ],
      "description": [
        "The blancmange curve is the set of points (x,y) such that 0 ≤ x ≤ 1 and  ,where s(x) = the distance from x to the nearest integer.",
        "",
        "The area under the blancmange curve is equal to ½, shown in pink in the diagram below.",
        "",
        "",
        "",
        "",
        "Let C be the circle with centre (¼,½) and radius ¼, shown in black in the diagram.",
        "",
        "What area under the blancmange curve is enclosed by C?Give your answer rounded to eight decimal places in the form 0.abcdefgh"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler226() {\n  // Good luck!\n  return true;\n}\n\neuler226();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 226 A Scoop of Blancmange",
      "dashedName": "problem-226-a-scoop-of-blancmange"
    },
    {
      "id": "5900f44f1000cf542c50ff61",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler227()</code> should return 3780.618622.",
          "testString":
            "assert.strictEqual(euler227(), 3780.618622, '<code>euler227()</code> should return 3780.618622.');"
        }
      ],
      "description": [
        "\"The Chase\" is a game played with two dice and an even number of players.",
        "",
        "The players sit around a table; the game begins with two opposite players having one die each. On each turn, the two players with a die roll it.",
        "If a player rolls a 1, he passes the die to his neighbour on the left; if he rolls a 6, he passes the die to his neighbour on the right; otherwise, he keeps the die for the next turn.",
        "The game ends when one player has both dice after they have been rolled and passed; that player has then lost.",
        "",
        "In a game with 100 players, what is the expected number of turns the game lasts?",
        "Give your answer rounded to ten significant digits."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler227() {\n  // Good luck!\n  return true;\n}\n\neuler227();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 227 The Chase",
      "dashedName": "problem-227-the-chase"
    },
    {
      "id": "5900f4511000cf542c50ff63",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler228()</code> should return 86226.",
          "testString":
            "assert.strictEqual(euler228(), 86226, '<code>euler228()</code> should return 86226.');"
        }
      ],
      "description": [
        "Let Sn be the regular n-sided polygon – or shape – whose vertices ",
        "",
        "vk (k = 1,2,…,n) have coordinates:",
        "",
        "    xk   =  ",
        "        cos( 2k-1/n ×180° )",
        "",
        "    yk   =  ",
        "        sin( 2k-1/n ×180° )",
        "  Each Sn is to be interpreted as a filled shape consisting of all points on the perimeter and in the interior.",
        "",
        "The Minkowski sum, S+T, of two shapes S and T is the result of ",
        "",
        "adding every point in S to every point in T, where point addition is performed coordinate-wise: ",
        "",
        "(u, v) + (x, y) = (u+x, v+y).",
        "",
        "For example, the sum of S3 and S4 is the six-sided shape shown in pink below:",
        "",
        "",
        "",
        "",
        "How many sides does S1864 + S1865 + … + S1909 have?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler228() {\n  // Good luck!\n  return true;\n}\n\neuler228();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 228 Minkowski Sums",
      "dashedName": "problem-228-minkowski-sums"
    },
    {
      "id": "5900f4521000cf542c50ff64",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler229()</code> should return 11325263.",
          "testString":
            "assert.strictEqual(euler229(), 11325263, '<code>euler229()</code> should return 11325263.');"
        }
      ],
      "description": [
        "Consider the number 3600. It is very special, because",
        "",
        "3600 = 482 +     362",
        "3600 = 202 + 2×402",
        "3600 = 302 + 3×302",
        "3600 = 452 + 7×152",
        "",
        "Similarly, we find that 88201 = 992 + 2802 = 2872 + 2×542 = 2832 + 3×522 = 1972 + 7×842.",
        "",
        "In 1747, Euler proved which numbers are representable as a sum of two squares.",
        "We are interested in the numbers n which admit representations of all of the following four types:",
        "",
        "n = a12 +   b12n = a22 + 2 b22n = a32 + 3 b32n = a72 + 7 b72,",
        "",
        "where the ak and bk are positive integers.",
        "",
        "There are 75373 such numbers that do not exceed 107.",
        "",
        "How many such numbers are there that do not exceed 2×109?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler229() {\n  // Good luck!\n  return true;\n}\n\neuler229();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 229 Four Representations using Squares",
      "dashedName": "problem-229-four-representations-using-squares"
    },
    {
      "id": "5900f4531000cf542c50ff65",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler230()</code> should return 850481152593119200.",
          "testString":
            "assert.strictEqual(euler230(), 850481152593119200, '<code>euler230()</code> should return 850481152593119200.');"
        }
      ],
      "description": [
        "For any two strings of digits, A and B, we define FA,B to be the sequence (A,B,AB,BAB,ABBAB,...) in which each term is the concatenation of the previous two.",
        "",
        "Further, we define DA,B(n) to be the nth digit in the first term of FA,B that contains at least n digits.",
        "",
        "Example:",
        "",
        "Let A=1415926535, B=8979323846. We wish to find DA,B(35), say.",
        "",
        "The first few terms of FA,B are:",
        "1415926535",
        "8979323846",
        "14159265358979323846",
        "897932384614159265358979323846",
        "14159265358979323846897932384614159265358979323846",
        "",
        "Then DA,B(35) is the 35th digit in the fifth term, which is 9.",
        "",
        "Now we use for A the first 100 digits of π behind the decimal point:",
        "14159265358979323846264338327950288419716939937510 ",
        "58209749445923078164062862089986280348253421170679 ",
        "",
        "and for B the next hundred digits:",
        "",
        "82148086513282306647093844609550582231725359408128 ",
        "48111745028410270193852110555964462294895493038196 .",
        "",
        "Find ∑n = 0,1,...,17   10n× DA,B((127+19n)×7n) ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler230() {\n  // Good luck!\n  return true;\n}\n\neuler230();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 230 Fibonacci Words",
      "dashedName": "problem-230-fibonacci-words"
    },
    {
      "id": "5900f4531000cf542c50ff66",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler231()</code> should return 7526965179680.",
          "testString":
            "assert.strictEqual(euler231(), 7526965179680, '<code>euler231()</code> should return 7526965179680.');"
        }
      ],
      "description": [
        "The binomial coefficient 10C3 = 120.",
        "120 = 23 × 3 × 5 = 2 × 2 × 2 × 3 × 5, and 2 + 2 + 2 + 3 + 5 = 14.",
        "So the sum of the terms in the prime factorisation of 10C3 is 14.",
        "",
        "Find the sum of the terms in the prime factorisation of 20000000C15000000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler231() {\n  // Good luck!\n  return true;\n}\n\neuler231();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 231 The prime factorisation of binomial coefficients",
      "dashedName":
        "problem-231-the-prime-factorisation-of-binomial-coefficients"
    },
    {
      "id": "5900f4551000cf542c50ff67",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler232()</code> should return 0.83648556.",
          "testString":
            "assert.strictEqual(euler232(), 0.83648556, '<code>euler232()</code> should return 0.83648556.');"
        }
      ],
      "description": [
        "Two players share an unbiased coin and take it in turns to play \"The Race\". On Player 1's turn, he tosses the coin once: if it comes up Heads, he scores one point; if it comes up Tails, he scores nothing. On Player 2's turn, she chooses a positive integer T and tosses the coin T times: if it comes up all Heads, she scores 2T-1 points; otherwise, she scores nothing. Player 1 goes first. The winner is the first to 100 or more points.",
        "",
        "On each turn Player 2 selects the number, T, of coin tosses that maximises the probability of her winning.",
        "",
        "What is the probability that Player 2 wins?",
        "",
        "Give your answer rounded to eight decimal places in the form 0.abcdefgh ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler232() {\n  // Good luck!\n  return true;\n}\n\neuler232();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 232 The Race",
      "dashedName": "problem-232-the-race"
    },
    {
      "id": "5900f4551000cf542c50ff68",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler233()</code> should return 271204031455541300.",
          "testString":
            "assert.strictEqual(euler233(), 271204031455541300, '<code>euler233()</code> should return 271204031455541300.');"
        }
      ],
      "description": [
        "Let f(N) be the number of points with integer coordinates that are on a circle passing through (0,0), (N,0),(0,N), and (N,N).",
        "It can be shown that f(10000) = 36.",
        "",
        "What is the sum of all positive integers N ≤ 1011 such that f(N) = 420 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler233() {\n  // Good luck!\n  return true;\n}\n\neuler233();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 233 Lattice points on a circle",
      "dashedName": "problem-233-lattice-points-on-a-circle"
    },
    {
      "id": "5900f4571000cf542c50ff69",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler234()</code> should return 1259187438574927000.",
          "testString":
            "assert.strictEqual(euler234(), 1259187438574927000, '<code>euler234()</code> should return 1259187438574927000.');"
        }
      ],
      "description": [
        "For an integer n ≥ 4, we define the lower prime square root of n, denoted by lps(n), as the largest prime ≤ √n and the upper prime square root of n, ups(n), as the smallest prime ≥ √n.",
        "So, for example, lps(4) = 2 = ups(4), lps(1000) = 31, ups(1000) = 37.",
        "Let us call an integer n ≥ 4 semidivisible, if one of lps(n) and ups(n) divides n, but not both.",
        "",
        "The sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8, 10 and 12. 15 is not semidivisible because it is a multiple of both lps(15) = 3 and ups(15) = 5.",
        "As a further example, the sum of the 92 semidivisible numbers up to 1000 is 34825.",
        "",
        "What is the sum of all semidivisible numbers not exceeding 999966663333 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler234() {\n  // Good luck!\n  return true;\n}\n\neuler234();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 234 Semidivisible numbers",
      "dashedName": "problem-234-semidivisible-numbers"
    },
    {
      "id": "5900f4571000cf542c50ff6a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler235()</code> should return 1.002322108633.",
          "testString":
            "assert.strictEqual(euler235(), 1.002322108633, '<code>euler235()</code> should return 1.002322108633.');"
        }
      ],
      "description": [
        "Given is the arithmetic-geometric sequence u(k) = (900-3k)rk-1.",
        "Let s(n) = Σk=1...nu(k).",
        "",
        "",
        "Find the value of r for which s(5000) = -600,000,000,000.",
        "",
        "",
        "Give your answer rounded to 12 places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler235() {\n  // Good luck!\n  return true;\n}\n\neuler235();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 235 An Arithmetic Geometric sequence",
      "dashedName": "problem-235-an-arithmetic-geometric-sequence"
    },
    {
      "id": "5900f4591000cf542c50ff6b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler236()</code> should return 123 / 59.",
          "testString":
            "assert.strictEqual(euler236(), 123 / 59, '<code>euler236()</code> should return 123 / 59.');"
        }
      ],
      "description": [
        "Suppliers 'A' and 'B' provided the following numbers of products for the luxury hamper market:",
        "",
        "Product'A''B'Beluga Caviar5248640Christmas Cake13121888Gammon Joint26243776Vintage Port57603776Champagne Truffles39365664",
        "",
        "Although the suppliers try very hard to ship their goods in perfect condition, there is inevitably some spoilage - i.e. products gone bad.",
        "",
        "The suppliers compare their performance using two types of statistic:The five per-product spoilage rates for each supplier are equal to the number of products gone bad divided by the number of products supplied, for each of the five products in turn.",
        "  The overall spoilage rate for each supplier is equal to the total number of products gone bad divided by the total number of products provided by that supplier.To their surprise, the suppliers found that each of the five per-product spoilage rates was worse (higher) for 'B' than for 'A' by the same factor (ratio of spoilage rates), m>1; and yet, paradoxically, the overall spoilage rate was worse for 'A' than for 'B', also by a factor of m.",
        "",
        "There are thirty-five m>1 for which this surprising result could have occurred, the smallest of which is 1476/1475.",
        "",
        "What's the largest possible value of m?",
        "Give your answer as a fraction reduced to its lowest terms, in the form u/v."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler236() {\n  // Good luck!\n  return true;\n}\n\neuler236();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 236 Luxury Hampers",
      "dashedName": "problem-236-luxury-hampers"
    },
    {
      "id": "5900f4591000cf542c50ff6c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler237()</code> should return 15836928.",
          "testString":
            "assert.strictEqual(euler237(), 15836928, '<code>euler237()</code> should return 15836928.');"
        }
      ],
      "description": [
        "Let T(n) be the number of tours over a 4 × n playing board such that:",
        "The tour starts in the top left corner.",
        "The tour consists of moves that are up, down, left, or right one square.",
        "The tour visits each square exactly once.",
        "The tour ends in the bottom left corner.",
        "The diagram shows one tour over a 4 × 10 board:",
        "",
        "",
        "",
        "",
        "T(10) is 2329. What is T(1012) modulo 108?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler237() {\n  // Good luck!\n  return true;\n}\n\neuler237();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 237 Tours on a 4 x n playing board",
      "dashedName": "problem-237-tours-on-a-4-x-n-playing-board"
    },
    {
      "id": "5900f45b1000cf542c50ff6d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler238()</code> should return 9922545104535660.",
          "testString":
            "assert.strictEqual(euler238(), 9922545104535660, '<code>euler238()</code> should return 9922545104535660.');"
        }
      ],
      "description": [
        "Create a sequence of numbers using the \"Blum Blum Shub\" pseudo-random number generator:",
        "",
        "s0",
        "    =",
        "    14025256",
        "  sn+1",
        "    =",
        "    sn2 mod 20300713",
        "",
        "",
        "Concatenate these numbers  s0s1s2… to create a string w of infinite length.",
        "Then, w = 14025256741014958470038053646…",
        "",
        "For a positive integer k, if no substring of w exists with a sum of digits equal to k, p(k) is defined to be zero. If at least one substring of w exists with a sum of digits equal to k, we define p(k) = z, where z is the starting position of the earliest such substring.",
        "",
        "For instance:",
        "",
        "The substrings 1, 14, 1402, … ",
        "with respective sums of digits equal to 1, 5, 7, …",
        "start at position 1, hence p(1) = p(5) = p(7) = … = 1.",
        "",
        "The substrings 4, 402, 4025, …",
        "with respective sums of digits equal to 4, 6, 11, …",
        "start at position 2, hence p(4) = p(6) = p(11) = … = 2.",
        "",
        "The substrings 02, 0252, …",
        "with respective sums of digits equal to 2, 9, …",
        "start at position 3, hence p(2) = p(9) = … = 3.",
        "",
        "Note that substring 025 starting at position 3, has a sum of digits equal to 7, but there was an earlier substring (starting at position 1) with a sum of digits equal to 7, so p(7) = 1, not 3.",
        "",
        "We can verify that, for 0 < k ≤ 103, ∑ p(k) = 4742.",
        "",
        "Find ∑ p(k), for 0 < k ≤ 2·1015."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler238() {\n  // Good luck!\n  return true;\n}\n\neuler238();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 238 Infinite string tour",
      "dashedName": "problem-238-infinite-string-tour"
    },
    {
      "id": "5900f45c1000cf542c50ff6e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler239()</code> should return 0.001887854841.",
          "testString":
            "assert.strictEqual(euler239(), 0.001887854841, '<code>euler239()</code> should return 0.001887854841.');"
        }
      ],
      "description": [
        "A set of disks numbered 1 through 100 are placed in a line in random order.",
        "",
        "What is the probability that we have a partial derangement such that exactly 22 prime number discs are found away from their natural positions?",
        "(Any number of non-prime disks may also be found in or out of their natural positions.)",
        "",
        "Give your answer rounded to 12 places behind the decimal point in the form 0.abcdefghijkl."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler239() {\n  // Good luck!\n  return true;\n}\n\neuler239();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 239 Twentytwo Foolish Primes",
      "dashedName": "problem-239-twentytwo-foolish-primes"
    },
    {
      "id": "5900f45d1000cf542c50ff6f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler240()</code> should return 7448717393364182000.",
          "testString":
            "assert.strictEqual(euler240(), 7448717393364182000, '<code>euler240()</code> should return 7448717393364182000.');"
        }
      ],
      "description": [
        "There are 1111 ways in which five 6-sided dice (sides numbered 1 to 6) can be rolled so that the top three sum to 15. Some examples are:",
        "",
        "",
        "D1,D2,D3,D4,D5 = 4,3,6,3,5",
        "",
        "D1,D2,D3,D4,D5 = 4,3,3,5,6",
        "",
        "D1,D2,D3,D4,D5 = 3,3,3,6,6",
        "",
        "D1,D2,D3,D4,D5 = 6,6,3,3,3",
        "",
        "In how many ways can twenty 12-sided dice (sides numbered 1 to 12) be rolled so that the top ten sum to 70?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler240() {\n  // Good luck!\n  return true;\n}\n\neuler240();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 240 Top Dice",
      "dashedName": "problem-240-top-dice"
    },
    {
      "id": "5900f45d1000cf542c50ff70",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler241()</code> should return 482316491800641150.",
          "testString":
            "assert.strictEqual(euler241(), 482316491800641150, '<code>euler241()</code> should return 482316491800641150.');"
        }
      ],
      "description": [
        "For a positive integer n, let σ(n) be the sum of all divisors of n, so e.g. σ(6) = 1 + 2 + 3 + 6 = 12.",
        "",
        "",
        "A perfect number, as you probably know, is a number with σ(n) = 2n.",
        "",
        "Let us define the perfection quotient of a positive integer asp(n)= ",
        "σ(n)n",
        ".",
        "Find the sum of all positive integers n ≤ 1018 for which p(n) has the form k + 1⁄2, where k is an integer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler241() {\n  // Good luck!\n  return true;\n}\n\neuler241();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 241 Perfection Quotients",
      "dashedName": "problem-241-perfection-quotients"
    },
    {
      "id": "5900f45f1000cf542c50ff71",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler242()</code> should return 997104142249036700.",
          "testString":
            "assert.strictEqual(euler242(), 997104142249036700, '<code>euler242()</code> should return 997104142249036700.');"
        }
      ],
      "description": [
        "Given the set {1,2,...,n}, we define f(n,k) as the number of its k-element subsets with an odd sum of elements. For example, f(5,3) = 4, since the set {1,2,3,4,5} has four 3-element subsets having an odd sum of elements, i.e.: {1,2,4}, {1,3,5}, {2,3,4} and {2,4,5}.",
        "",
        "When all three values n, k and f(n,k) are odd, we say that they make ",
        "an odd-triplet [n,k,f(n,k)].",
        "",
        "There are exactly five odd-triplets with n ≤ 10, namely:",
        "[1,1,f(1,1) = 1], [5,1,f(5,1) = 3], [5,5,f(5,5) = 1], [9,1,f(9,1) = 5] and [9,9,f(9,9) = 1].",
        "",
        "How many odd-triplets are there with n ≤ 1012 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler242() {\n  // Good luck!\n  return true;\n}\n\neuler242();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 242 Odd Triplets",
      "dashedName": "problem-242-odd-triplets"
    },
    {
      "id": "5900f4601000cf542c50ff73",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler243()</code> should return 892371480.",
          "testString":
            "assert.strictEqual(euler243(), 892371480, '<code>euler243()</code> should return 892371480.');"
        }
      ],
      "description": [
        "A positive fraction whose numerator is less than its denominator is called a proper fraction.",
        "For any denominator, d, there will be d−1 proper fractions; for example, with d = 12:1/12 , 2/12 , 3/12 , 4/12 , 5/12 , 6/12 , 7/12 , 8/12 , 9/12 , 10/12 , 11/12 .",
        "",
        "",
        "We shall call a fraction that cannot be cancelled down a resilient fraction.",
        "Furthermore we shall define the resilience of a denominator, R(d), to be the ratio of its proper fractions that are resilient; for example, R(12) = 4/11 .",
        "In fact, d = 12 is the smallest denominator having a resilience R(d) < 4/10 .",
        "",
        "Find the smallest denominator d, having a resilience R(d) < 15499/94744 ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler243() {\n  // Good luck!\n  return true;\n}\n\neuler243();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 243 Resilience",
      "dashedName": "problem-243-resilience"
    },
    {
      "id": "5900f4601000cf542c50ff72",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler244()</code> should return 96356848.",
          "testString":
            "assert.strictEqual(euler244(), 96356848, '<code>euler244()</code> should return 96356848.');"
        }
      ],
      "description": [
        "You probably know the game Fifteen Puzzle. Here, instead of numbered tiles, we have seven red tiles and eight blue tiles.",
        "A move is denoted by the uppercase initial of the direction (Left, Right, Up, Down) in which the tile is slid, e.g. starting from configuration (S), by the sequence LULUR we reach the configuration (E):",
        "",
        "(S), (E)",
        "",
        "",
        "For each path, its checksum is calculated by (pseudocode):",
        "",
        "checksum = 0",
        "checksum = (checksum × 243 + m1) mod 100 000 007",
        "checksum = (checksum × 243 + m2) mod 100 000 007",
        "   …",
        "checksum = (checksum × 243 + mn) mod 100 000 007",
        "where mk is the ASCII value of the kth letter in the move sequence and the ASCII values for the moves are:",
        "",
        "",
        "L76R82U85D68",
        "",
        "For the sequence LULUR given above, the checksum would be 19761398.",
        "Now, starting from configuration (S),",
        "find all shortest ways to reach configuration (T).",
        "",
        "(S), (T)",
        "",
        "",
        "What is the sum of all checksums for the paths having the minimal length?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler244() {\n  // Good luck!\n  return true;\n}\n\neuler244();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 244 Sliders",
      "dashedName": "problem-244-sliders"
    },
    {
      "id": "5900f4621000cf542c50ff74",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler245()</code> should return 288084712410001.",
          "testString":
            "assert.strictEqual(euler245(), 288084712410001, '<code>euler245()</code> should return 288084712410001.');"
        }
      ],
      "description": [
        "We shall call a fraction that cannot be cancelled down a resilient fraction. Furthermore we shall define the resilience of a denominator, R(d), to be the ratio of its proper fractions that are resilient; for example, R(12) = 4⁄11.",
        "",
        "The resilience of a number d > 1 is then",
        "φ(d)d − 1",
        ", where φ is Euler's totient function.",
        "We further define the coresilience of a number n > 1 as C(n)= ",
        "n − φ(n)n − 1.",
        "The coresilience of a prime p is C(p)",
        "= ",
        "1p − 1.",
        "Find the sum of all composite integers 1 < n ≤ 2×1011, for which C(n) is a unit fraction."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler245() {\n  // Good luck!\n  return true;\n}\n\neuler245();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 245 Coresilience",
      "dashedName": "problem-245-coresilience"
    },
    {
      "id": "5900f4621000cf542c50ff75",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler246()</code> should return 810834388.",
          "testString":
            "assert.strictEqual(euler246(), 810834388, '<code>euler246()</code> should return 810834388.');"
        }
      ],
      "description": [
        "A definition for an ellipse is:",
        "Given a circle c with centre M and radius r and a point G such that d(G,M)<r, the locus of the points that are equidistant from c and G form an ellipse.",
        "",
        "The construction of the points of the ellipse is shown below.",
        "",
        "",
        "",
        "",
        "",
        "Given are the points M(-2000,1500) and G(8000,1500). ",
        "Given is also the circle c with centre M and radius 15000.",
        "The locus of the points that are equidistant from G and c form an ellipse e.",
        "From a point P outside e the two tangents t1 and t2 to the ellipse are drawn.",
        "Let the points where t1 and t2 touch the ellipse be R and S.",
        "",
        "",
        "",
        "",
        "For how many lattice points P is angle RPS greater than 45 degrees?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler246() {\n  // Good luck!\n  return true;\n}\n\neuler246();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 246 Tangents to an ellipse",
      "dashedName": "problem-246-tangents-to-an-ellipse"
    },
    {
      "id": "5900f4641000cf542c50ff76",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler247()</code> should return 782252.",
          "testString":
            "assert.strictEqual(euler247(), 782252, '<code>euler247()</code> should return 782252.');"
        }
      ],
      "description": [
        "Consider the region constrained by 1 ≤ x and 0 ≤ y ≤ 1/x.",
        "",
        "Let S1 be the largest square that can fit under the curve.",
        "Let S2 be the largest square that fits in the remaining area, and so on. ",
        "Let the index of Sn be the pair (left, below) indicating the number of squares to the left of Sn and the number of squares below Sn.",
        "",
        "",
        "",
        "",
        "The diagram shows some such squares labelled by number. ",
        "S2 has one square to its left and none below, so the index of S2 is (1,0).",
        "It can be seen that the index of S32 is (1,1) as is the index of S50. ",
        "50 is the largest n for which the index of Sn is (1,1).",
        "",
        "",
        "What is the largest n for which the index of Sn is (3,3)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler247() {\n  // Good luck!\n  return true;\n}\n\neuler247();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 247 Squares under a hyperbola",
      "dashedName": "problem-247-squares-under-a-hyperbola"
    },
    {
      "id": "5900f4651000cf542c50ff77",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler248()</code> should return 23507044290.",
          "testString":
            "assert.strictEqual(euler248(), 23507044290, '<code>euler248()</code> should return 23507044290.');"
        }
      ],
      "description": [
        "The first number n for which φ(n)=13! is 6227180929.",
        "Find the 150,000th such number."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler248() {\n  // Good luck!\n  return true;\n}\n\neuler248();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 248 Numbers for which Eulers totient function equals 13",
      "dashedName":
        "problem-248-numbers-for-which-eulers-totient-function-equals-13"
    },
    {
      "id": "5900f4671000cf542c50ff79",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler249()</code> should return 9275262564250418.",
          "testString":
            "assert.strictEqual(euler249(), 9275262564250418, '<code>euler249()</code> should return 9275262564250418.');"
        }
      ],
      "description": [
        "Let S = {2, 3, 5, ..., 4999} be the set of prime numbers less than 5000.",
        "Find the number of subsets of S, the sum of whose elements is a prime number.",
        "Enter the rightmost 16 digits as your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler249() {\n  // Good luck!\n  return true;\n}\n\neuler249();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 249 Prime Subset Sums",
      "dashedName": "problem-249-prime-subset-sums"
    },
    {
      "id": "5900f4661000cf542c50ff78",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler250()</code> should return 1425480602091519.",
          "testString":
            "assert.strictEqual(euler250(), 1425480602091519, '<code>euler250()</code> should return 1425480602091519.');"
        }
      ],
      "description": [
        "Find the number of non-empty subsets of {11, 22, 33,..., 250250250250}, the sum of whose elements is divisible by 250. Enter the rightmost 16 digits as your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler250() {\n  // Good luck!\n  return true;\n}\n\neuler250();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 250 250250",
      "dashedName": "problem-250-250250"
    },
    {
      "id": "5900f4671000cf542c50ff7a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler251()</code> should return 18946051.",
          "testString":
            "assert.strictEqual(euler251(), 18946051, '<code>euler251()</code> should return 18946051.');"
        }
      ],
      "description": [
        "A triplet of positive integers (a,b,c) is called a Cardano Triplet if it satisfies the condition:",
        "",
        "",
        "",
        "For example, (2,1,5) is a Cardano Triplet.",
        "",
        "",
        "There exist 149 Cardano Triplets for which a+b+c ≤ 1000.",
        "",
        "",
        "Find how many Cardano Triplets exist such that a+b+c ≤ 110,000,000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler251() {\n  // Good luck!\n  return true;\n}\n\neuler251();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 251 Cardano Triplets",
      "dashedName": "problem-251-cardano-triplets"
    },
    {
      "id": "5900f4691000cf542c50ff7b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler252()</code> should return 104924.",
          "testString":
            "assert.strictEqual(euler252(), 104924, '<code>euler252()</code> should return 104924.');"
        }
      ],
      "description": [
        "Given a set of points on a plane, we define a convex hole to be a convex polygon having as vertices any of the given points and not containing any of the given points in its interior (in addition to the vertices, other given points may lie on the perimeter of the polygon). ",
        "",
        "",
        "As an example, the image below shows a set of twenty points and a few such convex holes. ",
        "The convex hole shown as a red heptagon has an area equal to 1049694.5 square units, which is the highest possible area for a convex hole on the given set of points.",
        "",
        "",
        "",
        "",
        "For our example, we used the first 20 points (T2k−1, T2k), for k = 1,2,…,20, produced with the pseudo-random number generator:",
        "",
        "S0",
        "    = ",
        "    290797 ",
        "  Sn+1",
        "    = ",
        "    Sn2 mod 50515093",
        "  Tn",
        "    = ",
        "    ( Sn mod 2000 ) − 1000 ",
        "",
        "",
        "",
        "i.e. (527, 144), (−488, 732), (−454, −947), …",
        "",
        "",
        "What is the maximum area for a convex hole on the set containing the first 500 points in the pseudo-random sequence? Specify your answer including one digit after the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler252() {\n  // Good luck!\n  return true;\n}\n\neuler252();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 252 Convex Holes",
      "dashedName": "problem-252-convex-holes"
    },
    {
      "id": "5900f4691000cf542c50ff7c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler253()</code> should return 11.492847.",
          "testString":
            "assert.strictEqual(euler253(), 11.492847, '<code>euler253()</code> should return 11.492847.');"
        }
      ],
      "description": [
        "A small child has a “number caterpillar” consisting of forty jigsaw pieces, each with one number on it, which, when connected together in a line, reveal the numbers 1 to 40 in order.",
        "",
        "Every night, the child's father has to pick up the pieces of the caterpillar that have been scattered across the play room. He picks up the pieces at random and places them in the correct order. As the caterpillar is built up in this way, it forms distinct segments that gradually merge together. The number of segments starts at zero (no pieces placed), generally increases up to about eleven or twelve, then tends to drop again before finishing at a single segment (all pieces placed).",
        "",
        "For example:",
        "",
        "Piece Placed",
        "Segments So Far121422936434554354……",
        "",
        "Let M be the maximum number of segments encountered during a random tidy-up of the caterpillar.",
        "For a caterpillar of ten pieces, the number of possibilities for each M is",
        "",
        "M",
        "Possibilities1512      2250912      31815264      41418112      5144000      ",
        "",
        "so the most likely value of M is 3 and the average value is 385643⁄113400 = 3.400732, rounded to six decimal places.",
        "",
        "The most likely value of M for a forty-piece caterpillar is 11; but what is the average value of M?",
        "Give your answer rounded to six decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler253() {\n  // Good luck!\n  return true;\n}\n\neuler253();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 253 Tidying up",
      "dashedName": "problem-253-tidying-up"
    },
    {
      "id": "5900f46b1000cf542c50ff7d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler254()</code> should return 8184523820510.",
          "testString":
            "assert.strictEqual(euler254(), 8184523820510, '<code>euler254()</code> should return 8184523820510.');"
        }
      ],
      "description": [
        "Define f(n) as the sum of the factorials of the digits of n. For example, f(342) = 3! + 4! + 2! = 32.",
        "",
        "Define sf(n) as the sum of the digits of f(n). So sf(342) = 3 + 2 = 5.",
        "",
        "Define g(i) to be the smallest positive integer n such that sf(n) = i. Though sf(342) is 5, sf(25) is also 5, and it can be verified that g(5) is 25.",
        "",
        "Define sg(i) as the sum of the digits of g(i). So sg(5) = 2 + 5 = 7.",
        "",
        "Further, it can be verified that g(20) is 267 and ∑ sg(i) for 1 ≤ i ≤ 20 is 156.",
        "",
        "What is ∑ sg(i) for 1 ≤ i ≤ 150?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler254() {\n  // Good luck!\n  return true;\n}\n\neuler254();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 254 Sums of Digit Factorials",
      "dashedName": "problem-254-sums-of-digit-factorials"
    },
    {
      "id": "5900f46d1000cf542c50ff7f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler255()</code> should return 4.447401118.",
          "testString":
            "assert.strictEqual(euler255(), 4.447401118, '<code>euler255()</code> should return 4.447401118.');"
        }
      ],
      "description": [
        "We define the rounded-square-root of a positive integer n as the square root of n rounded to the nearest integer.",
        "",
        "The following procedure (essentially Heron's method adapted to integer arithmetic) finds the rounded-square-root of n:",
        "Let d be the number of digits of the number n.",
        "If d is odd, set x0 = 2×10(d-1)⁄2.",
        "If d is even, set x0 = 7×10(d-2)⁄2.",
        "Repeat:",
        "",
        "",
        "",
        "",
        "until xk+1 = xk.",
        "",
        "As an example, let us find the rounded-square-root of n = 4321.n has 4 digits, so x0 = 7×10(4-2)⁄2 = 70.",
        "Since x2 = x1, we stop here.",
        "So, after just two iterations, we have found that the rounded-square-root of 4321 is 66 (the actual square root is 65.7343137…).",
        "",
        "The number of iterations required when using this method is surprisingly low.",
        "For example, we can find the rounded-square-root of a 5-digit integer (10,000 ≤ n ≤ 99,999) with an average of 3.2102888889 iterations (the average value was rounded to 10 decimal places).",
        "",
        "Using the procedure described above, what is the average number of iterations required to find the rounded-square-root of a 14-digit number (1013 ≤ n < 1014)?",
        "Give your answer rounded to 10 decimal places.",
        "",
        "Note: The symbols ⌊x⌋ and ⌈x⌉ represent the floor function and ceiling function respectively."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler255() {\n  // Good luck!\n  return true;\n}\n\neuler255();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 255 Rounded Square Roots",
      "dashedName": "problem-255-rounded-square-roots"
    },
    {
      "id": "5900f46c1000cf542c50ff7e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler256()</code> should return 85765680.",
          "testString":
            "assert.strictEqual(euler256(), 85765680, '<code>euler256()</code> should return 85765680.');"
        }
      ],
      "description": [
        "Tatami are rectangular mats, used to completely cover the floor of a room, without overlap.",
        "",
        "Assuming that the only type of available tatami has dimensions 1×2, there are obviously some limitations for the shape and size of the rooms that can be covered.",
        "",
        "For this problem, we consider only rectangular rooms with integer dimensions a, b and even size s = a·b.",
        "We use the term 'size' to denote the floor surface area of the room, and — without loss of generality — we add the condition a ≤ b.",
        "",
        "There is one rule to follow when laying out tatami: there must be no points where corners of four different mats meet.",
        "For example, consider the two arrangements below for a 4×4 room:",
        "",
        "",
        "",
        "The arrangement on the left is acceptable, whereas the one on the right is not: a red \"X\" in the middle, marks the point where four tatami meet.",
        "",
        "Because of this rule, certain even-sized rooms cannot be covered with tatami: we call them tatami-free rooms.",
        "Further, we define T(s) as the number of tatami-free rooms of size s.",
        "",
        "The smallest tatami-free room has size s = 70 and dimensions 7×10.",
        "All the other rooms of size s = 70 can be covered with tatami; they are: 1×70, 2×35 and 5×14.",
        "Hence, T(70) = 1.",
        "",
        "Similarly, we can verify that T(1320) = 5 because there are exactly 5 tatami-free rooms of size s = 1320:",
        "20×66, 22×60, 24×55, 30×44 and 33×40.",
        "In fact, s = 1320 is the smallest room-size s for which T(s) = 5.",
        "",
        "Find the smallest room-size s for which T(s) = 200."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler256() {\n  // Good luck!\n  return true;\n}\n\neuler256();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 256 TatamiFree Rooms",
      "dashedName": "problem-256-tatamifree-rooms"
    },
    {
      "id": "5900f46e1000cf542c50ff80",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler257()</code> should return 139012411.",
          "testString":
            "assert.strictEqual(euler257(), 139012411, '<code>euler257()</code> should return 139012411.');"
        }
      ],
      "description": [
        "Given is an integer sided triangle ABC with sides a ≤ b ≤ c. ",
        "(AB = c, BC = a and AC = b).",
        "The angular bisectors of the triangle intersect the sides at points E, F and G (see picture below).",
        "",
        "",
        "",
        "",
        "The segments EF, EG and FG partition the triangle ABC into four smaller triangles: AEG, BFE, CGF and EFG.",
        "It can be proven that for each of these four triangles the ratio area(ABC)/area(subtriangle) is rational.",
        "However, there exist triangles for which some or all of these ratios are integral.",
        "",
        "",
        "How many triangles ABC with perimeter≤100,000,000 exist so that the ratio area(ABC)/area(AEG) is integral?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler257() {\n  // Good luck!\n  return true;\n}\n\neuler257();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 257 Angular Bisectors",
      "dashedName": "problem-257-angular-bisectors"
    },
    {
      "id": "5900f46e1000cf542c50ff81",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler258()</code> should return 12747994.",
          "testString":
            "assert.strictEqual(euler258(), 12747994, '<code>euler258()</code> should return 12747994.');"
        }
      ],
      "description": [
        "A sequence is defined as:",
        "",
        "gk = 1, for 0 ≤ k ≤ 1999",
        "gk = gk-2000 + gk-1999, for k ≥ 2000.",
        "Find gk mod 20092010 for k = 1018."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler258() {\n  // Good luck!\n  return true;\n}\n\neuler258();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 258 A lagged Fibonacci sequence",
      "dashedName": "problem-258-a-lagged-fibonacci-sequence"
    },
    {
      "id": "5900f4701000cf542c50ff82",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler259()</code> should return 20101196798.",
          "testString":
            "assert.strictEqual(euler259(), 20101196798, '<code>euler259()</code> should return 20101196798.');"
        }
      ],
      "description": [
        "A positive integer will be called reachable if it can result from an arithmetic expression obeying the following rules:",
        "",
        "Uses the digits 1 through 9, in that order and exactly once each.",
        "Any successive digits can be concatenated (for example, using the digits 2, 3 and 4 we obtain the number 234).",
        "Only the four usual binary arithmetic operations (addition, subtraction, multiplication and division) are allowed.",
        "Each operation can be used any number of times, or not at all.",
        "Unary minus is not allowed.",
        "Any number of (possibly nested) parentheses may be used to define the order of operations.",
        "For example, 42 is reachable, since (1/23) * ((4*5)-6) * (78-9) = 42.",
        "",
        "What is the sum of all positive reachable integers?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler259() {\n  // Good luck!\n  return true;\n}\n\neuler259();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 259 Reachable Numbers",
      "dashedName": "problem-259-reachable-numbers"
    },
    {
      "id": "5900f4701000cf542c50ff83",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler260()</code> should return 167542057.",
          "testString":
            "assert.strictEqual(euler260(), 167542057, '<code>euler260()</code> should return 167542057.');"
        }
      ],
      "description": [
        "A game is played with three piles of stones and two players.",
        "At her turn, a player removes one or more stones from the piles. However, if she takes stones from more than one pile, she must remove the same number of stones from each of the selected piles.",
        "",
        "In other words, the player chooses some N>0 and removes:",
        "N stones from any single pile; or",
        "N stones from each of any two piles (2N total); or",
        "N stones from each of the three piles (3N total).",
        "The player taking the last stone(s) wins the game.",
        "",
        "A winning configuration is one where the first player can force a win.",
        "For example, (0,0,13), (0,11,11) and (5,5,5) are winning configurations because the first player can immediately remove all stones.",
        "",
        "A losing configuration is one where the second player can force a win, no matter what the first player does. ",
        "For example, (0,1,2) and (1,3,3) are losing configurations: any legal move leaves a winning configuration for the second player.",
        "",
        "Consider all  losing configurations (xi,yi,zi) where xi ≤ yi ≤ zi ≤ 100.",
        "We can verify that Σ(xi+yi+zi) = 173895 for these.",
        "",
        "Find Σ(xi+yi+zi) where (xi,yi,zi) ranges over the losing configurations",
        "with xi ≤ yi ≤ zi ≤ 1000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler260() {\n  // Good luck!\n  return true;\n}\n\neuler260();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 260 Stone Game",
      "dashedName": "problem-260-stone-game"
    },
    {
      "id": "5900f4711000cf542c50ff84",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler261()</code> should return 238890850232021.",
          "testString":
            "assert.strictEqual(euler261(), 238890850232021, '<code>euler261()</code> should return 238890850232021.');"
        }
      ],
      "description": [
        "Let us call a positive integer k a square-pivot, if there is a pair of integers m > 0 and n ≥ k, such that the sum of the (m+1) consecutive squares up to k equals the sum of the m consecutive squares from (n+1) on:",
        "",
        "(k-m)2 + ... + k2 = (n+1)2 + ... + (n+m)2.",
        "",
        "Some small square-pivots are",
        "4: 32 + 42",
        " = 52",
        "21: 202 + 212 = 292",
        "24: 212 + 222 + 232 + 242 = 252 + 262 + 272",
        "110: 1082 + 1092 + 1102 = 1332 + 1342Find the sum of all distinct square-pivots ≤ 1010."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler261() {\n  // Good luck!\n  return true;\n}\n\neuler261();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 261 Pivotal Square Sums",
      "dashedName": "problem-261-pivotal-square-sums"
    },
    {
      "id": "5900f4731000cf542c50ff85",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler262()</code> should return 2531.205.",
          "testString":
            "assert.strictEqual(euler262(), 2531.205, '<code>euler262()</code> should return 2531.205.');"
        }
      ],
      "description": [
        "The following equation represents the continuous topography of a mountainous region, giving the elevation h at any point (x,y):",
        "",
        "",
        "",
        "",
        "A mosquito intends to fly from A(200,200) to B(1400,1400), without leaving the area given by 0 ≤ x, y ≤ 1600.",
        "",
        "Because of the intervening mountains, it first rises straight up to a point A', having elevation f. Then, while remaining at the same elevation f, it flies around any obstacles until it arrives at a point B' directly above B.",
        "",
        "First, determine fmin which is the minimum constant elevation allowing such a trip from A to B, while remaining in the specified area.",
        "Then, find the length of the shortest path between A' and B', while flying at that constant elevation fmin.",
        "",
        "Give that length as your answer, rounded to three decimal places.",
        "",
        "Note: For convenience, the elevation function shown above is repeated below, in a form suitable for most programming languages:",
        "h=( 5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) ) * exp( -abs(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7) )"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler262() {\n  // Good luck!\n  return true;\n}\n\neuler262();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 262 Mountain Range",
      "dashedName": "problem-262-mountain-range"
    },
    {
      "id": "5900f4741000cf542c50ff86",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler263()</code> should return 2039506520.",
          "testString":
            "assert.strictEqual(euler263(), 2039506520, '<code>euler263()</code> should return 2039506520.');"
        }
      ],
      "description": [
        "Consider the number 6. The divisors of 6 are: 1,2,3 and 6.",
        "Every number from 1 up to and including 6 can be written as a sum of distinct divisors of 6:",
        "1=1, 2=2, 3=1+2, 4=1+3, 5=2+3, 6=6.",
        "A number n is called a practical number if every number from 1 up to and including n can be expressed as a sum of distinct divisors of n.",
        "",
        "",
        "A pair of consecutive prime numbers with a difference of six is called a sexy pair (since \"sex\" is the Latin word for \"six\"). The first sexy pair is (23, 29).",
        "",
        "",
        "We may occasionally find a triple-pair, which means three consecutive sexy prime pairs, such that the second member of each pair is the first member of the next pair.",
        "",
        "",
        "We shall call a number n such that :",
        "(n-9, n-3), (n-3,n+3), (n+3, n+9) form a triple-pair, and ",
        "the numbers n-8, n-4, n, n+4 and n+8 are all practical,",
        "",
        "an engineers’ paradise.",
        "",
        "",
        "Find the sum of the first four engineers’ paradises."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler263() {\n  // Good luck!\n  return true;\n}\n\neuler263();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 263 An engineers dream come true",
      "dashedName": "problem-263-an-engineers-dream-come-true"
    },
    {
      "id": "5900f4751000cf542c50ff87",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler264()</code> should return 2816417.1055.",
          "testString":
            "assert.strictEqual(euler264(), 2816417.1055, '<code>euler264()</code> should return 2816417.1055.');"
        }
      ],
      "description": [
        "Consider all the triangles having:",
        "All their vertices on lattice points.",
        "Circumcentre at the origin O.",
        "Orthocentre at the point H(5, 0).",
        "There are nine such triangles having a perimeter ≤ 50.",
        "Listed and shown in ascending order of their perimeter, they are:",
        "",
        "A(-4, 3), B(5, 0), C(4, -3)",
        "A(4, 3), B(5, 0), C(-4, -3)",
        "A(-3, 4), B(5, 0), C(3, -4)",
        "A(3, 4), B(5, 0), C(-3, -4)",
        "A(0, 5), B(5, 0), C(0, -5)",
        "A(1, 8), B(8, -1), C(-4, -7)",
        "A(8, 1), B(1, -8), C(-4, 7)",
        "A(2, 9), B(9, -2), C(-6, -7)",
        "A(9, 2), B(2, -9), C(-6, 7)",
        "",
        "The sum of their perimeters, rounded to four decimal places, is 291.0089.",
        "",
        "Find all such triangles with a perimeter ≤ 105.",
        "Enter as your answer the sum of their perimeters rounded to four decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler264() {\n  // Good luck!\n  return true;\n}\n\neuler264();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 264 Triangle Centres",
      "dashedName": "problem-264-triangle-centres"
    },
    {
      "id": "5900f4761000cf542c50ff88",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler265()</code> should return 209110240768.",
          "testString":
            "assert.strictEqual(euler265(), 209110240768, '<code>euler265()</code> should return 209110240768.');"
        }
      ],
      "description": [
        "2N binary digits can be placed in a circle so that all the N-digit clockwise subsequences are distinct.",
        "",
        "For N=3, two such circular arrangements are possible, ignoring rotations:",
        "",
        "",
        "For the first arrangement, the 3-digit subsequences, in clockwise order, are: 000, 001, 010, 101, 011, 111, 110 and 100.",
        "",
        "Each circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for N=3 are thus represented as 23 and 29:",
        "00010111 2 = 23",
        "00011101 2 = 29",
        "",
        "Calling S(N) the sum of the unique numeric representations, we can see that S(3) = 23 + 29 = 52.",
        "",
        "Find S(5)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler265() {\n  // Good luck!\n  return true;\n}\n\neuler265();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 265 Binary Circles",
      "dashedName": "problem-265-binary-circles"
    },
    {
      "id": "5900f4771000cf542c50ff89",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler266()</code> should return 1096883702440585.",
          "testString":
            "assert.strictEqual(euler266(), 1096883702440585, '<code>euler266()</code> should return 1096883702440585.');"
        }
      ],
      "description": [
        "The divisors of 12 are: 1,2,3,4,6 and 12.",
        "The largest divisor of 12 that does not exceed the square root of 12 is 3.",
        "We shall call the largest divisor of an integer n that does not exceed the square root of n the pseudo square root (PSR) of n.",
        "It can be seen that PSR(3102)=47.",
        "",
        "",
        "Let p be the product of the primes below 190.",
        "Find PSR(p) mod 1016."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler266() {\n  // Good luck!\n  return true;\n}\n\neuler266();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 266 Pseudo Square Root",
      "dashedName": "problem-266-pseudo-square-root"
    },
    {
      "id": "5900f4771000cf542c50ff8a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler267()</code> should return 0.999992836187.",
          "testString":
            "assert.strictEqual(euler267(), 0.999992836187, '<code>euler267()</code> should return 0.999992836187.');"
        }
      ],
      "description": [
        "You are given a unique investment opportunity.",
        "Starting with £1 of capital, you can choose a fixed proportion, f, of your capital to bet on a fair coin toss repeatedly for 1000 tosses.",
        "Your return is double your bet for heads and you lose your bet for tails.",
        "For example, if f = 1/4,  for the first toss you bet £0.25, and if heads comes up you win £0.5 and so then have £1.5. You then bet £0.375 and if the second toss is tails, you have £1.125.",
        "Choosing f to maximize your chances of having at least £1,000,000,000 after 1,000 flips, what is the chance that you become a billionaire?",
        "All computations are assumed to be exact (no rounding), but give your answer rounded to 12 digits behind the decimal point in the form 0.abcdefghijkl."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler267() {\n  // Good luck!\n  return true;\n}\n\neuler267();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 267 Billionaire",
      "dashedName": "problem-267-billionaire"
    },
    {
      "id": "5900f4791000cf542c50ff8b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler268()</code> should return 785478606870985.",
          "testString":
            "assert.strictEqual(euler268(), 785478606870985, '<code>euler268()</code> should return 785478606870985.');"
        }
      ],
      "description": [
        "It can be verified that there are 23 positive integers less than 1000 that are divisible by at least four distinct primes less than 100.",
        "",
        "Find how many positive integers less than 1016 are divisible by at least four distinct primes less than 100."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler268() {\n  // Good luck!\n  return true;\n}\n\neuler268();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 268 Counting numbers with at least four distinct prime factors less than 100",
      "dashedName":
        "problem-268-counting-numbers-with-at-least-four-distinct-prime-factors-less-than-100"
    },
    {
      "id": "5900f4791000cf542c50ff8c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler269()</code> should return 1311109198529286.",
          "testString":
            "assert.strictEqual(euler269(), 1311109198529286, '<code>euler269()</code> should return 1311109198529286.');"
        }
      ],
      "description": [
        "A root or zero of a polynomial P(x) is a solution to the equation P(x) = 0. ",
        "Define Pn as the polynomial whose coefficients are the digits of n.",
        "For example, P5703(x) = 5x3 + 7x2 + 3.",
        "",
        "We can see that:Pn(0) is the last digit of n,",
        "Pn(1) is the sum of the digits of n,",
        "Pn(10) is n itself.Define Z(k) as the number of positive integers, n, not exceeding k for which the polynomial Pn has at least one integer root.",
        "",
        "It can be verified that Z(100 000) is 14696.",
        "",
        "What is Z(1016)?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler269() {\n  // Good luck!\n  return true;\n}\n\neuler269();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 269 Polynomials with at least one integer root",
      "dashedName": "problem-269-polynomials-with-at-least-one-integer-root"
    },
    {
      "id": "5900f47c1000cf542c50ff8e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler270()</code> should return 82282080.",
          "testString":
            "assert.strictEqual(euler270(), 82282080, '<code>euler270()</code> should return 82282080.');"
        }
      ],
      "description": [
        "A square piece of paper with integer dimensions N×N is placed with a corner at the origin and two of its sides along the x- and y-axes. Then, we cut it up respecting the following rules:",
        "We only make straight cuts between two points lying on different sides of the square, and having integer coordinates.",
        "Two cuts cannot cross, but several cuts can meet at the same border point.",
        "Proceed until no more legal cuts can be made.",
        "Counting any reflections or rotations as distinct, we call C(N) the number of ways to cut an N×N square. For example, C(1) = 2 and C(2) = 30 (shown below).",
        "",
        "",
        "What is C(30) mod 108 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler270() {\n  // Good luck!\n  return true;\n}\n\neuler270();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 270 Cutting Squares",
      "dashedName": "problem-270-cutting-squares"
    },
    {
      "id": "5900f47b1000cf542c50ff8d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler271()</code> should return 4617456485273130000.",
          "testString":
            "assert.strictEqual(euler271(), 4617456485273130000, '<code>euler271()</code> should return 4617456485273130000.');"
        }
      ],
      "description": [
        "For a positive number n, define S(n) as the sum of the integers x, for which 1<x<n andx3≡1 mod n.",
        "",
        "",
        "When n=91, there are 8 possible values for x, namely : 9, 16, 22, 29, 53, 74, 79, 81.",
        "Thus, S(91)=9+16+22+29+53+74+79+81=363.",
        "",
        "Find S(13082761331670030)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler271() {\n  // Good luck!\n  return true;\n}\n\neuler271();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 271 Modular Cubes part 1",
      "dashedName": "problem-271-modular-cubes-part-1"
    },
    {
      "id": "5900f47d1000cf542c50ff8f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler272()</code> should return 8495585919506151000.",
          "testString":
            "assert.strictEqual(euler272(), 8495585919506151000, '<code>euler272()</code> should return 8495585919506151000.');"
        }
      ],
      "description": [
        "For a positive number n, define C(n) as the number of the integers x, for which 1<x<n andx3≡1 mod n.",
        "",
        "",
        "When n=91, there are 8 possible values for x, namely : 9, 16, 22, 29, 53, 74, 79, 81.",
        "Thus, C(91)=8.",
        "",
        "Find the sum of the positive numbers n≤1011 for which C(n)=242."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler272() {\n  // Good luck!\n  return true;\n}\n\neuler272();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 272 Modular Cubes part 2",
      "dashedName": "problem-272-modular-cubes-part-2"
    },
    {
      "id": "5900f47e1000cf542c50ff90",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler273()</code> should return 2032447591196869000.",
          "testString":
            "assert.strictEqual(euler273(), 2032447591196869000, '<code>euler273()</code> should return 2032447591196869000.');"
        }
      ],
      "description": [
        "Consider equations of the form: a2 + b2 = N, 0 ≤ a ≤ b, a, b and N integer.",
        "",
        "For N=65 there are two solutions:",
        "a=1, b=8 and a=4, b=7.",
        "We call S(N) the sum of the values of a of all solutions of a2 + b2 = N, 0 ≤ a ≤ b, a, b and N integer.",
        "Thus S(65) = 1 + 4 = 5.",
        "Find ∑S(N), for all squarefree N only divisible by primes of the form 4k+1 with 4k+1 < 150."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler273() {\n  // Good luck!\n  return true;\n}\n\neuler273();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 273 Sum of Squares",
      "dashedName": "problem-273-sum-of-squares"
    },
    {
      "id": "5900f47f1000cf542c50ff91",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler274()</code> should return 1601912348822.",
          "testString":
            "assert.strictEqual(euler274(), 1601912348822, '<code>euler274()</code> should return 1601912348822.');"
        }
      ],
      "description": [
        "For each integer p > 1 coprime to 10 there is a positive divisibility multiplier m < p which preserves divisibility by p for the following function on any positive integer, n:",
        "",
        "f(n) = (all but the last digit of n) + (the last digit of n) * m",
        "",
        "That is, if m is the divisibility multiplier for p, then f(n) is divisible by p if and only if n is divisible by p.",
        "",
        "(When n is much larger than p, f(n) will be less than n and repeated application of f provides a multiplicative divisibility test for p.)",
        "",
        "For example, the divisibility multiplier for 113 is 34.",
        "",
        "f(76275) = 7627 + 5 * 34 = 7797 : 76275 and 7797 are both divisible by 113f(12345) = 1234 + 5 * 34 = 1404 : 12345 and 1404 are both not divisible by 113",
        "",
        "The sum of the divisibility multipliers for the primes that are coprime to 10 and less than 1000 is 39517. What is the sum of the divisibility multipliers for the primes that are coprime to 10 and less than 107?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler274() {\n  // Good luck!\n  return true;\n}\n\neuler274();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 274 Divisibility Multipliers",
      "dashedName": "problem-274-divisibility-multipliers"
    },
    {
      "id": "5900f4801000cf542c50ff92",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler275()</code> should return 15030564.",
          "testString":
            "assert.strictEqual(euler275(), 15030564, '<code>euler275()</code> should return 15030564.');"
        }
      ],
      "description": [
        "Let us define a balanced sculpture of order n as follows:",
        "A polyomino made up of n+1 tiles known as the blocks (n tiles) and the plinth (remaining tile);",
        "the plinth has its centre at position (x = 0, y = 0);",
        "the blocks have y-coordinates greater than zero (so the plinth is the unique lowest tile);",
        "the centre of mass of all the blocks, combined, has x-coordinate equal to zero.",
        "When counting the sculptures, any arrangements which are simply reflections about the y-axis, are not counted as distinct. For example, the 18 balanced sculptures of order 6 are shown below; note that each pair of mirror images (about the y-axis) is counted as one sculpture:",
        "",
        "",
        "There are 964 balanced sculptures of order 10 and 360505 of order 15.How many balanced sculptures are there of order 18?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler275() {\n  // Good luck!\n  return true;\n}\n\neuler275();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 275 Balanced Sculptures",
      "dashedName": "problem-275-balanced-sculptures"
    },
    {
      "id": "5900f4801000cf542c50ff93",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler276()</code> should return 5777137137739633000.",
          "testString":
            "assert.strictEqual(euler276(), 5777137137739633000, '<code>euler276()</code> should return 5777137137739633000.');"
        }
      ],
      "description": [
        "Consider the triangles with integer sides a, b and c with a ≤ b ≤ c.",
        "An integer sided triangle (a,b,c) is called primitive if  gcd(a,b,c)=1. ",
        "How many primitive integer sided triangles exist with a perimeter not exceeding 10 000 000?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler276() {\n  // Good luck!\n  return true;\n}\n\neuler276();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 276 Primitive Triangles",
      "dashedName": "problem-276-primitive-triangles"
    },
    {
      "id": "5900f4811000cf542c50ff94",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler277()</code> should return 1125977393124310.",
          "testString":
            "assert.strictEqual(euler277(), 1125977393124310, '<code>euler277()</code> should return 1125977393124310.');"
        }
      ],
      "description": [
        "A modified Collatz sequence of integers is obtained from a starting value a1 in the following way:",
        "",
        "an+1 = an/3 if an is divisible by 3. We shall denote this as a large downward step, \"D\".",
        "",
        "an+1 = (4an + 2)/3 if an divided by 3 gives a remainder of 1. We shall denote this as an upward step, \"U\".",
        "",
        "",
        "an+1 = (2an - 1)/3 if an divided by 3 gives a remainder of 2. We shall denote this as a small downward step, \"d\".",
        "",
        "",
        "",
        "",
        "The sequence terminates when some an = 1.",
        "",
        "",
        "Given any integer, we can list out the sequence of steps.",
        "For instance if a1=231, then the sequence {an}={231,77,51,17,11,7,10,14,9,3,1} corresponds to the steps \"DdDddUUdDD\".",
        "",
        "",
        "Of course, there are other sequences that begin with that same sequence \"DdDddUUdDD....\".",
        "For instance, if a1=1004064, then the sequence is DdDddUUdDDDdUDUUUdDdUUDDDUdDD.",
        "In fact, 1004064 is the smallest possible a1 > 106 that begins with the sequence DdDddUUdDD.",
        "",
        "",
        "What is the smallest a1 > 1015 that begins with the sequence \"UDDDUdddDDUDDddDdDddDDUDDdUUDd\"?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler277() {\n  // Good luck!\n  return true;\n}\n\neuler277();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 277 A Modified Collatz sequence",
      "dashedName": "problem-277-a-modified-collatz-sequence"
    },
    {
      "id": "5900f4831000cf542c50ff95",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler278()</code> should return 1228215747273908500.",
          "testString":
            "assert.strictEqual(euler278(), 1228215747273908500, '<code>euler278()</code> should return 1228215747273908500.');"
        }
      ],
      "description": [
        "Given the values of integers 1 < a1 < a2 <... < an, consider the linear combinationq1a1 + q2a2 + ... + qnan = b, using only integer values qk ≥ 0. ",
        "",
        "",
        "Note that for a given set of ak, it may be that not all values of b are possible.",
        "For instance, if a1 = 5 and a2 = 7, there are no q1 ≥ 0 and q2 ≥ 0 such that b could be ",
        "1, 2, 3, 4, 6, 8, 9, 11, 13, 16, 18 or 23.",
        "",
        "In fact, 23 is the largest impossible value of b for a1 = 5 and a2 = 7. We therefore call f(5, 7) = 23. Similarly, it can be shown that f(6, 10, 15)=29 and f(14, 22, 77) = 195.",
        "",
        "",
        "Find ∑ f(p*q,p*r,q*r), where p, q and r are prime numbers and p < q < r < 5000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler278() {\n  // Good luck!\n  return true;\n}\n\neuler278();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 278 Linear Combinations of Semiprimes",
      "dashedName": "problem-278-linear-combinations-of-semiprimes"
    },
    {
      "id": "5900f4841000cf542c50ff96",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler279()</code> should return 416577688.",
          "testString":
            "assert.strictEqual(euler279(), 416577688, '<code>euler279()</code> should return 416577688.');"
        }
      ],
      "description": [
        "How many triangles are there with integral sides, at least one integral angle (measured in degrees), and a perimeter that does not exceed 108?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler279() {\n  // Good luck!\n  return true;\n}\n\neuler279();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 279 Triangles with integral sides and an integral angle",
      "dashedName":
        "problem-279-triangles-with-integral-sides-and-an-integral-angle"
    },
    {
      "id": "5900f4841000cf542c50ff97",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler280()</code> should return 430.088247.",
          "testString":
            "assert.strictEqual(euler280(), 430.088247, '<code>euler280()</code> should return 430.088247.');"
        }
      ],
      "description": [
        "A laborious ant walks randomly on a 5x5 grid. The walk starts from the central square. At each step, the ant moves to an adjacent square at random, without leaving the grid; thus there are 2, 3 or 4 possible moves at each step depending on the ant's position.",
        "",
        "At the start of the walk, a seed is placed on each square of the lower row. When the ant isn't carrying a seed and reaches a square of the lower row containing a seed, it will start to carry the seed. The ant will drop the seed on the first empty square of the upper row it eventually reaches.",
        "",
        "What's the expected number of steps until all seeds have been dropped in the top row? ",
        "Give your answer rounded to 6 decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler280() {\n  // Good luck!\n  return true;\n}\n\neuler280();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 280 Ant and seeds",
      "dashedName": "problem-280-ant-and-seeds"
    },
    {
      "id": "5900f4861000cf542c50ff98",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler281()</code> should return 1485776387445623.",
          "testString":
            "assert.strictEqual(euler281(), 1485776387445623, '<code>euler281()</code> should return 1485776387445623.');"
        }
      ],
      "description": [
        "You are given a pizza (perfect circle) that has been cut into m·n equal pieces and you want to have exactly one topping on each slice.",
        "",
        "Let f(m,n) denote the number of ways you can have toppings on the pizza with m different toppings (m ≥ 2), using each topping on exactly n slices (n ≥ 1). Reflections are considered distinct, rotations are not. ",
        "",
        "Thus, for instance, f(2,1) = 1, f(2,2) = f(3,1) = 2 and f(3,2) = 16. f(3,2) is shown below:",
        "",
        "",
        "",
        "Find the sum of all f(m,n) such that f(m,n) ≤ 1015."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler281() {\n  // Good luck!\n  return true;\n}\n\neuler281();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 281 Pizza Toppings",
      "dashedName": "problem-281-pizza-toppings"
    },
    {
      "id": "5900f4861000cf542c50ff99",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler282()</code> should return 1098988351.",
          "testString":
            "assert.strictEqual(euler282(), 1098988351, '<code>euler282()</code> should return 1098988351.');"
        }
      ],
      "description": [
        "For non-negative integers m, n, the Ackermann function A(m, n) is defined as follows:",
        "",
        "",
        "",
        "For example A(1, 0) = 2, A(2, 2) = 7 and A(3, 4) = 125.",
        "",
        "",
        "Find A(n, n) and give your answer mod 148."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler282() {\n  // Good luck!\n  return true;\n}\n\neuler282();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 282 The Ackermann function",
      "dashedName": "problem-282-the-ackermann-function"
    },
    {
      "id": "5900f4881000cf542c50ff9a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler283()</code> should return 28038042525570324.",
          "testString":
            "assert.strictEqual(euler283(), 28038042525570324, '<code>euler283()</code> should return 28038042525570324.');"
        }
      ],
      "description": [
        "Consider the triangle with sides 6, 8 and 10. It can be seen that the perimeter and the area are both equal to 24. ",
        "So the area/perimeter ratio is equal to 1.",
        "Consider also the triangle with sides 13, 14 and 15. The perimeter equals 42 while the area is equal to 84. ",
        "So for this triangle the area/perimeter ratio is equal to 2.",
        "",
        "",
        "Find the sum of the perimeters of all integer sided triangles for which the area/perimeter ratios are equal to positive integers not exceeding 1000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler283() {\n  // Good luck!\n  return true;\n}\n\neuler283();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 283 Integer sided triangles for which the  areaperimeter ratio is integral",
      "dashedName":
        "problem-283-integer-sided-triangles-for-which-the--areaperimeter-ratio-is-integral"
    },
    {
      "id": "5900f4891000cf542c50ff9b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler284()</code> should return 5a411d7b.",
          "testString":
            "assert.strictEqual(euler284(), 5a411d7b, '<code>euler284()</code> should return 5a411d7b.');"
        }
      ],
      "description": [
        "The 3-digit number 376 in the decimal numbering system is an example of numbers with the special property that its square ends with the same digits: 3762 = 141376. Let's call a number with this property a steady square.",
        "",
        "Steady squares can also be observed in other numbering systems. In the base 14 numbering system, the 3-digit number c37 is also a steady square: c372 = aa0c37, and the sum of its digits is c+3+7=18 in the same numbering system. The letters a, b, c and d are used for the 10, 11, 12 and 13 digits respectively, in a manner similar to the hexadecimal numbering system.",
        "",
        "For 1 ≤ n ≤ 9, the sum of the digits of all the n-digit steady squares in the base 14 numbering system is 2d8 (582 decimal). Steady squares with leading 0's are not allowed.",
        "",
        "Find the sum of the digits of all the n-digit steady squares in the base 14 numbering system for",
        "1 ≤ n ≤ 10000 (decimal) and give your answer in the base 14 system using lower case letters where necessary."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler284() {\n  // Good luck!\n  return true;\n}\n\neuler284();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 284 Steady Squares",
      "dashedName": "problem-284-steady-squares"
    },
    {
      "id": "5900f48a1000cf542c50ff9c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler285()</code> should return 157055.80999.",
          "testString":
            "assert.strictEqual(euler285(), 157055.80999, '<code>euler285()</code> should return 157055.80999.');"
        }
      ],
      "description": [
        "Albert chooses a positive integer k, then two real numbers a, b are randomly chosen in the interval [0,1] with uniform distribution.",
        "The square root of the sum (k·a+1)2 + (k·b+1)2 is then computed and rounded to the nearest integer. If the result is equal to k, he scores k points; otherwise he scores nothing.",
        "",
        "For example, if k = 6, a = 0.2 and b = 0.85, then (k·a+1)2 + (k·b+1)2 = 42.05.",
        "The square root of 42.05 is 6.484... and when rounded to the nearest integer, it becomes 6.",
        "This is equal to k, so he scores 6 points.",
        "",
        "It can be shown that if he plays 10 turns with k = 1, k = 2, ..., k = 10, the expected value of his total score, rounded to five decimal places, is 10.20914.",
        "",
        "If he plays 105 turns with k = 1, k = 2, k = 3, ..., k = 105, what is the expected value of his total score, rounded to five decimal places?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler285() {\n  // Good luck!\n  return true;\n}\n\neuler285();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 285 Pythagorean odds",
      "dashedName": "problem-285-pythagorean-odds"
    },
    {
      "id": "5900f48a1000cf542c50ff9d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler286()</code> should return 52.6494571953.",
          "testString":
            "assert.strictEqual(euler286(), 52.6494571953, '<code>euler286()</code> should return 52.6494571953.');"
        }
      ],
      "description": [
        "Barbara is a mathematician and a basketball player. She has found that the probability of scoring a point when shooting from a distance x is exactly (1 - x/q), where q is a real constant greater than 50.",
        "",
        "During each practice run, she takes shots from distances x = 1, x = 2, ..., x = 50 and, according to her records, she has precisely a 2 % chance to score a total of exactly 20 points.",
        "",
        "Find q and give your answer rounded to 10 decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler286() {\n  // Good luck!\n  return true;\n}\n\neuler286();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 286 Scoring probabilities",
      "dashedName": "problem-286-scoring-probabilities"
    },
    {
      "id": "5900f48b1000cf542c50ff9e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler287()</code> should return 313135496.",
          "testString":
            "assert.strictEqual(euler287(), 313135496, '<code>euler287()</code> should return 313135496.');"
        }
      ],
      "description": [
        "The quadtree encoding allows us to describe a 2N×2N  black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:",
        "the first bit deals with the complete 2N×2N region;",
        "\"0\" denotes a split:",
        "the current 2n×2n region is divided into 4 sub-regions of dimension 2n-1×2n-1,",
        "the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;",
        "\"10\" indicates that the current region contains only black pixels;",
        "\"11\" indicates that the current region contains only white pixels.Consider the following 4×4 image (colored marks denote places where a split can occur):",
        "",
        "This image can be described by several sequences, for example :",
        "\"001010101001011111011010101010\", of length 30, or",
        "\"0100101111101110\", of length 16, which is the minimal sequence for this image.",
        "",
        "For a positive integer N, define DN as the 2N×2N image with the following coloring scheme:",
        "the pixel with coordinates x = 0, y = 0 corresponds to the bottom left pixel,",
        "if (x - 2N-1)2 + (y - 2N-1)2 ≤ 22N-2 then the pixel is black,",
        "otherwise the pixel is white.What is the length of the minimal sequence describing D24 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler287() {\n  // Good luck!\n  return true;\n}\n\neuler287();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 287 Quadtree encoding a simple compression algorithm",
      "dashedName":
        "problem-287-quadtree-encoding-a-simple-compression-algorithm"
    },
    {
      "id": "5900f48d1000cf542c50ff9f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler288()</code> should return 605857431263982000.",
          "testString":
            "assert.strictEqual(euler288(), 605857431263982000, '<code>euler288()</code> should return 605857431263982000.');"
        }
      ],
      "description": [
        "For any prime p the number N(p,q) is defined by",
        "N(p,q) = ∑n=0 to q Tn*pn with Tn generated by the following random number generator:",
        "",
        "S0 = 290797",
        "Sn+1 = Sn2 mod 50515093",
        "Tn = Sn mod p",
        "",
        "",
        "Let Nfac(p,q) be the factorial of N(p,q).",
        "Let NF(p,q) be the number of factors p in Nfac(p,q).",
        "",
        "",
        "You are given that NF(3,10000) mod 320=624955285.",
        "",
        "",
        "Find NF(61,107) mod 6110"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler288() {\n  // Good luck!\n  return true;\n}\n\neuler288();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 288 An enormous factorial",
      "dashedName": "problem-288-an-enormous-factorial"
    },
    {
      "id": "5900f48d1000cf542c50ffa0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler289()</code> should return 6567944538.",
          "testString":
            "assert.strictEqual(euler289(), 6567944538, '<code>euler289()</code> should return 6567944538.');"
        }
      ],
      "description": [
        "Let C(x,y) be a circle passing through the points (x, y), (x, y+1), (x+1, y) and (x+1, y+1).",
        "",
        "For positive integers m and n, let E(m,n) be a configuration which consists of the m·n circles:",
        "{ C(x,y): 0 ≤ x < m, 0 ≤ y < n, x and y are integers }",
        "",
        "An Eulerian cycle on E(m,n) is a closed path that passes through each arc exactly once.",
        "Many such paths are possible on E(m,n), but we are only interested in those which are not self-crossing: ",
        "A non-crossing path just touches itself at lattice points, but it never crosses itself.",
        "",
        "The image below shows E(3,3) and an example of an Eulerian non-crossing path.",
        "",
        "Let L(m,n) be the number of Eulerian non-crossing paths on E(m,n).",
        "For example, L(1,2) = 2, L(2,2) = 37 and L(3,3) = 104290.",
        "",
        "Find L(6,10) mod 1010."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler289() {\n  // Good luck!\n  return true;\n}\n\neuler289();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 289 Eulerian Cycles",
      "dashedName": "problem-289-eulerian-cycles"
    },
    {
      "id": "5900f48f1000cf542c50ffa1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler290()</code> should return 20444710234716470.",
          "testString":
            "assert.strictEqual(euler290(), 20444710234716470, '<code>euler290()</code> should return 20444710234716470.');"
        }
      ],
      "description": [
        "How many integers 0 ≤ n < 1018 have the property that the sum of the digits of n equals the sum of digits of 137n?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler290() {\n  // Good luck!\n  return true;\n}\n\neuler290();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 290 Digital Signature",
      "dashedName": "problem-290-digital-signature"
    },
    {
      "id": "5900f48f1000cf542c50ffa2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler291()</code> should return 4037526.",
          "testString":
            "assert.strictEqual(euler291(), 4037526, '<code>euler291()</code> should return 4037526.');"
        }
      ],
      "description": [
        "A prime number p is called a Panaitopol prime if  for some positive integersx and y.",
        "",
        "",
        "Find how many Panaitopol primes are less than 5×1015."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler291() {\n  // Good luck!\n  return true;\n}\n\neuler291();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 291 Panaitopol Primes",
      "dashedName": "problem-291-panaitopol-primes"
    },
    {
      "id": "5900f4911000cf542c50ffa3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler292()</code> should return 3600060866.",
          "testString":
            "assert.strictEqual(euler292(), 3600060866, '<code>euler292()</code> should return 3600060866.');"
        }
      ],
      "description": [
        "We shall define a pythagorean polygon  to be a convex polygon with the following properties:there are at least three vertices,",
        "no three vertices are aligned,",
        "each vertex has integer coordinates,",
        "each edge has integer length.For a given integer n, define P(n) as the number of distinct pythagorean polygons for which the perimeter is ≤ n.",
        "Pythagorean polygons should be considered distinct as long as none is a translation of another.",
        "",
        "You are given that P(4) = 1, P(30) = 3655 and P(60) = 891045.",
        "Find P(120)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler292() {\n  // Good luck!\n  return true;\n}\n\neuler292();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 292 Pythagorean Polygons",
      "dashedName": "problem-292-pythagorean-polygons"
    },
    {
      "id": "5900f4931000cf542c50ffa4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler293()</code> should return 2209.",
          "testString":
            "assert.strictEqual(euler293(), 2209, '<code>euler293()</code> should return 2209.');"
        }
      ],
      "description": [
        "An even positive integer N will be called admissible, if it is a power of 2 or its distinct prime factors are consecutive primes.",
        "The first twelve admissible numbers are 2,4,6,8,12,16,18,24,30,32,36,48.",
        "",
        "",
        "If N is admissible, the smallest integer M > 1 such that N+M is prime, will be called the pseudo-Fortunate number for N.",
        "",
        "",
        "For example, N=630 is admissible since it is even and its distinct prime factors are the consecutive primes 2,3,5 and 7. ",
        "The next prime number after 631 is 641; hence, the pseudo-Fortunate number for 630 is M=11.",
        "It can also be seen that the pseudo-Fortunate number for 16 is 3.",
        "",
        "",
        "Find the sum of all distinct pseudo-Fortunate numbers for admissible numbers N less than 109."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler293() {\n  // Good luck!\n  return true;\n}\n\neuler293();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 293 PseudoFortunate Numbers",
      "dashedName": "problem-293-pseudofortunate-numbers"
    },
    {
      "id": "5900f4931000cf542c50ffa5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler294()</code> should return 789184709.",
          "testString":
            "assert.strictEqual(euler294(), 789184709, '<code>euler294()</code> should return 789184709.');"
        }
      ],
      "description": [
        "For a positive integer k, define d(k) as the sum of the digits of k in its usual decimal representation.",
        "Thus d(42) = 4+2 = 6.",
        "",
        "",
        "For a positive integer n, define S(n) as the number of positive integers k < 10n with the following properties :",
        "k is divisible by 23 and",
        "d(k) = 23.",
        "",
        "You are given that S(9) = 263626 and S(42) = 6377168878570056.",
        "",
        "",
        "Find S(1112) and give your answer mod 109."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler294() {\n  // Good luck!\n  return true;\n}\n\neuler294();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 294 Sum of digits  experience 23",
      "dashedName": "problem-294-sum-of-digits--experience-23"
    },
    {
      "id": "5900f4931000cf542c50ffa6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler295()</code> should return 4884650818.",
          "testString":
            "assert.strictEqual(euler295(), 4884650818, '<code>euler295()</code> should return 4884650818.');"
        }
      ],
      "description": [
        "We call the convex area enclosed by two circles a lenticular hole if:",
        "The centres of both circles are on lattice points.",
        "The two circles intersect at two distinct lattice points.",
        "The interior of the convex area enclosed by both circles does not contain any lattice points.",
        "",
        "Consider the circles:",
        "C0: x2+y2=25",
        "C1: (x+4)2+(y-4)2=1",
        "C2: (x-12)2+(y-4)2=65",
        "",
        "",
        "The circles C0, C1 and C2 are drawn in the picture below.",
        "",
        "",
        "C0 and C1 form a lenticular hole, as well as C0 and C2.",
        "",
        "We call an ordered pair of positive real numbers (r1, r2) a lenticular pair if there exist two circles with radii r1 and r2 that form a lenticular hole.",
        "We can verify that (1, 5) and (5, √65) are the lenticular pairs of the example above.",
        "",
        "Let L(N) be the number of distinct lenticular pairs (r1, r2) for which 0 < r1 ≤ r2 ≤ N.",
        "We can verify that L(10) = 30 and L(100) = 3442.",
        "",
        "Find L(100 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler295() {\n  // Good luck!\n  return true;\n}\n\neuler295();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 295 Lenticular holes",
      "dashedName": "problem-295-lenticular-holes"
    },
    {
      "id": "5900f4941000cf542c50ffa7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler296()</code> should return 1137208419.",
          "testString":
            "assert.strictEqual(euler296(), 1137208419, '<code>euler296()</code> should return 1137208419.');"
        }
      ],
      "description": [
        "Given is an integer sided triangle ABC with BC ≤ AC ≤ AB.k is the angular bisector of angle ACB.m is the tangent at C to the circumscribed circle of ABC.n is a line parallel to m through B.",
        "The intersection of n and k is called E.",
        "",
        "",
        "",
        "How many triangles ABC with a perimeter not exceeding 100 000 exist such that BE has integral length?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler296() {\n  // Good luck!\n  return true;\n}\n\neuler296();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 296 Angular Bisector and Tangent",
      "dashedName": "problem-296-angular-bisector-and-tangent"
    },
    {
      "id": "5900f4951000cf542c50ffa8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler297()</code> should return 2252639041804718000.",
          "testString":
            "assert.strictEqual(euler297(), 2252639041804718000, '<code>euler297()</code> should return 2252639041804718000.');"
        }
      ],
      "description": [
        "Each new term in the Fibonacci sequence is generated by adding the previous two terms.",
        "Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.",
        "",
        "Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.",
        "Such a sum is called the Zeckendorf representation of the number.",
        "",
        "For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.",
        "Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.",
        "Also, for 0<n<106, ∑ z(n) = 7894453.",
        "",
        "Find ∑ z(n) for 0<n<1017."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler297() {\n  // Good luck!\n  return true;\n}\n\neuler297();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 297 Zeckendorf Representation",
      "dashedName": "problem-297-zeckendorf-representation"
    },
    {
      "id": "5900f4971000cf542c50ffa9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler298()</code> should return 1.76882294.",
          "testString":
            "assert.strictEqual(euler298(), 1.76882294, '<code>euler298()</code> should return 1.76882294.');"
        }
      ],
      "description": [
        "Larry and Robin play a memory game involving of a sequence of random numbers between 1 and 10, inclusive, that are called out one at a time. Each player can remember up to 5 previous numbers. When the called number is in a player's memory, that player is awarded a point. If it's not, the player adds the called number to his memory, removing another number if his memory is full.",
        "",
        "Both players start with empty memories. Both players always add new missed numbers to their memory but use a different strategy in deciding which number to remove:",
        "Larry's strategy is to remove the number that hasn't been called in the longest time.",
        "Robin's strategy is to remove the number that's been in the memory the longest time.",
        "",
        "Example game:Turn",
        "  Callednumber",
        "  Larry'smemory",
        "  Larry'sscore",
        "  Robin'smemory",
        "  Robin'sscore",
        "1",
        "  1",
        "  1",
        "  0",
        "  1",
        "  0",
        "2",
        "  2",
        "  1,2",
        "  0",
        "  1,2",
        "  0",
        "3",
        "  4",
        "  1,2,4",
        "  0",
        "  1,2,4",
        "  0",
        "4",
        "  6",
        "  1,2,4,6",
        "  0",
        "  1,2,4,6",
        "  0",
        "5",
        "  1",
        "  1,2,4,6",
        "  1",
        "  1,2,4,6",
        "  1",
        "6",
        "  8",
        "  1,2,4,6,8",
        "  1",
        "  1,2,4,6,8",
        "  1",
        "7",
        "  10",
        "  1,4,6,8,10",
        "  1",
        "  2,4,6,8,10",
        "  1",
        "8",
        "  2",
        "  1,2,6,8,10",
        "  1",
        "  2,4,6,8,10",
        "  2",
        "9",
        "  4",
        "  1,2,4,8,10",
        "  1",
        "  2,4,6,8,10",
        "  3",
        "10",
        "  1",
        "  1,2,4,8,10",
        "  2",
        "  1,4,6,8,10",
        "  3",
        "",
        "",
        "Denoting Larry's score by L and Robin's score by R, what is the expected value of |L-R| after 50 turns? Give your answer rounded to eight decimal places using the format x.xxxxxxxx ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler298() {\n  // Good luck!\n  return true;\n}\n\neuler298();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 298 Selective Amnesia",
      "dashedName": "problem-298-selective-amnesia"
    },
    {
      "id": "5900f4971000cf542c50ffaa",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler299()</code> should return 549936643.",
          "testString":
            "assert.strictEqual(euler299(), 549936643, '<code>euler299()</code> should return 549936643.');"
        }
      ],
      "description": [
        "Four points with integer coordinates are selected:A(a, 0), B(b, 0), C(0, c) and D(0, d), ",
        "with 0 < a < b and 0 < c < d.",
        "Point P, also with integer coordinates, is chosen on the line AC so that the three triangles ABP, CDP and BDP are all similar.",
        "",
        "It is easy to prove that the three triangles can be similar, only if a=c.",
        "",
        "So, given that a=c, we are looking for triplets (a,b,d) such that at least one point P (with integer coordinates) exists on AC, making the three triangles ABP, CDP and BDP all similar.",
        "",
        "For example, if (a,b,d)=(2,3,4), it can be easily verified that point P(1,1) satisfies the above condition. ",
        "Note that the triplets (2,3,4) and (2,4,3) are considered as distinct, although point P(1,1) is common for both.",
        "",
        "If b+d < 100, there are 92 distinct triplets (a,b,d) such that point P exists.",
        "If b+d < 100 000, there are 320471 distinct triplets (a,b,d) such that point P exists.",
        "If b+d < 100 000 000, how many distinct triplets (a,b,d) are there such that point P exists?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler299() {\n  // Good luck!\n  return true;\n}\n\neuler299();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 299 Three similar triangles",
      "dashedName": "problem-299-three-similar-triangles"
    },
    {
      "id": "5900f49a1000cf542c50ffac",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler300()</code> should return 8.0540771484375.",
          "testString":
            "assert.strictEqual(euler300(), 8.0540771484375, '<code>euler300()</code> should return 8.0540771484375.');"
        }
      ],
      "description": [
        "In a very simplified form, we can consider proteins as strings consisting of hydrophobic (H) and polar (P) elements, e.g. HHPPHHHPHHPH. ",
        "For this problem, the orientation of a protein is important; e.g. HPP is considered distinct from PPH. Thus, there are 2n distinct proteins consisting of n elements.",
        "",
        "When one encounters these strings in nature, they are always folded in such a way that the number of H-H contact points is as large as possible, since this is energetically advantageous.",
        "As a result, the H-elements tend to accumulate in the inner part, with the P-elements on the outside.",
        "Natural proteins are folded in three dimensions of course, but we will only consider protein folding in two dimensions.",
        "",
        "The figure below shows two possible ways that our example protein could be folded (H-H contact points are shown with red dots).",
        "",
        "",
        "",
        "The folding on the left has only six H-H contact points, thus it would never occur naturally.",
        "On the other hand, the folding on the right has nine H-H contact points, which is optimal for this string.",
        "",
        "Assuming that H and P elements are equally likely to occur in any position along the string, the average number of H-H contact points in an optimal folding of a random protein string of length 8 turns out to be 850 / 28=3.3203125.",
        "",
        "What is the average number of H-H contact points in an optimal folding of a random protein string of length 15?",
        "Give your answer using as many decimal places as necessary for an exact result."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler300() {\n  // Good luck!\n  return true;\n}\n\neuler300();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 300 Protein folding",
      "dashedName": "problem-300-protein-folding"
    },
    {
      "id": "5900f4991000cf542c50ffab",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler301()</code> should return 2178309.",
          "testString":
            "assert.strictEqual(euler301(), 2178309, '<code>euler301()</code> should return 2178309.');"
        }
      ],
      "description": [
        "Nim is a game played with heaps of stones, where two players take it in turn to remove any number of stones from any heap until no stones remain.",
        "",
        "We'll consider the three-heap normal-play version of Nim, which works as follows:",
        "- At the start of the game there are three heaps of stones.",
        "- On his turn the player removes any positive number of stones from any single heap.",
        "- The first player unable to move (because no stones remain) loses.",
        "",
        " If (n1,n2,n3) indicates a Nim position consisting of heaps of size n1, n2 and n3 then there is a simple function X(n1,n2,n3) — that you may look up or attempt to deduce for yourself — that returns:",
        "zero if, with perfect strategy, the player about to move will eventually lose; or",
        "non-zero if, with perfect strategy, the player about to move will eventually win.For example X(1,2,3) = 0 because, no matter what the current player does, his opponent can respond with a move that leaves two heaps of equal size, at which point every move by the current player can be mirrored by his opponent until no stones remain; so the current player loses. To illustrate:",
        "- current player moves to (1,2,1)",
        "- opponent moves to (1,0,1)",
        "- current player moves to (0,0,1)",
        "- opponent moves to (0,0,0), and so wins.",
        "",
        "For how many positive integers n ≤ 230 does X(n,2n,3n) = 0 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler301() {\n  // Good luck!\n  return true;\n}\n\neuler301();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 301 Nim",
      "dashedName": "problem-301-nim"
    },
    {
      "id": "5900f49b1000cf542c50ffad",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler302()</code> should return 1170060.",
          "testString":
            "assert.strictEqual(euler302(), 1170060, '<code>euler302()</code> should return 1170060.');"
        }
      ],
      "description": [
        "A positive integer n is powerful if p2 is a divisor of n for every prime factor p in n.",
        "",
        "",
        "A positive integer n is a perfect power if n can be expressed as a power of another positive integer.",
        "",
        "",
        "A positive integer n is an Achilles number if n is powerful but not a perfect power. For example, 864 and 1800 are Achilles numbers: 864 = 25·33 and 1800 = 23·32·52.",
        "",
        "",
        "We shall call a positive integer S a Strong Achilles number if both S and φ(S) are Achilles numbers.1",
        "For example, 864 is a Strong Achilles number: φ(864) = 288 = 25·32. However, 1800 isn't a Strong Achilles number because: φ(1800) = 480 = 25·31·51.",
        "",
        "There are 7 Strong Achilles numbers below 104 and 656 below 108.",
        "",
        "",
        "How many Strong Achilles numbers are there below 1018?",
        "",
        "",
        "1 φ denotes Euler's totient function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler302() {\n  // Good luck!\n  return true;\n}\n\neuler302();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 302 Strong Achilles Numbers",
      "dashedName": "problem-302-strong-achilles-numbers"
    },
    {
      "id": "5900f49b1000cf542c50ffae",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler303()</code> should return 1111981904675169.",
          "testString":
            "assert.strictEqual(euler303(), 1111981904675169, '<code>euler303()</code> should return 1111981904675169.');"
        }
      ],
      "description": [
        "For a positive integer n, define f(n) as the least positive multiple of n that, written in base 10, uses only digits ≤ 2.",
        "Thus f(2)=2, f(3)=12, f(7)=21, f(42)=210, f(89)=1121222.",
        "Also, .",
        "",
        "Find ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler303() {\n  // Good luck!\n  return true;\n}\n\neuler303();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 303 Multiples with small digits",
      "dashedName": "problem-303-multiples-with-small-digits"
    },
    {
      "id": "5900f49d1000cf542c50ffaf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler304()</code> should return 283988410192.",
          "testString":
            "assert.strictEqual(euler304(), 283988410192, '<code>euler304()</code> should return 283988410192.');"
        }
      ],
      "description": [
        "For any positive integer n the function next_prime(n) returns the smallest prime p  such that p>n.",
        "",
        "",
        "The sequence a(n) is defined by:",
        "a(1)=next_prime(1014) and a(n)=next_prime(a(n-1)) for n>1.",
        "",
        "",
        "The fibonacci sequence f(n) is defined by:",
        "f(0)=0, f(1)=1 and f(n)=f(n-1)+f(n-2) for n>1.",
        "",
        "",
        "The sequence b(n) is defined as f(a(n)).",
        "",
        "",
        "Find ∑b(n) for 1≤n≤100 000. ",
        "Give your answer mod 1234567891011."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler304() {\n  // Good luck!\n  return true;\n}\n\neuler304();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 304 Primonacci",
      "dashedName": "problem-304-primonacci"
    },
    {
      "id": "5900f49d1000cf542c50ffb0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler305()</code> should return 18174995535140.",
          "testString":
            "assert.strictEqual(euler305(), 18174995535140, '<code>euler305()</code> should return 18174995535140.');"
        }
      ],
      "description": [
        "Let's call S the (infinite) string that is made by concatenating the consecutive positive integers (starting from 1)  written down in base 10. ",
        "Thus, S = 1234567891011121314151617181920212223242...",
        "",
        "",
        "It's easy to see that any number will show up an infinite number of times in S.",
        "",
        "",
        "Let's call f(n) the starting position of the nth occurrence of n in S. ",
        "For example, f(1)=1, f(5)=81, f(12)=271 and f(7780)=111111365.",
        "",
        "",
        "Find ∑f(3k) for 1≤k≤13."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler305() {\n  // Good luck!\n  return true;\n}\n\neuler305();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 305 Reflexive Position",
      "dashedName": "problem-305-reflexive-position"
    },
    {
      "id": "5900f49f1000cf542c50ffb1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler306()</code> should return 852938.",
          "testString":
            "assert.strictEqual(euler306(), 852938, '<code>euler306()</code> should return 852938.');"
        }
      ],
      "description": [
        "The following game is a classic example of Combinatorial Game Theory:",
        "",
        "Two players start with a strip of n white squares and they take alternate turns.",
        "On each turn, a player picks two contiguous white squares and paints them black.",
        "The first player who cannot make a move loses.",
        "",
        "If n = 1, there are no valid moves, so the first player loses automatically.",
        "If n = 2, there is only one valid move, after which the second player loses.",
        "If n = 3, there are two valid moves, but both leave a situation where the second player loses.",
        "If n = 4, there are three valid moves for the first player; she can win the game by painting the two middle squares.",
        "If n = 5, there are four valid moves for the first player (shown below in red); but no matter what she does, the second player (blue) wins.",
        "",
        "",
        "",
        "So, for 1 ≤ n ≤ 5, there are 3 values of n for which the first player can force a win.",
        "Similarly, for 1 ≤ n ≤ 50, there are 40 values of n for which the first player can force a win.",
        "",
        "For 1 ≤ n ≤ 1 000 000, how many values of n are there for which the first player can force a win?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler306() {\n  // Good luck!\n  return true;\n}\n\neuler306();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 306 Paperstrip Game",
      "dashedName": "problem-306-paperstrip-game"
    },
    {
      "id": "5900f4a01000cf542c50ffb2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler307()</code> should return 0.7311720251.",
          "testString":
            "assert.strictEqual(euler307(), 0.7311720251, '<code>euler307()</code> should return 0.7311720251.');"
        }
      ],
      "description": [
        "k defects are randomly distributed amongst n integrated-circuit chips produced by a factory (any number of defects may be found on a chip and each defect is independent of the other defects).",
        "",
        "",
        "Let p(k,n) represent the probability that there is a chip with at least 3 defects.",
        "For instance p(3,7) ≈ 0.0204081633.",
        "",
        "",
        "Find p(20 000, 1 000 000) and give your answer rounded to 10 decimal places in the form 0.abcdefghij"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler307() {\n  // Good luck!\n  return true;\n}\n\neuler307();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 307 Chip Defects",
      "dashedName": "problem-307-chip-defects"
    },
    {
      "id": "5900f4a11000cf542c50ffb3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler308()</code> should return 1539669807660924.",
          "testString":
            "assert.strictEqual(euler308(), 1539669807660924, '<code>euler308()</code> should return 1539669807660924.');"
        }
      ],
      "description": [
        "A program written in the programming language Fractran consists of a list of fractions.",
        "",
        "The internal state of the Fractran Virtual Machine is a positive integer, which is initially set to a seed value. Each iteration of a Fractran program multiplies the state integer by the first fraction in the list which will leave it an integer.",
        "",
        "For example, one of the Fractran programs that John Horton Conway wrote for prime-generation consists of the following 14 fractions:1791",
        ",",
        "7885",
        ",",
        "1951",
        ",",
        "2338",
        ",",
        "2933",
        ",",
        "7729",
        ",",
        "9523",
        ",",
        "7719",
        ",",
        "117",
        ",",
        "1113",
        ",",
        "1311",
        ",",
        "152",
        ",",
        "17",
        ",",
        "551",
        ".",
        "Starting with the seed integer 2, successive iterations of the program produce the sequence:",
        "15, 825, 725, 1925, 2275, 425, ..., 68, 4, 30, ..., 136, 8, 60, ..., 544, 32, 240, ...",
        "",
        "The powers of 2 that appear in this sequence are 22, 23, 25, ...",
        "It can be shown that all the powers of 2 in this sequence have prime exponents and that all the primes appear as exponents of powers of 2, in proper order!",
        "",
        "If someone uses the above Fractran program to solve Project Euler Problem 7 (find the 10001st prime), how many iterations would be needed until the program produces 210001st prime ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler308() {\n  // Good luck!\n  return true;\n}\n\neuler308();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 308 An amazing Primegenerating Automaton",
      "dashedName": "problem-308-an-amazing-primegenerating-automaton"
    },
    {
      "id": "5900f4a11000cf542c50ffb4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler309()</code> should return 210139.",
          "testString":
            "assert.strictEqual(euler309(), 210139, '<code>euler309()</code> should return 210139.');"
        }
      ],
      "description": [
        "In the classic \"Crossing Ladders\" problem, we are given the lengths x and y of two ladders resting on the opposite walls of a narrow, level street. We are also given the height h above the street where the two ladders cross and we are asked to find the width of the street (w).",
        "",
        "",
        "",
        "Here, we are only concerned with instances where all four variables are positive integers.",
        "For example, if x = 70, y = 119 and h = 30, we can calculate that w = 56.",
        "",
        "In fact, for integer values x, y, h and 0 < x < y < 200, there are only five triplets (x,y,h) producing integer solutions for w:",
        "(70, 119, 30), (74, 182, 21), (87, 105, 35), (100, 116, 35) and (119, 175, 40).",
        "",
        "For integer values x, y, h and 0 < x < y < 1 000 000, how many triplets (x,y,h) produce integer solutions for w?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler309() {\n  // Good luck!\n  return true;\n}\n\neuler309();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 309 Integer Ladders",
      "dashedName": "problem-309-integer-ladders"
    },
    {
      "id": "5900f4a21000cf542c50ffb5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler310()</code> should return 2586528661783.",
          "testString":
            "assert.strictEqual(euler310(), 2586528661783, '<code>euler310()</code> should return 2586528661783.');"
        }
      ],
      "description": [
        "Alice and Bob play the game Nim Square.",
        "Nim Square is just like ordinary three-heap normal play Nim, but the players may only remove a square number of stones from a heap.",
        "The number of stones in the three heaps is represented by the ordered triple (a,b,c).",
        "If 0≤a≤b≤c≤29 then the number of losing positions for the next player is 1160.",
        "",
        "",
        "Find the number of losing positions for the next player if 0≤a≤b≤c≤100 000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler310() {\n  // Good luck!\n  return true;\n}\n\neuler310();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 310 Nim Square",
      "dashedName": "problem-310-nim-square"
    },
    {
      "id": "5900f4a31000cf542c50ffb6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler311()</code> should return 2466018557.",
          "testString":
            "assert.strictEqual(euler311(), 2466018557, '<code>euler311()</code> should return 2466018557.');"
        }
      ],
      "description": [
        "ABCD is a convex, integer sided quadrilateral with 1 ≤ AB < BC < CD < AD.",
        "BD has integer length. O is the midpoint of BD. AO has integer length.",
        "We'll call ABCD a biclinic integral quadrilateral if AO = CO ≤ BO = DO.",
        "",
        "For example, the following quadrilateral is a biclinic integral quadrilateral:",
        "AB = 19, BC = 29, CD = 37, AD = 43, BD = 48 and AO = CO = 23.",
        "",
        "",
        "",
        "",
        "Let B(N) be the number of distinct biclinic integral quadrilaterals ABCD that satisfy AB2+BC2+CD2+AD2 ≤ N.",
        "We can verify that B(10 000) = 49 and B(1 000 000) = 38239.",
        "",
        "",
        "Find B(10 000 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler311() {\n  // Good luck!\n  return true;\n}\n\neuler311();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 311 Biclinic Integral Quadrilaterals",
      "dashedName": "problem-311-biclinic-integral-quadrilaterals"
    },
    {
      "id": "5900f4a51000cf542c50ffb7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler312()</code> should return 324681947.",
          "testString":
            "assert.strictEqual(euler312(), 324681947, '<code>euler312()</code> should return 324681947.');"
        }
      ],
      "description": [
        "- A Sierpiński graph of order-1 (S1) is an equilateral triangle.",
        "- Sn+1 is obtained from Sn by positioning three copies of Sn so that every pair of copies has one common corner.",
        "",
        "",
        "",
        "",
        "Let C(n) be the number of cycles that pass exactly once through all the vertices of Sn.",
        "For example, C(3) = 8 because eight such cycles can be drawn on S3, as shown below:",
        "",
        "",
        "",
        "",
        "It can also be verified that :",
        "C(1) = C(2) = 1",
        "C(5) = 71328803586048",
        "C(10 000) mod 108 = 37652224",
        "C(10 000) mod 138 = 617720485",
        "",
        "Find C(C(C(10 000))) mod 138."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler312() {\n  // Good luck!\n  return true;\n}\n\neuler312();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 312 Cyclic paths on Sierpiski graphs",
      "dashedName": "problem-312-cyclic-paths-on-sierpiski-graphs"
    },
    {
      "id": "5900f4a61000cf542c50ffb8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler313()</code> should return 2057774861813004.",
          "testString":
            "assert.strictEqual(euler313(), 2057774861813004, '<code>euler313()</code> should return 2057774861813004.');"
        }
      ],
      "description": [
        "In a sliding game a counter may slide horizontally or vertically into an empty space. The objective of the game is to move the red counter from the top left corner of a grid to the bottom right corner; the space always starts in the bottom right corner. For example, the following sequence of pictures show how the game can be completed in five moves on a 2 by 2 grid.",
        "",
        "",
        "",
        "Let S(m,n) represent the minimum number of moves to complete the game on an m by n grid. For example, it can be verified that S(5,4) = 25.",
        "",
        "",
        "",
        "There are exactly 5482 grids for which S(m,n) = p2, where p < 100 is prime.",
        "",
        "How many grids does S(m,n) = p2, where p < 106 is prime?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler313() {\n  // Good luck!\n  return true;\n}\n\neuler313();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 313 Sliding game",
      "dashedName": "problem-313-sliding-game"
    },
    {
      "id": "5900f4a71000cf542c50ffb9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler314()</code> should return 132.52756426.",
          "testString":
            "assert.strictEqual(euler314(), 132.52756426, '<code>euler314()</code> should return 132.52756426.');"
        }
      ],
      "description": [
        "The moon has been opened up, and land can be obtained for free, but there is a catch. You have to build a wall around the land that you stake out, and building a wall on the moon is expensive. Every country has been allotted a 500 m by 500 m square area, but they will possess only that area which they wall in. 251001 posts have been placed in a rectangular grid with 1 meter spacing. The wall must be a closed series of straight lines, each line running from post to post.",
        "",
        "",
        "The bigger countries of course have built a 2000 m wall enclosing the entire 250 000 m2 area. The Duchy of Grand Fenwick, has a tighter budget, and has asked you (their Royal Programmer) to compute what shape would get best maximum enclosed-area/wall-length ratio.",
        "",
        "",
        "You have done some preliminary calculations on a sheet of paper.",
        "For a 2000 meter wall enclosing the 250 000 m2 area the",
        "enclosed-area/wall-length ratio is 125.",
        "Although not allowed , but to get an idea if this is anything better:  if you place a circle inside the square area touching the four sides the area will be equal to π*2502 m2 and the perimeter will be π*500 m, so the enclosed-area/wall-length ratio will also be 125.",
        "",
        "",
        "However, if you cut off from the square four triangles with sides 75 m, 75 m and 75√2 m the total area becomes 238750 m2 and the perimeter becomes 1400+300√2 m. So this gives an enclosed-area/wall-length ratio of 130.87, which is significantly better.",
        "",
        "",
        "",
        "Find the maximum enclosed-area/wall-length ratio.",
        "Give your answer rounded to 8 places behind the decimal point in the form abc.defghijk."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler314() {\n  // Good luck!\n  return true;\n}\n\neuler314();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 314 The Mouse on the Moon",
      "dashedName": "problem-314-the-mouse-on-the-moon"
    },
    {
      "id": "5900f4a71000cf542c50ffba",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler315()</code> should return 13625242.",
          "testString":
            "assert.strictEqual(euler315(), 13625242, '<code>euler315()</code> should return 13625242.');"
        }
      ],
      "description": [
        "Sam and Max are asked to transform two digital clocks into two \"digital root\" clocks.",
        "A digital root clock is a digital clock that calculates digital roots step by step.",
        "",
        "When a clock is fed a number, it will show it and then it will start the calculation, showing all the intermediate values until it gets to the result.",
        "For example, if the clock is fed the number 137, it will show: \"137\" → \"11\" → \"2\" and then it will go black, waiting for the next number.",
        "",
        "Every digital number consists of some light segments: three horizontal (top, middle, bottom) and four vertical (top-left, top-right, bottom-left, bottom-right).",
        "Number \"1\" is made of vertical top-right and bottom-right, number \"4\" is made by middle horizontal and vertical top-left, top-right and bottom-right. Number \"8\" lights them all.",
        "",
        "The clocks consume energy only when segments are turned on/off.",
        "To turn on a \"2\" will cost 5 transitions, while a \"7\" will cost only 4 transitions.",
        "",
        "Sam and Max built two different clocks.",
        "",
        "Sam's clock is fed e.g. number 137: the clock shows \"137\", then the panel is turned off, then the next number (\"11\") is turned on, then the panel is turned off again and finally the last number (\"2\") is turned on and, after some time, off.",
        "For the example, with number 137, Sam's clock requires:\"137\"",
        ":",
        "(2 + 5 + 4) × 2 = 22 transitions (\"137\" on/off).",
        "\"11\"",
        ":",
        "(2 + 2) × 2 = 8 transitions (\"11\" on/off).",
        "\"2\"",
        ":",
        "(5) × 2 = 10 transitions (\"2\" on/off).",
        "",
        "For a grand total of 40 transitions.",
        "",
        "Max's clock works differently. Instead of turning off the whole panel, it is smart enough to turn off only those segments that won't be needed for the next number.",
        "For number 137, Max's clock requires:\"137\"",
        ":",
        "2 + 5 + 4 = 11 transitions (\"137\" on)",
        "7 transitions (to turn off the segments that are not needed for number \"11\").",
        "\"11\"",
        ":",
        "0 transitions (number \"11\" is already turned on correctly)",
        "3 transitions (to turn off the first \"1\" and the bottom part of the second \"1\"; ",
        "the top part is common with number \"2\").",
        "\"2\"",
        ":",
        "4 transitions (to turn on the remaining segments in order to get a \"2\")",
        "5 transitions (to turn off number \"2\").",
        "",
        "For a grand total of 30 transitions.",
        "",
        "Of course, Max's clock consumes less power than Sam's one.",
        "The two clocks are fed all the prime numbers between A = 107 and B = 2×107. ",
        "Find the difference between the total number of transitions needed by Sam's clock and that needed by Max's one."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler315() {\n  // Good luck!\n  return true;\n}\n\neuler315();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 315 Digital root clocks",
      "dashedName": "problem-315-digital-root-clocks"
    },
    {
      "id": "5900f4a81000cf542c50ffbb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler316()</code> should return 542934735751917760.",
          "testString":
            "assert.strictEqual(euler316(), 542934735751917760, '<code>euler316()</code> should return 542934735751917760.');"
        }
      ],
      "description": [
        "Let p = p1 p2 p3 ... be an infinite sequence of random digits, selected from {0,1,2,3,4,5,6,7,8,9} with equal probability.",
        "It can be seen that p corresponds to the real number 0.p1 p2 p3 .... ",
        "It can also be seen that choosing a random real number from the interval [0,1) is equivalent to choosing an infinite sequence of random digits selected from {0,1,2,3,4,5,6,7,8,9} with equal probability.",
        "",
        "For any positive integer n with d decimal digits, let k be the smallest index such that pk, pk+1, ...pk+d-1 are the decimal digits of n, in the same order.",
        "Also, let g(n) be the expected value of k; it can be proven that g(n) is always finite and, interestingly, always an integer number.",
        "",
        "For example, if n = 535, then",
        "for p = 31415926535897...., we get k = 9",
        "for p = 355287143650049560000490848764084685354..., we get k = 36",
        "etc and we find that g(535) = 1008.",
        "",
        "Given that , find ",
        "",
        "Note:  represents the floor function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler316() {\n  // Good luck!\n  return true;\n}\n\neuler316();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 316 Numbers in decimal expansions",
      "dashedName": "problem-316-numbers-in-decimal-expansions"
    },
    {
      "id": "5900f4aa1000cf542c50ffbc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler317()</code> should return 1856532.8455.",
          "testString":
            "assert.strictEqual(euler317(), 1856532.8455, '<code>euler317()</code> should return 1856532.8455.');"
        }
      ],
      "description": [
        "A firecracker explodes at a height of 100 m above level ground. It breaks into a large number of very small fragments, which move in every direction; all of them have the same initial velocity of 20 m/s.",
        "",
        "",
        "We assume that the fragments move without air resistance, in a uniform gravitational field with g=9.81 m/s2.",
        "",
        "",
        "Find the volume (in m3) of the region through which the fragments move before reaching the ground. ",
        "Give your answer rounded to four decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler317() {\n  // Good luck!\n  return true;\n}\n\neuler317();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 317 Firecracker",
      "dashedName": "problem-317-firecracker"
    },
    {
      "id": "5900f4ab1000cf542c50ffbd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler318()</code> should return 709313889.",
          "testString":
            "assert.strictEqual(euler318(), 709313889, '<code>euler318()</code> should return 709313889.');"
        }
      ],
      "description": [
        "Consider the real number √2+√3.",
        "When we calculate the even powers of √2+√3",
        "we get:",
        "(√2+√3)2 = 9.898979485566356...",
        "(√2+√3)4 = 97.98979485566356...",
        "(√2+√3)6 = 969.998969071069263...",
        "(√2+√3)8 = 9601.99989585502907...",
        "(√2+√3)10 = 95049.999989479221...",
        "(√2+√3)12 = 940897.9999989371855...",
        "(√2+√3)14 = 9313929.99999989263...",
        "(√2+√3)16 = 92198401.99999998915...",
        "",
        "It looks like that the number of consecutive nines at the beginning of the fractional part of these powers is non-decreasing.",
        "In fact it can be proven that the fractional part of (√2+√3)2n approaches 1 for large n.",
        "",
        "",
        "Consider all real numbers of the form √p+√q with p and q positive integers and p<q, such that the fractional part ",
        "of (√p+√q)2n approaches 1 for large n.",
        "",
        "",
        "Let C(p,q,n) be the number of consecutive nines at the beginning of the fractional part of  (√p+√q)2n.",
        "",
        "",
        "Let N(p,q) be the minimal value of n such that C(p,q,n) ≥ 2011.",
        "",
        "",
        "Find ∑N(p,q) for p+q ≤ 2011."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler318() {\n  // Good luck!\n  return true;\n}\n\neuler318();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 318 2011 nines",
      "dashedName": "problem-318-2011-nines"
    },
    {
      "id": "5900f4ab1000cf542c50ffbe",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler319()</code> should return 268457129.",
          "testString":
            "assert.strictEqual(euler319(), 268457129, '<code>euler319()</code> should return 268457129.');"
        }
      ],
      "description": [
        "Let x1, x2,..., xn be a sequence of length n such that:",
        "x1 = 2",
        "for all 1 < i ≤ n : xi-1 < xi",
        "for all i and j with 1 ≤ i, j ≤ n : (xi) j < (xj + 1)i",
        "",
        "There are only five such sequences of length 2, namely:",
        "{2,4}, {2,5}, {2,6}, {2,7} and {2,8}.",
        "There are 293 such sequences of length 5; three examples are given below:",
        "{2,5,11,25,55}, {2,6,14,36,88}, {2,8,22,64,181}.",
        "",
        "",
        "Let t(n) denote the number of such sequences of length n.",
        "You are given that t(10) = 86195 and t(20) = 5227991891.",
        "",
        "",
        "Find t(1010) and give your answer modulo 109."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler319() {\n  // Good luck!\n  return true;\n}\n\neuler319();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 319 Bounded Sequences",
      "dashedName": "problem-319-bounded-sequences"
    },
    {
      "id": "5900f4ae1000cf542c50ffbf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler320()</code> should return 278157919195482660.",
          "testString":
            "assert.strictEqual(euler320(), 278157919195482660, '<code>euler320()</code> should return 278157919195482660.');"
        }
      ],
      "description": [
        "Let N(i) be the smallest integer n such that n! is divisible by (i!)1234567890",
        "",
        "Let S(u)=∑N(i) for 10 ≤ i ≤ u.",
        "",
        "",
        "S(1000)=614538266565663.",
        "",
        "",
        "Find S(1 000 000) mod 1018."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler320() {\n  // Good luck!\n  return true;\n}\n\neuler320();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 320 Factorials divisible by a huge integer",
      "dashedName": "problem-320-factorials-divisible-by-a-huge-integer"
    },
    {
      "id": "5900f4ae1000cf542c50ffc0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler321()</code> should return 2470433131948040.",
          "testString":
            "assert.strictEqual(euler321(), 2470433131948040, '<code>euler321()</code> should return 2470433131948040.');"
        }
      ],
      "description": [
        "A horizontal row comprising of 2n + 1 squares has n red counters placed at one end and n blue counters at the other end, being separated by a single empty square in the centre. For example, when n = 3.",
        "",
        "",
        "",
        "A counter can move from one square to the next (slide) or can jump over another counter (hop) as long as the square next to that counter is unoccupied.",
        "",
        "",
        "",
        "Let M(n) represent the minimum number of moves/actions to completely reverse the positions of the coloured counters; that is, move all the red counters to the right and all the blue counters to the left.",
        "It can be verified M(3) = 15, which also happens to be a triangle number.",
        "",
        "If we create a sequence based on the values of n for which M(n) is a triangle number then the first five terms would be:",
        "1, 3, 10, 22, and 63, and their sum would be 99.",
        "",
        "Find the sum of the first forty terms of this sequence."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler321() {\n  // Good luck!\n  return true;\n}\n\neuler321();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 321 Swapping Counters",
      "dashedName": "problem-321-swapping-counters"
    },
    {
      "id": "5900f4af1000cf542c50ffc1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler322()</code> should return 999998760323314000.",
          "testString":
            "assert.strictEqual(euler322(), 999998760323314000, '<code>euler322()</code> should return 999998760323314000.');"
        }
      ],
      "description": [
        "Let T(m, n) be the number of the binomial coefficients iCn that are divisible by 10 for n ≤ i < m(i, m and n are positive integers).",
        "You are given that T(109, 107-10) = 989697000.",
        "",
        "",
        "Find T(1018, 1012-10)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler322() {\n  // Good luck!\n  return true;\n}\n\neuler322();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 322 Binomial coefficients divisible by 10",
      "dashedName": "problem-322-binomial-coefficients-divisible-by-10"
    },
    {
      "id": "5900f4b01000cf542c50ffc2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler323()</code> should return 6.3551758451.",
          "testString":
            "assert.strictEqual(euler323(), 6.3551758451, '<code>euler323()</code> should return 6.3551758451.');"
        }
      ],
      "description": [
        "Let y0, y1, y2,... be a sequence of random unsigned 32 bit integers",
        "(i.e. 0 ≤ yi < 232, every value equally likely).",
        "For the sequence xi the following recursion is given:x0 = 0 and",
        "xi = xi-1| yi-1, for i > 0. ( | is the bitwise-OR operator)",
        "It can be seen that eventually there will be an index N such that xi = 232 -1 (a bit-pattern of all ones) for all i ≥ N.",
        "",
        "Find the expected value of N. ",
        "Give your answer rounded to 10 digits after the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler323() {\n  // Good luck!\n  return true;\n}\n\neuler323();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 323 BitwiseOR operations on random integers",
      "dashedName": "problem-323-bitwiseor-operations-on-random-integers"
    },
    {
      "id": "5900f4b11000cf542c50ffc3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler324()</code> should return 96972774.",
          "testString":
            "assert.strictEqual(euler324(), 96972774, '<code>euler324()</code> should return 96972774.');"
        }
      ],
      "description": [
        "Let f(n) represent the number of ways one can fill a 3×3×n tower with blocks of 2×1×1. You're allowed to rotate the blocks in any way you like; however, rotations, reflections etc of the tower itself are counted as distinct.",
        "For example (with q = 100000007) :f(2) = 229,f(4) = 117805,f(10) mod q = 96149360,f(103) mod q = 24806056,f(106) mod q = 30808124.",
        "",
        "Find f(1010000) mod 100000007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler324() {\n  // Good luck!\n  return true;\n}\n\neuler324();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 324 Building a tower",
      "dashedName": "problem-324-building-a-tower"
    },
    {
      "id": "5900f4b11000cf542c50ffc4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler325()</code> should return 54672965.",
          "testString":
            "assert.strictEqual(euler325(), 54672965, '<code>euler325()</code> should return 54672965.');"
        }
      ],
      "description": [
        "A game is played with two piles of stones and two players. At her turn, a player removes a number of stones from the larger pile. The number of stones she removes must be a positive multiple of the number of stones in the smaller pile.",
        "",
        "",
        "",
        "E.g., let the ordered pair(6,14) describe a configuration with 6 stones in the smaller pile and 14 stones in the larger pile, then the first player can remove 6 or 12 stones from the larger pile.",
        "",
        "",
        "",
        "The player taking all the stones from a pile wins the game.",
        "",
        "",
        "",
        "A winning configuration is one where the first player can force a win. For example, (1,5), (2,6) and (3,12) are winning configurations because the first player can immediately remove all stones in the second pile.",
        "",
        "",
        "",
        "A losing configuration is one where the second player can force a win, no matter what the first player does. For example, (2,3) and (3,4) are losing configurations: any legal move leaves a winning configuration for the second player.",
        "",
        "",
        "",
        "Define S(N) as the sum of (xi+yi) for all losing configurations (xi,yi), 0 < xi < yi ≤ N. We can verify that S(10) = 211 and S(104) = 230312207313.",
        "",
        "",
        "",
        "Find S(1016) mod 710."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler325() {\n  // Good luck!\n  return true;\n}\n\neuler325();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 325 Stone Game II",
      "dashedName": "problem-325-stone-game-ii"
    },
    {
      "id": "5900f4b21000cf542c50ffc5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler326()</code> should return 1966666166408794400.",
          "testString":
            "assert.strictEqual(euler326(), 1966666166408794400, '<code>euler326()</code> should return 1966666166408794400.');"
        }
      ],
      "description": [
        "Let an be a sequence recursively defined by: . ",
        "",
        "",
        "So the first 10 elements of an are: 1,1,0,3,0,3,5,4,1,9.",
        "",
        "Let f(N,M) represent the number of pairs (p,q) such that: ",
        "",
        "",
        "It can be seen that f(10,10)=4 with the pairs (3,3), (5,5), (7,9) and (9,10).",
        "",
        "",
        "You are also given that f(104,103)=97158.",
        "",
        "Find f(1012,106)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler326() {\n  // Good luck!\n  return true;\n}\n\neuler326();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 326 Modulo Summations",
      "dashedName": "problem-326-modulo-summations"
    },
    {
      "id": "5900f4b31000cf542c50ffc6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler327()</code> should return 34315549139516.",
          "testString":
            "assert.strictEqual(euler327(), 34315549139516, '<code>euler327()</code> should return 34315549139516.');"
        }
      ],
      "description": [
        "A series of three rooms are connected to each other by automatic doors.",
        "",
        "",
        "",
        "Each door is operated by a security card. Once you enter a room the door automatically closes and that security card cannot be used again. A machine at the start will dispense an unlimited number of cards, but each room (including the starting room) contains scanners and if they detect that you are holding more than three security cards or if they detect an unattended security card on the floor, then all the doors will become permanently locked. However, each room contains a box where you may safely store any number of security cards for use at a later stage.",
        "",
        "If you simply tried to travel through the rooms one at a time then as you entered room 3 you would have used all three cards and would be trapped in that room forever!",
        "",
        "However, if you make use of the storage boxes, then escape is possible. For example, you could enter room 1 using your first card, place one card in the storage box, and use your third card to exit the room back to the start. Then after collecting three more cards from the dispensing machine you could use one to enter room 1 and collect the card you placed in the box a moment ago. You now have three cards again and will be able to travel through the remaining three doors. This method allows you to travel through all three rooms using six security cards in total.",
        "",
        "It is possible to travel through six rooms using a total of 123 security cards while carrying a maximum of 3 cards.",
        "",
        "Let C be the maximum number of cards which can be carried at any time.",
        "Let R be the number of rooms to travel through.",
        "Let M(C,R) be the minimum number of cards required from the dispensing machine to travel through R rooms carrying up to a maximum of C cards at any time.",
        "",
        "For example, M(3,6)=123 and M(4,6)=23.And, ΣM(C,6)=146 for 3 ≤ C ≤ 4.",
        "",
        "",
        "You are given that ΣM(C,10)=10382 for 3 ≤ C ≤ 10.",
        "",
        "Find ΣM(C,30) for 3 ≤ C ≤ 40."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler327() {\n  // Good luck!\n  return true;\n}\n\neuler327();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 327 Rooms of Doom",
      "dashedName": "problem-327-rooms-of-doom"
    },
    {
      "id": "5900f4b41000cf542c50ffc7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler328()</code> should return 260511850222.",
          "testString":
            "assert.strictEqual(euler328(), 260511850222, '<code>euler328()</code> should return 260511850222.');"
        }
      ],
      "description": [
        "We are trying to find a hidden number selected from the set of integers {1, 2, ..., n} by asking questions. ",
        "Each number (question) we ask, has a cost equal to the number asked and we get one of three possible answers: \"Your guess is lower than the hidden number\", or",
        " \"Yes, that's it!\", or",
        " \"Your guess is higher than the hidden number\".",
        "Given the value of n, an optimal strategy minimizes the total cost (i.e. the sum of all the questions asked) for the worst possible case. E.g.",
        "",
        "If n=3, the best we can do is obviously to ask the number \"2\". The answer will immediately lead us to find the hidden number (at a total cost = 2).",
        "",
        "If n=8, we might decide to use a \"binary search\" type of strategy: Our first question would be \"4\" and if the hidden number is higher than 4 we will need one or two additional questions.",
        "Let our second question be \"6\". If the hidden number is still higher than 6, we will need a third question in order to discriminate between 7 and 8.",
        "Thus, our third question will be \"7\" and the total cost for this worst-case scenario will be 4+6+7=17.",
        "",
        "We can improve considerably the worst-case cost for n=8, by asking \"5\" as our first question.",
        "If we are told that the hidden number is higher than 5, our second question will be \"7\", then we'll know for certain what the hidden number is (for a total cost of 5+7=12).",
        "If we are told that the hidden number is lower than 5, our second question will be \"3\" and if the hidden number is lower than 3 our third question will be \"1\", giving a total cost of 5+3+1=9.",
        "Since 12>9, the worst-case cost for this strategy is 12. That's better than what we achieved previously with the \"binary search\" strategy; it is also better than or equal to any other strategy.",
        "So, in fact, we have just described an optimal strategy for n=8.",
        "",
        "Let C(n) be the worst-case cost achieved by an optimal strategy for n, as described above.",
        "Thus C(1) = 0, C(2) = 1, C(3) = 2 and C(8) = 12.",
        "Similarly, C(100) = 400 and C(n) = 17575.",
        "",
        "Find C(n)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler328() {\n  // Good luck!\n  return true;\n}\n\neuler328();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 328 Lowestcost Search",
      "dashedName": "problem-328-lowestcost-search"
    },
    {
      "id": "5900f4b51000cf542c50ffc8",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>euler329()</code> should return 199740353 / 29386561536000.",
          "testString":
            "assert.strictEqual(euler329(), 199740353 / 29386561536000, '<code>euler329()</code> should return 199740353 / 29386561536000.');"
        }
      ],
      "description": [
        "Susan has a prime frog.",
        "Her frog is jumping around over 500 squares numbered 1 to 500.",
        "He can only jump one square to the left or to the right, with equal probability, and he cannot jump outside the range [1;500].(if it lands at either end, it automatically jumps to the only available square on the next move.)",
        "",
        "",
        "When he is on a square with a prime number on it, he croaks 'P' (PRIME) with probability 2/3 or 'N' (NOT PRIME) with probability 1/3 just before jumping to the next square.",
        "When he is on a square with a number on it that is not a prime he croaks 'P' with probability 1/3 or 'N' with probability 2/3 just before jumping to the next square.",
        "",
        "",
        "Given that the frog's starting position is random with the same probability for every square, and given that she listens to his first 15 croaks, what is the probability that she hears the sequence PPPPNNPPPNPPNPN?",
        "",
        "Give your answer as a fraction p/q in reduced form."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler329() {\n  // Good luck!\n  return true;\n}\n\neuler329();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 329 Prime Frog",
      "dashedName": "problem-329-prime-frog"
    },
    {
      "id": "5900f4b71000cf542c50ffc9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler330()</code> should return 15955822.",
          "testString":
            "assert.strictEqual(euler330(), 15955822, '<code>euler330()</code> should return 15955822.');"
        }
      ],
      "description": [
        "An infinite sequence of real numbers a(n) is defined for all integers n as follows:",
        "",
        "",
        "For example,a(0) = ",
        "    11!",
        "    +",
        "    12!",
        "    +",
        "    13!",
        "    + ... = e − 1 ",
        "a(1) = ",
        "    e − 11!",
        "    +",
        "    12!",
        "    +",
        "    13!",
        "    + ... = 2e − 3 ",
        "a(2) = ",
        "    2e − 31!",
        "    +",
        "    e − 12!",
        "    +",
        "    13!",
        "    + ... =",
        "    72",
        "    e − 6 ",
        "",
        "with e = 2.7182818... being Euler's constant.",
        "",
        "",
        "It can be shown that a(n) is of the form ",
        "",
        "    A(n) e + B(n)n!",
        "    for integers A(n) and B(n). ",
        "",
        "For example a(10) = ",
        "",
        "    328161643 e − 65269448610!",
        "    .",
        "",
        "Find A(109) + B(109) and give your answer mod 77 777 777."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler330() {\n  // Good luck!\n  return true;\n}\n\neuler330();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 330 Eulers Number",
      "dashedName": "problem-330-eulers-number"
    },
    {
      "id": "5900f4b71000cf542c50ffca",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler331()</code> should return 467178235146843500.",
          "testString":
            "assert.strictEqual(euler331(), 467178235146843500, '<code>euler331()</code> should return 467178235146843500.');"
        }
      ],
      "description": [
        "N×N disks are placed on a square game board. Each disk has a black side and white side.",
        "",
        "At each turn, you may choose a disk and flip all the disks in the same row and the same column as this disk: thus 2×N-1 disks are flipped. The game ends when all disks show their white side. The following example shows a game on a 5×5 board.",
        "",
        "",
        "",
        "It can be proven that 3 is the minimal number of turns to finish this game.",
        "",
        "The bottom left disk on the N×N board has coordinates (0,0);",
        "the bottom right disk has coordinates (N-1,0) and the top left disk has coordinates (0,N-1). ",
        "",
        "Let CN be the following configuration of a board with N×N disks:",
        "A disk at (x,y) satisfying , shows its black side; otherwise, it shows its white side. C5 is shown above.",
        "",
        "Let T(N) be the minimal number of turns to finish a game starting from configuration CN or 0 if configuration CN is unsolvable.",
        "We have shown that T(5)=3. You are also given that T(10)=29 and T(1 000)=395253.",
        "",
        "Find ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler331() {\n  // Good luck!\n  return true;\n}\n\neuler331();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 331 Cross flips",
      "dashedName": "problem-331-cross-flips"
    },
    {
      "id": "5900f4b91000cf542c50ffcb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler332()</code> should return 2717.751525.",
          "testString":
            "assert.strictEqual(euler332(), 2717.751525, '<code>euler332()</code> should return 2717.751525.');"
        }
      ],
      "description": [
        "A spherical triangle is a figure formed on the surface of a sphere by three great circular arcs intersecting pairwise in three vertices.",
        "",
        "",
        "",
        "",
        "Let C(r) be the sphere with the centre (0,0,0) and radius r.",
        "Let Z(r) be the set of points on the surface of C(r) with integer coordinates.",
        "Let T(r) be the set of spherical triangles with vertices in Z(r).",
        "Degenerate spherical triangles, formed by three points on the same great arc, are not included in T(r).",
        "Let A(r) be the area of the smallest spherical triangle in T(r).",
        "",
        "For example A(14) is 3.294040 rounded to six decimal places.",
        "",
        "Find  A(r). Give your answer rounded to six decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler332() {\n  // Good luck!\n  return true;\n}\n\neuler332();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 332 Spherical triangles",
      "dashedName": "problem-332-spherical-triangles"
    },
    {
      "id": "5900f4b91000cf542c50ffcc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler333()</code> should return 3053105.",
          "testString":
            "assert.strictEqual(euler333(), 3053105, '<code>euler333()</code> should return 3053105.');"
        }
      ],
      "description": [
        "All positive integers can be partitioned in such a way that each and every term of the partition can be expressed as 2ix3j, where i,j ≥ 0.",
        "",
        "Let's consider only those such partitions where none of the terms can divide any of the other terms.",
        "For example, the partition of 17 = 2 + 6 + 9 = (21x30 + 21x31 + 20x32) would not be valid since 2 can divide 6. Neither would the partition 17 = 16 + 1 = (24x30 + 20x30) since 1 can divide 16. The only valid partition of 17 would be 8 + 9 = (23x30 + 20x32).",
        "",
        "Many integers have more than one valid partition, the first being 11 having the following two partitions.",
        "11 = 2 + 9 = (21x30 + 20x32)",
        "11 = 8 + 3 = (23x30 + 20x31)",
        "",
        "Let's define P(n) as the number of valid partitions of n. For example, P(11) = 2.",
        "",
        "Let's consider only the prime integers q which would have a single valid partition such as P(17).",
        "",
        "The sum of the primes q <100 such that P(q)=1 equals 233.",
        "",
        "Find the sum of the primes q <1000000 such that P(q)=1."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler333() {\n  // Good luck!\n  return true;\n}\n\neuler333();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 333 Special partitions",
      "dashedName": "problem-333-special-partitions"
    },
    {
      "id": "5900f4ba1000cf542c50ffcd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler334()</code> should return 150320021261690850.",
          "testString":
            "assert.strictEqual(euler334(), 150320021261690850, '<code>euler334()</code> should return 150320021261690850.');"
        }
      ],
      "description": [
        "In Plato's heaven, there exist an infinite number of bowls in a straight line.",
        "Each bowl either contains some or none of a finite number of beans.",
        "A child plays a game, which allows only one kind of move: removing two beans from any bowl, and putting one in each of the two adjacent bowls. The game ends when each bowl contains either one or no beans.",
        "",
        "For example, consider two adjacent bowls containing 2 and 3 beans respectively, all other bowls being empty. The following eight moves will finish the game:",
        "",
        "",
        "",
        "You are given the following sequences:",
        "      t0 = 123456.",
        "",
        "",
        "      ti = ",
        "",
        "",
        "",
        "",
        "",
        "         ti-12",
        "",
        "         ,",
        "",
        "",
        "",
        "         if ti-1 is even",
        "",
        "",
        "",
        "         ti-12",
        "",
        "",
        "",
        "         926252, ",
        "",
        "",
        "         if ti-1 is odd",
        "",
        "",
        "",
        "",
        "",
        "      where ⌊x⌋ is the floor function",
        "",
        "",
        "",
        "",
        "      and  is the bitwise XOR operator.",
        "",
        "",
        "      bi = ( ti mod 211) + 1.",
        "",
        "The first two terms of the last sequence are b1 = 289 and b2 = 145.",
        "If we start with b1 and b2 beans in two adjacent bowls, 3419100 moves would be required to finish the game.",
        "",
        "Consider now 1500 adjacent bowls containing b1, b2,..., b1500 beans respectively, all other bowls being empty. Find how many moves it takes before the game ends."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler334() {\n  // Good luck!\n  return true;\n}\n\neuler334();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 334 Spilling the beans",
      "dashedName": "problem-334-spilling-the-beans"
    },
    {
      "id": "5900f4bd1000cf542c50ffce",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler335()</code> should return 5032316.",
          "testString":
            "assert.strictEqual(euler335(), 5032316, '<code>euler335()</code> should return 5032316.');"
        }
      ],
      "description": [
        "Whenever Peter feels bored, he places some bowls, containing one bean each, in a circle. After this, he takes all the beans out of a certain bowl and drops them one by one in the bowls going clockwise. He repeats this, starting from the bowl he dropped the last bean in, until the initial situation appears again. For example with 5 bowls he acts as follows:",
        "",
        "",
        "",
        "So with 5 bowls it takes Peter 15 moves to return to the initial situation.",
        "",
        "Let M(x) represent the number of moves required to return to the initial situation, starting with x bowls. Thus, M(5) = 15. It can also be verified that M(100) = 10920.",
        "",
        "Find M(2k+1). Give your answer modulo 79."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler335() {\n  // Good luck!\n  return true;\n}\n\neuler335();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 335 Gathering the beans",
      "dashedName": "problem-335-gathering-the-beans"
    },
    {
      "id": "5900f4bd1000cf542c50ffcf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler336()</code> should return CAGBIHEFJDK.",
          "testString":
            "assert.strictEqual(euler336(), CAGBIHEFJDK, '<code>euler336()</code> should return CAGBIHEFJDK.');"
        }
      ],
      "description": [
        "A train is used to transport four carriages in the order: ABCD. However, sometimes when the train arrives to collect the carriages they are not in the correct order. ",
        "To rearrange the carriages they are all shunted on to a large rotating turntable. After the carriages are uncoupled at a specific point the train moves off the turntable pulling the carriages still attached with it. The remaining carriages are rotated 180 degrees. All of the carriages are then rejoined and this process is repeated as often as necessary in order to obtain the least number of uses of the turntable.",
        "Some arrangements, such as ADCB, can be solved easily: the carriages are separated between A and D, and after DCB are rotated the correct order has been achieved.",
        "",
        "However, Simple Simon, the train driver, is not known for his efficiency, so he always solves the problem by initially getting carriage A in the correct place, then carriage B, and so on.",
        "",
        "Using four carriages, the worst possible arrangements for Simon, which we shall call maximix arrangements, are DACB and DBAC; each requiring him five rotations (although, using the most efficient approach, they could be solved using just three rotations). The process he uses for DACB is shown below.",
        "",
        "",
        "",
        "",
        "It can be verified that there are 24 maximix arrangements for six carriages, of which the tenth lexicographic maximix arrangement is DFAECB.",
        "",
        "Find the 2011th lexicographic maximix arrangement for eleven carriages."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler336() {\n  // Good luck!\n  return true;\n}\n\neuler336();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 336 Maximix Arrangements",
      "dashedName": "problem-336-maximix-arrangements"
    },
    {
      "id": "5900f4be1000cf542c50ffd0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler337()</code> should return 85068035.",
          "testString":
            "assert.strictEqual(euler337(), 85068035, '<code>euler337()</code> should return 85068035.');"
        }
      ],
      "description": [
        "Let {a1, a2,..., an} be an integer sequence of length n such that:",
        "a1 = 6",
        "for all 1 ≤ i < n : φ(ai) < φ(ai+1) < ai < ai+11",
        "Let S(N) be the number of such sequences with an ≤ N.",
        "For example, S(10) = 4: {6}, {6, 8}, {6, 8, 9} and {6, 10}.",
        "We can verify that S(100) = 482073668 and S(10 000) mod 108 = 73808307.",
        "",
        "Find S(20 000 000) mod 108.",
        "",
        "1 φ denotes Euler's totient function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler337() {\n  // Good luck!\n  return true;\n}\n\neuler337();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 337 Totient Stairstep Sequences",
      "dashedName": "problem-337-totient-stairstep-sequences"
    },
    {
      "id": "5900f4be1000cf542c50ffd1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler338()</code> should return 15614292.",
          "testString":
            "assert.strictEqual(euler338(), 15614292, '<code>euler338()</code> should return 15614292.');"
        }
      ],
      "description": [
        "A rectangular sheet of grid paper with integer dimensions w × h is given. Its grid spacing is 1.",
        "When we cut the sheet along the grid lines into two pieces and rearrange those pieces without overlap, we can make new rectangles with different dimensions.",
        "For example, from a sheet with dimensions 9 × 4 , we can make rectangles with dimensions 18 × 2, 12 × 3 and 6 × 6 by cutting and rearranging as below:",
        "",
        "",
        "",
        "",
        "Similarly, from a sheet with dimensions 9 × 8 , we can make rectangles with dimensions 18 × 4 and 12 × 6 .",
        "",
        "For a pair w and h, let F(w,h) be the number of distinct rectangles that can be made from a sheet with dimensions w × h .",
        "For example, F(2,1) = 0, F(2,2) = 1, F(9,4) = 3 and F(9,8) = 2. ",
        "Note that rectangles congruent to the initial one are not counted in F(w,h).",
        "Note also that rectangles with dimensions w × h and dimensions h × w are not considered distinct.",
        "",
        "For an integer N, let G(N) be the sum of F(w,h) for all pairs w and h which satisfy 0 < h ≤ w ≤ N.",
        "We can verify that G(10) = 55, G(103) = 971745 and G(105) = 9992617687.",
        "",
        "Find G(1012). Give your answer modulo 108."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler338() {\n  // Good luck!\n  return true;\n}\n\neuler338();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 338 Cutting Rectangular Grid Paper",
      "dashedName": "problem-338-cutting-rectangular-grid-paper"
    },
    {
      "id": "5900f4c01000cf542c50ffd2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler339()</code> should return 19823.542204.",
          "testString":
            "assert.strictEqual(euler339(), 19823.542204, '<code>euler339()</code> should return 19823.542204.');"
        }
      ],
      "description": [
        "\"And he came towards a valley, through which ran a river; and the borders of the valley were wooded, and on each side of the river were level meadows. And on one side of the river he saw a flock of white sheep, and on the other a flock of black sheep. And whenever one of the white sheep bleated, one of the black sheep would cross over and become white; and when one of the black sheep bleated, one of the white sheep would cross over and become black.\"en.wikisource.org",
        "",
        "",
        "",
        "Initially each flock consists of n sheep. Each sheep (regardless of colour) is equally likely to be the next sheep to bleat. After a sheep has bleated and a sheep from the other flock has crossed over, Peredur may remove a number of white sheep in order to maximize the expected final number of black sheep. Let E(n) be the expected final number of black sheep if Peredur uses an optimal strategy.",
        "",
        "",
        "",
        "You are given that E(5) = 6.871346 rounded to 6 places behind the decimal point.",
        "Find E(10 000) and give your answer rounded to 6 places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler339() {\n  // Good luck!\n  return true;\n}\n\neuler339();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 339 Peredur fab Efrawg",
      "dashedName": "problem-339-peredur-fab-efrawg"
    },
    {
      "id": "5900f4c21000cf542c50ffd4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler340()</code> should return 291504964.",
          "testString":
            "assert.strictEqual(euler340(), 291504964, '<code>euler340()</code> should return 291504964.');"
        }
      ],
      "description": [
        "For fixed integers a, b, c, define the crazy function F(n) as follows:",
        "F(n) = n - c for all n > b ",
        "F(n) = F(a + F(a + F(a + F(a + n)))) for all n ≤ b.",
        "",
        "",
        "Also, define S(a, b, c) = .",
        "",
        "",
        "For example, if a = 50, b = 2000 and c = 40, then F(0) = 3240 and F(2000) = 2040.",
        "Also, S(50, 2000, 40) = 5204240.",
        "",
        "",
        "Find the last 9 digits of S(217, 721, 127)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler340() {\n  // Good luck!\n  return true;\n}\n\neuler340();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 340 Crazy Function",
      "dashedName": "problem-340-crazy-function"
    },
    {
      "id": "5900f4c11000cf542c50ffd3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler341()</code> should return 56098610614277016.",
          "testString":
            "assert.strictEqual(euler341(), 56098610614277016, '<code>euler341()</code> should return 56098610614277016.');"
        }
      ],
      "description": [
        "The Golomb's self-describing sequence {G(n)} is the only nondecreasing sequence of natural numbers such that n appears exactly G(n) times in the sequence. The values of G(n) for the first few n are",
        "",
        "",
        "n123456789101112131415…G(n)122334445556666…",
        "",
        "You are given that G(103) = 86, G(106) = 6137.",
        "You are also given that ΣG(n3) = 153506976 for 1 ≤ n < 103.",
        "",
        "Find ΣG(n3) for 1 ≤ n < 106."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler341() {\n  // Good luck!\n  return true;\n}\n\neuler341();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 341 Golombs selfdescribing sequence",
      "dashedName": "problem-341-golombs-selfdescribing-sequence"
    },
    {
      "id": "5900f4c31000cf542c50ffd5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler342()</code> should return 5943040885644.",
          "testString":
            "assert.strictEqual(euler342(), 5943040885644, '<code>euler342()</code> should return 5943040885644.');"
        }
      ],
      "description": [
        "Consider the number 50.",
        "502 = 2500 = 22 × 54, so φ(2500) = 2 × 4 × 53 = 8 × 53 = 23 × 53. 1",
        "So 2500 is a square and  φ(2500) is a cube.",
        "",
        "",
        "Find the sum of all numbers n, 1 &lt n < 1010 such that φ(n2) is a cube.",
        "",
        "",
        "1 φ denotes Euler's totient function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler342() {\n  // Good luck!\n  return true;\n}\n\neuler342();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 342 The totient of a square is a cube",
      "dashedName": "problem-342-the-totient-of-a-square-is-a-cube"
    },
    {
      "id": "5900f4c41000cf542c50ffd6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler343()</code> should return 269533451410884200.",
          "testString":
            "assert.strictEqual(euler343(), 269533451410884200, '<code>euler343()</code> should return 269533451410884200.');"
        }
      ],
      "description": [
        "For any positive integer k, a finite sequence ai of fractions xi/yi is defined by:",
        "a1 = 1/k and",
        "ai = (xi-1+1)/(yi-1-1) reduced to lowest terms for i>1.",
        "When ai reaches some integer n, the sequence stops. (That is, when yi=1.)",
        "Define f(k) = n. ",
        "For example, for k = 20:",
        "",
        "",
        "",
        "1/20 → 2/19 → 3/18 = 1/6 → 2/5 → 3/4 → 4/3 → 5/2 → 6/1 = 6",
        "",
        "",
        "",
        "So f(20) = 6.",
        "",
        "",
        "",
        "Also f(1) = 1, f(2) = 2, f(3) = 1 and Σf(k3) = 118937 for 1 ≤ k ≤ 100.",
        "",
        "",
        "",
        "Find Σf(k3) for 1 ≤ k ≤ 2×106."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler343() {\n  // Good luck!\n  return true;\n}\n\neuler343();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 343 Fractional Sequences",
      "dashedName": "problem-343-fractional-sequences"
    },
    {
      "id": "5900f4c51000cf542c50ffd7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler344()</code> should return 65579304332.",
          "testString":
            "assert.strictEqual(euler344(), 65579304332, '<code>euler344()</code> should return 65579304332.');"
        }
      ],
      "description": [
        "One variant of N.G. de Bruijn's silver dollar game can be described as follows:",
        "",
        "On a strip of squares a number of coins are placed, at most one coin per square. Only one coin, called the silver dollar, has any value. Two players take turns making moves. At each turn a player must make either a regular or a special move.",
        "",
        "A regular move consists of selecting one coin and moving it one or more squares to the left. The coin cannot move out of the strip or jump on or over another coin.",
        "",
        "Alternatively, the player can choose to make the special move of pocketing the leftmost coin rather than making a regular move. If no regular moves are possible, the player is forced to pocket the leftmost coin.",
        "",
        "The winner is the player who pockets the silver dollar.",
        "",
        "",
        "",
        "",
        "",
        "A winning configuration is an arrangement of coins on the strip where the first player can force a win no matter what the second player does.",
        "",
        "Let W(n,c) be the number of winning configurations for a strip of n squares, c worthless coins and one silver dollar.",
        "",
        "You are given that W(10,2) = 324 and W(100,10) = 1514704946113500.",
        "",
        "Find W(1 000 000, 100) modulo the semiprime 1000 036 000 099 (= 1 000 003 · 1 000 033)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler344() {\n  // Good luck!\n  return true;\n}\n\neuler344();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 344 Silver dollar game",
      "dashedName": "problem-344-silver-dollar-game"
    },
    {
      "id": "5900f4c81000cf542c50ffda",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler345()</code> should return 13938.",
          "testString":
            "assert.strictEqual(euler345(), 13938, '<code>euler345()</code> should return 13938.');"
        }
      ],
      "description": [
        "We define the Matrix Sum of a matrix as the maximum sum of matrix elements with each element being the only one in his row and column. For example, the Matrix Sum of the matrix below equals 3315 ( = 863 + 383 + 343 + 959 + 767):",
        "",
        "",
        "  7  53 183 439 863",
        "497 383 563  79 973",
        "287  63 343 169 583",
        "627 343 773 959 943767 473 103 699 303",
        "",
        "",
        "Find the Matrix Sum of:",
        "",
        "  7  53 183 439 863 497 383 563  79 973 287  63 343 169 583",
        "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913",
        "447 283 463  29  23 487 463 993 119 883 327 493 423 159 743",
        "217 623   3 399 853 407 103 983  89 463 290 516 212 462 350",
        "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350",
        "870 456 192 162 593 473 915  45 989 873 823 965 425 329 803",
        "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326",
        "322 148 972 962 286 255 941 541 265 323 925 281 601  95 973",
        "445 721  11 525 473  65 511 164 138 672  18 428 154 448 848",
        "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198",
        "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390",
        "821 461 843 513  17 901 711 993 293 157 274  94 192 156 574",
        " 34 124   4 878 450 476 712 914 838 669 875 299 823 329 699",
        "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107",
        "813 883 451 509 615  77 281 613 459 205 380 274 302  35 805"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler345() {\n  // Good luck!\n  return true;\n}\n\neuler345();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 345 Matrix Sum",
      "dashedName": "problem-345-matrix-sum"
    },
    {
      "id": "5900f4c71000cf542c50ffd8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler346()</code> should return 336108797689259260.",
          "testString":
            "assert.strictEqual(euler346(), 336108797689259260, '<code>euler346()</code> should return 336108797689259260.');"
        }
      ],
      "description": [
        "The number 7 is special, because 7 is 111 written in base 2, and 11 written in base 6 (i.e. 710 = 116 = 1112). In other words, 7 is a repunit in at least two bases b > 1. ",
        "",
        "",
        "We shall call a positive integer with this property a strong repunit. It can be verified that there are 8 strong repunits below 50:  {1,7,13,15,21,31,40,43}. Furthermore, the sum of all strong repunits below 1000 equals 15864.",
        "",
        "Find the sum of all strong repunits below 1012."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler346() {\n  // Good luck!\n  return true;\n}\n\neuler346();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 346 Strong Repunits",
      "dashedName": "problem-346-strong-repunits"
    },
    {
      "id": "5900f4c81000cf542c50ffd9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler347()</code> should return 11109800204052.",
          "testString":
            "assert.strictEqual(euler347(), 11109800204052, '<code>euler347()</code> should return 11109800204052.');"
        }
      ],
      "description": [
        "The largest integer ≤ 100 that is only divisible by both the primes 2 and 3 is 96, as 96=32*3=25*3.",
        "For two distinct primes p and q let M(p,q,N) be the largest positive integer ≤N only divisible",
        "by both p and q and M(p,q,N)=0 if such a positive integer does not exist.",
        "",
        "",
        "E.g. M(2,3,100)=96. ",
        "M(3,5,100)=75 and not 90 because 90 is divisible by 2 ,3 and 5.",
        "Also M(2,73,100)=0 because there does not exist a positive integer ≤ 100 that is divisible by both 2 and 73.",
        "",
        "",
        "Let S(N) be the sum of all distinct M(p,q,N).",
        "S(100)=2262.",
        "",
        "",
        "Find S(10 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler347() {\n  // Good luck!\n  return true;\n}\n\neuler347();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 347 Largest integer divisible by two primes",
      "dashedName": "problem-347-largest-integer-divisible-by-two-primes"
    },
    {
      "id": "5900f4c81000cf542c50ffdb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler348()</code> should return 1004195061.",
          "testString":
            "assert.strictEqual(euler348(), 1004195061, '<code>euler348()</code> should return 1004195061.');"
        }
      ],
      "description": [
        "Many numbers can be expressed as the sum of a square and a cube. Some of them in more than one way.",
        "",
        "Consider the palindromic numbers that can be expressed as the sum of a square and a cube, both greater than 1, in exactly 4 different ways.",
        "For example, 5229225 is a palindromic number and it can be expressed in exactly 4 different ways:",
        "22852 + 203",
        "22232 + 663",
        "18102 + 1253",
        "11972 + 1563",
        "",
        "Find the sum of the five smallest such palindromic numbers."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler348() {\n  // Good luck!\n  return true;\n}\n\neuler348();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 348 Sum of a square and a cube",
      "dashedName": "problem-348-sum-of-a-square-and-a-cube"
    },
    {
      "id": "5900f4ca1000cf542c50ffdc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler349()</code> should return 115384615384614940.",
          "testString":
            "assert.strictEqual(euler349(), 115384615384614940, '<code>euler349()</code> should return 115384615384614940.');"
        }
      ],
      "description": [
        "An ant moves on a regular grid of squares that are coloured either black or white. ",
        "The ant is always oriented in one of the cardinal directions (left, right, up or down) and moves from square to adjacent square according to the following rules:",
        "- if it is on a black square, it flips the color of the square to white, rotates 90 degrees counterclockwise and moves forward one square.",
        "- if it is on a white square, it flips the color of the square to black, rotates 90 degrees clockwise and moves forward one square.",
        "",
        "Starting with a grid that is entirely white, how many squares are black after 1018 moves of the ant?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler349() {\n  // Good luck!\n  return true;\n}\n\neuler349();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 349 Langtons ant",
      "dashedName": "problem-349-langtons-ant"
    },
    {
      "id": "5900f4cb1000cf542c50ffdd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler350()</code> should return 84664213.",
          "testString":
            "assert.strictEqual(euler350(), 84664213, '<code>euler350()</code> should return 84664213.');"
        }
      ],
      "description": [
        "A list of size n is a sequence of n natural numbers. Examples are (2,4,6), (2,6,4), (10,6,15,6), and (11).",
        "",
        "The greatest common divisor, or gcd, of a list is the largest natural number that divides all entries of the list. Examples: gcd(2,6,4) = 2, gcd(10,6,15,6) = 1 and gcd(11) = 11.",
        "",
        "The least common multiple, or lcm, of a list is the smallest natural number divisible by each entry of the list. Examples: lcm(2,6,4) = 12, lcm(10,6,15,6) = 30 and lcm(11) = 11.",
        "",
        "Let f(G, L, N) be the number of lists of size N with gcd ≥ G and lcm ≤ L. For example:",
        "",
        "f(10, 100, 1) = 91.",
        "f(10, 100, 2) = 327.",
        "f(10, 100, 3) = 1135.",
        "f(10, 100, 1000) mod 1014 = 3286053.",
        "",
        "Find f(106, 1012, 1018) mod 1014."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler350() {\n  // Good luck!\n  return true;\n}\n\neuler350();",
          "head": "",
          "tail": ""
        }
      },
      "name":
        "Problem 350 Constraining the least greatest and the greatest least",
      "dashedName":
        "problem-350-constraining-the-least-greatest-and-the-greatest-least"
    },
    {
      "id": "5900f4cb1000cf542c50ffde",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler351()</code> should return 11762187201804552.",
          "testString":
            "assert.strictEqual(euler351(), 11762187201804552, '<code>euler351()</code> should return 11762187201804552.');"
        }
      ],
      "description": [
        "A hexagonal orchard of order n is a triangular lattice made up of points within a regular hexagon with side n. The following is an example of a hexagonal orchard of order 5:",
        "",
        "",
        "",
        "",
        "",
        "",
        "Highlighted in green are the points which are hidden from the center by a point closer to it. It can be seen that for a hexagonal orchard of order 5, 30 points are hidden from the center.",
        "",
        "",
        "",
        "Let H(n) be the number of points hidden from the center in a hexagonal orchard of order n.",
        "",
        "",
        "",
        "H(5) = 30. H(10) = 138. H(1 000) = 1177848.",
        "",
        "",
        "",
        "Find H(100 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler351() {\n  // Good luck!\n  return true;\n}\n\neuler351();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 351 Hexagonal orchards",
      "dashedName": "problem-351-hexagonal-orchards"
    },
    {
      "id": "5900f4cd1000cf542c50ffdf",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler352()</code> should return 378563.260589.",
          "testString":
            "assert.strictEqual(euler352(), 378563.260589, '<code>euler352()</code> should return 378563.260589.');"
        }
      ],
      "description": [
        "Each one of the 25 sheep in a flock must be tested for a rare virus, known to affect 2% of the sheep population.",
        "An accurate and extremely sensitive PCR test exists for blood samples, producing a clear positive / negative result, but it is very time-consuming and expensive.",
        "",
        "",
        "",
        "Because of the high cost, the vet-in-charge suggests that instead of performing 25 separate tests, the following procedure can be used instead:",
        "The sheep are split into 5 groups of 5 sheep in each group. ",
        "For each group, the 5 samples are mixed together and a single test is performed. Then,",
        "If the result is negative, all the sheep in that group are deemed to be virus-free.",
        "If the result is positive, 5 additional tests will be performed (a separate test for each animal) to determine the affected individual(s).",
        "",
        "Since the probability of infection for any specific animal is only 0.02, the first test (on the pooled samples) for each group will be:",
        "Negative (and no more tests needed) with probability 0.985 = 0.9039207968.",
        "Positive (5 additional tests needed) with probability 1 - 0.9039207968 = 0.0960792032.",
        "",
        "Thus, the expected number of tests for each group is 1 + 0.0960792032 × 5 = 1.480396016.",
        "Consequently, all 5 groups can be screened using an average of only 1.480396016 × 5 = 7.40198008 tests, which represents a huge saving of more than 70% !",
        "",
        "",
        "",
        "Although the scheme we have just described seems to be very efficient, it can still be improved considerably (always assuming that the test is sufficiently sensitive and that there are no adverse effects caused by mixing different samples). E.g.:",
        "We may start by running a test on a mixture of all the 25 samples. It can be verified that in about 60.35% of the cases this test will be negative, thus no more tests will be needed. Further testing will only be required for the remaining 39.65% of the cases.",
        "If we know that at least one animal in a group of 5 is infected and the first 4 individual tests come out negative, there is no need to run a test on the fifth animal (we know that it must be infected).",
        "We can try a different number of groups / different number of animals in each group, adjusting those numbers at each level so that the total expected number of tests will be minimised.",
        "",
        "To simplify the very wide range of possibilities, there is one restriction we place when devising the most cost-efficient testing scheme: whenever we start with a mixed sample, all the sheep contributing to that sample must be fully screened (i.e. a verdict of infected / virus-free must be reached for all of them) before we start examining any other animals.",
        "",
        "For the current example, it turns out that the most cost-efficient testing scheme (we'll call it the optimal strategy) requires an average of just 4.155452 tests!",
        "",
        "",
        "",
        "Using the optimal strategy, let T(s,p) represent the average number of tests needed to screen a flock of s sheep for a virus having probability p to be present in any individual.",
        "Thus, rounded to six decimal places, T(25, 0.02) = 4.155452 and T(25, 0.10) = 12.702124.",
        "",
        "",
        "",
        "Find ΣT(10000, p) for p=0.01, 0.02, 0.03, ... 0.50.",
        "Give your answer rounded to six decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler352() {\n  // Good luck!\n  return true;\n}\n\neuler352();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 352 Blood tests",
      "dashedName": "problem-352-blood-tests"
    },
    {
      "id": "5900f4cd1000cf542c50ffe0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler353()</code> should return 1.2759860331.",
          "testString":
            "assert.strictEqual(euler353(), 1.2759860331, '<code>euler353()</code> should return 1.2759860331.');"
        }
      ],
      "description": [
        "A moon could be described by the sphere C(r) with centre (0,0,0) and radius r. ",
        "",
        "",
        "",
        "There are stations on the moon at the points on the surface of C(r) with integer coordinates. The station at (0,0,r) is called North Pole station, the station at (0,0,-r) is called South Pole station.",
        "",
        "",
        "",
        "All stations are connected with each other via the shortest road on the great arc through the stations. A journey between two stations is risky. If d is the length of the road between two stations, (d/(π r))2 is a measure for the risk of the journey (let us call it the risk of the road). If the journey includes more than two stations, the risk of the journey is the sum of risks of the used roads.",
        "",
        "",
        "",
        "A direct journey from  the North Pole station to the South Pole station has the length πr and risk 1. The journey from the North Pole station to the South Pole station via (0,r,0) has the same length, but a smaller risk: (½πr/(πr))2+(½πr/(πr))2=0.5.",
        "",
        "",
        "",
        "The minimal risk of a journey from the North Pole station to the South Pole station on C(r) is M(r).",
        "",
        "",
        "",
        "You are given that M(7)=0.1784943998  rounded to 10 digits behind the decimal point. ",
        "",
        "",
        "",
        "Find ∑M(2n-1) for 1≤n≤15.",
        "",
        "",
        "",
        "Give your answer rounded to 10 digits behind the decimal point in the form a.bcdefghijk."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler353() {\n  // Good luck!\n  return true;\n}\n\neuler353();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 353 Risky moon",
      "dashedName": "problem-353-risky-moon"
    },
    {
      "id": "5900f4cf1000cf542c50ffe1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler354()</code> should return 58065134.",
          "testString":
            "assert.strictEqual(euler354(), 58065134, '<code>euler354()</code> should return 58065134.');"
        }
      ],
      "description": [
        "Consider a honey bee's honeycomb where each cell is a perfect regular hexagon with side length 1.",
        "",
        "",
        "",
        "",
        "",
        "",
        "One particular cell is occupied by the queen bee.",
        "For a positive real number L, let B(L) count the cells with distance L from the queen bee cell (all distances are measured from centre to centre); you may assume that the honeycomb is large enough to accommodate for any distance we wish to consider. ",
        "For example, B(√3) = 6, B(√21) = 12 and B(111 111 111) = 54.",
        "",
        "Find the number of L ≤ 5·1011 such that B(L) = 450."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler354() {\n  // Good luck!\n  return true;\n}\n\neuler354();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 354 Distances in a bees honeycomb",
      "dashedName": "problem-354-distances-in-a-bees-honeycomb"
    },
    {
      "id": "5900f4d01000cf542c50ffe2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler355()</code> should return 1726545007.",
          "testString":
            "assert.strictEqual(euler355(), 1726545007, '<code>euler355()</code> should return 1726545007.');"
        }
      ],
      "description": [
        "Define Co(n) to be the maximal possible sum of a set of mutually co-prime elements from {1, 2, ..., n}. For example Co(10) is 30 and hits that maximum on the subset {1, 5, 7, 8, 9}.",
        "",
        "",
        "",
        "You are given that Co(30) = 193 and Co(100) = 1356. ",
        "",
        "",
        "Find Co(200000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler355() {\n  // Good luck!\n  return true;\n}\n\neuler355();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 355 Maximal coprime subset",
      "dashedName": "problem-355-maximal-coprime-subset"
    },
    {
      "id": "5900f4d01000cf542c50ffe3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler356()</code> should return 28010159.",
          "testString":
            "assert.strictEqual(euler356(), 28010159, '<code>euler356()</code> should return 28010159.');"
        }
      ],
      "description": [
        "Let an be the largest real root of a polynomial g(x) = x3 - 2n·x2 + n.",
        "For example, a2 = 3.86619826...",
        "",
        "",
        "Find the last eight digits of.",
        "",
        "",
        "Note:  represents the floor function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler356() {\n  // Good luck!\n  return true;\n}\n\neuler356();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 356 Largest roots of cubic polynomials",
      "dashedName": "problem-356-largest-roots-of-cubic-polynomials"
    },
    {
      "id": "5900f4d11000cf542c50ffe4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler357()</code> should return 1739023853137.",
          "testString":
            "assert.strictEqual(euler357(), 1739023853137, '<code>euler357()</code> should return 1739023853137.');"
        }
      ],
      "description": [
        "Consider the divisors of 30: 1,2,3,5,6,10,15,30.",
        "It can be seen that for every divisor d of 30, d+30/d is prime.",
        "",
        "",
        "Find the sum of all positive integers n not exceeding 100 000 000such that",
        "for every divisor d of n, d+n/d is prime."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler357() {\n  // Good luck!\n  return true;\n}\n\neuler357();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 357 Prime generating integers",
      "dashedName": "problem-357-prime-generating-integers"
    },
    {
      "id": "5900f4d21000cf542c50ffe5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler358()</code> should return 3284144505.",
          "testString":
            "assert.strictEqual(euler358(), 3284144505, '<code>euler358()</code> should return 3284144505.');"
        }
      ],
      "description": [
        "A cyclic number with n digits has a very interesting property:",
        "When it is multiplied by 1, 2, 3, 4, ... n, all the products have exactly the same digits, in the same order, but rotated in a circular fashion!",
        "",
        "",
        "",
        "The smallest cyclic number is the 6-digit number 142857 :",
        "142857 × 1 = 142857",
        "142857 × 2 = 285714",
        "142857 × 3 = 428571",
        "142857 × 4 = 571428",
        "142857 × 5 = 714285",
        "142857 × 6 = 857142  ",
        "",
        "",
        "",
        "The next cyclic number is 0588235294117647 with 16 digits :",
        "0588235294117647 × 1 = 0588235294117647",
        "0588235294117647 × 2 = 1176470588235294",
        "0588235294117647 × 3 = 1764705882352941",
        "...",
        "0588235294117647 × 16 = 9411764705882352",
        "",
        "",
        "",
        "Note that for cyclic numbers, leading zeros are important.",
        "",
        "",
        "",
        "There is only one cyclic number for which, the eleven leftmost digits are 00000000137 and the five rightmost digits are 56789 (i.e., it has the form 00000000137...56789 with an unknown number of digits in the middle). Find the sum of all its digits."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler358() {\n  // Good luck!\n  return true;\n}\n\neuler358();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 358 Cyclic numbers",
      "dashedName": "problem-358-cyclic-numbers"
    },
    {
      "id": "5900f4d31000cf542c50ffe6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler359()</code> should return 40632119.",
          "testString":
            "assert.strictEqual(euler359(), 40632119, '<code>euler359()</code> should return 40632119.');"
        }
      ],
      "description": [
        "An infinite number of people (numbered 1, 2, 3, etc.) are lined up to get a room at Hilbert's newest infinite hotel. The hotel contains an infinite number of floors (numbered 1, 2, 3, etc.), and each floor contains an infinite number of rooms (numbered 1, 2, 3, etc.). ",
        "",
        "",
        "",
        "Initially the hotel is empty. Hilbert declares a rule on how the nth person is assigned a room: person n gets the first vacant room in the lowest numbered floor satisfying either of the following:",
        "the floor is empty",
        "the floor is not empty, and if the latest person taking a room in that floor is person m, then m + n is a perfect square",
        "",
        "Person 1 gets room 1 in floor 1 since floor 1 is empty.",
        "Person 2 does not get room 2 in floor 1 since 1 + 2 = 3 is not a perfect square.",
        "Person 2 instead gets room 1 in floor 2 since floor 2 is empty.",
        "Person 3 gets room 2 in floor 1 since 1 + 3 = 4 is a perfect square.",
        "",
        "",
        "",
        "Eventually, every person in the line gets a room in the hotel.",
        "",
        "",
        "",
        "Define P(f, r) to be n if person n occupies room r in floor f, and 0 if no person occupies the room. Here are a few examples:",
        "P(1, 1) = 1",
        "P(1, 2) = 3",
        "P(2, 1) = 2",
        "P(10, 20) = 440",
        "P(25, 75) = 4863",
        "P(99, 100) = 19454",
        "",
        "",
        "",
        "Find the sum of all P(f, r) for all positive f and r such that f × r = 71328803586048 and give the last 8 digits as your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler359() {\n  // Good luck!\n  return true;\n}\n\neuler359();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 359 Hilberts New Hotel",
      "dashedName": "problem-359-hilberts-new-hotel"
    },
    {
      "id": "5900f4d41000cf542c50ffe7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler360()</code> should return 878825614395267100.",
          "testString":
            "assert.strictEqual(euler360(), 878825614395267100, '<code>euler360()</code> should return 878825614395267100.');"
        }
      ],
      "description": [
        "Given two points (x1,y1,z1) and (x2,y2,z2) in three dimensional space, the Manhattan distance  between those points is defined as  |x1-x2|+|y1-y2|+|z1-z2|.",
        "",
        "",
        "Let C(r) be a sphere with radius r and center in the origin O(0,0,0).",
        "Let I(r) be the set of all points with integer coordinates on the surface of C(r).",
        "Let S(r) be the sum of the Manhattan distances of all elements of I(r) to the origin O.",
        "",
        "",
        "E.g. S(45)=34518.",
        "",
        "",
        "Find S(1010)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler360() {\n  // Good luck!\n  return true;\n}\n\neuler360();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 360 Scary Sphere",
      "dashedName": "problem-360-scary-sphere"
    },
    {
      "id": "5900f4d51000cf542c50ffe8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler361()</code> should return 178476944.",
          "testString":
            "assert.strictEqual(euler361(), 178476944, '<code>euler361()</code> should return 178476944.');"
        }
      ],
      "description": [
        "The Thue-Morse sequence {Tn} is a binary sequence satisfying:",
        "T0 = 0",
        "T2n = Tn",
        "T2n+1 = 1 - Tn",
        "",
        "The first several terms of {Tn} are given as follows:",
        "01101001100101101001011001101001....",
        "",
        "",
        "",
        "We define {An} as the sorted sequence of integers such that the binary expression of each element appears as a subsequence in {Tn}.",
        "For example, the decimal number 18 is expressed as 10010 in binary. 10010 appears in {Tn} (T8 to T12), so 18 is an element of {An}.",
        "The decimal number 14 is expressed as 1110 in binary. 1110 never appears in {Tn}, so 14 is not an element of {An}.",
        "",
        "",
        "",
        "The first several terms of An are given as follows:",
        "n0123456789101112…An012345691011121318…",
        "",
        "",
        "",
        "We can also verify that A100 = 3251 and A1000 = 80852364498.",
        "",
        "",
        "",
        "Find the last 9 digits of ."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler361() {\n  // Good luck!\n  return true;\n}\n\neuler361();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 361 Subsequence of ThueMorse sequence",
      "dashedName": "problem-361-subsequence-of-thuemorse-sequence"
    },
    {
      "id": "5900f4d61000cf542c50ffe9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler362()</code> should return 457895958010.",
          "testString":
            "assert.strictEqual(euler362(), 457895958010, '<code>euler362()</code> should return 457895958010.');"
        }
      ],
      "description": [
        "Consider the number 54.",
        "54 can be factored in 7 distinct ways into one or more factors larger than 1:",
        "54, 2×27, 3×18, 6×9, 3×3×6, 2×3×9 and 2×3×3×3.",
        "If we require that the factors are all squarefree only two ways remain: 3×3×6 and 2×3×3×3.",
        "",
        "",
        "Let's call Fsf(n) the number of ways n can be factored into one or more squarefree factors larger than 1, so",
        "Fsf(54)=2.",
        "",
        "",
        "Let S(n) be ∑Fsf(k) for k=2 to n.",
        "",
        "",
        "S(100)=193.",
        "",
        "",
        "Find S(10 000 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler362() {\n  // Good luck!\n  return true;\n}\n\neuler362();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 362 Squarefree factors",
      "dashedName": "problem-362-squarefree-factors"
    },
    {
      "id": "5900f4d91000cf542c50ffeb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler363()</code> should return 0.0000372091.",
          "testString":
            "assert.strictEqual(euler363(), 0.0000372091, '<code>euler363()</code> should return 0.0000372091.');"
        }
      ],
      "description": [
        "A cubic Bézier curve is defined by four points: P0, P1, P2 and P3.",
        "",
        "",
        "",
        "The curve is constructed as follows:",
        "On the segments P0P1, P1P2 and P2P3 the points Q0,Q1 and Q2 are drawn such that",
        "P0Q0 / P0P1 = P1Q1 / P1P2 = P2Q2 / P2P3 = t (t in [0,1]).",
        "On the segments Q0Q1 and Q1Q2 the points R0 and R1 are drawn such that",
        "Q0R0  / Q0Q1 = Q1R1 / Q1Q2 = t for the same value of t.",
        "On the segment R0R1 the point B is drawn such that R0B / R0R1 = t for the same value of t.",
        "The Bézier curve defined by the points P0, P1, P2, P3 is the locus of B as Q0 takes all possible positions on the segment P0P1.",
        "(Please note that for all points the value of t is the same.)",
        "",
        "At this (external) web address you will find an applet that allows you to drag the points P0, P1, P2 and P3 to see what the Bézier curve (green curve) defined by those points looks like. You can also drag the point Q0 along the segment P0P1.",
        "",
        "From the construction it is clear that the Bézier curve will be tangent to the segments P0P1 in P0 and P2P3 in P3.",
        "",
        "A cubic Bézier curve with P0=(1,0), P1=(1,v), P2=(v,1) and P3=(0,1) is used to approximate a quarter circle.",
        "The value v > 0 is chosen such that the area enclosed by the lines OP0, OP3 and the curve is equal to π/4 (the area of the quarter circle).",
        "",
        "By how many percent does the length of the curve differ from the length of the quarter circle?",
        "That is, if L is the length of the curve, calculate  100 × L − π/2π/2Give your answer rounded to 10 digits behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler363() {\n  // Good luck!\n  return true;\n}\n\neuler363();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 363 Bzier Curves",
      "dashedName": "problem-363-bzier-curves"
    },
    {
      "id": "5900f4d91000cf542c50ffea",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler364()</code> should return 44855254.",
          "testString":
            "assert.strictEqual(euler364(), 44855254, '<code>euler364()</code> should return 44855254.');"
        }
      ],
      "description": [
        "There are N seats in a row. N people come after each other to fill the seats according to the following rules:",
        "If there is any seat whose adjacent seat(s) are not occupied take such a seat.",
        "If there is no such seat and there is any seat for which only one adjacent seat is occupied take such a seat.",
        "Otherwise take one of the remaining available seats. ",
        "",
        "Let T(N) be the number of possibilities that N seats are occupied by N people with the given rules. The following figure shows T(4)=8.",
        "",
        "",
        "",
        "",
        "",
        "We can verify that T(10) = 61632 and T(1 000) mod 100 000 007 = 47255094.",
        "Find T(1 000 000) mod 100 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler364() {\n  // Good luck!\n  return true;\n}\n\neuler364();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 364 Comfortable distance",
      "dashedName": "problem-364-comfortable-distance"
    },
    {
      "id": "5900f4da1000cf542c50ffec",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler365()</code> should return 162619462356610300.",
          "testString":
            "assert.strictEqual(euler365(), 162619462356610300, '<code>euler365()</code> should return 162619462356610300.');"
        }
      ],
      "description": [
        "The binomial coefficient C(1018,109) is a number with more than 9 billion (9×109) digits.",
        "",
        "",
        "Let M(n,k,m) denote the binomial coefficient C(n,k) modulo m.",
        "",
        "",
        "Calculate ∑M(1018,109,p*q*r) for 1000<p<q<r<5000 and p,q,r prime."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler365() {\n  // Good luck!\n  return true;\n}\n\neuler365();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 365 A huge binomial coefficient",
      "dashedName": "problem-365-a-huge-binomial-coefficient"
    },
    {
      "id": "5900f4da1000cf542c50ffed",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler366()</code> should return 88351299.",
          "testString":
            "assert.strictEqual(euler366(), 88351299, '<code>euler366()</code> should return 88351299.');"
        }
      ],
      "description": [
        "Two players, Anton and Bernhard, are playing the following game.",
        "There is one pile of n stones.",
        "The first player may remove any positive number of stones, but not the whole pile.",
        "Thereafter, each player may remove at most twice the number of stones his opponent took on the previous move.",
        "The player who removes the last stone wins.",
        "",
        "",
        "E.g. n=5",
        "If the first player takes anything more than one stone the next player will be able to take all remaining stones.",
        "If the first player takes one stone, leaving four, his opponent will take also one stone, leaving three stones.",
        "The first player cannot take all three because he may take at most 2x1=2 stones. So let's say he takes also one stone, leaving 2. The second player can take the two remaining stones and wins.",
        "So 5 is a losing position for the first player.",
        "For some winning positions there is more than one possible move for the first player.",
        "E.g. when n=17 the first player can remove one or four stones.",
        "",
        "",
        "Let M(n) be the maximum number of stones the first player can take from a winning position at his first turn and M(n)=0 for any other position.",
        "",
        "",
        "∑M(n) for n≤100 is 728.",
        "",
        "",
        "Find  ∑M(n) for n≤1018.",
        "Give your answer modulo 108."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler366() {\n  // Good luck!\n  return true;\n}\n\neuler366();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 366 Stone Game III",
      "dashedName": "problem-366-stone-game-iii"
    },
    {
      "id": "5900f4db1000cf542c50ffee",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler367()</code> should return 48271207.",
          "testString":
            "assert.strictEqual(euler367(), 48271207, '<code>euler367()</code> should return 48271207.');"
        }
      ],
      "description": [
        "Bozo sort, not to be confused with the slightly less efficient bogo sort, consists out of checking if the input sequence is sorted and if not swapping randomly two elements. This is repeated until eventually the sequence is sorted.",
        "",
        "",
        "If we consider all permutations of the first 4 natural numbers as input the expectation value of the number of swaps, averaged over all 4! input sequences is 24.75.",
        "The already sorted sequence takes 0 steps. ",
        "",
        "",
        "In this problem we consider the following variant on bozo sort.",
        "If the sequence is not in order we pick three elements at random and shuffle these three elements randomly.",
        "All 3!=6 permutations of those three elements are equally likely. ",
        "The already sorted sequence will take 0 steps.",
        "If we consider all permutations of the first 4 natural numbers as input the expectation value of the number of shuffles, averaged over all 4! input sequences is 27.5. ",
        "Consider as input sequences the permutations of the first 11 natural numbers.",
        "Averaged over all 11! input sequences, what is the expected number of shuffles this sorting algorithm will perform?",
        "",
        "",
        "Give your answer rounded to the nearest integer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler367() {\n  // Good luck!\n  return true;\n}\n\neuler367();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 367 Bozo sort",
      "dashedName": "problem-367-bozo-sort"
    },
    {
      "id": "5900f4dd1000cf542c50ffef",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler368()</code> should return 253.6135092068.",
          "testString":
            "assert.strictEqual(euler368(), 253.6135092068, '<code>euler368()</code> should return 253.6135092068.');"
        }
      ],
      "description": [
        "The  harmonic series  $1 + \\dfrac{1}{2} + \\dfrac{1}{3} + \\dfrac{1}{4} + ...$ is well known to be divergent.",
        "",
        "If we however omit from this series every term where the denominator has a 9 in it, the series remarkably enough converges to approximately 22.9206766193.",
        "This modified harmonic series is called the Kempner series.",
        "",
        "Let us now consider another modified harmonic series by omitting from the harmonic series every term where the denominator has 3 or more equal consecutive digits.",
        "One can verify that out of the first 1200 terms of the harmonic series, only 20 terms will be omitted.",
        "These 20 omitted terms are:",
        "$$\\dfrac{1}{111}, \\dfrac{1}{222}, \\dfrac{1}{333}, \\dfrac{1}{444}, \\dfrac{1}{555}, \\dfrac{1}{666}, \\dfrac{1}{777}, \\dfrac{1}{888}, \\dfrac{1}{999}, \\dfrac{1}{1000}, \\dfrac{1}{1110}, \\\\\\ \\dfrac{1}{1111}, \\dfrac{1}{1112}, \\dfrac{1}{1113}, \\dfrac{1}{1114}, \\dfrac{1}{1115}, \\dfrac{1}{1116}, \\dfrac{1}{1117}, \\dfrac{1}{1118}, \\dfrac{1}{1119}$$",
        "",
        "This series converges as well.",
        "",
        "Find the value the series converges to.",
        "Give your answer rounded to 10 digits behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler368() {\n  // Good luck!\n  return true;\n}\n\neuler368();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 368 A Kempnerlike series",
      "dashedName": "problem-368-a-kempnerlike-series"
    },
    {
      "id": "5900f4de1000cf542c50fff0",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler369()</code> should return 862400558448.",
          "testString":
            "assert.strictEqual(euler369(), 862400558448, '<code>euler369()</code> should return 862400558448.');"
        }
      ],
      "description": [
        "In a standard 52 card deck of playing cards, a set of 4 cards is a Badugi if it contains 4 cards with no pairs and no two cards of the same suit.",
        "",
        "Let f(n) be the number of ways to choose n cards with a 4 card subset that is a Badugi.  For example, there are 2598960 ways to choose five cards from a standard 52 card deck, of which 514800 contain a 4 card subset that is a Badugi, so f(5) = 514800.",
        "",
        "Find ∑f(n)  for 4 ≤ n ≤ 13."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler369() {\n  // Good luck!\n  return true;\n}\n\neuler369();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 369 Badugi",
      "dashedName": "problem-369-badugi"
    },
    {
      "id": "5900f4de1000cf542c50fff1",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler370()</code> should return 41791929448408.",
          "testString":
            "assert.strictEqual(euler370(), 41791929448408, '<code>euler370()</code> should return 41791929448408.');"
        }
      ],
      "description": [
        "Let us define a geometric triangle as an integer sided triangle with sides a ≤ b ≤ c so that its sides form a geometric progression, i.e. b2 = a · c .  ",
        "",
        "An example of such a geometric triangle is the triangle with sides a = 144, b = 156 and c = 169.",
        "",
        "There are 861805 geometric triangles with perimeter ≤ 106 .",
        "",
        "How many geometric triangles exist with perimeter ≤ 2.5·1013 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler370() {\n  // Good luck!\n  return true;\n}\n\neuler370();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 370 Geometric triangles",
      "dashedName": "problem-370-geometric-triangles"
    },
    {
      "id": "5900f4e01000cf542c50fff2",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler371()</code> should return 40.66368097.",
          "testString":
            "assert.strictEqual(euler371(), 40.66368097, '<code>euler371()</code> should return 40.66368097.');"
        }
      ],
      "description": [
        "Oregon licence plates consist of three letters followed by a three digit number (each digit can be from [0..9]).",
        "While driving to work Seth plays the following game:",
        "Whenever the numbers of two licence plates seen on his trip add to 1000 that's a win.",
        "",
        "",
        "E.g. MIC-012 and HAN-988 is a win and RYU-500 and SET-500 too. (as long as he sees them in the same trip). ",
        "",
        "",
        "Find the expected number of plates he needs to see for a win.",
        "Give your answer rounded to 8 decimal places behind the decimal point.",
        "",
        "",
        "Note: We assume that each licence plate seen is equally likely to have any three digit number on it."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler371() {\n  // Good luck!\n  return true;\n}\n\neuler371();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 371 Licence plates",
      "dashedName": "problem-371-licence-plates"
    },
    {
      "id": "5900f4e11000cf542c50fff3",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler372()</code> should return 301450082318807040.",
          "testString":
            "assert.strictEqual(euler372(), 301450082318807040, '<code>euler372()</code> should return 301450082318807040.');"
        }
      ],
      "description": [
        "Let R(M, N) be the number of lattice points (x, y) which satisfy M<x≤N, M<y≤N and  is odd.",
        "We can verify that R(0, 100) = 3019 and R(100, 10000) = 29750422.",
        "Find R(2·106, 109).",
        "",
        "",
        "",
        "Note:  represents the floor function."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler372() {\n  // Good luck!\n  return true;\n}\n\neuler372();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 372 Pencils of rays",
      "dashedName": "problem-372-pencils-of-rays"
    },
    {
      "id": "5900f4e11000cf542c50fff4",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler373()</code> should return 727227472448913.",
          "testString":
            "assert.strictEqual(euler373(), 727227472448913, '<code>euler373()</code> should return 727227472448913.');"
        }
      ],
      "description": [
        "Every triangle has a circumscribed circle that goes through the three vertices.",
        "Consider all integer sided triangles for which the radius of the circumscribed circle is integral as well.",
        "",
        "",
        "Let S(n) be the sum of the radii of the circumscribed circles of all such triangles for which the radius does not exceed n.",
        "",
        "S(100)=4950 and S(1200)=1653605.",
        "",
        "",
        "Find S(107)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler373() {\n  // Good luck!\n  return true;\n}\n\neuler373();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 373 Circumscribed Circles",
      "dashedName": "problem-373-circumscribed-circles"
    },
    {
      "id": "5900f4e51000cf542c50fff6",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler374()</code> should return 334420941.",
          "testString":
            "assert.strictEqual(euler374(), 334420941, '<code>euler374()</code> should return 334420941.');"
        }
      ],
      "description": [
        "An integer partition of a number n is a way of writing n as a sum of positive integers.",
        "",
        "Partitions that differ only in the order of their summands are considered the same.",
        "A partition of n into distinct parts is a partition of n in which every part occurs at most once.",
        "",
        "The partitions of 5 into distinct parts are:",
        "5, 4+1 and 3+2.",
        "",
        "Let f(n) be the maximum product of the parts of any such partition of n into distinct parts and let m(n) be the number of elements of any such partition of n with that product.",
        "",
        "So f(5)=6 and m(5)=2.",
        "",
        "For n=10 the partition with the largest product is 10=2+3+5, which gives f(10)=30 and m(10)=3.",
        "And their product, f(10)·m(10) = 30·3 = 90",
        "",
        "It can be verified that",
        "∑f(n)·m(n) for 1 ≤ n ≤ 100 = 1683550844462.",
        "",
        "Find ∑f(n)·m(n) for 1 ≤ n ≤ 1014.",
        "Give your answer modulo 982451653, the 50 millionth prime."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler374() {\n  // Good luck!\n  return true;\n}\n\neuler374();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 374 Maximum Integer Partition Product",
      "dashedName": "problem-374-maximum-integer-partition-product"
    },
    {
      "id": "5900f4e41000cf542c50fff5",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler375()</code> should return 7435327983715286000.",
          "testString":
            "assert.strictEqual(euler375(), 7435327983715286000, '<code>euler375()</code> should return 7435327983715286000.');"
        }
      ],
      "description": [
        "Let Sn be an integer sequence produced with the following pseudo-random number generator:",
        "S0",
        "    = ",
        "    290797 ",
        "  Sn+1",
        "    = ",
        "    Sn2 mod 50515093",
        "",
        "",
        "",
        "Let A(i, j) be the minimum of the numbers Si, Si+1, ... , Sj for i ≤ j.",
        "Let M(N) = ΣA(i, j) for 1 ≤ i ≤ j ≤ N.",
        "We can verify that M(10) = 432256955 and M(10 000) = 3264567774119.",
        "",
        "",
        "Find M(2 000 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler375() {\n  // Good luck!\n  return true;\n}\n\neuler375();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 375 Minimum of subsequences",
      "dashedName": "problem-375-minimum-of-subsequences"
    },
    {
      "id": "5900f4e51000cf542c50fff7",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler376()</code> should return 973059630185670.",
          "testString":
            "assert.strictEqual(euler376(), 973059630185670, '<code>euler376()</code> should return 973059630185670.');"
        }
      ],
      "description": [
        "Consider the following set of dice with nonstandard pips:",
        "",
        "",
        "",
        "Die A: 1 4 4 4 4 4",
        "Die B: 2 2 2 5 5 5",
        "Die C: 3 3 3 3 3 6",
        "",
        "",
        "A game is played by two players picking a die in turn and rolling it. The player who rolls the highest value wins.",
        "",
        "",
        "",
        "If the first player picks die A and the second player picks die B we get",
        "P(second player wins) = 7/12 > 1/2",
        "",
        "",
        "If the first player picks die B and the second player picks die C we get",
        "P(second player wins) = 7/12 > 1/2",
        "",
        "",
        "If the first player picks die C and the second player picks die A we get",
        "P(second player wins) = 25/36 > 1/2",
        "",
        "",
        "So whatever die the first player picks, the second player can pick another die and have a larger than 50% chance of winning.",
        "A set of dice having this property is called a nontransitive set of dice.",
        "",
        "",
        "",
        "We wish to investigate how many sets of nontransitive dice exist. We will assume the following conditions:There are three six-sided dice with each side having between 1 and N pips, inclusive.",
        "Dice with the same set of pips are equal, regardless of which side on the die the pips are located.",
        "The same pip value may appear on multiple dice; if both players roll the same value neither player wins.",
        "The sets of dice {A,B,C}, {B,C,A} and {C,A,B} are the same set.",
        "",
        "For N = 7 we find there are 9780 such sets.",
        "How many are there for N = 30 ?"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler376() {\n  // Good luck!\n  return true;\n}\n\neuler376();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 376 Nontransitive sets of dice",
      "dashedName": "problem-376-nontransitive-sets-of-dice"
    },
    {
      "id": "5900f4e51000cf542c50fff8",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler377()</code> should return 732385277.",
          "testString":
            "assert.strictEqual(euler377(), 732385277, '<code>euler377()</code> should return 732385277.');"
        }
      ],
      "description": [
        "There are 16 positive integers that do not have a zero in their digits and that have a digital sum equal to 5, namely: ",
        "5, 14, 23, 32, 41, 113, 122, 131, 212, 221, 311, 1112, 1121, 1211, 2111 and 11111.",
        "Their sum is 17891.",
        "",
        "",
        "Let f(n) be the sum of all positive integers that do not have a zero in their digits and have a digital sum equal to n.",
        "",
        "",
        "Find $\\displaystyle \\sum_{i=1}^{17} f(13^i)$.",
        "Give the last 9 digits as your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler377() {\n  // Good luck!\n  return true;\n}\n\neuler377();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 377 Sum of digits experience 13",
      "dashedName": "problem-377-sum-of-digits-experience-13"
    },
    {
      "id": "5900f4e61000cf542c50fff9",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler378()</code> should return 147534623725724700.",
          "testString":
            "assert.strictEqual(euler378(), 147534623725724700, '<code>euler378()</code> should return 147534623725724700.');"
        }
      ],
      "description": [
        "Let T(n) be the nth triangle number, so T(n) =",
        "",
        "",
        "n (n+1)2",
        "",
        ".",
        "",
        "",
        "Let dT(n) be the number of divisors of T(n).",
        "E.g.:",
        "T(7) = 28 and dT(7) = 6.",
        "",
        "",
        "Let Tr(n) be the number of triples (i, j, k) such that 1 ≤ i < j < k ≤ n and dT(i) > dT(j) > dT(k).",
        "Tr(20) = 14, Tr(100) = 5772 and Tr(1000) = 11174776.",
        "",
        "",
        "Find Tr(60 000 000). ",
        "Give the last 18 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler378() {\n  // Good luck!\n  return true;\n}\n\neuler378();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 378 Triangle Triples",
      "dashedName": "problem-378-triangle-triples"
    },
    {
      "id": "5900f4e81000cf542c50fffa",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler379()</code> should return 132314136838185.",
          "testString":
            "assert.strictEqual(euler379(), 132314136838185, '<code>euler379()</code> should return 132314136838185.');"
        }
      ],
      "description": [
        "Let f(n) be the number of couples (x,y) with x and y positive integers, x ≤ y and the least common multiple of x and y equal to n.",
        "",
        "",
        "Let g be the summatory function of f, i.e.: ",
        "g(n) = ∑ f(i)  for 1 ≤ i ≤ n.",
        "",
        "",
        "You are given that g(106) = 37429395.",
        "",
        "",
        "Find g(1012)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler379() {\n  // Good luck!\n  return true;\n}\n\neuler379();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 379 Least common multiple count",
      "dashedName": "problem-379-least-common-multiple-count"
    },
    {
      "id": "5900f4e81000cf542c50fffb",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler380()</code> should return Infinity.",
          "testString":
            "assert.strictEqual(euler380(), Infinity, '<code>euler380()</code> should return Infinity.');"
        }
      ],
      "description": [
        "An m×n maze is an m×n rectangular grid with walls placed between grid cells such that there is exactly one path from the top-left square to any other square. The following are examples of a 9×12 maze and a 15×20 maze:",
        "",
        "",
        "",
        "",
        "Let C(m,n) be the number of distinct m×n mazes. Mazes which can be formed by rotation and reflection from another maze are considered distinct.",
        "",
        "",
        "It can be verified that C(1,1) = 1, C(2,2) = 4, C(3,4) = 2415, and C(9,12) = 2.5720e46 (in scientific notation rounded to 5 significant digits).",
        "Find C(100,500) and write your answer in scientific notation rounded to 5 significant digits.",
        "",
        "",
        "When giving your answer, use a lowercase e to separate mantissa and exponent.",
        "E.g. if the answer is 1234567891011 then the answer format would be 1.2346e12."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler380() {\n  // Good luck!\n  return true;\n}\n\neuler380();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 380 Amazing Mazes",
      "dashedName": "problem-380-amazing-mazes"
    },
    {
      "id": "5900f4ea1000cf542c50fffc",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler381()</code> should return 139602943319822.",
          "testString":
            "assert.strictEqual(euler381(), 139602943319822, '<code>euler381()</code> should return 139602943319822.');"
        }
      ],
      "description": [
        "For a prime p let S(p) = (∑(p-k)!) mod(p) for 1 ≤ k ≤ 5.",
        "",
        "",
        "For example, if p=7,",
        "(7-1)! + (7-2)! + (7-3)! + (7-4)! + (7-5)! = 6! + 5! + 4! + 3! + 2! = 720+120+24+6+2 = 872. ",
        "As 872 mod(7) = 4, S(7) = 4.",
        "",
        "",
        "It can be verified that ∑S(p) = 480 for 5 ≤ p < 100.",
        "",
        "",
        "Find ∑S(p) for 5 ≤ p < 108."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler381() {\n  // Good luck!\n  return true;\n}\n\neuler381();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 381 primek factorial",
      "dashedName": "problem-381-primek-factorial"
    },
    {
      "id": "5900f4eb1000cf542c50fffd",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler382()</code> should return 697003956.",
          "testString":
            "assert.strictEqual(euler382(), 697003956, '<code>euler382()</code> should return 697003956.');"
        }
      ],
      "description": [
        "A polygon is a flat shape consisting of straight line segments that are joined to form a closed chain or circuit. A polygon consists of at least three sides and does not self-intersect.",
        "",
        "",
        "",
        "A set S of positive numbers is said to generate a polygon P if: no two sides of P are the same length,",
        " the length of every side of P is in S, and",
        " S contains no other value.",
        "",
        "For example:",
        "The set {3, 4, 5} generates a polygon with sides 3, 4, and 5 (a triangle).",
        "The set {6, 9, 11, 24} generates a polygon with sides 6, 9, 11, and 24 (a quadrilateral).",
        "The sets {1, 2, 3} and {2, 3, 4, 9} do not generate any polygon at all.",
        "",
        "",
        "Consider the sequence s, defined as follows:s1 = 1, s2 = 2, s3 = 3",
        "sn = sn-1 + sn-3 for n > 3.",
        "",
        "Let Un be the set {s1, s2, ..., sn}. For example, U10 = {1, 2, 3, 4, 6, 9, 13, 19, 28, 41}.",
        "Let f(n) be the number of subsets of Un which generate at least one polygon.",
        "For example, f(5) = 7, f(10) = 501 and f(25) = 18635853.",
        "",
        "",
        "",
        "Find the last 9 digits of f(1018)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler382() {\n  // Good luck!\n  return true;\n}\n\neuler382();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 382 Generating polygons",
      "dashedName": "problem-382-generating-polygons"
    },
    {
      "id": "5900f4ed1000cf542c50ffff",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler383()</code> should return 22173624649806.",
          "testString":
            "assert.strictEqual(euler383(), 22173624649806, '<code>euler383()</code> should return 22173624649806.');"
        }
      ],
      "description": [
        "Let f5(n) be the largest integer x for which 5x divides n.",
        "For example, f5(625000) = 7.",
        "",
        "",
        "",
        "Let T5(n) be the number of integers i which satisfy f5((2·i-1)!) < 2·f5(i!) and 1 ≤ i ≤ n.",
        "It can be verified that T5(103) = 68 and T5(109) = 2408210.",
        "",
        "",
        "",
        "Find T5(1018)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler383() {\n  // Good luck!\n  return true;\n}\n\neuler383();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 383 Divisibility comparison between factorials",
      "dashedName": "problem-383-divisibility-comparison-between-factorials"
    },
    {
      "id": "5900f4ed1000cf542c50fffe",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler384()</code> should return 3354706415856333000.",
          "testString":
            "assert.strictEqual(euler384(), 3354706415856333000, '<code>euler384()</code> should return 3354706415856333000.');"
        }
      ],
      "description": [
        "Define the sequence a(n) as the number of adjacent pairs of ones in the binary expansion of n (possibly overlapping).",
        "E.g.: a(5) = a(1012) = 0, a(6) = a(1102) = 1, a(7) = a(1112) = 2",
        "",
        "Define the sequence b(n) = (-1)a(n).",
        "This sequence is called the Rudin-Shapiro sequence.",
        "Also consider the summatory sequence of b(n): .",
        "",
        "The first couple of values of these sequences are:",
        "n        0     1     2     3     4     5     6     7",
        "a(n)     0     0     0     1     0     0     1     2",
        "b(n)     1     1     1    -1     1     1    -1     1",
        "s(n)     1     2     3     2     3     4     3     4",
        "",
        "The sequence s(n) has the remarkable property that all elements are positive and every positive integer k occurs exactly k times.",
        "",
        "Define g(t,c), with 1 ≤ c ≤ t, as the index in s(n) for which t occurs for the c'th time in s(n).",
        "E.g.: g(3,3) = 6, g(4,2) = 7 and g(54321,12345) = 1220847710.",
        "",
        "Let F(n) be the fibonacci sequence defined by:",
        "F(0)=F(1)=1 and",
        "F(n)=F(n-1)+F(n-2) for n>1.",
        "",
        "Define GF(t)=g(F(t),F(t-1)).",
        "",
        "Find ΣGF(t) for 2≤t≤45."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler384() {\n  // Good luck!\n  return true;\n}\n\neuler384();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 384 RudinShapiro sequence",
      "dashedName": "problem-384-rudinshapiro-sequence"
    },
    {
      "id": "5900f4ee1000cf542c510000",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler385()</code> should return 3776957309612154000.",
          "testString":
            "assert.strictEqual(euler385(), 3776957309612154000, '<code>euler385()</code> should return 3776957309612154000.');"
        }
      ],
      "description": [
        "For any triangle T in the plane, it can be shown that there is a unique ellipse with largest area that is completely inside T.",
        "",
        "",
        "",
        "For a given n, consider triangles T such that:",
        "- the vertices of T have integer coordinates with absolute value ≤ n, and ",
        "- the foci1 of the largest-area ellipse inside T are (√13,0) and (-√13,0).",
        "Let A(n) be the sum of the areas of all such triangles.",
        "",
        "",
        "For example, if n = 8, there are two such triangles. Their vertices are (-4,-3),(-4,3),(8,0) and (4,3),(4,-3),(-8,0), and the area of each triangle is 36. Thus A(8) = 36 + 36 = 72.",
        "",
        "",
        "It can be verified that A(10) = 252, A(100) = 34632 and A(1000) = 3529008.",
        "",
        "",
        "Find A(1 000 000 000).",
        "",
        "",
        "",
        "1The foci (plural of focus) of an ellipse are two points A and B such that for every point P on the boundary of the ellipse, AP + PB is constant."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler385() {\n  // Good luck!\n  return true;\n}\n\neuler385();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 385 Ellipses inside triangles",
      "dashedName": "problem-385-ellipses-inside-triangles"
    },
    {
      "id": "5900f4ef1000cf542c510001",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler386()</code> should return 528755790.",
          "testString":
            "assert.strictEqual(euler386(), 528755790, '<code>euler386()</code> should return 528755790.');"
        }
      ],
      "description": [
        "Let n be an integer and S(n) be the set of factors of n.",
        "",
        "A subset A of S(n) is called an antichain of S(n) if A contains only one element or if none of the elements of A divides any of the other elements of A.",
        "",
        "For example: S(30) = {1, 2, 3, 5, 6, 10, 15, 30}",
        "{2, 5, 6} is not an antichain of S(30).",
        "{2, 3, 5} is an antichain of S(30).",
        "",
        "Let N(n) be the maximum length of an antichain of S(n).",
        "",
        "Find ΣN(n) for 1 ≤ n ≤ 108"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler386() {\n  // Good luck!\n  return true;\n}\n\neuler386();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 386 Maximum length of an antichain",
      "dashedName": "problem-386-maximum-length-of-an-antichain"
    },
    {
      "id": "5900f4f11000cf542c510003",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler387()</code> should return 696067597313468.",
          "testString":
            "assert.strictEqual(euler387(), 696067597313468, '<code>euler387()</code> should return 696067597313468.');"
        }
      ],
      "description": [
        "A Harshad or Niven number is a number that is divisible by the sum of its digits.",
        "201 is a Harshad number because it is divisible by 3 (the sum of its digits.)",
        "When we truncate the last digit from 201, we get 20, which is a Harshad number.",
        "When we truncate the last digit from 20, we get 2, which is also a Harshad number.",
        "Let's call a Harshad number that, while recursively truncating the last digit, always results in a Harshad number a right truncatable Harshad number.  ",
        "",
        "Also:",
        "201/3=67 which is prime.",
        "Let's call a Harshad number that, when divided by the sum of its digits, results in a prime a strong Harshad number.",
        "",
        "Now take the number 2011 which is prime.",
        "When we truncate the last digit from it we get 201, a strong Harshad number that is also right truncatable.",
        "Let's call such primes strong, right truncatable Harshad primes.",
        "",
        "You are given that the sum of the strong, right truncatable Harshad primes less than 10000 is 90619.",
        "",
        "Find the sum of the strong, right truncatable Harshad primes less than 1014."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler387() {\n  // Good luck!\n  return true;\n}\n\neuler387();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 387 Harshad Numbers",
      "dashedName": "problem-387-harshad-numbers"
    },
    {
      "id": "5900f4f11000cf542c510002",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler388()</code> should return 831907372805130000.",
          "testString":
            "assert.strictEqual(euler388(), 831907372805130000, '<code>euler388()</code> should return 831907372805130000.');"
        }
      ],
      "description": [
        "Consider all lattice points (a,b,c) with 0 ≤ a,b,c ≤ N.",
        "",
        "",
        "From the origin O(0,0,0) all lines are drawn to the other lattice points.",
        "Let D(N) be the number of distinct such lines.",
        "",
        "",
        "You are given that D(1 000 000) = 831909254469114121.",
        "",
        "Find D(1010). Give as your answer the first nine digits followed by the last nine digits."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler388() {\n  // Good luck!\n  return true;\n}\n\neuler388();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 388 Distinct Lines",
      "dashedName": "problem-388-distinct-lines"
    },
    {
      "id": "5900f4f21000cf542c510004",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler389()</code> should return 2406376.3623.",
          "testString":
            "assert.strictEqual(euler389(), 2406376.3623, '<code>euler389()</code> should return 2406376.3623.');"
        }
      ],
      "description": [
        "An unbiased single 4-sided die is thrown and its value, T, is noted.T unbiased 6-sided dice are thrown and their scores are added together. The sum, C, is noted.C unbiased 8-sided dice are thrown and their scores are added together. The sum, O, is noted.O unbiased 12-sided dice are thrown and their scores are added together. The sum, D, is noted.D unbiased 20-sided dice are thrown and their scores are added together. The sum, I, is noted.",
        "Find the variance of I, and give your answer rounded to 4 decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler389() {\n  // Good luck!\n  return true;\n}\n\neuler389();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 389 Platonic Dice",
      "dashedName": "problem-389-platonic-dice"
    },
    {
      "id": "5900f4f21000cf542c510005",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler390()</code> should return 2919133642971.",
          "testString":
            "assert.strictEqual(euler390(), 2919133642971, '<code>euler390()</code> should return 2919133642971.');"
        }
      ],
      "description": [
        "Consider the triangle with sides √5, √65 and √68.",
        "It can be shown that this triangle has area 9.",
        "",
        "S(n) is the sum of the areas of  all triangles with sides √(1+b2), √(1+c2) and √(b2+c2) (for positive integers b and c ) that have an integral area not exceeding n.",
        "",
        "The example triangle has b=2 and c=8.",
        "",
        "S(106)=18018206.",
        "",
        "Find S(1010)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler390() {\n  // Good luck!\n  return true;\n}\n\neuler390();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 390 Triangles with non rational sides and integral area",
      "dashedName":
        "problem-390-triangles-with-non-rational-sides-and-integral-area"
    },
    {
      "id": "5900f4f31000cf542c510006",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler391()</code> should return 61029882288.",
          "testString":
            "assert.strictEqual(euler391(), 61029882288, '<code>euler391()</code> should return 61029882288.');"
        }
      ],
      "description": [
        "Let sk be the number of 1’s when writing the numbers from 0 to k in binary.",
        "For example, writing 0 to 5 in binary, we have 0, 1, 10, 11, 100, 101. There are seven 1’s, so s5 = 7.",
        "The sequence S = {sk : k ≥ 0} starts {0, 1, 2, 4, 5, 7, 9, 12, ...}.",
        "",
        "",
        "A game is played by two players. Before the game starts, a number n is chosen. A counter c starts at 0. At each turn, the player chooses a number from 1 to n (inclusive) and increases c by that number. The resulting value of c must be a member of S. If there are no more valid moves, the player loses.",
        "",
        "",
        "",
        "For example:",
        "Let n = 5. c starts at 0.",
        "Player 1 chooses 4, so c becomes 0 + 4 = 4.",
        "Player 2 chooses 5, so c becomes 4 + 5 = 9.",
        "Player 1 chooses 3, so c becomes 9 + 3 = 12.",
        "etc.",
        "Note that c must always belong to S, and each player can increase c by at most n.",
        "",
        "",
        "",
        "Let M(n) be the highest number the first player can choose at her first turn to force a win, and M(n) = 0 if there is no such move. For example, M(2) = 2, M(7) = 1 and M(20) = 4.",
        "",
        "",
        "",
        "Given Σ(M(n))3 = 8150 for 1 ≤ n ≤ 20.",
        "",
        "",
        "",
        "Find Σ(M(n))3 for 1 ≤ n ≤ 1000."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler391() {\n  // Good luck!\n  return true;\n}\n\neuler391();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 391 Hopping Game",
      "dashedName": "problem-391-hopping-game"
    },
    {
      "id": "5900f4f41000cf542c510007",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler392()</code> should return 3.1486734435.",
          "testString":
            "assert.strictEqual(euler392(), 3.1486734435, '<code>euler392()</code> should return 3.1486734435.');"
        }
      ],
      "description": [
        "A rectilinear grid is an orthogonal grid where the spacing between the gridlines does not have to be equidistant.",
        "An example of such grid is logarithmic graph paper.",
        "",
        "",
        "Consider rectilinear grids in the Cartesian coordinate system with the following properties:The gridlines are parallel to the axes of the Cartesian coordinate system.There are N+2 vertical and N+2 horizontal gridlines. Hence there are (N+1) x (N+1) rectangular cells.The equations of the two outer vertical gridlines are x = -1 and x = 1.The equations of the two outer horizontal gridlines are y = -1 and y = 1.The grid cells are colored red if they overlap with the unit circle, black otherwise.For this problem we would like you to find the positions of the remaining N inner horizontal and N inner vertical gridlines so that the area occupied by the red cells is minimized.",
        "",
        "",
        "E.g. here is a picture of the solution for N = 10:",
        "",
        "",
        "",
        "",
        "The area occupied by the red cells for N = 10 rounded to 10 digits behind the decimal point is 3.3469640797.",
        "",
        "",
        "Find the positions for N = 400. ",
        "Give as your answer the area occupied by the red cells rounded to 10 digits behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler392() {\n  // Good luck!\n  return true;\n}\n\neuler392();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 392 Enmeshed unit circle",
      "dashedName": "problem-392-enmeshed-unit-circle"
    },
    {
      "id": "5900f4f61000cf542c510008",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler393()</code> should return 112398351350823100.",
          "testString":
            "assert.strictEqual(euler393(), 112398351350823100, '<code>euler393()</code> should return 112398351350823100.');"
        }
      ],
      "description": [
        "An  n×n grid of squares contains  n2 ants, one ant per square.",
        "All ants decide to move simultaneously to an adjacent square (usually 4 possibilities, except for ants on the edge of the grid or at the corners).",
        "We define f(n) to be the number of ways this can happen without any ants ending on the same square and without any two ants crossing the same edge between two squares.",
        "",
        "",
        "You are given that f(4) = 88.",
        "Find  f(10)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler393() {\n  // Good luck!\n  return true;\n}\n\neuler393();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 393 Migrating ants",
      "dashedName": "problem-393-migrating-ants"
    },
    {
      "id": "5900f4f71000cf542c510009",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler394()</code> should return 3.2370342194.",
          "testString":
            "assert.strictEqual(euler394(), 3.2370342194, '<code>euler394()</code> should return 3.2370342194.');"
        }
      ],
      "description": [
        "Jeff eats a pie in an unusual way.",
        "The pie is circular. He starts with slicing an initial cut in the pie along a radius.",
        "While there is at least a given fraction F of pie left, he performs the following procedure:",
        "- He makes two slices from the pie centre to any point of what is remaining of the pie border, any point on the remaining pie border equally likely. This will divide the remaining pie into three pieces. ",
        "- Going counterclockwise from the initial cut, he takes the first two pie pieces and eats them.",
        "When less than a fraction F of pie remains, he does not repeat this procedure. Instead, he eats all of the remaining pie.",
        "",
        "",
        "",
        "",
        "",
        "",
        "For x ≥ 1, let E(x) be the expected number of times Jeff repeats the procedure above with F = 1/x.",
        "It can be verified that  E(1) = 1, E(2) ≈ 1.2676536759, and E(7.5) ≈ 2.1215732071.",
        "",
        "",
        "Find E(40) rounded to 10 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler394() {\n  // Good luck!\n  return true;\n}\n\neuler394();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 394 Eating pie",
      "dashedName": "problem-394-eating-pie"
    },
    {
      "id": "5900f4f71000cf542c51000a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler395()</code> should return 28.2453753155.",
          "testString":
            "assert.strictEqual(euler395(), 28.2453753155, '<code>euler395()</code> should return 28.2453753155.');"
        }
      ],
      "description": [
        "The Pythagorean tree is a fractal generated by the following procedure:",
        "",
        "",
        "",
        "Start with a unit square. Then, calling one of the sides its base (in the animation, the bottom side is the base):",
        " Attach a right triangle to the side opposite the base, with the hypotenuse coinciding with that side and with the sides in a 3-4-5 ratio. Note that the smaller side of the triangle must be on the 'right' side with respect to the base (see animation).",
        " Attach a square to each leg of the right triangle, with one of its sides coinciding with that leg.",
        " Repeat this procedure for both squares, considering as their bases the sides touching the triangle.",
        "",
        "The resulting figure, after an infinite number of iterations, is the Pythagorean tree.",
        "",
        "",
        "",
        "",
        "",
        "It can be shown that there exists at least one rectangle, whose sides are parallel to the largest square of the Pythagorean tree, which encloses the Pythagorean tree completely.",
        "",
        "",
        "Find the smallest area possible for such a bounding rectangle, and give your answer rounded to 10 decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler395() {\n  // Good luck!\n  return true;\n}\n\neuler395();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 395 Pythagorean tree",
      "dashedName": "problem-395-pythagorean-tree"
    },
    {
      "id": "5900f4f81000cf542c51000b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler396()</code> should return 173214653.",
          "testString":
            "assert.strictEqual(euler396(), 173214653, '<code>euler396()</code> should return 173214653.');"
        }
      ],
      "description": [
        "For any positive integer n, the nth weak Goodstein sequence {g1, g2, g3, ...} is defined as:",
        " g1 = n",
        " for k > 1, gk is obtained by writing gk-1 in base k, interpreting it as a base k + 1 number, and subtracting 1.",
        "",
        "The sequence terminates when gk becomes 0.",
        "",
        "",
        "For example, the 6th weak Goodstein sequence is {6, 11, 17, 25, ...}:",
        " g1 = 6.",
        " g2 = 11 since 6 = 1102, 1103 = 12, and 12 - 1 = 11.",
        " g3 = 17 since 11 = 1023, 1024 = 18, and 18 - 1 = 17.",
        " g4 = 25 since 17 = 1014, 1015 = 26, and 26 - 1 = 25.",
        "",
        "and so on.",
        "",
        "",
        "It can be shown that every weak Goodstein sequence terminates.",
        "",
        "",
        "Let G(n) be the number of nonzero elements in the nth weak Goodstein sequence.",
        "It can be verified that G(2) = 3, G(4) = 21 and G(6) = 381.",
        "It can also be verified that ΣG(n) = 2517 for 1 ≤ n < 8.",
        "",
        "",
        "Find the last 9 digits of ΣG(n) for 1 ≤ n < 16."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler396() {\n  // Good luck!\n  return true;\n}\n\neuler396();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 396 Weak Goodstein sequence",
      "dashedName": "problem-396-weak-goodstein-sequence"
    },
    {
      "id": "5900f4f91000cf542c51000c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler397()</code> should return 141630459461893730.",
          "testString":
            "assert.strictEqual(euler397(), 141630459461893730, '<code>euler397()</code> should return 141630459461893730.');"
        }
      ],
      "description": [
        "On the parabola y = x2/k, three points A(a, a2/k), B(b, b2/k) and C(c, c2/k) are chosen.",
        "",
        "",
        "Let F(K, X) be the number of the integer quadruplets (k, a, b, c) such that at least one angle of the triangle ABC is 45-degree, with 1 ≤ k ≤ K and -X ≤ a < b < c ≤ X.",
        "",
        "",
        "For example, F(1, 10) = 41 and F(10, 100) = 12492.",
        "Find F(106, 109)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler397() {\n  // Good luck!\n  return true;\n}\n\neuler397();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 397 Triangle on parabola",
      "dashedName": "problem-397-triangle-on-parabola"
    },
    {
      "id": "5900f4fa1000cf542c51000d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler398()</code> should return 2010.59096.",
          "testString":
            "assert.strictEqual(euler398(), 2010.59096, '<code>euler398()</code> should return 2010.59096.');"
        }
      ],
      "description": [
        "Inside a rope of length n, n-1 points are placed with distance 1 from each other and from the endpoints. Among these points, we choose m-1 points at random and cut the rope at these points to create m segments.",
        "",
        "",
        "Let E(n, m) be the expected length of the second-shortest segment.",
        "For example, E(3, 2) = 2 and E(8, 3) = 16/7.",
        "Note that if multiple segments have the same shortest length the length of the second-shortest segment is defined as the same as the shortest length.",
        "",
        "",
        "Find E(107, 100).",
        "Give your answer rounded to 5 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler398() {\n  // Good luck!\n  return true;\n}\n\neuler398();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 398 Cutting rope",
      "dashedName": "problem-398-cutting-rope"
    },
    {
      "id": "5900f4fc1000cf542c51000e",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>euler399()</code> should return 1508395636674243, 6.5e27330467.",
          "testString":
            "assert.strictEqual(euler399(), 1508395636674243, 6.5e27330467, '<code>euler399()</code> should return 1508395636674243, 6.5e27330467.');"
        }
      ],
      "description": [
        "The first 15 fibonacci numbers are:",
        "1,1,2,3,5,8,13,21,34,55,89,144,233,377,610.",
        "It can be seen that 8 and 144 are not squarefree: 8 is divisible by 4 and 144 is divisible by 4 and by 9. ",
        "So the first 13 squarefree fibonacci numbers are:",
        "1,1,2,3,5,13,21,34,55,89,233,377 and 610.",
        "",
        "",
        "The 200th squarefree fibonacci number is:",
        "971183874599339129547649988289594072811608739584170445.",
        "The last sixteen digits of this number are: 1608739584170445 and in scientific notation this number can be written as 9.7e53.",
        "",
        "",
        "Find the 100 000 000th squarefree fibonacci number.",
        "Give as your answer its last sixteen digits followed by a comma followed by the number in scientific notation (rounded to one digit after the decimal point).",
        "For the 200th squarefree number the answer would have been: 1608739584170445,9.7e53",
        "",
        "",
        "",
        "Note: ",
        "For this problem, assume that for every prime p, the first fibonacci number divisible by p is not divisible by p2 (this is part of Wall's conjecture). This has been verified for primes ≤ 3·1015, but has not been proven in general.",
        "",
        "If it happens that the conjecture is false, then the accepted answer to this problem isn't guaranteed to be the 100 000 000th squarefree fibonacci number, rather it represents only a lower bound for that number."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler399() {\n  // Good luck!\n  return true;\n}\n\neuler399();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 399 Squarefree Fibonacci Numbers",
      "dashedName": "problem-399-squarefree-fibonacci-numbers"
    },
    {
      "id": "5900f4fe1000cf542c510010",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler400()</code> should return 438505383468410600.",
          "testString":
            "assert.strictEqual(euler400(), 438505383468410600, '<code>euler400()</code> should return 438505383468410600.');"
        }
      ],
      "description": [
        "A Fibonacci tree is a binary tree recursively defined as:T(0) is the empty tree.",
        "T(1) is the binary tree with only one node.",
        "T(k) consists of a root node that has T(k-1) and T(k-2) as children.",
        "",
        "On such a tree two players play a take-away game. On each turn a player selects a node and removes that node along with the subtree rooted at that node.",
        "The player who is forced to take the root node of the entire tree loses.",
        "",
        "",
        "Here are the winning moves of the first player on the first turn for T(k) from k=1 to k=6.",
        "",
        "",
        "",
        "",
        "Let f(k) be the number of winning moves of the first player (i.e. the moves for which the second player has no winning strategy) on the first turn of the game when this game is played on T(k).",
        "",
        "",
        "",
        "For example, f(5) = 1 and f(10) = 17.",
        "",
        "",
        "",
        "Find f(10000). Give the last 18 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler400() {\n  // Good luck!\n  return true;\n}\n\neuler400();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 400 Fibonacci tree game",
      "dashedName": "problem-400-fibonacci-tree-game"
    },
    {
      "id": "5900f4fd1000cf542c51000f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler401()</code> should return 281632621.",
          "testString":
            "assert.strictEqual(euler401(), 281632621, '<code>euler401()</code> should return 281632621.');"
        }
      ],
      "description": [
        "The divisors of 6 are 1,2,3 and 6.",
        "The sum of the squares of these numbers is 1+4+9+36=50.",
        "",
        "",
        "Let sigma2(n) represent the sum of the squares of the divisors of n.",
        "Thus sigma2(6)=50.",
        "",
        "Let SIGMA2 represent the summatory function of sigma2, that is SIGMA2(n)=∑sigma2(i) for i=1 to n.",
        "The first 6 values of SIGMA2 are: 1,6,16,37,63 and 113.",
        "",
        "",
        "Find SIGMA2(1015) modulo 109."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler401() {\n  // Good luck!\n  return true;\n}\n\neuler401();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 401 Sum of squares of divisors",
      "dashedName": "problem-401-sum-of-squares-of-divisors"
    },
    {
      "id": "5900f4ff1000cf542c510011",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler402()</code> should return 356019862.",
          "testString":
            "assert.strictEqual(euler402(), 356019862, '<code>euler402()</code> should return 356019862.');"
        }
      ],
      "description": [
        "It can be shown that the polynomial n4 + 4n3 + 2n2 + 5n is a multiple of 6 for every integer n. It can also be shown that 6 is the largest integer satisfying this property.",
        "",
        "",
        "Define M(a, b, c) as the maximum m such that n4 + an3 + bn2 + cn is a multiple of m for all integers n. For example, M(4, 2, 5) = 6.",
        "",
        "",
        "Also, define S(N) as the sum of M(a, b, c) for all 0 < a, b, c ≤ N.",
        "",
        "",
        "We can verify that S(10) = 1972 and S(10000) = 2024258331114.",
        "",
        "",
        "Let Fk be the Fibonacci sequence:",
        "F0 = 0, F1 = 1 and",
        "Fk = Fk-1 + Fk-2 for k ≥ 2.",
        "",
        "",
        "Find the last 9 digits of Σ S(Fk) for 2 ≤ k ≤ 1234567890123."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler402() {\n  // Good luck!\n  return true;\n}\n\neuler402();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 402 Integervalued polynomials",
      "dashedName": "problem-402-integervalued-polynomials"
    },
    {
      "id": "5900f5001000cf542c510013",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler403()</code> should return 18224771.",
          "testString":
            "assert.strictEqual(euler403(), 18224771, '<code>euler403()</code> should return 18224771.');"
        }
      ],
      "description": [
        "For integers a and b, we define D(a, b) as the domain enclosed by the parabola y = x2 and the line y = a·x + b:D(a, b) = { (x, y) | x2 ≤ y ≤ a·x + b }.",
        "",
        "",
        "L(a, b) is defined as the number of lattice points contained in D(a, b).",
        "For example, L(1, 2) = 8 and L(2, -1) = 1.",
        "",
        "",
        "We also define S(N) as the sum of L(a, b) for all the pairs (a, b) such that the area of D(a, b) is a rational number and |a|,|b| ≤ N.",
        "We can verify that S(5) = 344 and S(100) = 26709528.",
        "",
        "",
        "Find S(1012). Give your answer mod 108."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler403() {\n  // Good luck!\n  return true;\n}\n\neuler403();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 403 Lattice points enclosed by parabola and line",
      "dashedName": "problem-403-lattice-points-enclosed-by-parabola-and-line"
    },
    {
      "id": "5900f5001000cf542c510012",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler404()</code> should return 1199215615081353.",
          "testString":
            "assert.strictEqual(euler404(), 1199215615081353, '<code>euler404()</code> should return 1199215615081353.');"
        }
      ],
      "description": [
        "Ea is an ellipse with an equation of the form x2 + 4y2 = 4a2.",
        "Ea' is the rotated image of Ea by θ degrees counterclockwise around the origin O(0, 0) for 0° < θ < 90°.",
        "",
        "",
        "",
        "",
        "",
        "",
        "b is the distance to the origin of the two intersection points closest to the origin and c is the distance of the two other intersection points.",
        "We call an ordered triplet (a, b, c) a canonical ellipsoidal triplet if a, b and c are positive integers.",
        "For example, (209, 247, 286) is a canonical ellipsoidal triplet.",
        "",
        "",
        "",
        "Let C(N) be the number of distinct canonical ellipsoidal triplets (a, b, c) for a ≤ N.",
        "It can be verified that C(103) = 7, C(104) = 106 and C(106) = 11845.",
        "",
        "",
        "",
        "Find C(1017)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler404() {\n  // Good luck!\n  return true;\n}\n\neuler404();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 404 Crisscross Ellipses",
      "dashedName": "problem-404-crisscross-ellipses"
    },
    {
      "id": "5900f5021000cf542c510014",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler405()</code> should return 237696125.",
          "testString":
            "assert.strictEqual(euler405(), 237696125, '<code>euler405()</code> should return 237696125.');"
        }
      ],
      "description": [
        "We wish to tile a rectangle whose length is twice its width.",
        "Let T(0) be the tiling consisting of a single rectangle.",
        "For n > 0, let T(n) be obtained from T(n-1) by replacing all tiles in the following manner:",
        "",
        "",
        "",
        "",
        "",
        "",
        "The following animation demonstrates the tilings T(n) for n from 0 to 5:",
        "",
        "",
        "",
        "",
        "",
        "",
        "Let f(n) be the number of points where four tiles meet in T(n).",
        "For example, f(1) = 0, f(4) = 82 and f(109) mod 177 = 126897180.",
        "",
        "",
        "",
        "Find f(10k) for k = 1018, give your answer modulo 177."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler405() {\n  // Good luck!\n  return true;\n}\n\neuler405();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 405 A rectangular tiling",
      "dashedName": "problem-405-a-rectangular-tiling"
    },
    {
      "id": "5900f5021000cf542c510015",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler406()</code> should return 36813.12757207.",
          "testString":
            "assert.strictEqual(euler406(), 36813.12757207, '<code>euler406()</code> should return 36813.12757207.');"
        }
      ],
      "description": [
        "We are trying to find a hidden number selected from the set of integers {1, 2, ..., n} by asking questions. ",
        "Each number (question) we ask, we get one of three possible answers: \"Your guess is lower than the hidden number\" (and you incur a cost of a), or",
        " \"Your guess is higher than the hidden number\" (and you incur a cost of b), or",
        " \"Yes, that's it!\" (and the game ends).",
        "Given the value of n, a, and b, an optimal strategy minimizes the total cost for the worst possible case.",
        "",
        "For example, if n = 5, a = 2, and b = 3, then we may begin by asking \"2\" as our first question.",
        "",
        "If we are told that 2 is higher than the hidden number (for a cost of b=3), then we are sure that \"1\" is the hidden number (for a total cost of 3).",
        "If we are told that 2 is lower than the hidden number (for a cost of a=2), then our next question will be \"4\".",
        "If we are told that 4 is higher than the hidden number (for a cost of b=3), then we are sure that \"3\" is the hidden number (for a total cost of 2+3=5).",
        "If we are told that 4 is lower than the hidden number (for a cost of a=2), then we are sure that \"5\" is the hidden number (for a total cost of 2+2=4).",
        "Thus, the worst-case cost achieved by this strategy is 5. It can also be shown that this is the lowest worst-case cost that can be achieved. ",
        "So, in fact, we have just described an optimal strategy for the given values of n, a, and b.",
        "",
        "Let C(n, a, b) be the worst-case cost achieved by an optimal strategy for the given values of n, a, and b.",
        "",
        "Here are a few examples:",
        "C(5, 2, 3) = 5",
        "C(500, √2, √3) = 13.22073197...",
        "C(20000, 5, 7) = 82",
        "C(2000000, √5, √7) = 49.63755955...",
        "",
        "Let Fk be the Fibonacci numbers: Fk = Fk-1 + Fk-2 with base cases F1 = F2 = 1.Find ∑1≤k≤30 C(1012, √k, √Fk), and give your answer rounded to 8 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler406() {\n  // Good luck!\n  return true;\n}\n\neuler406();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 406 Guessing Game",
      "dashedName": "problem-406-guessing-game"
    },
    {
      "id": "5900f5041000cf542c510016",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler407()</code> should return 39782849136421.",
          "testString":
            "assert.strictEqual(euler407(), 39782849136421, '<code>euler407()</code> should return 39782849136421.');"
        }
      ],
      "description": [
        "If we calculate a2 mod 6 for 0 ≤ a ≤ 5 we get: 0,1,4,3,4,1.",
        "",
        "",
        "The largest value of a such that a2 ≡ a mod 6 is 4.",
        "Let's call M(n) the largest value of a < n such that a2 ≡ a (mod n).",
        "So M(6) = 4.",
        "",
        "",
        "Find ∑M(n) for 1 ≤ n ≤ 107."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler407() {\n  // Good luck!\n  return true;\n}\n\neuler407();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 407 Idempotents",
      "dashedName": "problem-407-idempotents"
    },
    {
      "id": "5900f5091000cf542c51001b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler408()</code> should return 299742733.",
          "testString":
            "assert.strictEqual(euler408(), 299742733, '<code>euler408()</code> should return 299742733.');"
        }
      ],
      "description": [
        "Let's call a lattice point (x, y) inadmissible if x, y and x + y are all positive perfect squares.",
        "For example, (9, 16) is inadmissible, while (0, 4), (3, 1) and (9, 4) are not.",
        "",
        "Consider a path from point (x1, y1) to point (x2, y2) using only unit steps north or east.",
        "Let's call such a path admissible if none of its intermediate points are inadmissible.",
        "",
        "Let P(n) be the number of admissible paths from (0, 0) to (n, n).",
        "It can be verified that P(5) = 252, P(16) = 596994440 and P(1000) mod 1 000 000 007 = 341920854.",
        "",
        "Find P(10 000 000) mod 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler408() {\n  // Good luck!\n  return true;\n}\n\neuler408();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 408 Admissible paths through a grid",
      "dashedName": "problem-408-admissible-paths-through-a-grid"
    },
    {
      "id": "5900f5061000cf542c510017",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler409()</code> should return 253223948.",
          "testString":
            "assert.strictEqual(euler409(), 253223948, '<code>euler409()</code> should return 253223948.');"
        }
      ],
      "description": [
        "Let n be a positive integer. Consider nim positions where:There are n non-empty piles.",
        "Each pile has size less than 2n.",
        "No two piles have the same size.",
        "Let W(n) be the number of winning nim positions satisfying the above",
        "conditions (a position is winning if the first player has a winning strategy). For example, W(1) = 1, W(2) = 6, W(3) = 168, W(5) = 19764360 and W(100) mod 1 000 000 007 = 384777056.",
        "",
        "Find W(10 000 000) mod 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler409() {\n  // Good luck!\n  return true;\n}\n\neuler409();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 409 Nim Extreme",
      "dashedName": "problem-409-nim-extreme"
    },
    {
      "id": "5900f5071000cf542c510018",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler410()</code> should return 799999783589946600.",
          "testString":
            "assert.strictEqual(euler410(), 799999783589946600, '<code>euler410()</code> should return 799999783589946600.');"
        }
      ],
      "description": [
        "Let C be the circle with radius r, x2 + y2 = r2. We choose two points P(a, b) and Q(-a, c) so that the line passing through P and Q is tangent to C.",
        "",
        "For example, the quadruplet (r, a, b, c) = (2, 6, 2, -7) satisfies this property.",
        "",
        "Let F(R, X) be the number of the integer quadruplets (r, a, b, c) with this property, and with 0 < r ≤ R and 0 < a ≤ X.",
        "",
        "We can verify that F(1, 5) = 10, F(2, 10) = 52 and F(10, 100) = 3384.",
        "Find F(108, 109) + F(109, 108)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler410() {\n  // Good luck!\n  return true;\n}\n\neuler410();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 410 Circle and tangent line",
      "dashedName": "problem-410-circle-and-tangent-line"
    },
    {
      "id": "5900f5081000cf542c510019",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler411()</code> should return 9936352.",
          "testString":
            "assert.strictEqual(euler411(), 9936352, '<code>euler411()</code> should return 9936352.');"
        }
      ],
      "description": [
        "Let n be a positive integer. Suppose there are stations at the coordinates (x, y) = (2i mod n, 3i mod n) for 0 ≤ i ≤ 2n. We will consider stations with the same coordinates as the same station.",
        "",
        "We wish to form a path from (0, 0) to (n, n) such that the x and y coordinates never decrease.",
        "Let S(n) be the maximum number of stations such a path can pass through.",
        "",
        "For example, if n = 22, there are 11 distinct stations, and a valid path can pass through at most 5 stations. Therefore, S(22) = 5.",
        "The case is illustrated below, with an example of an optimal path:",
        "",
        "",
        "",
        "It can also be verified that S(123) = 14 and S(10000) = 48.",
        "",
        "Find ∑ S(k5) for 1 ≤ k ≤ 30."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler411() {\n  // Good luck!\n  return true;\n}\n\neuler411();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 411 Uphill paths",
      "dashedName": "problem-411-uphill-paths"
    },
    {
      "id": "5900f5081000cf542c51001a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler412()</code> should return 38788800.",
          "testString":
            "assert.strictEqual(euler412(), 38788800, '<code>euler412()</code> should return 38788800.');"
        }
      ],
      "description": [
        "For integers m, n (0 ≤ n < m), let L(m, n) be an m×m grid with the top-right n×n grid removed.",
        "",
        "For example, L(5, 3) looks like this:",
        "",
        "",
        "",
        "We want to number each cell of L(m, n) with consecutive integers 1, 2, 3, ... such that the number in every cell is smaller than the number below it and to the left of it.",
        "",
        "For example, here are two valid numberings of L(5, 3):",
        "",
        "",
        "Let LC(m, n) be the number of valid numberings of L(m, n).",
        "It can be verified that LC(3, 0) = 42, LC(5, 3) = 250250, LC(6, 3) = 406029023400 and LC(10, 5) mod 76543217 = 61251715.",
        "",
        "Find LC(10000, 5000) mod 76543217."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler412() {\n  // Good luck!\n  return true;\n}\n\neuler412();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 412 Gnomon numbering",
      "dashedName": "problem-412-gnomon-numbering"
    },
    {
      "id": "5900f50a1000cf542c51001c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler413()</code> should return 3079418648040719.",
          "testString":
            "assert.strictEqual(euler413(), 3079418648040719, '<code>euler413()</code> should return 3079418648040719.');"
        }
      ],
      "description": [
        "We say that a d-digit positive number (no leading zeros) is a one-child number if exactly one of its sub-strings is divisible by d.",
        "",
        "For example, 5671 is a 4-digit one-child number. Among all its sub-strings 5, 6, 7, 1, 56, 67, 71, 567, 671 and 5671, only 56 is divisible by 4.",
        "Similarly, 104 is a 3-digit one-child number because only 0 is divisible by 3.",
        "1132451 is a 7-digit one-child number because only 245 is divisible by 7.",
        "",
        "Let F(N) be the number of the one-child numbers less than N.",
        "We can verify that F(10) = 9, F(103) = 389 and F(107) = 277674.",
        "",
        "Find F(1019)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler413() {\n  // Good luck!\n  return true;\n}\n\neuler413();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 413 Onechild Numbers",
      "dashedName": "problem-413-onechild-numbers"
    },
    {
      "id": "5900f50b1000cf542c51001d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler414()</code> should return 552506775824935500.",
          "testString":
            "assert.strictEqual(euler414(), 552506775824935500, '<code>euler414()</code> should return 552506775824935500.');"
        }
      ],
      "description": [
        "6174 is a remarkable number; if we sort its digits in increasing order and subtract that number from the number you get when you sort the digits in decreasing order, we get 7641-1467=6174.",
        "Even more remarkable is that if we start from any 4 digit number and repeat this process of sorting and subtracting, we'll eventually end up with 6174 or immediately with 0 if all digits are equal. ",
        "This also works with numbers that have less than 4 digits if we pad the number with leading zeroes until we have 4 digits.",
        "E.g. let's start with the number 0837:",
        "8730-0378=8352",
        "8532-2358=6174",
        "",
        "",
        "6174 is called the Kaprekar constant. The process of sorting and subtracting and repeating this until either 0 or the Kaprekar constant is reached is called the Kaprekar routine.",
        "",
        "",
        "We can consider the Kaprekar routine for other bases and number of digits. ",
        "Unfortunately, it is not guaranteed a Kaprekar constant exists in all cases; either the routine can end up in a cycle for some input numbers or the constant the routine arrives at can be different for different input numbers.",
        "However, it can be shown that for 5 digits and a base b = 6t+3≠9, a Kaprekar constant exists.",
        "E.g. base 15: (10,4,14,9,5)15",
        "base 21: (14,6,20,13,7)21",
        "",
        "Define Cb to be the Kaprekar constant in base b for 5 digits.",
        "Define the function sb(i) to be",
        " 0 if i = Cb or if i written in base b consists of 5 identical digits",
        " the number of iterations it takes the Kaprekar routine in base b to arrive at Cb, otherwise",
        "",
        "Note that we can define sb(i) for all integers i < b5. If i written in base b takes less than 5 digits, the number is padded with leading zero digits until we have 5 digits before applying the Kaprekar routine.",
        "",
        "",
        "Define S(b) as the sum of sb(i) for 0 < i < b5.",
        "E.g. S(15) = 5274369 ",
        "S(111) = 400668930299",
        "",
        "",
        "Find the sum of S(6k+3) for 2 ≤ k ≤ 300.",
        "Give the last 18 digits as your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler414() {\n  // Good luck!\n  return true;\n}\n\neuler414();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 414 Kaprekar constant",
      "dashedName": "problem-414-kaprekar-constant"
    },
    {
      "id": "5900f50c1000cf542c51001e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler415()</code> should return 55859742.",
          "testString":
            "assert.strictEqual(euler415(), 55859742, '<code>euler415()</code> should return 55859742.');"
        }
      ],
      "description": [
        "A set of lattice points S is called a titanic set if there exists a line passing through exactly two points in S.",
        "",
        "An example of a titanic set is S = {(0, 0), (0, 1), (0, 2), (1, 1), (2, 0), (1, 0)}, where the line passing through (0, 1) and (2, 0) does not pass through any other point in S.",
        "",
        "On the other hand, the set {(0, 0), (1, 1), (2, 2), (4, 4)} is not a titanic set since the line passing through any two points in the set also passes through the other two.",
        "",
        "For any positive integer N, let T(N) be the number of titanic sets S whose every point (x, y) satisfies 0 ≤ x, y ≤ N.",
        "It can be verified that T(1) = 11, T(2) = 494, T(4) = 33554178, T(111) mod 108 = 13500401 and T(105) mod 108 = 63259062.",
        "",
        "Find T(1011) mod 108."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler415() {\n  // Good luck!\n  return true;\n}\n\neuler415();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 415 Titanic sets",
      "dashedName": "problem-415-titanic-sets"
    },
    {
      "id": "5900f50e1000cf542c510020",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler416()</code> should return 898082747.",
          "testString":
            "assert.strictEqual(euler416(), 898082747, '<code>euler416()</code> should return 898082747.');"
        }
      ],
      "description": [
        "A row of n squares contains a frog in the leftmost square. By successive jumps the frog goes to the rightmost square and then back to the leftmost square. On the outward trip he jumps one, two or three squares to the right, and on the homeward trip he jumps to the left in a similar manner. He cannot jump outside the squares. He repeats the round-trip travel m times.",
        "",
        "Let F(m, n) be the number of the ways the frog can travel so that at most one square remains unvisited.",
        "For example, F(1, 3) = 4, F(1, 4) = 15, F(1, 5) = 46, F(2, 3) = 16 and F(2, 100) mod 109 = 429619151.",
        "",
        "Find the last 9 digits of F(10, 1012)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler416() {\n  // Good luck!\n  return true;\n}\n\neuler416();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 416 A frogs trip",
      "dashedName": "problem-416-a-frogs-trip"
    },
    {
      "id": "5900f50d1000cf542c51001f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler417()</code> should return 446572970925740.",
          "testString":
            "assert.strictEqual(euler417(), 446572970925740, '<code>euler417()</code> should return 446572970925740.');"
        }
      ],
      "description": [
        "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:",
        "",
        "1/2= 0.5",
        "1/3= 0.(3)",
        "1/4= 0.25",
        "1/5= 0.2",
        "1/6= 0.1(6)",
        "1/7= 0.(142857)",
        "1/8= 0.125",
        "1/9= 0.(1)",
        "1/10= 0.1",
        "",
        "Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.",
        "",
        "Unit fractions whose denominator has no other prime factors than 2 and/or 5 are not considered to have a recurring cycle.",
        "We define the length of the recurring cycle of those unit fractions as 0. ",
        "",
        "",
        "Let L(n) denote the length of the recurring cycle of 1/n.",
        "You are given that ∑L(n) for 3 ≤ n ≤ 1 000 000 equals 55535191115.",
        "",
        "",
        "Find ∑L(n) for 3 ≤ n ≤ 100 000 000"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler417() {\n  // Good luck!\n  return true;\n}\n\neuler417();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 417 Reciprocal cycles II",
      "dashedName": "problem-417-reciprocal-cycles-ii"
    },
    {
      "id": "5900f50f1000cf542c510021",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler418()</code> should return 1177163565297340400.",
          "testString":
            "assert.strictEqual(euler418(), 1177163565297340400, '<code>euler418()</code> should return 1177163565297340400.');"
        }
      ],
      "description": [
        "Let n be a positive integer. An integer triple (a, b, c) is called a factorisation triple of n if: 1 ≤ a ≤ b ≤ c",
        " a·b·c = n.",
        "",
        "Define f(n) to be a + b + c for the factorisation triple (a, b, c) of n which minimises c / a. One can show that this triple is unique.",
        "",
        "",
        "For example, f(165) = 19, f(100100) = 142 and f(20!) = 4034872.",
        "",
        "",
        "Find f(43!)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler418() {\n  // Good luck!\n  return true;\n}\n\neuler418();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 418 Factorisation triples",
      "dashedName": "problem-418-factorisation-triples"
    },
    {
      "id": "5900f5101000cf542c510022",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>euler419()</code> should return 998567458, 1046245404, 43363922.",
          "testString":
            "assert.strictEqual(euler419(), 998567458, 1046245404, 43363922, '<code>euler419()</code> should return 998567458, 1046245404, 43363922.');"
        }
      ],
      "description": [
        "The look and say sequence goes 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ...",
        "The sequence starts with 1 and all other members are obtained by describing the previous member in terms of consecutive digits.",
        "It helps to do this out loud:",
        "1 is 'one one' → 11",
        "11 is 'two ones' → 21",
        "21 is 'one two and one one' → 1211 ",
        "1211 is 'one one, one two and two ones' → 111221",
        "111221 is 'three ones, two twos and one one' → 312211",
        "...",
        "",
        "",
        "Define A(n), B(n) and C(n) as the number of ones, twos and threes in the n'th element of the sequence respectively.",
        "One can verify that A(40) = 31254, B(40) = 20259 and C(40) = 11625.",
        "",
        "",
        "Find A(n), B(n) and C(n) for n = 1012. ",
        "Give your answer modulo 230 and separate your values for A, B and C by a comma. ",
        "E.g. for n = 40 the answer would be 31254,20259,11625"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler419() {\n  // Good luck!\n  return true;\n}\n\neuler419();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 419 Look and say sequence",
      "dashedName": "problem-419-look-and-say-sequence"
    },
    {
      "id": "5900f5111000cf542c510023",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler420()</code> should return 145159332.",
          "testString":
            "assert.strictEqual(euler420(), 145159332, '<code>euler420()</code> should return 145159332.');"
        }
      ],
      "description": [
        "A positive integer matrix is a matrix whose elements are all positive integers.",
        "Some positive integer matrices can be expressed as a square of a positive integer matrix in two different ways. Here is an example:",
        "",
        "",
        "",
        "",
        "",
        "We define F(N) as the number of the 2x2 positive integer matrices which have a trace less than N and which can be expressed as a square of a positive integer matrix in two different ways.",
        "We can verify that F(50) = 7 and F(1000) = 1019.",
        "",
        "",
        "",
        "Find F(107)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler420() {\n  // Good luck!\n  return true;\n}\n\neuler420();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 420 2x2 positive integer matrix",
      "dashedName": "problem-420-2x2-positive-integer-matrix"
    },
    {
      "id": "5900f5131000cf542c510024",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler421()</code> should return 2304215802083466200.",
          "testString":
            "assert.strictEqual(euler421(), 2304215802083466200, '<code>euler421()</code> should return 2304215802083466200.');"
        }
      ],
      "description": [
        "Numbers of the form n15+1 are composite for every integer n > 1.",
        "For positive integers n and m let s(n,m) be defined as the sum of the distinct prime factors of n15+1 not exceeding m.",
        "",
        "E.g. 215+1 = 3×3×11×331.",
        "So s(2,10) = 3 and s(2,1000) = 3+11+331 = 345.",
        "",
        "Also 1015+1 = 7×11×13×211×241×2161×9091.",
        "So s(10,100) = 31 and s(10,1000) = 483.",
        "Find ∑ s(n,108) for 1 ≤ n ≤ 1011."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler421() {\n  // Good luck!\n  return true;\n}\n\neuler421();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 421 Prime factors of n151",
      "dashedName": "problem-421-prime-factors-of-n151"
    },
    {
      "id": "5900f5131000cf542c510025",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler422()</code> should return 92060460.",
          "testString":
            "assert.strictEqual(euler422(), 92060460, '<code>euler422()</code> should return 92060460.');"
        }
      ],
      "description": [
        "Let H be the hyperbola defined by the equation 12x2 + 7xy - 12y2 = 625.",
        "",
        "Next, define X as the point (7, 1). It can be seen that X is in H.",
        "",
        "Now we define a sequence of points in H, {Pi : i ≥ 1}, as:",
        " P1 = (13, 61/4).",
        " P2 = (-43/6, -4).",
        " For i > 2, Pi is the unique point in H that is different from Pi-1 and such that line PiPi-1 is parallel to line Pi-2X. It can be shown that Pi is well-defined, and that its coordinates are always rational.",
        "You are given that P3  = (-19/2, -229/24), P4 = (1267/144, -37/12) and P7 = (17194218091/143327232, 274748766781/1719926784).",
        "",
        "Find Pn for n = 1114 in the following format:If Pn = (a/b, c/d) where the fractions are in lowest terms and the denominators are positive, then the answer is (a + b + c + d) mod 1 000 000 007.",
        "",
        "For n = 7, the answer would have been: 806236837."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler422() {\n  // Good luck!\n  return true;\n}\n\neuler422();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 422 Sequence of points on a hyperbola",
      "dashedName": "problem-422-sequence-of-points-on-a-hyperbola"
    },
    {
      "id": "5900f5141000cf542c510027",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler423()</code> should return 653972374.",
          "testString":
            "assert.strictEqual(euler423(), 653972374, '<code>euler423()</code> should return 653972374.');"
        }
      ],
      "description": [
        "Let n be a positive integer.",
        "A 6-sided die is thrown n times. Let c be the number of pairs of consecutive throws that give the same value.",
        "",
        "For example, if n = 7 and the values of the die throws are (1,1,5,6,6,6,3), then the following pairs of consecutive throws give the same value:",
        "(1,1,5,6,6,6,3)",
        "(1,1,5,6,6,6,3)",
        "(1,1,5,6,6,6,3)",
        "Therefore, c = 3 for (1,1,5,6,6,6,3).",
        "",
        "Define C(n) as the number of outcomes of throwing a 6-sided die n times such that c does not exceed π(n).1",
        "For example, C(3) = 216, C(4) = 1290, C(11) = 361912500 and C(24) = 4727547363281250000.",
        "",
        "Define S(L) as ∑ C(n) for 1 ≤ n ≤ L.",
        "For example, S(50) mod 1 000 000 007 = 832833871.",
        "",
        "Find S(50 000 000) mod 1 000 000 007.",
        "",
        "1 π denotes the prime-counting function, i.e. π(n) is the number of primes ≤ n."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler423() {\n  // Good luck!\n  return true;\n}\n\neuler423();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 423 Consecutive die throws",
      "dashedName": "problem-423-consecutive-die-throws"
    },
    {
      "id": "5900f5141000cf542c510026",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler424()</code> should return 1059760019628.",
          "testString":
            "assert.strictEqual(euler424(), 1059760019628, '<code>euler424()</code> should return 1059760019628.');"
        }
      ],
      "description": [
        "The above is an example of a cryptic kakuro (also known as cross sums, or even sums cross) puzzle, with its final solution on the right. (The common rules of kakuro puzzles can be found easily on numerous internet sites. Other related information can also be currently found at krazydad.com whose author has provided the puzzle data for this challenge.)",
        "",
        "The downloadable text file (kakuro200.txt) contains the description of 200 such puzzles, a mix of 5x5 and 6x6 types. The first puzzle in the file is the above example which is coded as follows:",
        "",
        "6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X",
        "",
        "The first character is a numerical digit indicating the size of the information grid. It would be either a 6 (for a 5x5 kakuro puzzle) or a 7 (for a 6x6 puzzle) followed by a comma (,). The extra top line and left column are needed to insert information.",
        "",
        "The content of each cell is then described and followed by a comma, going left to right and starting with the top line.",
        "X = Gray cell, not required to be filled by a digit.",
        "O (upper case letter)= White empty cell to be filled by a digit.",
        "A = Or any one of the upper case letters from A to J to be replaced by its equivalent digit in the solved puzzle.",
        "( ) = Location of the encrypted sums. Horizontal sums are preceded by a lower case \"h\" and vertical sums are preceded by a lower case \"v\". Those are followed by one or two upper case letters depending if the sum is a single digit or double digit one. For double digit sums, the first letter would be for the \"tens\" and the second one for the \"units\". When the cell must contain information for both a horizontal and a vertical sum, the first one is always for the horizontal sum and the two are separated by a comma within the same set of brackets, ex.: (hFE,vD). Each set of brackets is also immediately followed by a comma.",
        "",
        "The description of the last cell is followed by a Carriage Return/Line Feed (CRLF) instead of a comma.",
        "",
        "The required answer to each puzzle is based on the value of each letter necessary to arrive at the solution and according to the alphabetical order. As indicated under the example puzzle, its answer would be 8426039571. At least 9 out of the 10 encrypting letters are always part of the problem description. When only 9 are given, the missing one must be assigned the remaining digit.",
        "",
        "You are given that the sum of the answers for the first 10 puzzles in the file is 64414157580.",
        "",
        "Find the sum of the answers for the 200 puzzles."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler424() {\n  // Good luck!\n  return true;\n}\n\neuler424();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 424 Kakuro",
      "dashedName": "problem-424-kakuro"
    },
    {
      "id": "5900f5151000cf542c510028",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler425()</code> should return 46479497324.",
          "testString":
            "assert.strictEqual(euler425(), 46479497324, '<code>euler425()</code> should return 46479497324.');"
        }
      ],
      "description": [
        "Two positive numbers A and B are said to be connected (denoted by \"A ↔ B\") if one of these conditions holds:",
        "(1) A and B have the same length and differ in exactly one digit; for example, 123 ↔ 173.",
        "(2) Adding one digit to the left of A (or B) makes B (or A); for example, 23 ↔ 223 and 123 ↔ 23.",
        "",
        "",
        "We call a prime P a 2's relative if there exists a chain of connected primes between 2 and P and no prime in the chain exceeds P.",
        "",
        "",
        "For example, 127 is a 2's relative. One of the possible chains is shown below:",
        "2 ↔ 3 ↔ 13 ↔ 113 ↔ 103 ↔ 107 ↔ 127",
        "However, 11 and 103 are not 2's relatives.",
        "",
        "",
        "Let F(N) be the sum of the primes ≤ N which are not 2's relatives.",
        "We can verify that F(103) = 431 and F(104) = 78728.",
        "",
        "",
        "Find F(107)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler425() {\n  // Good luck!\n  return true;\n}\n\neuler425();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 425 Prime connection",
      "dashedName": "problem-425-prime-connection"
    },
    {
      "id": "5900f5171000cf542c510029",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler426()</code> should return 31591886008.",
          "testString":
            "assert.strictEqual(euler426(), 31591886008, '<code>euler426()</code> should return 31591886008.');"
        }
      ],
      "description": [
        "Consider an infinite row of boxes. Some of the boxes contain a ball. For example, an initial configuration of 2 consecutive occupied boxes followed by 2 empty boxes, 2 occupied boxes, 1 empty box, and 2 occupied boxes can be denoted by the sequence (2, 2, 2, 1, 2), in which the number of consecutive occupied and empty boxes appear alternately.",
        "",
        "",
        "A turn consists of moving each ball exactly once according to the following rule: Transfer the leftmost ball which has not been moved to the nearest empty box to its right.",
        "",
        "",
        "After one turn the sequence (2, 2, 2, 1, 2) becomes (2, 2, 1, 2, 3) as can be seen below; note that we begin the new sequence starting at the first occupied box.",
        "",
        "",
        "",
        "",
        "",
        "",
        "A system like this is called a Box-Ball System or BBS for short.",
        "",
        "",
        "It can be shown that after a sufficient number of turns, the system evolves to a state where the consecutive numbers of occupied boxes is invariant. In the example below, the consecutive numbers of occupied boxes evolves to [1, 2, 3]; we shall call this the final state.",
        "",
        "",
        "",
        "",
        "",
        "",
        "We define the sequence {ti}:s0 = 290797",
        "sk+1 = sk2 mod 50515093",
        "tk = (sk mod 64) + 1",
        "",
        "Starting from the initial configuration (t0, t1, …, t10), the final state becomes [1, 3, 10, 24, 51, 75].",
        "Starting from the initial configuration (t0, t1, …, t10 000 000), find the final state.",
        "Give as your answer the sum of the squares of the elements of the final state. For example, if the final state is [1, 2, 3] then 14 ( = 12 + 22 + 32) is your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler426() {\n  // Good luck!\n  return true;\n}\n\neuler426();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 426 Boxball system",
      "dashedName": "problem-426-boxball-system"
    },
    {
      "id": "5900f5181000cf542c51002a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler427()</code> should return 97138867.",
          "testString":
            "assert.strictEqual(euler427(), 97138867, '<code>euler427()</code> should return 97138867.');"
        }
      ],
      "description": [
        "A sequence of integers S = {si} is called an n-sequence if it has n elements and each element si satisfies 1 ≤ si ≤ n. Thus there are nn distinct n-sequences in total.",
        "For example, the sequence S = {1, 5, 5, 10, 7, 7, 7, 2, 3, 7} is a 10-sequence.",
        "",
        "For any sequence S, let L(S) be the length of the longest contiguous subsequence of S with the same value.",
        "For example, for the given sequence S above, L(S) = 3, because of the three consecutive 7's.",
        "",
        "Let f(n) = ∑ L(S) for all n-sequences S.",
        "",
        "For example, f(3) = 45, f(7) = 1403689 and f(11) = 481496895121.",
        "",
        "Find f(7 500 000) mod 1 000 000 009."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler427() {\n  // Good luck!\n  return true;\n}\n\neuler427();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 427 nsequences",
      "dashedName": "problem-427-nsequences"
    },
    {
      "id": "5900f5191000cf542c51002b",
      "challengeType": 5,
      "tests": [
        {
          "text":
            "<code>necklace(1000000000)</code> should return 747215561862.",
          "testString":
            "assert.strictEqual(necklace(1000000000), 747215561862, '<code>necklace(1000000000)</code> should return 747215561862.');"
        }
      ],
      "description": [
        "Let <var>a</var>, <var>b</var> and <var>c</var> be positive numbers.",
        "Let W, X, Y, Z be four collinear points where |WX| = <var>a</var>, |XY| = <var>b</var>, |YZ| = <var>c</var> and |WZ| = <var>a</var> + <var>b</var> + <var>c</var>.",
        "Let C<sub>in</sub> be the circle having the diameter XY.",
        "Let C<sub>out</sub> be the circle having the diameter WZ.",
        "",
        "The triplet (<var>a</var>, <var>b</var>, <var>c</var>) is called a <em>necklace triplet</em> if you can place <var>k</var> ≥ 3 distinct circles C<sub>1</sub>, C<sub>2</sub>, ..., C<sub><var>k</var></sub> such that:",
        "<ul><li>C<sub><var>i</var></sub> has no common interior points with any C<sub><var>j</var></sub> for 1 ≤ <var>i</var>, <var>j</var> ≤ <var>k</var> and <var>i</var> ≠ <var>j</var>,</li><li>C<sub><var>i</var></sub> is tangent to both C<sub>in</sub> and C<sub>out</sub> for 1 ≤ <var>i</var> ≤ <var>k</var>,</li><li>C<sub><var>i</var></sub> is tangent to C<sub><var>i</var>+1</sub> for 1 ≤ <var>i</var> &lt; <var>k</var>, and</li><li>C<sub><var>k</var></sub> is tangent to C<sub>1</sub>.</li></ul>",
        "For example, (5, 5, 5) and (4, 3, 21) are necklace triplets, while it can be shown that (2, 2, 5) is not.",
        "<img src=\"https://projecteuler.net/project/images/p428_necklace.png\" alt=\"a visual reresentation of a necklace triplet\">",
        "",
        "Let T(<var>n</var>) be the number of necklace triplets (<var>a</var>, <var>b</var>, <var>c</var>) such that <var>a</var>, <var>b</var> and <var>c</var> are positive integers, and <var>b</var> ≤ <var>n</var>.",
        "For example, T(1)&nbsp;=&nbsp;9, T(20)&nbsp;=&nbsp;732 and T(3000)&nbsp;=&nbsp;438106.",
        "",
        "Find T(1&nbsp;000&nbsp;000&nbsp;000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function necklace(n) {\n  // Good luck!\n  return true;\n}\n\nnecklace(1000000000)",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 428 Necklace of Circles",
      "dashedName": "problem-428-necklace-of-circles"
    },
    {
      "id": "5900f5191000cf542c51002c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler429()</code> should return 98792821.",
          "testString":
            "assert.strictEqual(euler429(), 98792821, '<code>euler429()</code> should return 98792821.');"
        }
      ],
      "description": [
        "A unitary divisor d of a number n is a divisor of n that has the property gcd(d, n/d) = 1.",
        "The unitary divisors of 4! = 24 are 1, 3, 8 and 24.",
        "The sum of their squares is 12 + 32 + 82 + 242 = 650.",
        "",
        "",
        "Let S(n) represent the sum of the squares of the unitary divisors of n. Thus S(4!)=650.",
        "",
        "",
        "Find S(100 000 000!) modulo 1 000 000 009."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler429() {\n  // Good luck!\n  return true;\n}\n\neuler429();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 429 Sum of squares of unitary divisors",
      "dashedName": "problem-429-sum-of-squares-of-unitary-divisors"
    },
    {
      "id": "5900f51a1000cf542c51002d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler430()</code> should return 5000624921.38.",
          "testString":
            "assert.strictEqual(euler430(), 5000624921.38, '<code>euler430()</code> should return 5000624921.38.');"
        }
      ],
      "description": [
        "N disks are placed in a row, indexed 1 to N from left to right.",
        "Each disk has a black side and white side. Initially all disks show their white side.",
        "",
        "At each turn, two, not necessarily distinct, integers A and B between 1 and N (inclusive) are chosen uniformly at random.",
        "All disks with an index from A to B (inclusive) are flipped.",
        "",
        "The following example shows the case N = 8. At the first turn A = 5 and B = 2, and at the second turn A = 4 and B = 6.",
        "",
        "",
        "",
        "Let E(N, M) be the expected number of disks that show their white side after M turns.",
        "We can verify that E(3, 1) = 10/9, E(3, 2) = 5/3, E(10, 4) ≈ 5.157 and E(100, 10) ≈ 51.893.",
        "",
        "Find E(1010, 4000).",
        "Give your answer rounded to 2 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler430() {\n  // Good luck!\n  return true;\n}\n\neuler430();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 430 Range flips",
      "dashedName": "problem-430-range-flips"
    },
    {
      "id": "5900f51b1000cf542c51002e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler431()</code> should return 23.386029052.",
          "testString":
            "assert.strictEqual(euler431(), 23.386029052, '<code>euler431()</code> should return 23.386029052.');"
        }
      ],
      "description": [
        "Fred the farmer arranges to have a new storage silo installed on his farm and having an obsession for all things square he is absolutely devastated when he discovers that it is circular. Quentin, the representative from the company that installed the silo, explains that they only manufacture cylindrical silos, but he points out that it is resting on a square base. Fred is not amused and insists that it is removed from his property.",
        "",
        "Quick thinking Quentin explains that when granular materials are delivered from above a conical slope is formed and the natural angle made with the horizontal is called the angle of repose. For example if the angle of repose, $\\alpha = 30$ degrees, and grain is delivered at the centre of the silo then a perfect cone will form towards the top of the cylinder. In the case of this silo, which has a diameter of 6m, the amount of space wasted would be approximately 32.648388556 m3. However, if grain is delivered at a point on the top which has a horizontal distance of $x$ metres from the centre then a cone with a strangely curved and sloping base is formed. He shows Fred a picture.",
        "",
        "",
        "",
        "",
        "We shall let the amount of space wasted in cubic metres be given by $V(x)$. If $x = 1.114785284$, which happens to have three squared decimal places, then the amount of space wasted, $V(1.114785284) \\approx 36$. Given the range of possible solutions to this problem there is exactly one other option: $V(2.511167869) \\approx 49$. It would be like knowing that the square is king of the silo, sitting in splendid glory on top of your grain.",
        "",
        "Fred's eyes light up with delight at this elegant resolution, but on closer inspection of Quentin's drawings and calculations his happiness turns to despondency once more. Fred points out to Quentin that it's the radius of the silo that is 6 metres, not the diameter, and the angle of repose for his grain is 40 degrees. However, if Quentin can find a set of solutions for this particular silo then he will be more than happy to keep it.",
        "",
        "If Quick thinking Quentin is to satisfy frustratingly fussy Fred the farmer's appetite for all things square then determine the values of $x$ for all possible square space wastage options and calculate $\\sum x$ correct to 9 decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler431() {\n  // Good luck!\n  return true;\n}\n\neuler431();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 431 Square Space Silo",
      "dashedName": "problem-431-square-space-silo"
    },
    {
      "id": "5900f51e1000cf542c510030",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler432()</code> should return 754862080.",
          "testString":
            "assert.strictEqual(euler432(), 754862080, '<code>euler432()</code> should return 754862080.');"
        }
      ],
      "description": [
        "Let S(n,m) = ∑φ(n × i) for 1 ≤ i ≤ m. (φ is Euler's totient function)",
        "You are given that S(510510,106 )= 45480596821125120. ",
        "",
        "",
        "Find S(510510,1011).",
        "Give the last 9 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler432() {\n  // Good luck!\n  return true;\n}\n\neuler432();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 432 Totient sum",
      "dashedName": "problem-432-totient-sum"
    },
    {
      "id": "5900f51d1000cf542c51002f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler433()</code> should return 326624372659664.",
          "testString":
            "assert.strictEqual(euler433(), 326624372659664, '<code>euler433()</code> should return 326624372659664.');"
        }
      ],
      "description": [
        "Let E(x0, y0) be the number of steps it takes to determine the greatest common divisor of x0 and y0 with Euclid's algorithm. More formally:x1 = y0, y1 = x0 mod y0xn = yn-1, yn = xn-1 mod yn-1",
        "E(x0, y0) is the smallest n such that yn = 0.",
        "",
        "",
        "We have E(1,1) = 1, E(10,6) = 3 and E(6,10) = 4.",
        "",
        "",
        "Define S(N) as the sum of E(x,y) for 1 ≤ x,y ≤ N.",
        "We have S(1) = 1, S(10) = 221 and S(100) = 39826.",
        "",
        "",
        "Find S(5·106)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler433() {\n  // Good luck!\n  return true;\n}\n\neuler433();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 433 Steps in Euclids algorithm",
      "dashedName": "problem-433-steps-in-euclids-algorithm"
    },
    {
      "id": "5900f51f1000cf542c510031",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler434()</code> should return 863253606.",
          "testString":
            "assert.strictEqual(euler434(), 863253606, '<code>euler434()</code> should return 863253606.');"
        }
      ],
      "description": [
        "Recall that a graph is a collection of vertices and edges connecting the vertices, and that two vertices connected by an edge are called adjacent.",
        "Graphs can be embedded in Euclidean space by associating each vertex with a point in the Euclidean space.",
        "A flexible graph is an embedding of a graph where it is possible to move one or more vertices continuously so that the distance between at least two nonadjacent vertices is altered while the distances between each pair of adjacent vertices is kept constant.",
        "A rigid graph is an embedding of a graph which is not flexible.",
        "Informally, a graph is rigid if by replacing the vertices with fully rotating hinges and the edges with rods that are unbending and inelastic, no parts of the graph can be moved independently from the rest of the graph.",
        "",
        "The grid graphs embedded in the Euclidean plane are not rigid, as the following animation demonstrates:",
        "However, one can make them rigid by adding diagonal edges to the cells. For example, for the 2x3 grid graph, there are 19 ways to make the graph rigid:",
        "Note that for the purposes of this problem, we do not consider changing the orientation of a diagonal edge or adding both diagonal edges to a cell as a different way of making a grid graph rigid.",
        "",
        "Let R(m,n) be the number of ways to make the m × n grid graph rigid. ",
        "E.g. R(2,3) = 19 and R(5,5) = 23679901",
        "",
        "Define S(N) as ∑R(i,j) for 1 ≤ i, j ≤ N.",
        "E.g. S(5) = 25021721.",
        "Find S(100), give your answer modulo 1000000033"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler434() {\n  // Good luck!\n  return true;\n}\n\neuler434();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 434 Rigid graphs",
      "dashedName": "problem-434-rigid-graphs"
    },
    {
      "id": "5900f5201000cf542c510032",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler435()</code> should return 252541322550.",
          "testString":
            "assert.strictEqual(euler435(), 252541322550, '<code>euler435()</code> should return 252541322550.');"
        }
      ],
      "description": [
        "The Fibonacci numbers {fn, n ≥ 0} are defined recursively as fn = fn-1 + fn-2 with base cases f0 = 0 and f1 = 1.",
        "Define the polynomials {Fn, n ≥ 0} as Fn(x) = ∑fixi for 0 ≤ i ≤ n.",
        "For example, F7(x) = x + x2 + 2x3 + 3x4 + 5x5 + 8x6 + 13x7, and F7(11) = 268357683.",
        "Let n = 1015. Find the sum [∑0≤x≤100 Fn(x)] mod 1307674368000 (= 15!)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler435() {\n  // Good luck!\n  return true;\n}\n\neuler435();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 435 Polynomials of Fibonacci numbers",
      "dashedName": "problem-435-polynomials-of-fibonacci-numbers"
    },
    {
      "id": "5900f5221000cf542c510033",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler436()</code> should return 0.5276662759.",
          "testString":
            "assert.strictEqual(euler436(), 0.5276662759, '<code>euler436()</code> should return 0.5276662759.');"
        }
      ],
      "description": [
        "Julie proposes the following wager to her sister Louise.",
        "She suggests they play a game of chance to determine who will wash the dishes.",
        "For this game, they shall use a generator of independent random numbers uniformly distributed between 0 and 1.",
        "The game starts with S = 0.",
        "The first player, Louise, adds to S different random numbers from the generator until S > 1 and records her last random number 'x'.",
        "The second player, Julie, continues adding to S different random numbers from the generator until S > 2 and records her last random number 'y'.",
        "The player with the highest number wins and the loser washes the dishes, i.e. if y > x the second player wins.",
        "",
        "For example, if the first player draws 0.62 and 0.44, the first player turn ends since 0.62+0.44 > 1 and x = 0.44.",
        "If the second players draws 0.1, 0.27 and 0.91, the second player turn ends since 0.62+0.44+0.1+0.27+0.91 > 2 and y = 0.91.",
        "Since y > x, the second player wins.",
        "",
        "Louise thinks about it for a second, and objects: \"That's not fair\".",
        "What is the probability that the second player wins?",
        "Give your answer rounded to 10 places behind the decimal point in the form 0.abcdefghij"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler436() {\n  // Good luck!\n  return true;\n}\n\neuler436();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 436 Unfair wager",
      "dashedName": "problem-436-unfair-wager"
    },
    {
      "id": "5900f5241000cf542c510036",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler437()</code> should return 74204709657207.",
          "testString":
            "assert.strictEqual(euler437(), 74204709657207, '<code>euler437()</code> should return 74204709657207.');"
        }
      ],
      "description": [
        "When we calculate 8n modulo 11 for n=0 to 9 we get: 1, 8, 9, 6, 4, 10, 3, 2, 5, 7.",
        "As we see all possible values from 1 to 10 occur. So 8 is a primitive root of 11.",
        "But there is more:",
        "If we take a closer look we see:",
        "1+8=9",
        "8+9=17≡6 mod 11",
        "9+6=15≡4 mod 11",
        "6+4=10",
        "4+10=14≡3 mod 11",
        "10+3=13≡2 mod 11",
        "3+2=5",
        "2+5=7",
        "5+7=12≡1 mod 11.",
        "",
        "So the powers of 8 mod 11 are cyclic with period 10, and 8n + 8n+1 ≡ 8n+2 (mod 11).",
        "8 is called a Fibonacci primitive root of 11.",
        "Not every prime has a Fibonacci primitive root.",
        "There are 323 primes less than 10000 with one or more Fibonacci primitive roots and the sum of these primes is 1480491.",
        "Find the sum of the primes less than 100,000,000 with at least one Fibonacci primitive root."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler437() {\n  // Good luck!\n  return true;\n}\n\neuler437();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 437 Fibonacci primitive roots",
      "dashedName": "problem-437-fibonacci-primitive-roots"
    },
    {
      "id": "5900f5231000cf542c510034",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler438()</code> should return 2046409616809.",
          "testString":
            "assert.strictEqual(euler438(), 2046409616809, '<code>euler438()</code> should return 2046409616809.');"
        }
      ],
      "description": [
        "For an n-tuple of integers t = (a1, ..., an), let (x1, ..., xn) be the solutions of the polynomial equation xn + a1xn-1 + a2xn-2 + ... + an-1x + an = 0.",
        "",
        "",
        "Consider the following two conditions:",
        "x1, ..., xn are all real.",
        "If x1, ..., xn are sorted, ⌊xi⌋ = i for 1 ≤ i ≤ n. (⌊·⌋: floor function.)",
        "",
        "In the case of n = 4, there are 12 n-tuples of integers which satisfy both conditions.",
        "We define S(t) as the sum of the absolute values of the integers in t.",
        "For n = 4 we can verify that ∑S(t) = 2087 for all n-tuples t which satisfy both conditions.",
        "",
        "",
        "Find ∑S(t) for n = 7."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler438() {\n  // Good luck!\n  return true;\n}\n\neuler438();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 438 Integer part of polynomial equations solutions",
      "dashedName": "problem-438-integer-part-of-polynomial-equations-solutions"
    },
    {
      "id": "5900f5231000cf542c510035",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler439()</code> should return 968697378.",
          "testString":
            "assert.strictEqual(euler439(), 968697378, '<code>euler439()</code> should return 968697378.');"
        }
      ],
      "description": [
        "Let d(k) be the sum of all divisors of k.",
        "We define the function S(N) = ∑1≤i≤N ∑1≤j≤Nd(i·j).",
        "For example, S(3) = d(1) + d(2) + d(3) + d(2) + d(4) + d(6) + d(3) + d(6) + d(9) = 59.",
        "",
        "You are given that S(103) = 563576517282 and S(105) mod 109 = 215766508.",
        "Find S(1011) mod 109."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler439() {\n  // Good luck!\n  return true;\n}\n\neuler439();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 439 Sum of sum of divisors",
      "dashedName": "problem-439-sum-of-sum-of-divisors"
    },
    {
      "id": "5900f5241000cf542c510037",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler440()</code> should return 970746056.",
          "testString":
            "assert.strictEqual(euler440(), 970746056, '<code>euler440()</code> should return 970746056.');"
        }
      ],
      "description": [
        "We want to tile a board of length n and height 1 completely, with either 1 × 2 blocks or 1 × 1 blocks with a single decimal digit on top:",
        "",
        "For example, here are some of the ways to tile a board of length n = 8:",
        "",
        "Let T(n) be the number of ways to tile a board of length n as described above.",
        "",
        "For example, T(1) = 10 and T(2) = 101.",
        "",
        "Let S(L) be the triple sum ∑a,b,c gcd(T(ca), T(cb)) for 1 ≤ a, b, c ≤ L.",
        "For example:",
        "S(2) = 10444",
        "S(3) = 1292115238446807016106539989",
        "S(4) mod 987 898 789 = 670616280.",
        "",
        "Find S(2000) mod 987 898 789."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler440() {\n  // Good luck!\n  return true;\n}\n\neuler440();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 440 GCD and Tiling",
      "dashedName": "problem-440-gcd-and-tiling"
    },
    {
      "id": "5900f5261000cf542c510038",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler441()</code> should return 5000088.8395.",
          "testString":
            "assert.strictEqual(euler441(), 5000088.8395, '<code>euler441()</code> should return 5000088.8395.');"
        }
      ],
      "description": [
        "For an integer M, we define R(M) as the sum of 1/(p·q) for all the integer pairs p and q which satisfy all of these conditions:",
        "",
        " 1 ≤ p < q ≤ M",
        " p + q ≥ M",
        " p and q are coprime.",
        "",
        "We also define S(N) as the sum of R(i) for 2 ≤ i ≤ N.",
        "We can verify that S(2) = R(2) = 1/2, S(10) ≈ 6.9147 and S(100) ≈ 58.2962.",
        "",
        "",
        "Find S(107). Give your answer rounded to four decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler441() {\n  // Good luck!\n  return true;\n}\n\neuler441();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 441 The inverse summation of coprime couples",
      "dashedName": "problem-441-the-inverse-summation-of-coprime-couples"
    },
    {
      "id": "5900f5271000cf542c510039",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler442()</code> should return 1295552661530920200.",
          "testString":
            "assert.strictEqual(euler442(), 1295552661530920200, '<code>euler442()</code> should return 1295552661530920200.');"
        }
      ],
      "description": [
        "An integer is called eleven-free if its decimal expansion does not contain any substring representing a power of 11 except 1.",
        "",
        "For example, 2404 and 13431 are eleven-free, while 911 and 4121331 are not.",
        "",
        "Let E(n) be the nth positive eleven-free integer. For example, E(3) = 3, E(200) = 213 and E(500 000) = 531563.",
        "",
        "Find E(1018)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler442() {\n  // Good luck!\n  return true;\n}\n\neuler442();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 442 Elevenfree integers",
      "dashedName": "problem-442-elevenfree-integers"
    },
    {
      "id": "5900f5271000cf542c51003a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler443()</code> should return 2744233049300770.",
          "testString":
            "assert.strictEqual(euler443(), 2744233049300770, '<code>euler443()</code> should return 2744233049300770.');"
        }
      ],
      "description": [
        "Let g(n) be a sequence defined as follows:",
        "g(4) = 13,",
        "g(n) = g(n-1) + gcd(n, g(n-1)) for n > 4.",
        "",
        "The first few values are:",
        "",
        "    n4567891011121314151617181920...",
        "    g(n)1314161718272829303132333451545560...",
        "",
        "",
        "You are given that g(1 000) = 2524 and g(1 000 000) = 2624152.",
        "",
        "Find g(1015)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler443() {\n  // Good luck!\n  return true;\n}\n\neuler443();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 443 GCD sequence",
      "dashedName": "problem-443-gcd-sequence"
    },
    {
      "id": "5900f52a1000cf542c51003b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler444()</code> should return 1.200856722e+263.",
          "testString":
            "assert.strictEqual(euler444(), 1.200856722e+263, '<code>euler444()</code> should return 1.200856722e+263.');"
        }
      ],
      "description": [
        "A group of p people decide to sit down at a round table and play a lottery-ticket trading game. Each person starts off with a randomly-assigned, unscratched lottery ticket. Each ticket, when scratched, reveals a whole-pound prize ranging anywhere from £1 to £p, with no two tickets alike. The goal of the game is for each person to maximize his ticket winnings upon leaving the game.",
        "",
        "An arbitrary person is chosen to be the first player. Going around the table, each player has only one of two options:",
        "",
        "1. The player can scratch his ticket and reveal its worth to everyone at the table.",
        "2. The player can trade his unscratched ticket for a previous player's scratched ticket, and then leave the game with that ticket. The previous player then scratches his newly-acquired ticket and reveals its worth to everyone at the table.",
        "",
        "The game ends once all tickets have been scratched. All players still remaining at the table must leave with their currently-held tickets.",
        "",
        "Assume that each player uses the optimal strategy for maximizing the expected value of his ticket winnings. ",
        "",
        "Let E(p) represent the expected number of players left at the table when the game ends in a game consisting of p players (e.g. E(111) = 5.2912 when rounded to 5 significant digits).",
        "",
        "Let S1(N) =  E(p)",
        "Let Sk(N) =  Sk-1(p) for k > 1",
        "",
        "Find S20(1014) and write the answer in scientific notation rounded to 10 significant digits. Use a lowercase e to separate mantissa and exponent (e.g. S3(100) = 5.983679014e5)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler444() {\n  // Good luck!\n  return true;\n}\n\neuler444();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 444 The Roundtable Lottery",
      "dashedName": "problem-444-the-roundtable-lottery"
    },
    {
      "id": "5900f52a1000cf542c51003c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler445()</code> should return 659104042.",
          "testString":
            "assert.strictEqual(euler445(), 659104042, '<code>euler445()</code> should return 659104042.');"
        }
      ],
      "description": [
        "For every integer n>1, the family of functions fn,a,b  is defined ",
        "by fn,a,b(x)≡ax+b mod n for a,b,x integer and  0<a<n, 0≤b<n, 0≤x<n.",
        "We will call fn,a,b a retraction if fn,a,b(fn,a,b(x))≡fn,a,b(x) mod n for every 0≤x<n.",
        "Let R(n) be the number of retractions for n.",
        "",
        "",
        "You are given that",
        "∑ R(c) for c=C(100 000,k), and 1 ≤ k ≤99 999 ≡628701600 (mod 1 000 000 007).",
        "(C(n,k) is the binomial coefficient).",
        "",
        "Find ∑ R(c) for c=C(10 000 000,k), and 1 ≤k≤ 9 999 999.",
        "Give your answer modulo 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler445() {\n  // Good luck!\n  return true;\n}\n\neuler445();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 445 Retractions A",
      "dashedName": "problem-445-retractions-a"
    },
    {
      "id": "5900f52c1000cf542c51003d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler446()</code> should return 907803852.",
          "testString":
            "assert.strictEqual(euler446(), 907803852, '<code>euler446()</code> should return 907803852.');"
        }
      ],
      "description": [
        "For every integer n>1, the family of functions fn,a,b  is defined ",
        "by fn,a,b(x)≡ax+b mod n for a,b,x integer and  0<a<n, 0≤b<n, 0≤x<n.",
        "We will call fn,a,b a retraction if fn,a,b(fn,a,b(x))≡fn,a,b(x) mod n for every 0≤x<n.",
        "Let R(n) be the number of retractions for n.",
        "",
        "",
        "F(N)=∑R(n4+4) for 1≤n≤N.  ",
        "F(1024)=77532377300600.",
        "",
        "Find F(107) (mod 1 000 000 007)"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler446() {\n  // Good luck!\n  return true;\n}\n\neuler446();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 446 Retractions B",
      "dashedName": "problem-446-retractions-b"
    },
    {
      "id": "5900f52c1000cf542c51003e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler447()</code> should return 530553372.",
          "testString":
            "assert.strictEqual(euler447(), 530553372, '<code>euler447()</code> should return 530553372.');"
        }
      ],
      "description": [
        "For every integer n>1, the family of functions fn,a,b  is defined ",
        "by fn,a,b(x)≡ax+b mod n for a,b,x integer and  0<a<n, 0≤b<n, 0≤x<n.",
        "We will call fn,a,b a retraction if fn,a,b(fn,a,b(x))≡fn,a,b(x) mod n for every 0≤x<n.",
        "Let R(n) be the number of retractions for n.",
        "",
        "",
        "F(N)=∑R(n) for 2≤n≤N.",
        "F(107)≡638042271 (mod 1 000 000 007).",
        "",
        "",
        "Find F(1014) (mod 1 000 000 007)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler447() {\n  // Good luck!\n  return true;\n}\n\neuler447();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 447 Retractions C",
      "dashedName": "problem-447-retractions-c"
    },
    {
      "id": "5900f52c1000cf542c51003f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler448()</code> should return 106467648.",
          "testString":
            "assert.strictEqual(euler448(), 106467648, '<code>euler448()</code> should return 106467648.');"
        }
      ],
      "description": [
        "The function lcm(a,b) denotes the least common multiple of a and b.",
        "Let A(n) be the average of the values of lcm(n,i) for 1≤i≤n.",
        "E.g: A(2)=(2+2)/2=2 and A(10)=(10+10+30+20+10+30+70+40+90+10)/10=32. ",
        "",
        "Let S(n)=∑A(k) for 1≤k≤n.",
        "S(100)=122726.",
        "",
        "",
        "Find S(99999999019) mod 999999017."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler448() {\n  // Good luck!\n  return true;\n}\n\neuler448();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 448 Average least common multiple",
      "dashedName": "problem-448-average-least-common-multiple"
    },
    {
      "id": "5900f52d1000cf542c510040",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler449()</code> should return 103.37870096.",
          "testString":
            "assert.strictEqual(euler449(), 103.37870096, '<code>euler449()</code> should return 103.37870096.');"
        }
      ],
      "description": [
        "Phil the confectioner is making a new batch of chocolate covered candy. Each candy centre is shaped like an ellipsoid of revolution defined by the equation: b2x2 + b2y2 + a2z2 = a2b2.",
        "",
        "",
        "Phil wants to know how much chocolate is needed to cover one candy centre with a uniform coat of chocolate one millimeter thick.",
        "If a=1 mm and b=1 mm, the amount of chocolate required is ",
        "",
        "    283",
        "    π mm3",
        "",
        "If a=2 mm and b=1 mm, the amount of chocolate required is approximately 60.35475635 mm3.",
        "",
        "",
        "Find the amount of chocolate in mm3 required if a=3 mm and b=1 mm. Give your answer as the number rounded to 8 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler449() {\n  // Good luck!\n  return true;\n}\n\neuler449();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 449 Chocolate covered candy",
      "dashedName": "problem-449-chocolate-covered-candy"
    },
    {
      "id": "5900f52e1000cf542c510041",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler450()</code> should return 583333163984220900.",
          "testString":
            "assert.strictEqual(euler450(), 583333163984220900, '<code>euler450()</code> should return 583333163984220900.');"
        }
      ],
      "description": [
        "A hypocycloid is the curve drawn by a point on a small circle rolling inside a larger circle. The parametric equations of a hypocycloid centered at the origin, and starting at the right most point is given by:",
        "$x(t) = (R - r) \\cos(t) + r \\cos(\\frac {R - r} r t)$",
        "$y(t) = (R - r) \\sin(t) - r \\sin(\\frac {R - r} r t)$",
        "Where R is the radius of the large circle and r the radius of the small circle.",
        "",
        "",
        "Let $C(R, r)$ be the set of distinct points with integer coordinates on the hypocycloid with radius R and r and for which there is a corresponding value of t such that $\\sin(t)$ and $\\cos(t)$ are rational numbers.",
        "",
        "Let $S(R, r) = \\sum_{(x,y) \\in C(R, r)} |x| + |y|$ be the sum of the absolute values of the x and y coordinates of the points in $C(R, r)$.",
        "",
        "",
        "Let $T(N) = \\sum_{R = 3}^N \\sum_{r=1}^{\\lfloor \\frac {R - 1} 2 \\rfloor} S(R, r)$ be the sum of $S(R, r)$ for R and r positive integers, $R\\leq N$  and $2r < R$.",
        "",
        "",
        "You are given:C(3, 1) =",
        "{(3, 0), (-1, 2), (-1,0), (-1,-2)}",
        "C(2500, 1000) =",
        "{(2500, 0), (772, 2376), (772, -2376), (516, 1792),",
        " (516, -1792), (500, 0), (68, 504), (68, -504),(-1356, 1088), (-1356, -1088), (-1500, 1000), (-1500, -1000)}",
        "",
        "Note: (-625, 0) is not an element of C(2500, 1000) because $\\sin(t)$ is not a rational number for the corresponding values of t.",
        "",
        "",
        "S(3, 1) = (|3| + |0|) + (|-1| + |2|) + (|-1| + |0|) + (|-1| + |-2|) = 10",
        "",
        "T(3) = 10; T(10) = 524 ;T(100) = 580442; T(103) = 583108600.",
        "",
        "",
        "Find T(106)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler450() {\n  // Good luck!\n  return true;\n}\n\neuler450();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 450 Hypocycloid and Lattice points",
      "dashedName": "problem-450-hypocycloid-and-lattice-points"
    },
    {
      "id": "5900f5311000cf542c510042",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler451()</code> should return 153651073760956.",
          "testString":
            "assert.strictEqual(euler451(), 153651073760956, '<code>euler451()</code> should return 153651073760956.');"
        }
      ],
      "description": [
        "Consider the number 15.",
        "There are eight positive numbers less than 15 which are coprime to 15: 1, 2, 4, 7, 8, 11, 13, 14.",
        "The modular inverses of these numbers modulo 15 are: 1, 8, 4, 13, 2, 11, 7, 14  ",
        "because",
        "1*1 mod 15=1",
        "2*8=16 mod 15=1",
        "4*4=16 mod 15=1",
        "7*13=91 mod 15=1",
        "11*11=121 mod 15=1",
        "14*14=196 mod 15=1",
        "",
        "Let I(n) be the largest positive number m smaller than n-1 such that the modular inverse of m modulo n equals m itself.",
        "So I(15)=11.",
        "Also I(100)=51 and I(7)=1.",
        "",
        "Find ∑I(n) for 3≤n≤2·107"
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler451() {\n  // Good luck!\n  return true;\n}\n\neuler451();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 451 Modular inverses",
      "dashedName": "problem-451-modular-inverses"
    },
    {
      "id": "5900f5311000cf542c510043",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler452()</code> should return 345558983.",
          "testString":
            "assert.strictEqual(euler452(), 345558983, '<code>euler452()</code> should return 345558983.');"
        }
      ],
      "description": [
        "Define F(m,n) as the number of n-tuples of positive integers for which the product of the elements doesn't exceed m.",
        "F(10, 10) = 571.",
        "F(106, 106) mod 1 234 567 891 = 252903833.",
        "Find F(109, 109) mod 1 234 567 891."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler452() {\n  // Good luck!\n  return true;\n}\n\neuler452();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 452 Long Products",
      "dashedName": "problem-452-long-products"
    },
    {
      "id": "5900f5311000cf542c510044",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler453()</code> should return 104354107.",
          "testString":
            "assert.strictEqual(euler453(), 104354107, '<code>euler453()</code> should return 104354107.');"
        }
      ],
      "description": [
        "A simple quadrilateral is a polygon that has four distinct vertices, has no straight angles and does not self-intersect.",
        "",
        "Let Q(m, n) be the number of simple quadrilaterals whose vertices are lattice points with coordinates (x,y) satisfying 0 ≤ x ≤ m and 0 ≤ y ≤ n.",
        "",
        "For example, Q(2, 2) = 94 as can be seen below:",
        "",
        "It can also be verified that Q(3, 7) = 39590, Q(12, 3) = 309000 and Q(123, 45) = 70542215894646.",
        "",
        "Find Q(12345, 6789) mod 135707531."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler453() {\n  // Good luck!\n  return true;\n}\n\neuler453();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 453 Lattice Quadrilaterals",
      "dashedName": "problem-453-lattice-quadrilaterals"
    },
    {
      "id": "5900f5331000cf542c510045",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler454()</code> should return 5435004633092.",
          "testString":
            "assert.strictEqual(euler454(), 5435004633092, '<code>euler454()</code> should return 5435004633092.');"
        }
      ],
      "description": [
        "In the following equation x, y, and n are positive integers.",
        "",
        "1x",
        " + ",
        "1y",
        " = ",
        "1n",
        "",
        "For a limit L we define F(L) as the number of solutions which satisfy x < y ≤ L.",
        "",
        "We can verify that F(15) = 4 and F(1000) = 1069.",
        "Find F(1012)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler454() {\n  // Good luck!\n  return true;\n}\n\neuler454();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 454 Diophantine reciprocals III",
      "dashedName": "problem-454-diophantine-reciprocals-iii"
    },
    {
      "id": "5900f5331000cf542c510046",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler455()</code> should return 450186511399999.",
          "testString":
            "assert.strictEqual(euler455(), 450186511399999, '<code>euler455()</code> should return 450186511399999.');"
        }
      ],
      "description": [
        "Let f(n) be the largest positive integer x less than 109 such that the last 9 digits of nx form the number x (including leading zeros), or zero if no such integer exists.",
        "",
        "For example:",
        "",
        "f(4) = 411728896 (4411728896 = ...490411728896) ",
        "f(10) = 0",
        "f(157) = 743757 (157743757 = ...567000743757)",
        "Σf(n), 2 ≤ n ≤ 103 = 442530011399",
        "Find Σf(n), 2 ≤ n ≤ 106."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler455() {\n  // Good luck!\n  return true;\n}\n\neuler455();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 455 Powers With Trailing Digits",
      "dashedName": "problem-455-powers-with-trailing-digits"
    },
    {
      "id": "5900f5351000cf542c510047",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler456()</code> should return 333333208685971500.",
          "testString":
            "assert.strictEqual(euler456(), 333333208685971500, '<code>euler456()</code> should return 333333208685971500.');"
        }
      ],
      "description": [
        "Define:xn = (1248n mod 32323) - 16161yn = (8421n mod 30103) - 15051",
        "Pn = {(x1, y1), (x2, y2), ..., (xn, yn)}",
        "",
        "",
        "For example, P8 = {(-14913, -6630), (-10161, 5625), (5226, 11896), (8340, -10778), (15852, -5203), (-15165, 11295), (-1427, -14495), (12407, 1060)}.",
        "",
        "Let C(n) be the number of triangles whose vertices are in Pn which contain the origin in the interior.",
        "",
        "",
        "Examples:",
        "C(8) = 20",
        "C(600) = 8950634",
        "C(40 000) = 2666610948988",
        "",
        "",
        "Find C(2 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler456() {\n  // Good luck!\n  return true;\n}\n\neuler456();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 456 Triangles containing the origin II",
      "dashedName": "problem-456-triangles-containing-the-origin-ii"
    },
    {
      "id": "5900f5361000cf542c510048",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler457()</code> should return 2647787126797397000.",
          "testString":
            "assert.strictEqual(euler457(), 2647787126797397000, '<code>euler457()</code> should return 2647787126797397000.');"
        }
      ],
      "description": [
        "Let f(n) = n2 - 3n - 1.",
        "Let p be a prime.",
        "Let R(p) be the smallest positive integer n such that f(n) mod p2 = 0 if such an integer n exists, otherwise R(p) = 0.",
        "",
        "",
        "Let SR(L) be ∑R(p) for all primes not exceeding L.",
        "",
        "",
        "Find SR(107)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler457() {\n  // Good luck!\n  return true;\n}\n\neuler457();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 457 A polynomial modulo the square of a prime",
      "dashedName": "problem-457-a-polynomial-modulo-the-square-of-a-prime"
    },
    {
      "id": "5900f5361000cf542c510049",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler458()</code> should return 423341841.",
          "testString":
            "assert.strictEqual(euler458(), 423341841, '<code>euler458()</code> should return 423341841.');"
        }
      ],
      "description": [
        "Consider the alphabet A made out of the letters of the word \"project\": A={c,e,j,o,p,r,t}.",
        "Let T(n) be the number of strings of length n consisting of letters from A that do not have a substring that is one of the 5040 permutations of \"project\".",
        "",
        "T(7)=77-7!=818503.",
        "",
        "",
        "Find T(1012). Give the last 9 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler458() {\n  // Good luck!\n  return true;\n}\n\neuler458();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 458 Permutations of Project",
      "dashedName": "problem-458-permutations-of-project"
    },
    {
      "id": "5900f5371000cf542c51004a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler459()</code> should return 3996390106631.",
          "testString":
            "assert.strictEqual(euler459(), 3996390106631, '<code>euler459()</code> should return 3996390106631.');"
        }
      ],
      "description": [
        "The flipping game is a two player game played on a N by N square board.",
        "Each square contains a disk with one side white and one side black.",
        "The game starts with all disks showing their white side.",
        "",
        "A turn consists of flipping all disks in a rectangle with the following properties:",
        "the upper right corner of the rectangle contains a white disk",
        "the rectangle width is a perfect square (1, 4, 9, 16, ...)",
        "the rectangle height is a triangular number (1, 3, 6, 10, ...)",
        "",
        "",
        "Players alternate turns. A player wins by turning the grid all black.",
        "",
        "Let W(N) be the number of winning moves for the first player on a N by N board with all disks white, assuming perfect play.",
        "W(1) = 1, W(2) = 0, W(5) = 8 and W(102) = 31395.",
        "",
        "For N=5, the first player's eight winning first moves are:",
        "",
        "",
        "",
        "",
        "Find W(106)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler459() {\n  // Good luck!\n  return true;\n}\n\neuler459();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 459 Flipping game",
      "dashedName": "problem-459-flipping-game"
    },
    {
      "id": "5900f5381000cf542c51004b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler460()</code> should return 18.420738199.",
          "testString":
            "assert.strictEqual(euler460(), 18.420738199, '<code>euler460()</code> should return 18.420738199.');"
        }
      ],
      "description": [
        "On the Euclidean plane, an ant travels from point A(0, 1) to point B(d, 1) for an integer d.",
        "",
        "",
        "In each step, the ant at point (x0, y0) chooses one of the lattice points (x1, y1) which satisfy x1 ≥ 0 and y1 ≥ 1 and goes straight to (x1, y1) at a constant velocity v. The value of v depends on y0 and y1 as follows:",
        " If y0 = y1, the value of v equals y0.",
        " If y0 ≠ y1, the value of v equals (y1 - y0) / (ln(y1) - ln(y0)).",
        "",
        "The left image is one of the possible paths for d = 4. First the ant goes from A(0, 1) to P1(1, 3) at velocity (3 - 1) / (ln(3) - ln(1)) ≈ 1.8205. Then the required time is sqrt(5) / 1.8205 ≈ 1.2283.",
        "From P1(1, 3) to P2(3, 3) the ant travels at velocity 3 so the required time is 2 / 3 ≈ 0.6667. From P2(3, 3) to B(4, 1) the ant travels at velocity (1 - 3) / (ln(1) - ln(3)) ≈ 1.8205 so the required time is sqrt(5) / 1.8205 ≈ 1.2283.",
        "Thus the total required time is 1.2283 + 0.6667 + 1.2283 = 3.1233.",
        "",
        "",
        "The right image is another path. The total required time is calculated as 0.98026 + 1 + 0.98026 = 2.96052. It can be shown that this is the quickest path for d = 4.",
        "",
        "",
        "",
        "Let F(d) be the total required time if the ant chooses the quickest path. For example, F(4) ≈ 2.960516287.",
        "We can verify that F(10) ≈ 4.668187834 and F(100) ≈ 9.217221972.",
        "",
        "",
        "Find F(10000). Give your answer rounded to nine decimal places."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler460() {\n  // Good luck!\n  return true;\n}\n\neuler460();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 460 An ant on the move",
      "dashedName": "problem-460-an-ant-on-the-move"
    },
    {
      "id": "5900f53a1000cf542c51004c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler461()</code> should return 159820276.",
          "testString":
            "assert.strictEqual(euler461(), 159820276, '<code>euler461()</code> should return 159820276.');"
        }
      ],
      "description": [
        "Let fn(k) = ek/n - 1, for all non-negative integers k.",
        "Remarkably, f200(6) + f200(75) + f200(89) + f200(226) = 3.141592644529… ≈ π.",
        "In fact, it is the best approximation of π of the form fn(a) + fn(b) + fn(c) + fn(d) for n = 200.",
        "Let g(n) = a2 + b2 + c2 + d 2 for a, b, c, d that minimize the error: | fn(a) + fn(b) + fn(c) + fn(d) - π|",
        "(where |x| denotes the absolute value of x).",
        "You are given g(200) = 62 + 752 + 892 + 2262 = 64658.",
        "Find g(10000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler461() {\n  // Good luck!\n  return true;\n}\n\neuler461();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 461 Almost Pi",
      "dashedName": "problem-461-almost-pi"
    },
    {
      "id": "5900f53b1000cf542c51004d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler462()</code> should return Infinity.",
          "testString":
            "assert.strictEqual(euler462(), Infinity, '<code>euler462()</code> should return Infinity.');"
        }
      ],
      "description": [
        "A 3-smooth number is an integer which has no prime factor larger than 3. For an integer N, we define S(N) as the set of 3-smooth numbers less than or equal to N . For example, S(20) = { 1, 2, 3, 4, 6, 8, 9, 12, 16, 18 }.",
        "",
        "",
        "We define F(N) as the number of permutations of S(N) in which each element comes after all of its proper divisors.",
        "",
        "",
        "This is one of the possible permutations for N = 20.",
        "- 1, 2, 4, 3, 9, 8, 16, 6, 18, 12.",
        "This is not a valid permutation because 12 comes before its divisor 6.",
        "- 1, 2, 4, 3, 9, 8, 12, 16, 6, 18.",
        "",
        "",
        "We can verify that F(6) = 5, F(8) = 9, F(20) = 450 and F(1000) ≈ 8.8521816557e21.",
        "Find F(1018). Give as your answer its scientific notation rounded to ten digits after the decimal point.",
        "When giving your answer, use a lowercase e to separate mantissa and exponent. E.g. if the answer is 112,233,445,566,778,899 then the answer format would be 1.1223344557e17."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler462() {\n  // Good luck!\n  return true;\n}\n\neuler462();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 462 Permutation of 3smooth numbers",
      "dashedName": "problem-462-permutation-of-3smooth-numbers"
    },
    {
      "id": "5900f53c1000cf542c51004e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler463()</code> should return 808981553.",
          "testString":
            "assert.strictEqual(euler463(), 808981553, '<code>euler463()</code> should return 808981553.');"
        }
      ],
      "description": [
        "The function $f$ is defined for all positive integers as follows:",
        "$f(1)=1$",
        "$f(3)=3$",
        "$f(2n)=f(n)$",
        "$f(4n + 1)=2f(2n + 1) - f(n)$",
        "$f(4n + 3)=3f(2n + 1) - 2f(n)$",
        "",
        "The function $S(n)$ is defined as $\\sum_{i=1}^{n}f(i)$.",
        "$S(8)=22$ and $S(100)=3604$.",
        "Find $S(3^{37})$. Give the last 9 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler463() {\n  // Good luck!\n  return true;\n}\n\neuler463();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 463 A weird recurrence relation",
      "dashedName": "problem-463-a-weird-recurrence-relation"
    },
    {
      "id": "5900f53d1000cf542c51004f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler464()</code> should return 198775297232878.",
          "testString":
            "assert.strictEqual(euler464(), 198775297232878, '<code>euler464()</code> should return 198775297232878.');"
        }
      ],
      "description": [
        "The Möbius function, denoted μ(n), is defined as:",
        "μ(n) = (-1)ω(n) if n is squarefree (where ω(n) is the number of distinct prime factors of n)",
        "μ(n) = 0 if n is not squarefree.",
        "",
        "Let P(a,b) be the number of integers n in the interval [a,b] such that μ(n) = 1.",
        "Let N(a,b) be the number of integers n in the interval [a,b] such that μ(n) = -1.",
        "For example, P(2,10) = 2 and N(2,10) = 4.",
        "",
        "",
        "",
        "Let C(n) be the number of integer pairs (a,b) such that:",
        " 1 ≤ a ≤ b ≤ n,",
        " 99·N(a,b) ≤ 100·P(a,b), and",
        " 99·P(a,b) ≤ 100·N(a,b).",
        "",
        "For example, C(10) = 13, C(500) = 16676 and C(10 000) = 20155319.",
        "",
        "",
        "",
        "Find C(20 000 000)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler464() {\n  // Good luck!\n  return true;\n}\n\neuler464();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 464 Mbius function and intervals",
      "dashedName": "problem-464-mbius-function-and-intervals"
    },
    {
      "id": "5900f53d1000cf542c510050",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler465()</code> should return 585965659.",
          "testString":
            "assert.strictEqual(euler465(), 585965659, '<code>euler465()</code> should return 585965659.');"
        }
      ],
      "description": [
        "The kernel of a polygon is defined by the set of points from which the entire polygon's boundary is visible. We define a polar polygon as a polygon for which the origin is strictly contained inside its kernel.",
        "",
        "For this problem, a polygon can have collinear consecutive vertices. However, a polygon still cannot have self-intersection and cannot have zero area.",
        "",
        "For example, only the first of the following is a polar polygon (the kernels of the second, third, and fourth do not strictly contain the origin, and the fifth does not have a kernel at all):",
        "",
        "",
        "",
        "Notice that the first polygon has three consecutive collinear vertices.",
        "",
        "Let P(n) be the number of polar polygons such that the vertices (x, y) have integer coordinates whose absolute values are not greater than n.",
        "",
        "Note that polygons should be counted as different if they have different set of edges, even if they enclose the same area. For example, the polygon with vertices [(0,0),(0,3),(1,1),(3,0)] is distinct from the polygon with vertices [(0,0),(0,3),(1,1),(3,0),(1,0)].",
        "",
        "For example, P(1) = 131, P(2) = 1648531, P(3) = 1099461296175 and P(343) mod 1 000 000 007 = 937293740.",
        "",
        "Find P(713) mod 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler465() {\n  // Good luck!\n  return true;\n}\n\neuler465();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 465 Polar polygons",
      "dashedName": "problem-465-polar-polygons"
    },
    {
      "id": "5900f53e1000cf542c510051",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler466()</code> should return 258381958195474750.",
          "testString":
            "assert.strictEqual(euler466(), 258381958195474750, '<code>euler466()</code> should return 258381958195474750.');"
        }
      ],
      "description": [
        "Let P(m,n) be the number of distinct terms in an m×n multiplication table.",
        "",
        "For example, a 3×4 multiplication table looks like this:",
        "",
        "× 12341 12342 24683 36912",
        "",
        "",
        "",
        "There are 8 distinct terms {1,2,3,4,6,8,9,12}, therefore P(3,4) = 8.",
        "",
        "You are given that:",
        "P(64,64) = 1263,",
        "P(12,345) = 1998, and",
        "P(32,1015) = 13826382602124302.",
        "",
        "Find P(64,1016)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler466() {\n  // Good luck!\n  return true;\n}\n\neuler466();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 466 Distinct terms in a multiplication table",
      "dashedName": "problem-466-distinct-terms-in-a-multiplication-table"
    },
    {
      "id": "5900f5411000cf542c510052",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler467()</code> should return 775181359.",
          "testString":
            "assert.strictEqual(euler467(), 775181359, '<code>euler467()</code> should return 775181359.');"
        }
      ],
      "description": [
        "An integer s is called a superinteger of another integer n if the digits of n form a subsequence of the digits of s.",
        "For example, 2718281828 is a superinteger of 18828, while 314159 is not a superinteger of 151.",
        "",
        "",
        "Let p(n) be the nth prime number, and let c(n) be the nth composite number. For example, p(1) = 2, p(10) = 29, c(1) = 4 and c(10) = 18.",
        "{p(i) : i ≥ 1} = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ...}",
        "{c(i) : i ≥ 1} = {4, 6, 8, 9, 10, 12, 14, 15, 16, 18, ...}",
        "",
        "Let PD the sequence of the digital roots of {p(i)} (CD is defined similarly for {c(i)}):",
        "PD = {2, 3, 5, 7, 2, 4, 8, 1, 5, 2, ...}",
        "CD = {4, 6, 8, 9, 1, 3, 5, 6, 7, 9, ...}",
        "",
        "Let Pn be the integer formed by concatenating the first n elements of PD (Cn is defined similarly for CD).",
        "P10 = 2357248152",
        "C10 = 4689135679",
        "",
        "Let f(n) be the smallest positive integer that is a common superinteger of Pn and Cn. For example, f(10) = 2357246891352679, and f(100) mod 1 000 000 007 = 771661825.",
        "",
        "Find f(10 000) mod 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler467() {\n  // Good luck!\n  return true;\n}\n\neuler467();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 467 Superinteger",
      "dashedName": "problem-467-superinteger"
    },
    {
      "id": "5900f5411000cf542c510054",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler468()</code> should return 852950321.",
          "testString":
            "assert.strictEqual(euler468(), 852950321, '<code>euler468()</code> should return 852950321.');"
        }
      ],
      "description": [
        "An integer is called B-smooth if none of its prime factors is greater than B.",
        "",
        "Let SB(n) be the largest B-smooth divisor of n.",
        "Examples:",
        "S1(10) = 1",
        "S4(2100) = 12",
        "S17(2496144) = 5712",
        "",
        "Define F(n) = ∑1≤B≤n ∑0≤r≤n SB(C(n,r)). Here, C(n,r) denotes the binomial coefficient.",
        "Examples:",
        "F(11) = 3132",
        "F(1 111) mod 1 000 000 993 = 706036312",
        "F(111 111) mod 1 000 000 993 = 22156169",
        "",
        "Find F(11 111 111) mod 1 000 000 993."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler468() {\n  // Good luck!\n  return true;\n}\n\neuler468();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 468 Smooth divisors of binomial coefficients",
      "dashedName": "problem-468-smooth-divisors-of-binomial-coefficients"
    },
    {
      "id": "5900f5411000cf542c510053",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler469()</code> should return 0.56766764161831.",
          "testString":
            "assert.strictEqual(euler469(), 0.56766764161831, '<code>euler469()</code> should return 0.56766764161831.');"
        }
      ],
      "description": [
        "In a room N chairs are placed around a round table.",
        "Knights enter the room one by one and choose at random an available empty chair.",
        "To have enough elbow room the knights always leave at least one empty chair between each other.",
        "",
        "",
        "When there aren't any suitable chairs left, the fraction C of empty chairs is determined.",
        "We also define E(N) as the expected value of C.",
        "We can verify that E(4) = 1/2 and E(6) = 5/9.",
        "",
        "",
        "Find E(1018). Give your answer rounded to fourteen decimal places in the form 0.abcdefghijklmn."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler469() {\n  // Good luck!\n  return true;\n}\n\neuler469();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 469 Empty chairs",
      "dashedName": "problem-469-empty-chairs"
    },
    {
      "id": "5900f5431000cf542c510055",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler470()</code> should return 147668794.",
          "testString":
            "assert.strictEqual(euler470(), 147668794, '<code>euler470()</code> should return 147668794.');"
        }
      ],
      "description": [
        "Consider a single game of Ramvok:",
        "",
        "Let t represent the maximum number of turns the game lasts. If t = 0, then the game ends immediately. Otherwise, on each turn i, the player rolls a die. After rolling, if i < t the player can either stop the game and receive a prize equal to the value of the current roll, or discard the roll and try again next turn. If i = t, then the roll cannot be discarded and the prize must be accepted. Before the game begins, t is chosen by the player, who must then pay an up-front cost ct for some constant c. For c = 0, t can be chosen to be infinite (with an up-front cost of 0). Let R(d, c) be the expected profit (i.e. net gain) that the player receives from a single game of optimally-played Ramvok, given a fair d-sided die and cost constant c. For example, R(4, 0.2) = 2.65. Assume that the player has sufficient funds for paying any/all up-front costs.",
        "",
        "Now consider a game of Super Ramvok:",
        "",
        "In Super Ramvok, the game of Ramvok is played repeatedly, but with a slight modification. After each game, the die is altered. The alteration process is as follows: The die is rolled once, and if the resulting face has its pips visible, then that face is altered to be blank instead. If the face is already blank, then it is changed back to its original value. After the alteration is made, another game of Ramvok can begin (and during such a game, at each turn, the die is rolled until a face with a value on it appears). The player knows which faces are blank and which are not at all times. The game of Super Ramvok ends once all faces of the die are blank.",
        "",
        "Let S(d, c) be the expected profit that the player receives from an optimally-played game of Super Ramvok, given a fair d-sided die to start (with all sides visible), and cost constant c. For example, S(6, 1) = 208.3.",
        "",
        "Let F(n) = ∑4≤d≤n ∑0≤c≤n S(d, c).",
        "",
        "Calculate F(20), rounded to the nearest integer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler470() {\n  // Good luck!\n  return true;\n}\n\neuler470();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 470 Super Ramvok",
      "dashedName": "problem-470-super-ramvok"
    },
    {
      "id": "5900f5431000cf542c510056",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler471()</code> should return 1.895093981e+31.",
          "testString":
            "assert.strictEqual(euler471(), 1.895093981e+31, '<code>euler471()</code> should return 1.895093981e+31.');"
        }
      ],
      "description": [
        "The triangle ΔABC is inscribed in an ellipse with equation $\\frac {x^2} {a^2} + \\frac {y^2} {b^2} = 1$, 0 < 2b < a, a and b integers.",
        "Let r(a,b) be the radius of the incircle of ΔABC when the incircle has center (2b, 0) and A has coordinates $\\left( \\frac a 2, \\frac {\\sqrt 3} 2 b\\right)$.",
        "For example, r(3,1) = ½, r(6,2) = 1, r(12,3) = 2.",
        "",
        "",
        "Let $G(n) = \\sum_{a=3}^n \\sum_{b=1}^{\\lfloor \\frac {a - 1} 2 \\rfloor} r(a, b)$",
        "You are given G(10) = 20.59722222, G(100) = 19223.60980 (rounded to 10 significant digits).",
        "Find G(1011).",
        "Give your answer in scientific notation rounded to 10 significant digits. Use a lowercase e to separate mantissa and exponent.",
        "For G(10) the answer would have been 2.059722222e1."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler471() {\n  // Good luck!\n  return true;\n}\n\neuler471();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 471 Triangle inscribed in ellipse",
      "dashedName": "problem-471-triangle-inscribed-in-ellipse"
    },
    {
      "id": "5900f5451000cf542c510057",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler472()</code> should return 73811586.",
          "testString":
            "assert.strictEqual(euler472(), 73811586, '<code>euler472()</code> should return 73811586.');"
        }
      ],
      "description": [
        "There are N seats in a row. N people come one after another to fill the seats according to the following rules:",
        "No person sits beside another.",
        "The first person chooses any seat.",
        "Each subsequent person chooses the seat furthest from anyone else already seated, as long as it does not violate rule 1. If there is more than one choice satisfying this condition, then the person chooses the leftmost choice.",
        "Note that due to rule 1, some seats will surely be left unoccupied, and the maximum number of people that can be seated is less than N (for N > 1).",
        "",
        "Here are the possible seating arrangements for N = 15:",
        "",
        "",
        "",
        "We see that if the first person chooses correctly, the 15 seats can seat up to 7 people.",
        "We can also see that the first person has 9 choices to maximize the number of people that may be seated.",
        "",
        "Let f(N) be the number of choices the first person has to maximize the number of occupants for N seats in a row. Thus, f(1) = 1, f(15) = 9, f(20) = 6, and f(500) = 16.",
        "",
        "Also, ∑f(N) = 83 for 1 ≤ N ≤ 20 and  ∑f(N) = 13343 for 1 ≤ N ≤ 500.",
        "",
        "Find ∑f(N) for 1 ≤ N ≤ 1012. Give the last 8 digits of your answer."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler472() {\n  // Good luck!\n  return true;\n}\n\neuler472();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 472 Comfortable Distance II",
      "dashedName": "problem-472-comfortable-distance-ii"
    },
    {
      "id": "5900f5461000cf542c510058",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler473()</code> should return 35856681704365.",
          "testString":
            "assert.strictEqual(euler473(), 35856681704365, '<code>euler473()</code> should return 35856681704365.');"
        }
      ],
      "description": [
        "Let $\\varphi$ be the golden ratio: $\\varphi=\\frac{1+\\sqrt{5}}{2}.$",
        "Remarkably it is possible to write every positive integer as a sum of powers of $\\varphi$ even if we require that every power of $\\varphi$ is used at most once in this sum.",
        "Even then this representation is not unique.",
        "We can make it unique by requiring that no powers with consecutive exponents are used and that the representation is finite.",
        "E.g: ",
        "$2=\\varphi+\\varphi^{-2}$ and $3=\\varphi^{2}+\\varphi^{-2}$",
        "",
        "",
        "To represent this sum of powers of $\\varphi$ we use a string of 0's and 1's with a point to indicate where the negative exponents start.",
        "We call this the representation in the phigital numberbase.",
        "So $1=1_{\\varphi}$, $2=10.01_{\\varphi}$, $3=100.01_{\\varphi}$ and $14=100100.001001_{\\varphi}$. ",
        "The strings representing 1, 2 and 14 in the phigital number base are palindromic, while the string representing 3 is not. (the phigital point is not the middle character).",
        "",
        "",
        "The sum of the positive integers not exceeding 1000 whose phigital representation is palindromic is 4345.",
        "",
        "",
        "Find the sum of the positive integers not exceeding $10^{10}$ whose phigital representation is palindromic."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler473() {\n  // Good luck!\n  return true;\n}\n\neuler473();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 473 Phigital number base",
      "dashedName": "problem-473-phigital-number-base"
    },
    {
      "id": "5900f5471000cf542c510059",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler474()</code> should return 9690646731515010.",
          "testString":
            "assert.strictEqual(euler474(), 9690646731515010, '<code>euler474()</code> should return 9690646731515010.');"
        }
      ],
      "description": [
        "For a positive integer n and digits d, we define F(n, d) as the number of the divisors of n whose last digits equal d.",
        "For example, F(84, 4) = 3. Among the divisors of 84 (1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42, 84), three of them (4, 14, 84) have the last digit 4.",
        "",
        "",
        "We can also verify that F(12!, 12) = 11 and F(50!, 123) = 17888.",
        "",
        "",
        "Find F(106!, 65432) modulo (1016 + 61)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler474() {\n  // Good luck!\n  return true;\n}\n\neuler474();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 474 Last digits of divisors",
      "dashedName": "problem-474-last-digits-of-divisors"
    },
    {
      "id": "5900f5481000cf542c51005a",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler475()</code> should return 75780067.",
          "testString":
            "assert.strictEqual(euler475(), 75780067, '<code>euler475()</code> should return 75780067.');"
        }
      ],
      "description": [
        "12n musicians participate at a music festival. On the first day, they form 3n quartets and practice all day.",
        "It is a disaster. At the end of the day, all musicians decide they will never again agree to play with any member of their quartet.",
        "On the second day, they form 4n trios, each musician avoiding his previous quartet partners.",
        "",
        "Let f(12n) be the number of ways to organize the trios amongst the 12n musicians.",
        "You are given f(12) = 576 and f(24) mod 1 000 000 007 = 509089824.",
        "",
        "Find f(600) mod 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler475() {\n  // Good luck!\n  return true;\n}\n\neuler475();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 475 Music festival",
      "dashedName": "problem-475-music-festival"
    },
    {
      "id": "5900f5481000cf542c51005b",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler476()</code> should return 110242.87794.",
          "testString":
            "assert.strictEqual(euler476(), 110242.87794, '<code>euler476()</code> should return 110242.87794.');"
        }
      ],
      "description": [
        "Let R(a, b, c) be the maximum area covered by three non-overlapping circles inside a triangle with edge lengths a, b and c.",
        "Let S(n) be the average value of R(a, b, c) over all integer triplets (a, b, c) such that 1 ≤ a ≤ b ≤ c < a + b ≤ n",
        "You are given S(2) = R(1, 1, 1) ≈ 0.31998, S(5) ≈ 1.25899.",
        "Find S(1803) rounded to 5 decimal places behind the decimal point."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler476() {\n  // Good luck!\n  return true;\n}\n\neuler476();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 476 Circle Packing II",
      "dashedName": "problem-476-circle-packing-ii"
    },
    {
      "id": "5900f54a1000cf542c51005c",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler477()</code> should return 25044905874565164.",
          "testString":
            "assert.strictEqual(euler477(), 25044905874565164, '<code>euler477()</code> should return 25044905874565164.');"
        }
      ],
      "description": [
        "The number sequence game starts with a sequence S of N numbers written on a line.",
        "Two players alternate turns. At his turn, a player must select and remove either the first or the last number remaining in the sequence.",
        "The player score is the sum of all the numbers he has taken. Each player attempts to maximize his own sum.",
        "If N = 4 and S = {1, 2, 10, 3}, then each player maximizes his score as follows:",
        "Player 1: removes the first number (1)",
        "Player 2: removes the last number from the remaining sequence (3)",
        "Player 1: removes the last number from the remaining sequence (10)",
        "Player 2: removes the remaining number (2)",
        "Player 1 score is 1 + 10 = 11.",
        "Let F(N) be the score of player 1 if both players follow the optimal strategy for the sequence S = {s1, s2, ..., sN} defined as:",
        "s1 = 0",
        "si+1 = (si2 + 45) modulo 1 000 000 007",
        "The sequence begins with S = {0, 45, 2070, 4284945, 753524550, 478107844, 894218625, ...}.",
        "You are given F(2) = 45, F(4) = 4284990, F(100) = 26365463243, F(104) = 2495838522951.",
        "Find F(108)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler477() {\n  // Good luck!\n  return true;\n}\n\neuler477();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 477 Number Sequence Game",
      "dashedName": "problem-477-number-sequence-game"
    },
    {
      "id": "5900f54c1000cf542c51005e",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler478()</code> should return 59510340.",
          "testString":
            "assert.strictEqual(euler478(), 59510340, '<code>euler478()</code> should return 59510340.');"
        }
      ],
      "description": [
        "Let us consider mixtures of three substances: A, B and C. A mixture can be described by a ratio of the amounts of A, B, and C in it, i.e., (a : b : c). For example, a mixture described by the ratio (2 : 3 : 5) contains 20% A, 30% B and 50% C.",
        "",
        "For the purposes of this problem, we cannot separate the individual components from a mixture. However, we can combine different amounts of different mixtures to form mixtures with new ratios.",
        "",
        "For example, say we have three mixtures with ratios (3 : 0 : 2), (3 : 6 : 11) and (3 : 3 : 4). By mixing 10 units of the first, 20 units of the second and 30 units of the third, we get a new mixture with ratio (6 : 5 : 9), since:",
        "(10·3/5 + 20·3/20 + 30·3/10 : 10·0/5 + 20·6/20 + 30·3/10 : 10·2/5 + 20·11/20 + 30·4/10)",
        "= (18 : 15 : 27) = (6 : 5 : 9)",
        "",
        "However, with the same three mixtures, it is impossible to form the ratio (3 : 2 : 1), since the amount of B is always less than the amount of C.",
        "",
        "Let n be a positive integer. Suppose that for every triple of integers (a, b, c) with 0 ≤ a, b, c ≤ n and gcd(a, b, c) = 1, we have a mixture with ratio (a : b : c). Let M(n) be the set of all such mixtures.",
        "",
        "For example, M(2) contains the 19 mixtures with the following ratios:",
        "{(0 : 0 : 1), (0 : 1 : 0), (0 : 1 : 1), (0 : 1 : 2), (0 : 2 : 1), ",
        "(1 : 0 : 0), (1 : 0 : 1), (1 : 0 : 2), (1 : 1 : 0), (1 : 1 : 1), ",
        "(1 : 1 : 2), (1 : 2 : 0), (1 : 2 : 1), (1 : 2 : 2), (2 : 0 : 1), ",
        "(2 : 1 : 0), (2 : 1 : 1), (2 : 1 : 2), (2 : 2 : 1)}.",
        "",
        "Let E(n) be the number of subsets of M(n) which can produce the mixture with ratio (1 : 1 : 1), i.e., the mixture with equal parts A, B and C. ",
        "We can verify that E(1) = 103, E(2) = 520447, E(10) mod 118 = 82608406 and E(500) mod 118 = 13801403.",
        "Find E(10 000 000) mod 118."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler478() {\n  // Good luck!\n  return true;\n}\n\neuler478();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 478 Mixtures",
      "dashedName": "problem-478-mixtures"
    },
    {
      "id": "5900f54b1000cf542c51005d",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler479()</code> should return 191541795.",
          "testString":
            "assert.strictEqual(euler479(), 191541795, '<code>euler479()</code> should return 191541795.');"
        }
      ],
      "description": [
        "Let ak, bk, and ck represent the three solutions (real or complex numbers) to the expression 1/x = (k/x)2(k+x2) - kx.",
        "",
        "For instance, for k = 5, we see that {a5, b5, c5} is approximately {5.727244, -0.363622+2.057397i, -0.363622-2.057397i}.",
        "",
        "Let S(n) = Σ (ak+bk)p(bk+ck)p(ck+ak)p for all integers p, k such that 1 ≤ p, k ≤ n. ",
        "",
        "Interestingly, S(n) is always an integer. For example, S(4) = 51160.",
        "",
        "Find S(106) modulo 1 000 000 007."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler479() {\n  // Good luck!\n  return true;\n}\n\neuler479();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 479 Roots on the Rise",
      "dashedName": "problem-479-roots-on-the-rise"
    },
    {
      "id": "5900f54c1000cf542c51005f",
      "challengeType": 5,
      "tests": [
        {
          "text": "<code>euler480()</code> should return turnthestarson.",
          "testString":
            "assert.strictEqual(euler480(), turnthestarson, '<code>euler480()</code> should return turnthestarson.');"
        }
      ],
      "description": [
        "Consider all the words which can be formed by selecting letters, in any order, from the phrase:",
        "thereisasyetinsufficientdataforameaningfulanswer",
        "Suppose those with 15 letters or less are listed in alphabetical order and numbered sequentially starting at 1.",
        "The list would include:",
        "1 : a",
        "2 : aa",
        "3 : aaa",
        "4 : aaaa",
        "5 : aaaaa",
        "6 : aaaaaa",
        "7 : aaaaaac",
        "8 : aaaaaacd",
        "9 : aaaaaacde",
        "10 : aaaaaacdee",
        "11 : aaaaaacdeee",
        "12 : aaaaaacdeeee",
        "13 : aaaaaacdeeeee",
        "14 : aaaaaacdeeeeee",
        "15 : aaaaaacdeeeeeef",
        "16 : aaaaaacdeeeeeeg",
        "17 : aaaaaacdeeeeeeh",
        "...",
        "28 : aaaaaacdeeeeeey",
        "29 : aaaaaacdeeeeef",
        "30 : aaaaaacdeeeeefe",
        "...",
        "115246685191495242: euleoywuttttsss",
        "115246685191495243: euler",
        "115246685191495244: eulera",
        "...",
        "525069350231428029: ywuuttttssssrrrDefine P(w) as the position of the word w.",
        "Define W(p) as the word in position p.",
        "We can see that P(w) and W(p) are inverses: P(W(p)) = p and W(P(w)) = w.",
        "Examples:",
        "W(10) = aaaaaacdee",
        "P(aaaaaacdee) = 10",
        "W(115246685191495243) = euler",
        "P(euler) = 115246685191495243Find W(P(legionary) + P(calorimeters) - P(annihilate) + P(orchestrated) - P(fluttering)).",
        "Give your answer using lowercase characters (no punctuation or space)."
      ],
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function euler480() {\n  // Good luck!\n  return true;\n}\n\neuler480();",
          "head": "",
          "tail": ""
        }
      },
      "name": "Problem 480 The Last Question",
      "dashedName": "problem-480-the-last-question"
    },
    {
      "description": [
        "<p>There are 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, visit every door and 'toggle' the door (if the door is closed, open it; if it is open, close it). The second time, only visit every 2nd door (i.e., door #2, #4, #6, ...) and toggle it. The third time, visit every 3rd door (i.e., door #3, #6, #9, ...), etc., until you only visit the 100th door.</p>",
        "<p>Implement a function to determine the state of the doors after the last pass. Return the final result in an array, with only the door number included in the array if it is open.</p>"
      ],
      "tests": [
        {
          "text": "<code>getFinalOpenedDoors</code> is a function.",
          "testString":
            "assert(typeof getFinalOpenedDoors === 'function', '<code>getFinalOpenedDoors</code> is a function.');"
        },
        {
          "text": "<code>getFinalOpenedDoors</code> should return an array.",
          "testString":
            "assert(Array.isArray(getFinalOpenedDoors(100)), '<code>getFinalOpenedDoors</code> should return an array.');"
        },
        {
          "text":
            "<code>getFinalOpenedDoors</code> did not produce the correct results.",
          "testString":
            "assert.deepEqual(getFinalOpenedDoors(100), solution, '<code>getFinalOpenedDoors</code> did not produce the correct results.');"
        }
      ],
      "id": "594810f028c0303b75339acb",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getFinalOpenedDoors (numDoors) {\n  // Good luck!\n}",
          "head": "",
          "tail": "const solution = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100];"
        }
      },
      "name": "100 doors",
      "dashedName": "100-doors"
    },
    {
      "description": [
        "<p>Implement a function that takes a string of four digits as its argument, with each digit from 1 ──► 9 (inclusive) with repetitions allowed, and returns an arithmetic expression that evaluates to the number 24. If no such solution exists, return \"no solution exists.\"</p>",
        "<p>Rules:</p>",
        " Only the following operators/functions are allowed: multiplication, division, addition, subtraction",
        " Division should use floating point or rational arithmetic, etc, to preserve remainders.",
        " Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).",
        " The order of the digits when given does not have to be preserved.",
        "<p>Example inputs:</p>",
        "<code>solve24(\"4878\");</code>",
        "<code>solve24(\"1234\");</code>",
        "<code>solve24(\"6789\");</code>",
        "<code>solve24(\"1127\");</code>",
        "<p>Example outputs (strings):</p>",
        "<code>(7-8/8)*4</code>",
        "<code>3*1*4*2</code>",
        "<code>(6*8)/(9-7)</code>",
        "<code>(1+7)*(2+1)</code>"
      ],
      "tests": [
        {
          "text": "<code>solve24</code> is a function.",
          "testString":
            "assert(typeof solve24 === 'function', '<code>solve24</code> is a function.');"
        },
        {
          "text":
            "<code>solve24(\"4878\")</code> should return <code>(7-8/8)*4</code> or <code>4*(7-8/8)</code>",
          "testString":
            "assert(include(answers[0], solve24(testCases[0])), '<code>solve24(\"4878\")</code> should return <code>(7-8/8)*4</code> or <code>4*(7-8/8)</code>');"
        },
        {
          "text":
            "<code>solve24(\"1234\")</code> should return any arrangement of <code>1*2*3*4</code>",
          "testString":
            "assert(include(answers[1], solve24(testCases[1])), '<code>solve24(\"1234\")</code> should return any arrangement of <code>1*2*3*4</code>');"
        },
        {
          "text":
            "<code>solve24(\"6789\")</code> should return <code>(6*8)/(9-7)</code> or <code>(8*6)/(9-7)</code>",
          "testString":
            "assert(include(answers[2], solve24(testCases[2])), '<code>solve24(\"6789\")</code> should return <code>(6*8)/(9-7)</code> or <code>(8*6)/(9-7)</code>');"
        },
        {
          "text":
            "<code>solve24(\"1127\")</code> should return a permutation of <code>(1+7)*(1*2)</code>",
          "testString":
            "assert(include(answers[3], solve24(testCases[3])), '<code>solve24(\"1127\")</code> should return a permutation of <code>(1+7)*(1*2)</code>');"
        }
      ],
      "id": "5951e88f64ebf159166a1176",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function solve24 (numStr) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [\n  '4878',\n  '1234',\n  '6789',\n  '1127'\n];\n\nconst answers = [\n  ['(7-8/8)*4', '4*(7-8/8)', '(4-8+7)*8', '(4+7-8)*8', '(7+4-8)*8', '(7-8+4)*8', '8*(4-8+7)', '8*(4+7-8)', '8*(7+4-8)', '8*(7-8+4)'],\n  ['1*2*3*4', '1*2*4*3', '1*3*2*4', '1*3*4*2', '1*4*2*3', '1*4*3*2', '2*1*3*4', '2*1*4*3', '2*3*1*4', '2*3*4*1', '2*4*3*1', '2*4*1*3', '3*1*2*4', '3*1*4*2', '3*2*1*4', '3*2*4*1', '3*4*1*2', '3*4*2*1', '4*1*2*3', '4*1*3*2', '4*2*1*3', '4*2*3*1', '4*3*1*2', '4*3*2*1', '(1+2+3)*4', '(1+3+2)*4', '(2+1+3)*4', '(2+3+1)*4', '(3+1+2)*4', '(3+2+1)*4', '4*(1+2+3)', '4*(2+1+3)', '4*(2+3+1)', '4*(3+1+2)', '4*(3+2+1)'],\n  ['(6*8)/(9-7)', '(8*6)/(9-7)', '6*8/(9-7)', '8*6/(9-7)'],\n  ['(1+7)*(2+1)', '(1+7)*(1+2)', '(1+2)*(1+7)', '(1+2)*(7+1)', '(2+1)*(1+7)', '(7+1)*(2+1)']\n];\n\nfunction include(ansArr, res) {\n  const index = ansArr.indexOf(res);\n  return index >= 0;\n}"
        }
      },
      "name": "24 game",
      "dashedName": "24-game"
    },
    {
      "description": [
        "<p>This task is a variation of the <a href=\"https://en.wikipedia.org/wiki/The Nine Billion Names of God#Plot_summary\" title=\"wp: The Nine Billion Names of God#Plot_summary\">short story by Arthur C. Clarke</a>.</p>",
        "<p>(Solvers should be aware of the consequences of completing this task.)</p>",
        "<p>In detail, to specify what is meant by a  “name”:</p>",
        "<p>The integer 1 has 1 name “1”.</p>",
        "<p>The integer 2 has 2 names “1+1”, and “2”.</p>",
        "<p>The integer 3 has 3 names “1+1+1”, “2+1”,  and “3”.</p>",
        "<p>The integer 4 has 5 names “1+1+1+1”, “2+1+1”, “2+2”, “3+1”, “4”.</p>",
        "<p>The integer 5 has 7 names “1+1+1+1+1”, “2+1+1+1”, “2+2+1”, “3+1+1”, “3+2”, “4+1”, “5”.</p>",
        "<p>This can be visualized in the following form:</p>",
        "<pre>",
        "          1",
        "        1   1",
        "      1   1   1",
        "    1   2   1   1",
        "  1   2   2   1   1",
        "1   3   3   2   1   1",
        "</pre>",
        "<p>Where row  $n$  corresponds to integer  $n$,  and each column  $C$  in row  $m$  from left to right corresponds to the number of names beginning with $C$.</p>",
        "<p>Optionally note that the sum of the  $n$-th  row  $P(n)$  is the   <a href=\"http://mathworld.wolfram.com/PartitionFunctionP.html\" title=\"link: http://mathworld.wolfram.com/PartitionFunctionP.html\">integer partition function</a>.</p>",
        "Task",
        "<p>Implement a function that returns the sum of the  $n$-th  row.</p>"
      ],
      "tests": [
        {
          "text": "<code>numberOfNames</code> is a function.",
          "testString":
            "assert(typeof numberOfNames === 'function', '<code>numberOfNames</code> is a function.');"
        },
        {
          "text": "<code>numberOfNames(5)</code> should equal 7.",
          "testString":
            "assert.equal(numberOfNames(5), 7, '<code>numberOfNames(5)</code> should equal 7.');"
        },
        {
          "text": "<code>numberOfNames(12)</code> should equal 77.",
          "testString":
            "assert.equal(numberOfNames(12), 77, '<code>numberOfNames(12)</code> should equal 77.');"
        },
        {
          "text": "<code>numberOfNames(18)</code> should equal 385.",
          "testString":
            "assert.equal(numberOfNames(18), 385, '<code>numberOfNames(18)</code> should equal 385.');"
        },
        {
          "text": "<code>numberOfNames(23)</code> should equal 1255.",
          "testString":
            "assert.equal(numberOfNames(23), 1255, '<code>numberOfNames(23)</code> should equal 1255.');"
        },
        {
          "text": "<code>numberOfNames(42)</code> should equal 53174.",
          "testString":
            "assert.equal(numberOfNames(42), 53174, '<code>numberOfNames(42)</code> should equal 53174.');"
        },
        {
          "text": "<code>numberOfNames(123)</code> should equal 2552338241.",
          "testString":
            "assert.equal(numberOfNames(123), 2552338241, '<code>numberOfNames(123)</code> should equal 2552338241.');"
        }
      ],
      "id": "5949b579404977fbaefcd736",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function numberOfNames (num) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "9 billion names of God the integer",
      "dashedName": "9-billion-names-of-god-the-integer"
    },
    {
      "description": [
        "<p>You are given a collection of ABC blocks (e.g., childhood alphabet blocks). There are 20 blocks with two letters on each block. A complete alphabet is guaranteed amongst all sides of the blocks. The sample collection of blocks:</p>",
        "<p>(B O)</p>",
        "<p>(X K)</p>",
        "<p>(D Q)</p>",
        "<p>(C P)</p>",
        "<p>(N A)</p>",
        "<p>(G T)</p>",
        "<p>(R E)</p>",
        "<p>(T G)</p>",
        "<p>(Q D)</p>",
        "<p>(F S)</p>",
        "<p>(J W)</p>",
        "<p>(H U)</p>",
        "<p>(V I)</p>",
        "<p>(A N)</p>",
        "<p>(O B)</p>",
        "<p>(E R)</p>",
        "<p>(F S)</p>",
        "<p>(L Y)</p>",
        "<p>(P C)</p>",
        "<p>(Z M)</p>",
        "<p>Some rules to keep in mind:</p>",
        "Once a letter on a block is used, that block cannot be used again.",
        "The function should be case-insensitive.",
        "<p>Implement a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.</p>"
      ],
      "tests": [
        {
          "text": "<code>canMakeWord</code> is a function.",
          "testString":
            "assert(typeof canMakeWord === 'function', '<code>canMakeWord</code> is a function.');"
        },
        {
          "text": "<code>canMakeWord</code> should return a boolean.",
          "testString":
            "assert(typeof canMakeWord('hi') === 'boolean', '<code>canMakeWord</code> should return a boolean.');"
        },
        {
          "text": "<code>canMakeWord(\"bark\")</code> should return true.",
          "testString":
            "assert(canMakeWord(words[0]), '<code>canMakeWord(\"bark\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"BooK\")</code> should return false.",
          "testString":
            "assert(!canMakeWord(words[1]), '<code>canMakeWord(\"BooK\")</code> should return false.');"
        },
        {
          "text": "<code>canMakeWord(\"TReAT\")</code> should return true.",
          "testString":
            "assert(canMakeWord(words[2]), '<code>canMakeWord(\"TReAT\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"COMMON\")</code> should return false.",
          "testString":
            "assert(!canMakeWord(words[3]), '<code>canMakeWord(\"COMMON\")</code> should return false.');"
        },
        {
          "text": "<code>canMakeWord(\"squAD\")</code> should return true.",
          "testString":
            "assert(canMakeWord(words[4]), '<code>canMakeWord(\"squAD\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"conFUSE\")</code> should return true.",
          "testString":
            "assert(canMakeWord(words[5]), '<code>canMakeWord(\"conFUSE\")</code> should return true.');"
        }
      ],
      "id": "594810f028c0303b75339acc",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function canMakeWord (word) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const words = ['bark', 'BooK', 'TReAT', 'COMMON', 'squAD', 'conFUSE'];"
        }
      },
      "name": "ABC Problem",
      "dashedName": "abc-problem"
    },
    {
      "description": [
        "<p>These define three classifications of positive integers based on their <a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">proper divisors</a>.</p>",
        "<p>Let $P(n)$ be the sum of the proper divisors of n where proper divisors are all positive integers n other than n itself.</p>",
        "<p>If <code>P(n) < n</code> then n is classed as \"deficient\"</p>",
        "<p>If <code>P(n) === n</code> then n is classed as \"perfect\"</p>",
        "<p>If <code>P(n) > n</code> then n is classed as \"abundant\"</p>",
        "<p>Example:</p>",
        "<p>6 has proper divisors of 1, 2, and 3.</p>",
        "<p>1 + 2 + 3 = 6, so 6 is classed as a perfect number.</p>",
        "<p>Implement a function that calculates how many of the integers from 1 to 20,000 (inclusive) are in each of the three classes. Output the result as an array in the following format <code>[deficient, perfect, abundant]</code>.</p>"
      ],
      "tests": [
        {
          "text": "<code>getDPA</code> is a function.",
          "testString":
            "assert(typeof getDPA === 'function', '<code>getDPA</code> is a function.');"
        },
        {
          "text": "<code>getDPA</code> should return an array.",
          "testString":
            "assert(Array.isArray(getDPA(100)), '<code>getDPA</code> should return an array.');"
        },
        {
          "text": "<code>getDPA</code> return value should have a length of 3.",
          "testString":
            "assert(getDPA(100).length === 3, '<code>getDPA</code> return value should have a length of 3.');"
        },
        {
          "text": "<code>getDPA(20000)</code> should equal [15043, 4, 4953]",
          "testString":
            "assert.deepEqual(getDPA(20000), solution, '<code>getDPA(20000)</code> should equal [15043, 4, 4953]');"
        }
      ],
      "id": "594810f028c0303b75339acd",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function getDPA (num) {\n  // Good luck!\n}",
          "head": "",
          "tail": "const solution = [15043, 4, 4953];"
        }
      },
      "name": "Abundant deficient and perfect number classifications",
      "dashedName": "abundant-deficient-and-perfect-number-classifications"
    },
    {
      "description": [
        "<p>Create a function that takes a single (numeric) argument and returns another function that is an accumulator. The returned accumulator function in turn also takes a single numeric argument, and returns the sum of all the numeric values passed in so far to that accumulator (including the initial value passed when the accumulator was created).</p>",
        "<p>Rules:</p>",
        "<p>Do not use global variables.</p>",
        "<p>Hint:</p>",
        "<p>Closures save outer state.</p>"
      ],
      "tests": [
        {
          "text": "<code>accumulator</code> is a function.",
          "testString":
            "assert(typeof accumulator === 'function', '<code>accumulator</code> is a function.');"
        },
        {
          "text": "<code>accumulator(0)</code> should return a function.",
          "testString":
            "assert(typeof accumulator(0) === 'function', '<code>accumulator(0)</code> should return a function.');"
        },
        {
          "text": "<code>accumulator(0)(2)</code> should return a number.",
          "testString":
            "assert(typeof accumulator(0)(2) === 'number', '<code>accumulator(0)(2)</code> should return a number.');"
        },
        {
          "text": "Passing in the values 3, -4, 1.5, and 5 should return 5.5.",
          "testString":
            "assert(testFn(5) === 5.5, 'Passing in the values 3, -4, 1.5, and 5 should return 5.5.');"
        }
      ],
      "id": "594810f028c0303b75339ace",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function accumulator (sum) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const testFn = typeof accumulator(3) === 'function' && accumulator(3);\nif (testFn) {\n  testFn(-4);\n  testFn(1.5);\n}"
        }
      },
      "name": "Accumulator factory",
      "dashedName": "accumulator-factory"
    },
    {
      "description": [
        "<p>The Ackermann function is a classic example of a recursive function, notable especially because it is not a primitive recursive function. It grows very quickly in value, as does the size of its call tree.</p>",
        "<p>The Ackermann function is usually defined as follows:</p>",
        "$$A(m, n) =",
        " \\begin{cases}",
        " n+1 & \\mbox{if } m = 0 \\\\",
        " A(m-1, 1) & \\mbox{if } m > 0 \\mbox{ and } n = 0 \\\\",
        " A(m-1, A(m, n-1)) & \\mbox{if } m > 0 \\mbox{ and } n > 0.",
        " \\end{cases}$$",
        "<p>Its arguments are never negative and it always terminates. Write a function which returns the value of $A(m, n)$. Arbitrary precision is preferred (since the function grows so quickly), but not required.</p>"
      ],
      "tests": [
        {
          "text": "<code>ack</code> is a function.",
          "testString":
            "assert(typeof ack === 'function', '<code>ack</code> is a function.');"
        },
        {
          "text": "<code>ack(0, 0)</code> should return 1.",
          "testString":
            "assert(ack(0, 0) === 1, '<code>ack(0, 0)</code> should return 1.');"
        },
        {
          "text": "<code>ack(1, 1)</code> should return 3.",
          "testString":
            "assert(ack(1, 1) === 3, '<code>ack(1, 1)</code> should return 3.');"
        },
        {
          "text": "<code>ack(2, 5)</code> should return 13.",
          "testString":
            "assert(ack(2, 5) === 13, '<code>ack(2, 5)</code> should return 13.');"
        },
        {
          "text": "<code>ack(3, 3)</code> should return 61.",
          "testString":
            "assert(ack(3, 3) === 61, '<code>ack(3, 3)</code> should return 61.');"
        }
      ],
      "id": "594810f028c0303b75339acf",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function ack (m, n) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Ackermann function",
      "dashedName": "ackermann-function"
    },
    {
      "description": [
        "<p>Given a text file of many lines, where fields within a line are delineated by a single <code>$</code> character, write a program that aligns each column of fields by ensuring that words in each column are separated by at least one space. Further, allow for each word in a column to be either left justified, right justified, or center justified within its column.</p>",
        "<p>Use the following text to test your programs:</p>",
        "<pre>",
        "Given$a$text$file$of$many$lines",
        "where$fields$within$a$line$",
        "are$delineated$by$a$single$'dollar'$character",
        "write$a$program",
        "that$aligns$each$column$of$fields",
        "by$ensuring$that$words$in$each$",
        "column$are$separated$by$at$least$one$space.",
        "Further,$allow$for$each$word$in$a$column$to$be$either$left$",
        "justified,$right$justified",
        "or$center$justified$within$its$column.",
        "</pre>",
        "<p>Note that:</p>",
        "The example input texts lines may, or may not, have trailing dollar characters.",
        "All columns should share the same alignment.",
        "Consecutive space characters produced adjacent to the end of lines are insignificant for the purposes of the task.",
        "Output text will be viewed in a mono-spaced font on a plain text editor or basic terminal.",
        "The minimum space between columns should be computed from the text and not hard-coded.",
        "It is not a requirement to add separating characters between or around columns."
      ],
      "tests": [
        {
          "text": "<code>formatText</code> is a function.",
          "testString":
            "assert(typeof formatText === 'function', '<code>formatText</code> is a function.');"
        },
        {
          "text":
            "<code>formatText</code> with the above input and \"right\" justification should produce the following: ",
          "testString":
            "assert.strictEqual(formatText(testInput, 'right'), rightAligned, '<code>formatText</code> with the above input and \"right\" justification should produce the following: ');"
        },
        {
          "text":
            "<code>formatText</code> with the above input and \"left\" justification should produce the following: ",
          "testString":
            "assert.strictEqual(formatText(testInput, 'left'), leftAligned, '<code>formatText</code> with the above input and \"left\" justification should produce the following: ');"
        },
        {
          "text":
            "<code>formatText</code> with the above input and \"center\" justification should produce the following: ",
          "testString":
            "assert.strictEqual(formatText(testInput, 'center'), centerAligned, '<code>formatText</code> with the above input and \"center\" justification should produce the following: ');"
        }
      ],
      "id": "594810f028c0303b75339ad0",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const testArr = [\n  'Given$a$text$file$of$many$lines',\n  'where$fields$within$a$line$',\n  'are$delineated$by$a$single$\"dollar\"$character',\n  'write$a$program',\n  'that$aligns$each$column$of$fields$',\n  'by$ensuring$that$words$in$each$',\n  'column$are$separated$by$at$least$one$space.',\n  'Further,$allow$for$each$word$in$a$column$to$be$either$left$',\n  'justified,$right$justified',\n  'or$center$justified$within$its$column.'\n];\n\nfunction formatText (input, justification) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const testInput = [\n  'Given$a$text$file$of$many$lines',\n  'where$fields$within$a$line$',\n  'are$delineated$by$a$single$\"dollar\"$character',\n  'write$a$program',\n  'that$aligns$each$column$of$fields$',\n  'by$ensuring$that$words$in$each$',\n  'column$are$separated$by$at$least$one$space.',\n  'Further,$allow$for$each$word$in$a$column$to$be$either$left$',\n  'justified,$right$justified',\n  'or$center$justified$within$its$column.'\n];\n\nconst rightAligned = `     Given          a      text   file     of     many     lines\n     where     fields    within      a   line \n       are delineated        by      a single \"dollar\" character\n     write          a   program\n      that     aligns      each column     of   fields \n        by   ensuring      that  words     in     each \n    column        are separated     by     at    least       one space.\n  Further,      allow       for   each   word       in         a column to be either left \njustified,      right justified\n        or     center justified within    its  column.`;\n\nconst leftAligned = `Given      a          text      file   of     many     lines    \nwhere      fields     within    a      line   \nare        delineated by        a      single \"dollar\" character\nwrite      a          program  \nthat       aligns     each      column of     fields   \nby         ensuring   that      words  in     each     \ncolumn     are        separated by     at     least    one       space.\nFurther,   allow      for       each   word   in       a         column to be either left \njustified, right      justified\nor         center     justified within its    column. `;\n\nconst centerAligned = `  Given        a        text     file    of     many     lines  \n  where      fields    within     a     line  \n   are     delineated    by       a    single \"dollar\" character\n  write        a       program \n   that      aligns     each    column   of    fields  \n    by      ensuring    that    words    in     each   \n  column      are     separated   by     at    least      one    space.\n Further,    allow       for     each   word     in        a     column to be either left \njustified,   right    justified\n    or       center   justified within  its   column. `;"
        }
      },
      "name": "Align columns",
      "dashedName": "align-columns"
    },
    {
      "description": [
        "Two integers $N$ and $M$ are said to be <a href=\"https://en.wikipedia.org/wiki/Amicable numbers\" title=\"wp: Amicable numbers\">amicable pairs</a> if $N \\neq M$ and the sum of the <a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">proper divisors</a> of $N$ ($\\mathrm{sum}(\\mathrm{propDivs}(N))$) $= M$ as well as $\\mathrm{sum}(\\mathrm{propDivs}(M)) = N$.",
        "Example:",
        "1184 and 1210 are an amicable pair, with proper divisors:",
        " 1, 2, 4, 8, 16, 32, 37, 74, 148, 296, 592  and ",
        " 1, 2, 5, 10, 11, 22, 55, 110, 121, 242, 605   respectively.",
        "Task:",
        "Calculate and show here the Amicable pairs below 20,000 (there are eight).",
        "Related tasks",
        "<a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">Proper divisors</a>",
        "<a href=\"http://rosettacode.org/wiki/Abundant, deficient and perfect number classifications\" title=\"Abundant, deficient and perfect number classifications\">Abundant, deficient and perfect number classifications</a>",
        "<a href=\"http://rosettacode.org/wiki/Aliquot sequence classifications\" title=\"Aliquot sequence classifications\">Aliquot sequence classifications</a> and its amicable classification."
      ],
      "tests": [
        {
          "text": "<code>amicablePairsUpTo</code> is a function.",
          "testString":
            "assert(typeof amicablePairsUpTo === 'function', '<code>amicablePairsUpTo</code> is a function.');"
        },
        {
          "text":
            "<code>amicablePairsUpTo(300)</code> should return <code>[[220,284]]</code>.",
          "testString":
            "assert.deepEqual(amicablePairsUpTo(300), answer300, '<code>amicablePairsUpTo(300)</code> should return <code>[[220,284]]</code>.');"
        },
        {
          "text":
            "<code>amicablePairsUpTo(3000)</code> should return <code>[[220,284],[1184,1210],[2620,2924]]</code>.",
          "testString":
            "assert.deepEqual(amicablePairsUpTo(3000), answer3000, '<code>amicablePairsUpTo(3000)</code> should return <code>[[220,284],[1184,1210],[2620,2924]]</code>.');"
        },
        {
          "text":
            "<code>amicablePairsUpTo(20000)</code> should return <code>[[220,284],[1184,1210],[2620,2924],[5020,5564],[6232,6368],[10744,10856],[12285,14595],[17296,18416]]</code>.",
          "testString":
            "assert.deepEqual(amicablePairsUpTo(20000), answer20000, '<code>amicablePairsUpTo(20000)</code> should return <code>[[220,284],[1184,1210],[2620,2924],[5020,5564],[6232,6368],[10744,10856],[12285,14595],[17296,18416]]</code>.');"
        }
      ],
      "id": "5949b579404977fbaefcd737",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function amicablePairsUpTo (maxNum) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const answer300 = [[220, 284]];\nconst answer3000 = [\n  [220, 284],\n  [1184, 1210],\n  [2620, 2924]\n];\nconst answer20000 = [\n  [220, 284],\n  [1184, 1210],\n  [2620, 2924],\n  [5020, 5564],\n  [6232, 6368],\n  [10744, 10856],\n  [12285, 14595],\n  [17296, 18416]\n];"
        }
      },
      "name": "Amicable pairs",
      "dashedName": "amicable-pairs"
    },
    {
      "description": [
        "<p>Write a program to find the <a href=\"https://en.wikipedia.org/wiki/Mode (statistics)\" title=\"wp: Mode (statistics)\">mode</a> value of a collection.</p><p>The case where the collection is empty may be ignored. Care must be taken to handle the case where the mode is non-unique.</p><p>If it is not appropriate or possible to support a general collection, use a vector (array), if possible. If it is not appropriate or possible to support an unspecified value type, use integers.</p>"
      ],
      "tests": [
        {
          "text": "<code>mode</code> is a function.",
          "testString":
            "assert(typeof mode === 'function', '<code>mode</code> is a function.');"
        },
        {
          "text":
            "<code>mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])</code> should equal <code>[6]</code>",
          "testString":
            "assert.deepEqual(mode(arr1), [6], '<code>mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])</code> should equal <code>[6]</code>');"
        },
        {
          "text":
            "<code>mode([1, 2, 4, 4, 1])</code> should equal <code>[1, 4]</code>.",
          "testString":
            "assert.deepEqual(mode(arr2).sort(), [1, 4], '<code>mode([1, 2, 4, 4, 1])</code> should equal <code>[1, 4]</code>.');"
        }
      ],
      "id": "594d8d0ab97724821379b1e6",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function mode (arr) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const arr1 = [1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17];\nconst arr2 = [1, 2, 4, 4, 1];"
        }
      },
      "name": "AveragesMode",
      "dashedName": "averagesmode"
    },
    {
      "description": [
        "<p class='rosetta__paragraph'>Compute all three of the <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Pythagorean means' title='wp: Pythagorean means'>Pythagorean means</a> of the set of integers <big>1</big> through <big>10</big> (inclusive).</p><p class='rosetta__paragraph'>Show that <big>$A(x_1,\\ldots,x_n) \\geq G(x_1,\\ldots,x_n) \\geq H(x_1,\\ldots,x_n)$</big> for this set of positive integers.</p> The most common of the three means, the <a class='rosetta__link--rosetta' href='http://rosettacode.org/wiki/Averages/Arithmetic mean' title='Averages/Arithmetic mean'>arithmetic mean</a>, is the sum of the list divided by its length: <big>$ A(x_1, \\ldots, x_n) = \\frac{x_1 + \\cdots + x_n}{n}$</big>The <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Geometric mean' title='wp: Geometric mean'>geometric mean</a> is the $n$th root of the product of the list: <big>$ G(x_1, \\ldots, x_n) = \\sqrt[n]{x_1 \\cdots x_n} $</big>The <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Harmonic mean' title='wp: Harmonic mean'>harmonic mean</a> is $n$ divided by the sum of the reciprocal of each item in the list: <big>$ H(x_1, \\ldots, x_n) = \\frac{n}{\\frac{1}{x_1} + \\cdots + \\frac{1}{x_n}} $</big>",
        "<p class='rosetta__paragraph'>Assume the input is an ordered array of all inclusive numbers.</p>",
        "<p class='rosetta__paragraph'>For the answer, please output an object in the following format:</p>",
        "<pre class='rosetta__pre'>",
        "{",
        "  values: {",
        "    Arithmetic: 5.5,",
        "    Geometric: 4.528728688116765,",
        "    Harmonic: 3.414171521474055",
        "  },",
        "  test: 'is A >= G >= H ? yes'",
        "}",
        "</pre>"
      ],
      "tests": [
        {
          "text": "<code>pythagoreanMeans</code> is a function.",
          "testString":
            "assert(typeof pythagoreanMeans === 'function', '<code>pythagoreanMeans</code> is a function.');"
        },
        {
          "text":
            "<code>pythagoreanMeans([1, 2, ..., 10])</code> should equal the same output above.",
          "testString":
            "assert.deepEqual(pythagoreanMeans(range1), answer1, '<code>pythagoreanMeans([1, 2, ..., 10])</code> should equal the same output above.');"
        }
      ],
      "id": "594d966a1467eb84194f0086",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function pythagoreanMeans (rangeArr) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const range1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst answer1 = {\n  values: {\n    Arithmetic: 5.5,\n    Geometric: 4.528728688116765,\n    Harmonic: 3.414171521474055\n  },\n  test: 'is A >= G >= H ? yes'\n};\n"
        }
      },
      "name": "AveragesPythagorean means",
      "dashedName": "averagespythagorean-means"
    },
    {
      "description": [
        "<p>Compute the  <a href=\"https://en.wikipedia.org/wiki/Root mean square\" title=\"wp: Root mean square\">Root mean square</a>  of the numbers 1 through 10 inclusive.</p>",
        "<p>The  root mean square  is also known by its initials RMS (or rms), and as the quadratic mean.</p><p>The RMS is calculated as the mean of the squares of the numbers, square-rooted:</p>",
        "<p><big>$$x_{\\mathrm{rms}} = \\sqrt {{{x_1}^2 + {x_2}^2 + \\cdots + {x_n}^2} \\over n}. $$</big></p>"
      ],
      "tests": [
        {
          "text": "<code>rms</code> is a function.",
          "testString":
            "assert(typeof rms === 'function', '<code>rms</code> is a function.');"
        },
        {
          "text":
            "<code>rms([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code> should equal <code>6.2048368229954285</code>.",
          "testString":
            "assert.equal(rms(arr1), answer1, '<code>rms([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code> should equal <code>6.2048368229954285</code>.');"
        }
      ],
      "id": "594da033de4190850b893874",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function rms (arr) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst answer1 = 6.2048368229954285;"
        }
      },
      "name": "AveragesRoot mean square",
      "dashedName": "averagesroot-mean-square"
    },
    {
      "description": [
        "<p><a href=\"https://en.wikipedia.org/wiki/Charles_Babbage\" title=\"wp: Charles_Babbage\">Charles Babbage</a>, looking ahead to the sorts of problems his Analytical Engine would be able to solve, gave this example:</p>",
        "<blockquote>What is the smallest positive integer whose square ends in the digits 269,696?</blockquote>",
        " <p> - Babbage, letter to Lord Bowden, 1837; see Hollingdale and Tootill, <i>Electronic Computers</i>, second edition, 1970, p. 125.</p>",
        "<p>He thought the answer might be 99,736, whose square is 9,947,269,696; but he couldn't be certain.</p>",
        "<p>The task is to find out if Babbage had the right answer.</p>",
        "<p>Implement a function to return the lowest integer that satisfies the Babbage problem. If Babbage was right, return Babbage's number.</p>"
      ],
      "tests": [
        {
          "text": "<code>babbage</code> is a function.",
          "testString":
            "assert(typeof babbage === 'function', '<code>babbage</code> is a function.');"
        },
        {
          "text":
            "<code>babbage(99736, 269696)</code> should not return 99736 (there is a smaller answer).",
          "testString":
            "assert.equal(babbage(babbageAns, endDigits), answer, '<code>babbage(99736, 269696)</code> should not return 99736 (there is a smaller answer).');"
        }
      ],
      "id": "594db4d0dedb4c06a2a4cefd",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function babbage (babbageNum, endDigits) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const babbageAns = 99736;\nconst endDigits = 269696;\nconst answer = 25264;"
        }
      },
      "name": "Babbage problem",
      "dashedName": "babbage-problem"
    },
    {
      "description": [
        "<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>",
        "Examples:",
        "<p class='rosetta__paragraph'>(empty) true</p>",
        "<p class='rosetta__paragraph'><code>[]</code> true</p>",
        "<p class='rosetta__paragraph'><code>][</code> false</p>",
        "<p class='rosetta__paragraph'><code>[][]</code> true</p>",
        "<p class='rosetta__paragraph'><code>][][</code> false</p>",
        "<p class='rosetta__paragraph'><code>[]][[]</code> false</p>",
        "<p class='rosetta__paragraph'><code>[[[[]]]]</code> true</p>"
      ],
      "tests": [
        {
          "text": "<code>isBalanced</code> is a function.",
          "testString":
            "assert(typeof isBalanced === 'function', '<code>isBalanced</code> is a function.');"
        },
        {
          "text": "<code>isBalanced(\"[]\")</code> should return true.",
          "testString":
            "assert(isBalanced(testCases[0]), '<code>isBalanced(\"[]\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"]][[[][][][]][\")</code> should return false.",
          "testString":
            "assert(!isBalanced(testCases[1]), '<code>isBalanced(\"]][[[][][][]][\")</code> should return false.');"
        },
        {
          "text":
            "<code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.",
          "testString":
            "assert(isBalanced(testCases[2]), '<code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[3]), '<code>isBalanced(\"][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[[]]]][[]\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[4]), '<code>isBalanced(\"[[[]]]][[]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][[]\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[5]), '<code>isBalanced(\"][[]\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"][[][]][[[]]\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[6]), '<code>isBalanced(\"][[][]][[[]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[][]]][\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[7]), '<code>isBalanced(\"[[][]]][\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[8]), '<code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[9]), '<code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][]][[][\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[10]), '<code>isBalanced(\"][]][[][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[]][[][]]\")</code> should return true.",
          "testString":
            "assert(isBalanced(testCases[11]), '<code>isBalanced(\"[[]][[][]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[]]\")</code> should return true.",
          "testString":
            "assert(isBalanced(testCases[12]), '<code>isBalanced(\"[[]]\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"]][]][[]][[[\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[13]), '<code>isBalanced(\"]][]][[]][[[\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][]][][[\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[14]), '<code>isBalanced(\"][]][][[\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][][\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[15]), '<code>isBalanced(\"][][\")</code> should return true.');"
        },
        {
          "text":
            "<code>isBalanced(\"[[]]][][][[]][\")</code> should return true.",
          "testString":
            "assert(!isBalanced(testCases[16]), '<code>isBalanced(\"[[]]][][][[]][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"\")</code> should return true.",
          "testString":
            "assert(isBalanced(testCases[17]), '<code>isBalanced(\"\")</code> should return true.');"
        }
      ],
      "id": "594dc6c729e5700999302b45",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function isBalanced (str) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [\n  '[]',\n  ']][[[][][][]][',\n  '[][[[[][][[[]]]]]]',\n  '][',\n  '[[[]]]][[]',\n  '][[]',\n  '][[][]][[[]]',\n  '[[][]]][',\n  '[[[]]][[]]]][][[',\n  '[]][[]]][[[[][]]',\n  '][]][[][',\n  '[[]][[][]]',\n  '[[]]',\n  ']][]][[]][[[',\n  '][]][][[',\n  '][][',\n  '[[]]][][][[]][',\n  ''\n];"
        }
      },
      "name": "Balanced brackets",
      "dashedName": "balanced-brackets"
    },
    {
      "description": [
        "<p>Given two points on a plane and a radius, usually two circles of given radius can be drawn through the points.</p>",
        "Exceptions:",
        "A radius of zero should be treated as never describing circles (except in the case where the points are coincident).",
        "If the points are coincident then an infinite number of circles with the point on their circumference can be drawn, unless the radius is equal to zero as well which then collapses the circles to a point.",
        "If the points form a diameter then return a single circle.",
        "If the points are too far apart then no circles can be drawn.Task:",
        "Implement a function that takes two points and a radius and returns the two circles through those points. For each resulting circle, provide the coordinates for the center of each circle rounded to four decimal digits. Return each coordinate as an array, and coordinates as an array of arrays.",
        "For edge cases, return the following:",
        "If points are on the diameter, return one point. If the radius is also zero however, return <code>\"Radius Zero\"</code>.",
        "If points are coincident, return <code>\"Coincident point. Infinite solutions\"</code>.",
        "If points are farther apart than the diameter, return <code>\"No intersection. Points further apart than circle diameter\"</code>.",
        "Sample inputs:",
        "<pre>",
        "      p1                p2           r",
        "0.1234, 0.9876    0.8765, 0.2345    2.0",
        "0.0000, 2.0000    0.0000, 0.0000    1.0",
        "0.1234, 0.9876    0.1234, 0.9876    2.0",
        "0.1234, 0.9876    0.8765, 0.2345    0.5",
        "0.1234, 0.9876    0.1234, 0.9876    0.0",
        "</pre>",
        "Ref:",
        "<a href=\"http://mathforum.org/library/drmath/view/53027.html\" title=\"link: http://mathforum.org/library/drmath/view/53027.html\">Finding the Center of a Circle from 2 Points and Radius</a> from Math forum @ Drexel"
      ],
      "tests": [
        {
          "text": "<code>getCircles</code> is a function.",
          "testString":
            "assert(typeof getCircles === 'function', '<code>getCircles</code> is a function.');"
        },
        {
          "text":
            "<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 2.0)</code> should return <code>[[1.8631, 1.9742], [-0.8632, -0.7521]]</code>.",
          "testString":
            "assert.deepEqual(getCircles(...testCases[0]), answers[0], '<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 2.0)</code> should return <code>[[1.8631, 1.9742], [-0.8632, -0.7521]]</code>.');"
        },
        {
          "text":
            "<code>getCircles([0.0000, 2.0000], [0.0000, 0.0000], 1.0)</code> should return <code>[0, 1]</code>",
          "testString":
            "assert.deepEqual(getCircles(...testCases[1]), answers[1], '<code>getCircles([0.0000, 2.0000], [0.0000, 0.0000], 1.0)</code> should return <code>[0, 1]</code>');"
        },
        {
          "text":
            "<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 2.0)</code> should return <code>Coincident point. Infinite solutions</code>",
          "testString":
            "assert.deepEqual(getCircles(...testCases[2]), answers[2], '<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 2.0)</code> should return <code>Coincident point. Infinite solutions</code>');"
        },
        {
          "text":
            "<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 0.5)</code> should return <code>No intersection. Points further apart than circle diameter</code>",
          "testString":
            "assert.deepEqual(getCircles(...testCases[3]), answers[3], '<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 0.5)</code> should return <code>No intersection. Points further apart than circle diameter</code>');"
        },
        {
          "text":
            "<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 0.0)</code> should return <code>Radius Zero</code>",
          "testString":
            "assert.deepEqual(getCircles(...testCases[4]), answers[4], '<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 0.0)</code> should return <code>Radius Zero</code>');"
        }
      ],
      "id": "5951815dd895584b06884620",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getCircles (...args) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [\n  [[0.1234, 0.9876], [0.8765, 0.2345], 2.0],\n  [[0.0000, 2.0000], [0.0000, 0.0000], 1.0],\n  [[0.1234, 0.9876], [0.1234, 0.9876], 2.0],\n  [[0.1234, 0.9876], [0.8765, 0.2345], 0.5],\n  [[0.1234, 0.9876], [0.1234, 0.9876], 0.0]\n];\nconst answers = [\n  [[1.8631, 1.9742], [-0.8632, -0.7521]],\n  [0, 1],\n  'Coincident point. Infinite solutions',\n  'No intersection. Points further apart than circle diameter',\n  'Radius Zero'\n];"
        }
      },
      "name": "Circles of given radius through two points",
      "dashedName": "circles-of-given-radius-through-two-points"
    },
    {
      "description": [
        "Task:",
        "<p>Provide a function to find the closest two points among a set of given points in two dimensions,  i.e. to solve the  <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem\" title=\"wp: Closest pair of points problem\">Closest pair of points problem</a>  in the  planar  case.</p><p>The straightforward solution is a  O(n<sup>2</sup>)  algorithm  (which we can call brute-force algorithm);  the pseudo-code (using indexes) could be simply:</p>",
        "<pre>",
        "bruteForceClosestPair of P(1), P(2), ... P(N)",
        "if N &lt; 2 then",
        "  return ∞",
        "else",
        "  minDistance ← |P(1) - P(2)|",
        "  minPoints ← { P(1), P(2) }",
        "  foreach i ∈ [1, N-1]",
        "    foreach j ∈ [i+1, N]",
        "      if |P(i) - P(j)| < minDistance then",
        "        minDistance ← |P(i) - P(j)|",
        "        minPoints ← { P(i), P(j) }",
        "      endif",
        "    endfor",
        "  endfor",
        "  return minDistance, minPoints",
        "endif",
        "</pre>",
        "<p>A better algorithm is based on the recursive divide&amp;conquer approach, as explained also at  <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem#Planar_case\" title=\"wp: Closest pair of points problem#Planar_case\">Wikipedia's Closest pair of points problem</a>,  which is  O(n log n);  a pseudo-code could be:</p>",
        "<pre>",
        "closestPair of (xP, yP)",
        "  where xP is P(1) .. P(N) sorted by x coordinate, and",
        "  yP is P(1) .. P(N) sorted by y coordinate (ascending order)",
        "if N ≤ 3 then",
        "  return closest points of xP using brute-force algorithm",
        "else",
        "  xL ← points of xP from 1 to ⌈N/2⌉",
        "  xR ← points of xP from ⌈N/2⌉+1 to N",
        "  xm ← xP(⌈N/2⌉)<sub>x</sub>",
        "  yL ← { p ∈ yP : p<sub>x</sub> ≤ xm }",
        "  yR ← { p ∈ yP : p<sub>x</sub> &gt; xm }",
        "  (dL, pairL) ← closestPair of (xL, yL)",
        "  (dR, pairR) ← closestPair of (xR, yR)",
        "  (dmin, pairMin) ← (dR, pairR)",
        "  if dL &lt; dR then",
        "    (dmin, pairMin) ← (dL, pairL)",
        "  endif",
        "  yS ← { p ∈ yP : |xm - p<sub>x</sub>| &lt; dmin }",
        "  nS ← number of points in yS",
        "  (closest, closestPair) ← (dmin, pairMin)",
        "  for i from 1 to nS - 1",
        "    k ← i + 1",
        "    while k ≤ nS and yS(k)<sub>y</sub> - yS(i)<sub>y</sub> &lt; dmin",
        "      if |yS(k) - yS(i)| &lt; closest then",
        "        (closest, closestPair) ← (|yS(k) - yS(i)|, {yS(k), yS(i)})",
        "      endif",
        "      k ← k + 1",
        "    endwhile",
        "  endfor",
        "  return closest, closestPair",
        "endif",
        "</pre>",
        "References and further readings:",
        " <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem\" title=\"wp: Closest pair of points problem\">Closest pair of points problem</a>",
        " <a href=\"http://www.cs.mcgill.ca/~cs251/ClosestPair/ClosestPairDQ.html\" title=\"link: http://www.cs.mcgill.ca/~cs251/ClosestPair/ClosestPairDQ.html\">Closest Pair (McGill)</a>",
        " <a href=\"http://www.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf\" title=\"link: http://www.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf\">Closest Pair (UCSB)</a>",
        " <a href=\"http://classes.cec.wustl.edu/~cse241/handouts/closestpair.pdf\" title=\"link: http://classes.cec.wustl.edu/~cse241/handouts/closestpair.pdf\">Closest pair (WUStL)</a>",
        " <a href=\"http://www.cs.iupui.edu/~xkzou/teaching/CS580/Divide-and-conquer-closestPair.ppt\" title=\"link: http://www.cs.iupui.edu/~xkzou/teaching/CS580/Divide-and-conquer-closestPair.ppt\">Closest pair (IUPUI)</a> ",
        "<p>For the input, expect the argument to be an array of objects (points) with <code>x</code> and <code>y</code> members set to numbers. For the output, return an object containing the key:value pairs for  <code>distance</code> and <code>pair</code> (i.e., the pair of two closest points).</p>"
      ],
      "tests": [
        {
          "text": "<code>getClosestPair</code> is a function.",
          "testString":
            "assert(typeof getClosestPair === 'function', '<code>getClosestPair</code> is a function.');"
        },
        {
          "text": "Distance should be the following.",
          "testString":
            "assert.equal(getClosestPair(points1).distance, answer1.distance, 'Distance should be the following.');"
        },
        {
          "text": "Points should be the following.",
          "testString":
            "assert.deepEqual(JSON.parse(JSON.stringify(getClosestPair(points1))).pair, answer1.pair, 'Points should be the following.');"
        },
        {
          "text": "Distance should be the following.",
          "testString":
            "assert.equal(getClosestPair(points2).distance, answer2.distance, 'Distance should be the following.');"
        },
        {
          "text": "Points should be the following.",
          "testString":
            "assert.deepEqual(JSON.parse(JSON.stringify(getClosestPair(points2))).pair, answer2.pair, 'Points should be the following.');"
        }
      ],
      "id": "5951a53863c8a34f02bf1bdc",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const Point = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\nPoint.prototype.getX = function () {\n  return this.x;\n};\nPoint.prototype.getY = function () {\n  return this.y;\n};\n\nfunction getClosestPair (pointsArr) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const points1 = [\n\tnew Point(0.748501, 4.09624),\n\tnew Point(3.00302, 5.26164),\n\tnew Point(3.61878,  9.52232),\n\tnew Point(7.46911,  4.71611),\n\tnew Point(5.7819,   2.69367),\n\tnew Point(2.34709,  8.74782),\n\tnew Point(2.87169,  5.97774),\n\tnew Point(6.33101,  0.463131),\n\tnew Point(7.46489,  4.6268),\n\tnew Point(1.45428,  0.087596)\n];\n\nconst points2 = [\n  new Point(37100, 13118),\n  new Point(37134, 1963),\n  new Point(37181, 2008),\n  new Point(37276, 21611),\n  new Point(37307, 9320)\n];\n\nconst answer1 = {\n  distance: 0.0894096443343775,\n  pair: [\n    {\n      x: 7.46489,\n      y: 4.6268\n    },\n    {\n      x: 7.46911,\n      y: 4.71611\n    }\n  ]\n};\n\nconst answer2 = {\n  distance: 65.06919393998976,\n  pair: [\n    {\n      x: 37134,\n      y: 1963\n    },\n    {\n      x: 37181,\n      y: 2008\n    }\n  ]\n};\n\nconst benchmarkPoints = [\n  new Point(16909, 54699),\n  new Point(14773, 61107),\n  new Point(95547, 45344),\n  new Point(95951, 17573),\n  new Point(5824, 41072),\n  new Point(8769, 52562),\n  new Point(21182, 41881),\n  new Point(53226, 45749),\n  new Point(68180, 887),\n  new Point(29322, 44017),\n  new Point(46817, 64975),\n  new Point(10501, 483),\n  new Point(57094, 60703),\n  new Point(23318, 35472),\n  new Point(72452, 88070),\n  new Point(67775, 28659),\n  new Point(19450, 20518),\n  new Point(17314, 26927),\n  new Point(98088, 11164),\n  new Point(25050, 56835),\n  new Point(8364, 6892),\n  new Point(37868, 18382),\n  new Point(23723, 7701),\n  new Point(55767, 11569),\n  new Point(70721, 66707),\n  new Point(31863, 9837),\n  new Point(49358, 30795),\n  new Point(13041, 39745),\n  new Point(59635, 26523),\n  new Point(25859, 1292),\n  new Point(1551, 53890),\n  new Point(70316, 94479),\n  new Point(48549, 86338),\n  new Point(46413, 92747),\n  new Point(27186, 50426),\n  new Point(27591, 22655),\n  new Point(10905, 46153),\n  new Point(40408, 84202),\n  new Point(52821, 73520),\n  new Point(84865, 77388),\n  new Point(99819, 32527),\n  new Point(34404, 75657),\n  new Point(78457, 96615),\n  new Point(42140, 5564),\n  new Point(62175, 92342),\n  new Point(54958, 67112),\n  new Point(4092, 19709),\n  new Point(99415, 60298),\n  new Point(51090, 52158),\n  new Point(48953, 58567)\n];"
        }
      },
      "name": "Closestpair problem",
      "dashedName": "closestpair-problem"
    },
    {
      "description": [
        "Task:",
        "<p>Given non-negative integers  <big> m </big>  and  <big> n</big>,  generate all size  <big> m </big>  <a href=\"http://mathworld.wolfram.com/Combination.html\" title=\"link: http://mathworld.wolfram.com/Combination.html\">combinations</a>  of the integers from  <big> 0</big>  (zero)  to  <big> n-1 </big>  in sorted order  (each combination is sorted and the entire table is sorted).</p>",
        "Example:",
        "<p><big>3</big>  comb  <big> 5 </big>is:</p>",
        "<pre>",
        "0 1 2",
        "0 1 3",
        "0 1 4",
        "0 2 3",
        "0 2 4",
        "0 3 4",
        "1 2 3",
        "1 2 4",
        "1 3 4",
        "2 3 4",
        "</pre>"
      ],
      "tests": [
        {
          "text": "<code>combinations</code> is a function.",
          "testString":
            "assert(typeof combinations === 'function', '<code>combinations</code> is a function.');"
        },
        {
          "text":
            "<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.",
          "testString":
            "assert.deepEqual(combinations(testInput1[0], testInput1[1]), testOutput1, '<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.');"
        },
        {
          "text":
            "<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>",
          "testString":
            "assert.deepEqual(combinations(testInput2[0], testInput2[1]), testOutput2, '<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>');"
        }
      ],
      "id": "5958469238c0d8d2632f46db",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function combinations (m, n) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testInput1 = [3, 5];\nconst testOutput1 = [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]];\n\nconst testInput2 = [4, 6];\nconst testOutput2 = [[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]];"
        }
      },
      "name": "Combinations",
      "dashedName": "combinations"
    },
    {
      "description": [
        "<p>Comma quibbling is a task originally set by Eric Lippert in his <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/04/15/comma-quibbling.aspx\" title=\"link: http://blogs.msdn.com/b/ericlippert/archive/2009/04/15/comma-quibbling.aspx\">blog</a>.</p>",
        "Task:<p>Write a function to generate a string output which is the concatenation of input words from a list/sequence where:</p>",
        "An input of no words produces the output string of just the two brace characters \"{}\".",
        "An input of just one word, e.g. [\"ABC\"], produces the output string of the word inside the two braces, e.g. \"{ABC}\".",
        "An input of two words, e.g. [\"ABC\", \"DEF\"], produces the output string of the two words inside the two braces with the words separated by the string \" and \", e.g. \"{ABC and DEF}\".",
        "An input of three or more words, e.g. [\"ABC\", \"DEF\", \"G\", \"H\"], produces the output string of all but the last word separated by \", \" with the last word separated by \" and \" and all within braces; e.g. \"{ABC, DEF, G and H}\".",
        "<p>Test your function with the following series of inputs showing your output here on this page:</p>",
        "[]                       # (No input words).",
        "[\"ABC\"]",
        "[\"ABC\", \"DEF\"]",
        "[\"ABC\", \"DEF\", \"G\", \"H\"]",
        "<p>Note: Assume words are non-empty strings of uppercase characters for this task.</p>"
      ],
      "tests": [
        {
          "text": "<code>quibble</code> is a function.",
          "testString":
            "assert(typeof quibble === 'function', '<code>quibble</code> is a function.');"
        },
        {
          "text": "<code>quibble([\"ABC\"])</code> should return a string.",
          "testString":
            "assert(typeof quibble([\"ABC\"]) === 'string', '<code>quibble([\"ABC\"])</code> should return a string.');"
        },
        {
          "text": "<code>quibble([])</code> should return \"{}\".",
          "testString":
            "assert.equal(quibble(testCases[0]), results[0], '<code>quibble([])</code> should return \"{}\".');"
        },
        {
          "text": "<code>quibble([\"ABC\"])</code> should return \"{ABC}\".",
          "testString":
            "assert.equal(quibble(testCases[1]), results[1], '<code>quibble([\"ABC\"])</code> should return \"{ABC}\".');"
        },
        {
          "text":
            "<code>quibble([\"ABC\", \"DEF\"])</code> should return \"{ABC and DEF}\".",
          "testString":
            "assert.equal(quibble(testCases[2]), results[2], '<code>quibble([\"ABC\", \"DEF\"])</code> should return \"{ABC and DEF}\".');"
        },
        {
          "text":
            "<code>quibble([\"ABC\", \"DEF\", \"G\", \"H\"])</code> should return \"{ABC,DEF,G and H}\".",
          "testString":
            "assert.equal(quibble(testCases[3]), results[3], '<code>quibble([\"ABC\", \"DEF\", \"G\", \"H\"])</code> should return \"{ABC,DEF,G and H}\".');"
        }
      ],
      "id": "596e414344c3b2872167f0fe",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function quibble (words) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [[], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]];\nconst results = [\"{}\", \"{ABC}\", \"{ABC and DEF}\", \"{ABC,DEF,G and H}\"];"
        }
      },
      "name": "Comma quibbling",
      "dashedName": "comma-quibbling"
    },
    {
      "description": [
        "<p>Given a  <a href=\"https://en.wikipedia.org/wiki/List_(abstract_data_type)\" title=\"wp: List_(abstract_data_type)\">list</a>  of arbitrarily many strings, implement a function for each of the following conditions:</p> test if they are all lexically equal",
        " test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)"
      ],
      "tests": [
        {
          "text": "<code>allEqual</code> is a function.",
          "testString":
            "assert(typeof allEqual === 'function', '<code>allEqual</code> is a function.');"
        },
        {
          "text": "<code>azSorted</code> is a function.",
          "testString":
            "assert(typeof azSorted === 'function', '<code>azSorted</code> is a function.');"
        },
        {
          "text":
            "<code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns true.",
          "testString":
            "assert(allEqual(testCases[0]), '<code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns true.');"
        },
        {
          "text":
            "<code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns false.",
          "testString":
            "assert(!azSorted(testCases[0]), '<code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns false.');"
        },
        {
          "text":
            "<code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns false.",
          "testString":
            "assert(!allEqual(testCases[1]), '<code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns false.');"
        },
        {
          "text":
            "<code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns true.",
          "testString":
            "assert(azSorted(testCases[1]), '<code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([])</code> returns true.",
          "testString":
            "assert(allEqual(testCases[2]), '<code>allEqual([])</code> returns true.');"
        },
        {
          "text": "<code>azSorted([])</code> returns true.",
          "testString":
            "assert(azSorted(testCases[2]), '<code>azSorted([])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([\"AA\"])</code> returns true.",
          "testString":
            "assert(allEqual(testCases[3]), '<code>allEqual([\"AA\"])</code> returns true.');"
        },
        {
          "text": "<code>azSorted([\"AA\"])</code> returns true.",
          "testString":
            "assert(azSorted(testCases[3]), '<code>azSorted([\"AA\"])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([\"BB\", \"AA\"])</code> returns false.",
          "testString":
            "assert(!allEqual(testCases[4]), '<code>allEqual([\"BB\", \"AA\"])</code> returns false.');"
        },
        {
          "text": "<code>azSorted([\"BB\", \"AA\"])</code> returns false.",
          "testString":
            "assert(!azSorted(testCases[4]), '<code>azSorted([\"BB\", \"AA\"])</code> returns false.');"
        }
      ],
      "id": "596e457071c35c882915b3e4",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function allEqual (arr) {\n  // Good luck!\n  return true;\n}\n\nfunction azSorted (arr) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];"
        }
      },
      "name": "Compare a list of strings",
      "dashedName": "compare-a-list-of-strings"
    },
    {
      "description": [
        "Task:",
        "<p>Implement a function which:</p>",
        "takes a positive integer representing a duration in seconds as input (e.g., <code>100</code>), and",
        "returns a string which shows the same duration decomposed into weeks, days, hours, minutes, and seconds as detailed below (e.g., \"<code>1 min, 40 sec</code>\").",
        "<p>Demonstrate that it passes the following three test-cases:</p><p style=\"font-size:115%; margin:1em 0 0 0\">Test Cases</p>",
        "<table>",
        "<tbody>",
        "<tr>",
        "<th>input number</th>",
        "<th>output number</th>",
        "</tr>",
        "<tr>",
        "<td>7259</td>",
        "<td><code>2 hr, 59 sec</code></td>",
        "</tr>",
        "<tr>",
        "<td>86400</td>",
        "<td><code>1 d</code></td>",
        "</tr>",
        "<tr>",
        "<td>6000000</td>",
        "<td><code>9 wk, 6 d, 10 hr, 40 min</code></td>",
        "</tr>",
        "</tbody>",
        "</table>",
        "<p style=\"font-size:115%; margin:1em 0 0 0\">Details</p>",
        "The following five units should be used:",
        "<table>",
        "<tbody>",
        "<tr>",
        "<th>unit</th>",
        "<th>suffix used in output</th>",
        "<th>conversion</th>",
        "</tr>",
        "<tr>",
        "<td>week</td>",
        "<td><code>wk</code></td>",
        "<td>1 week = 7 days</td>",
        "</tr>",
        "<tr>",
        "<td>day</td>",
        "<td><code>d</code></td>",
        "<td>1 day = 24 hours</td>",
        "</tr>",
        "<tr>",
        "<td>hour</td>",
        "<td><code>hr</code></td>",
        "<td>1 hour = 60 minutes</td>",
        "</tr>",
        "<tr>",
        "<td>minute</td>",
        "<td><code>min</code></td>",
        "<td>1 minute = 60 seconds</td>",
        "</tr>",
        "<tr>",
        "<td>second</td>",
        "<td><code>sec</code></td>",
        "<td></td>",
        "</tr>",
        "</tbody>",
        "</table>",
        "However, only include quantities with non-zero values in the output (e.g., return \"<code>1 d</code>\" and not \"<code>0 wk, 1 d, 0 hr, 0 min, 0 sec</code>\").Give larger units precedence over smaller ones as much as possible (e.g., return <code>2 min, 10 sec</code> and not <code>1 min, 70 sec</code> or <code>130 sec</code>)Mimic the formatting shown in the test-cases (quantities sorted from largest unit to smallest and separated by comma+space; value and unit of each quantity separated by space).",
        "<p><hr style=\"margin:1em 0;\"/></p>"
      ],
      "tests": [
        {
          "text": "<code>convertSeconds</code> is a function.",
          "testString":
            "assert(typeof convertSeconds === 'function', '<code>convertSeconds</code> is a function.');"
        },
        {
          "text":
            "<code>convertSeconds(7259)</code> should return <code>2 hr, 59 sec</code>.",
          "testString":
            "assert.equal(convertSeconds(testCases[0]), results[0], '<code>convertSeconds(7259)</code> should return <code>2 hr, 59 sec</code>.');"
        },
        {
          "text":
            "<code>convertSeconds(86400)</code> should return <code>1 d</code>.",
          "testString":
            "assert.equal(convertSeconds(testCases[1]), results[1], '<code>convertSeconds(86400)</code> should return <code>1 d</code>.');"
        },
        {
          "text":
            "<code>convertSeconds(6000000)</code> should return <code>9 wk, 6 d, 10 hr, 40 min</code>.",
          "testString":
            "assert.equal(convertSeconds(testCases[2]), results[2], '<code>convertSeconds(6000000)</code> should return <code>9 wk, 6 d, 10 hr, 40 min</code>.');"
        }
      ],
      "id": "596fd036dc1ab896c5db98b1",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function convertSeconds (sec) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [7259, 86400, 6000000];\nconst results = ['2 hr, 59 sec', '1 d', '9 wk, 6 d, 10 hr, 40 min'];"
        }
      },
      "name": "Convert seconds to compound duration",
      "dashedName": "convert-seconds-to-compound-duration"
    },
    {
      "description": [
        "Task:",
        "<p>Create a function,  or show a built-in function,  to count the number of non-overlapping occurrences of a substring inside a string.</p><p>The function should take two arguments:</p>",
        "the first argument being the string to search,  and",
        "the second a substring to be searched for.",
        "<p>It should return an integer count.</p>",
        "<p>The matching should yield the highest number of non-overlapping matches.</p><p>In general, this essentially means matching from left-to-right or right-to-left.</p>"
      ],
      "tests": [
        {
          "text": "<code>countSubstring</code> is a function.",
          "testString":
            "assert(typeof countSubstring === 'function', '<code>countSubstring</code> is a function.');"
        },
        {
          "text":
            "<code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.",
          "testString":
            "assert.equal(countSubstring(testCases[0], searchString[0]), results[0], '<code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.');"
        },
        {
          "text":
            "<code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.",
          "testString":
            "assert.equal(countSubstring(testCases[1], searchString[1]), results[1], '<code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.');"
        },
        {
          "text":
            "<code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.",
          "testString":
            "assert.equal(countSubstring(testCases[2], searchString[2]), results[2], '<code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.');"
        }
      ],
      "id": "596fda99c69f779975a1b67d",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function countSubstring (str, subStr) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = ['the three truths', 'ababababab', 'abaabba*bbaba*bbab'];\nconst searchString = ['th', 'abab', 'a*b'];\nconst results = [3, 2, 2];"
        }
      },
      "name": "Count occurrences of a substring",
      "dashedName": "count-occurrences-of-a-substring"
    },
    {
      "description": [
        "<p>There are four types of common coins in <a href=\"https://en.wikipedia.org/wiki/United_States\" title=\"link: https://en.wikipedia.org/wiki/United_States\">US</a> currency:</p>",
        "quarters (25 cents)",
        "dimes (10 cents)",
        "nickels (5 cents),  and ",
        "pennies (1 cent)  ",
        "<p>There are six ways to make change for 15 cents:</p>",
        "A dime and a nickel ",
        "A dime and 5 pennies",
        "3 nickels",
        "2 nickels and 5 pennies",
        "A nickel and 10 pennies",
        "15 pennies",
        "Task:",
        "<p>Implement a function to determine how many ways there are to make change for a dollar using these common coins? (1 dollar = 100 cents).</p>",
        "Reference:",
        " <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52\" title=\"link: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52\">an algorithm from MIT Press</a>. "
      ],
      "tests": [
        {
          "text": "<code>countCoins</code> is a function.",
          "testString":
            "assert(typeof countCoins === 'function', '<code>countCoins</code> is a function.');"
        },
        {
          "text": "<code>countCoints()</code> should return 242.",
          "testString":
            "assert.equal(countCoins(), 242, '<code>countCoints()</code> should return 242.');"
        }
      ],
      "id": "59713bd26bdeb8a594fb9413",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function countCoins () {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Count the coins",
      "dashedName": "count-the-coins"
    },
    {
      "description": [
        "<p>In <a href=\"https://en.wikipedia.org/wiki/linear algebra\" title=\"wp: linear algebra\">linear algebra</a>, <a href=\"https://en.wikipedia.org/wiki/Cramer's rule\" title=\"wp: Cramer's rule\">Cramer's rule</a> is an explicit formula for the solution of a <a href=\"https://en.wikipedia.org/wiki/system of linear equations\" title=\"wp: system of linear equations\">system of linear equations</a> with as many equations as unknowns, valid whenever the system has a unique solution. It expresses the solution in terms of the determinants of the (square) coefficient matrix and of matrices obtained from it by replacing one column by the vector of right hand sides of the equations.</p>",
        "<p>Given</p>",
        "<p><big></p>",
        "<p> $\\left\\{\\begin{matrix}a_1x + b_1y + c_1z&= {\\color{red}d_1}\\\\a_2x + b_2y + c_2z&= {\\color{red}d_2}\\\\a_3x + b_3y + c_3z&= {\\color{red}d_3}\\end{matrix}\\right.$</p>",
        "</big><p>which in matrix format is</p><p><big></p>",
        "<p> $\\begin{bmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{bmatrix}\\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}=\\begin{bmatrix} {\\color{red}d_1} \\\\ {\\color{red}d_2} \\\\ {\\color{red}d_3} \\end{bmatrix}.$</p>",
        "</big><p>Then the values of $x, y$ and $z$ can be found as follows:</p><p><big></p>",
        "<p>$x = \\frac{\\begin{vmatrix} {\\color{red}d_1} & b_1 & c_1 \\\\ {\\color{red}d_2} & b_2 & c_2 \\\\ {\\color{red}d_3} & b_3 & c_3 \\end{vmatrix} } { \\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix}}, \\quad y = \\frac {\\begin{vmatrix} a_1 & {\\color{red}d_1} & c_1 \\\\ a_2 & {\\color{red}d_2} & c_2 \\\\ a_3 & {\\color{red}d_3} & c_3 \\end{vmatrix}} {\\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix}}, \\text{ and }z = \\frac { \\begin{vmatrix} a_1 & b_1 & {\\color{red}d_1} \\\\ a_2 & b_2 & {\\color{red}d_2} \\\\ a_3 & b_3 & {\\color{red}d_3} \\end{vmatrix}} {\\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix} }.$</p>",
        "</big>",
        "Task",
        "<p>Given the following system of equations:</p><p><big>",
        "$\\begin{cases}",
        "2w-x+5y+z=-3 \\\\",
        "3w+2x+2y-6z=-32 \\\\",
        "w+3x+3y-z=-47 \\\\",
        "5w-2x-3y+3z=49 \\\\",
        "\\end{cases}$",
        "</big></p>",
        "<p>solve for <big>$w$, $x$, $y$</big> and <big>$z$</big>, using Cramer's rule.</p>"
      ],
      "tests": [
        {
          "text": "<code>cramersRule</code> is a function.",
          "testString":
            "assert(typeof cramersRule === 'function', '<code>cramersRule</code> is a function.');"
        },
        {
          "text":
            "<code>cramersRule([[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]], [-3, -32, -47, 49])</code> should return <code>[2, -12, -4, 1]</code>.",
          "testString":
            "assert.deepEqual(cramersRule(matrices[0], freeTerms[0]), answers[0], '<code>cramersRule([[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]], [-3, -32, -47, 49])</code> should return <code>[2, -12, -4, 1]</code>.');"
        },
        {
          "text":
            "<code>cramersRule([[3, 1, 1], [2, 2, 5], [1, -3, -4]], [3, -1, 2])</code> should return <code>[1, 1, -1]</code>.",
          "testString":
            "assert.deepEqual(cramersRule(matrices[1], freeTerms[1]), answers[1], '<code>cramersRule([[3, 1, 1], [2, 2, 5], [1, -3, -4]], [3, -1, 2])</code> should return <code>[1, 1, -1]</code>.');"
        }
      ],
      "id": "59713da0a428c1a62d7db430",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function cramersRule (matrix, freeTerms) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const matrices = [\n  [\n    [2, -1, 5, 1],\n    [3, 2, 2, -6],\n    [1, 3, 3, -1],\n    [5, -2, -3, 3]\n  ],\n  [\n    [3, 1, 1],\n    [2, 2, 5],\n    [1, -3, -4]\n  ]\n];\nconst freeTerms = [[-3, -32, -47, 49], [3, -1, 2]];\n\nconst answers = [[2, -12, -4, 1], [1, 1, -1]];"
        }
      },
      "name": "Cramers rule",
      "dashedName": "cramers-rule"
    },
    {
      "description": [
        "Task:",
        "<p>Return an array with the current date in the formats:</p>",
        "<p>-   2007-11-23   and </p>",
        "<p>-   Sunday, November 23, 2007</p>",
        "<p>Example output: <code>['2007-11-23', 'Sunday, November 23, 2007']</code></p>"
      ],
      "tests": [
        {
          "text": "<code>getDateFormats</code> is a function.",
          "testString":
            "assert(typeof getDateFormats === 'function', '<code>getDateFormats</code> is a function.');"
        },
        {
          "text": "Should return an object.",
          "testString":
            "assert(typeof getDateFormats() === 'object', 'Should return an object.');"
        },
        {
          "text": "Should returned an array with 2 elements.",
          "testString":
            "assert(getDateFormats().length === 2, 'Should returned an array with 2 elements.');"
        },
        {
          "text": "Should return the correct date in the right format",
          "testString":
            "assert.deepEqual(getDateFormats(), dates, equalsMessage);"
        }
      ],
      "id": "59669d08d75b60482359409f",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function getDateFormats () {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const getDateSolution = () => {\n  const date = new Date();\n  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const fmt1 = `${date.getFullYear()}-${(1 + date.getMonth())}-${date.getDate()}`;\n  const fmt2 = `${weekdays[date.getDay()]}, ${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  return [fmt1, fmt2];\n};\n\nconst dates = getDateSolution();\nconst equalsMessage = `message: <code>getDataFormats()</code> should return <code>[\"${dates[0]}\", \"${dates[1]}\"]</code>.`;"
        }
      },
      "name": "Date format",
      "dashedName": "date-format"
    },
    {
      "description": [
        "Task:",
        "<p>Given a date string in EST, output the given date as a string with 12 hours added to the time. </p>",
        "<p>Time zone should be preserved.</p>",
        "<p>Example input: </p>",
        "<p><code>\"March 7 2009 7:30pm EST\"</code></p>",
        "<p>Example output: </p>",
        "<p><code>\"March 8 2009 7:30am EST\"</code></p>"
      ],
      "tests": [
        {
          "text": "<code>add12Hours</code> is a function.",
          "testString":
            "assert(typeof add12Hours === 'function', '<code>add12Hours</code> is a function.');"
        },
        {
          "text": "<code>add12Hours(dateString)</code> should return a string.",
          "testString":
            "assert(typeof add12Hours(tests[0]) === 'string', '<code>add12Hours(dateString)</code> should return a string.');"
        },
        {
          "text":
            "<code>add12Hours(\"' + tests[0] + '\")</code> should return <code>\"' + answers[0] + '\"</code>",
          "testString":
            "assert(add12Hours(tests[0]) === answers[0], '<code>add12Hours(\"' + tests[0] + '\")</code> should return <code>\"' + answers[0] + '\"</code>');"
        },
        {
          "text":
            "Should handel day change. <code>add12Hours(\"' + tests[1] + '\")</code> should return <code>\"' + answers[1] + '\"</code>",
          "testString":
            "assert(add12Hours(tests[1]) === answers[1], 'Should handel day change. <code>add12Hours(\"' + tests[1] + '\")</code> should return <code>\"' + answers[1] + '\"</code>');"
        },
        {
          "text":
            "Should handel month change in a leap years. <code>add12Hours(\"' + tests[2] + '\")</code> should return <code>\"' + answers[2] + '\"</code>",
          "testString":
            "assert(add12Hours(tests[2]) === answers[2], 'Should handel month change in a leap years. <code>add12Hours(\"' + tests[2] + '\")</code> should return <code>\"' + answers[2] + '\"</code>');"
        },
        {
          "text":
            "Should handel month change in a common years. <code>add12Hours(\"' + tests[3] + '\")</code> should return <code>\"' + answers[3] + '\"</code>",
          "testString":
            "assert(add12Hours(tests[3]) === answers[3], 'Should handel month change in a common years. <code>add12Hours(\"' + tests[3] + '\")</code> should return <code>\"' + answers[3] + '\"</code>');"
        },
        {
          "text":
            "Should handel year change. <code>add12Hours(\"' + tests[4] + '\")</code> should return <code>\"' + answers[4] + '\"</code>",
          "testString":
            "assert(add12Hours(tests[4]) === answers[4], 'Should handel year change. <code>add12Hours(\"' + tests[4] + '\")</code> should return <code>\"' + answers[4] + '\"</code>');"
        }
      ],
      "id": "5966c21cf732a95f1b67dd28",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function add12Hours (dateString) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const tests = [\n  'January 17 2017 11:43am EST',\n  'March 7 2009 7:30pm EST',\n  'February 29 2004 9:15pm EST',\n  'February 28 1999 3:15pm EST',\n  'December 31 2020 1:45pm EST'\n];\nconst answers = [\n  'January 17 2017 11:43pm EST',\n  'March 8 2009 7:30am EST',\n  'March 1 2004 9:15am EST',\n  'March 1 1999 3:15am EST',\n  'January 1 2021 1:45am EST'\n];"
        }
      },
      "name": "Date manipulation",
      "dashedName": "date-manipulation"
    },
    {
      "description": [
        "<p>A company decides that whenever Xmas falls on a Sunday they will give their workers all extra paid holidays so that, together with any public holidays, workers will not have to work the following week (between the 25th of December and the first of January).</p>",
        "<p>Task:</p>",
        "<p>Write a function that takes a start year and an end year and return an array of all the years where the 25th of December will be a Sunday.</p>"
      ],
      "tests": [
        {
          "text": "<code>findXmasSunday</code> is a function.",
          "testString":
            "assert(typeof findXmasSunday === 'function', '<code>findXmasSunday</code> is a function.');"
        },
        {
          "text":
            "<code>findChristmasSunday(2000, 2100)</code> should return an array.",
          "testString":
            "assert(typeof findXmasSunday(2000, 2100) === 'object', '<code>findChristmasSunday(2000, 2100)</code> should return an array.');"
        },
        {
          "text":
            "<code>findChristmasSunday(2008, 2121</code> should return [1977, 1983, 1988, 1994, 2005, 2011, 2016]",
          "testString":
            "assert.deepEqual(findXmasSunday(1970, 2017), firstSolution, '<code>findChristmasSunday(2008, 2121</code> should return [1977, 1983, 1988, 1994, 2005, 2011, 2016]');"
        },
        {
          "text":
            "<code>findChristmasSunday(2008, 2121</code> should return [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118]",
          "testString":
            "assert.deepEqual(findXmasSunday(2008, 2121), secondSolution, '<code>findChristmasSunday(2008, 2121</code> should return [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118]');"
        }
      ],
      "id": "5966f99c45e8976909a85575",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function findXmasSunday (start, end) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const firstSolution = [1977, 1983, 1988, 1994, 2005, 2011, 2016];\nconst secondSolution = [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118];"
        }
      },
      "name": "Day of the week",
      "dashedName": "day-of-the-week"
    },
    {
      "description": [
        "<p>Free Cell is the solitaire card game that Paul Alfille introduced to the PLATO system in 1978. Jim Horne, at Microsoft, changed the name to FreeCell and reimplemented the game for <a href=\"http://rosettacode.org/wiki/DOS\" title=\"DOS\">DOS</a>, then <a href=\"http://rosettacode.org/wiki/Windows\" title=\"Windows\">Windows</a>. </p>",
        "<p>This version introduced 32000 numbered deals. (The <a href=\"http://www.solitairelaboratory.com/fcfaq.html\" title=\"link: http://www.solitairelaboratory.com/fcfaq.html\">FreeCell FAQ</a> tells this history.)</p><p>As the game became popular, Jim Horne disclosed <a href=\"http://www.solitairelaboratory.com/mshuffle.txt\" title=\"link: http://www.solitairelaboratory.com/mshuffle.txt\">the algorithm</a>, and other implementations of FreeCell began to reproduce the Microsoft deals. </p>",
        "<p>These deals are numbered from 1 to 32000.</p>",
        "<p>Newer versions from Microsoft have 1 million deals, numbered from 1 to 1000000; some implementations allow numbers outside that range.</p><p>The algorithm uses this <a href=\"http://rosettacode.org/wiki/linear congruential generator\" title=\"linear congruential generator\">linear congruential generator</a> from Microsoft C:</p>$state_{n + 1} \\equiv 214013 \\times state_n + 2531011 \\pmod{2^{31}}$",
        "$rand_n = state_n \\div 2^{16}$",
        "$rand_n$ is in range 0 to 32767.",
        "<p>The algorithm follows:</p>Seed the RNG with the number of the deal.",
        "Create an <a href=\"http://rosettacode.org/wiki/array\" title=\"array\">array</a> of 52 cards: Ace of Clubs, Ace of Diamonds, Ace of Hearts, Ace of Spades, 2 of Clubs, 2 of Diamonds, and so on through the ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King. The array indexes are 0 to 51, with Ace of Clubs at 0, and King of Spades at 51.",
        "Until the array is empty:",
        " Choose a random card at index &equiv; next random number (mod array length). ",
        " Swap this random card with the last card of the array.",
        " Remove this random card from the array. (Array length goes down by 1.)",
        " Deal this random card.",
        "Deal all 52 cards, face up, across 8 columns. The first 8 cards go in 8 columns, the next 8 cards go on the first 8 cards, and so on.",
        "Example:",
        "<p>Order to deal cards</p>",
        "<p><pre> 1  2  3  4  5  6  7  8",
        " 9 10 11 12 13 14 15 16",
        "17 18 19 20 21 22 23 24",
        "25 26 27 28 29 30 31 32",
        "33 34 35 36 37 38 39 40",
        "41 42 43 44 45 46 47 48",
        "49 50 51 52</pre></p>",
        "<p>Game #1</p>",
        "<p><pre>[",
        "['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],",
        "['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],",
        "['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],",
        "['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],",
        "['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],",
        "['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],",
        "['6S', '9C', '2H', '6H']",
        "]</pre></p>",
        "<p>Game #617</p>",
        "<p><pre>[",
        "['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],",
        "['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],",
        "['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],",
        "['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],",
        "['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],",
        "['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],",
        "['JD', 'KS', 'KC', '4H']",
        "]</pre></p>",
        "Task:",
        "<p>Write a function to take a deal number and deal cards in the same order as this algorithm.</p>",
        "<p>The function must return a two dimensional array representing the FreeCell board.</p>",
        "<p>Deals can also be checked against <a href=\"http://freecellgamesolutions.com/\" title=\"link: http://freecellgamesolutions.com/\">FreeCell solutions to 1000000 games</a>.</p>",
        "<p>(Summon a video solution, and it displays the initial deal.)</p>"
      ],
      "tests": [
        {
          "text": "<code>dealFreeCell</code> is a function.",
          "testString":
            "assert(typeof dealFreeCell === 'function', '<code>dealFreeCell</code> is a function.');"
        },
        {
          "text": "<code>dealFreeCell(seed)</code> should return an object.",
          "testString":
            "assert(typeof dealFreeCell(1) === 'object', '<code>dealFreeCell(seed)</code> should return an object.');"
        },
        {
          "text":
            "<code>dealFreeCell(seed)</code> should return an array of length 7.",
          "testString":
            "assert(dealFreeCell(1).length === 7, '<code>dealFreeCell(seed)</code> should return an array of length 7.');"
        },
        {
          "text":
            "<code>dealFreeCell(1)</code> should return an array identical to example \"Game #1\"",
          "testString":
            "assert.deepEqual(dealFreeCell(1), game1, '<code>dealFreeCell(1)</code> should return an array identical to example \"Game #1\"');"
        },
        {
          "text":
            "<code>dealFreeCell(617)</code> should return an array identical to example \"Game #617\"",
          "testString":
            "assert.deepEqual(dealFreeCell(617), game617, '<code>dealFreeCell(617)</code> should return an array identical to example \"Game #617\"');"
        }
      ],
      "id": "59694356a6e7011f7f1c5f4e",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function dealFreeCell (seed) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const replaceThis = 3;\nconst game1 = [\n  ['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],\n  ['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],\n  ['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],\n  ['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],\n  ['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],\n  ['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],\n  ['6S', '9C', '2H', '6H']\n];\nconst game617 = [\n  ['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],\n  ['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],\n  ['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],\n  ['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],\n  ['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],\n  ['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],\n  ['JD', 'KS', 'KC', '4H']\n];"
        }
      },
      "name": "Deal cards for FreeCell",
      "dashedName": "deal-cards-for-freecell"
    },
    {
      "description": [
        "Task:",
        "<p>Write a function that returns a deep copy of a given object.</p>",
        "<p>The copy must not be the same object that was given.</p>",
        "<p>This task will not test for: </p>",
        "Objects with properties that are functions",
        "Date objects or object with properties that are Date objects",
        "RegEx or object with properties that are RegEx objects",
        "Prototype copying"
      ],
      "tests": [
        {
          "text": "<code>deepcopy</code> should be a function.",
          "testString":
            "assert(typeof deepcopy === 'function', '<code>deepcopy</code> should be a function.');"
        },
        {
          "text":
            "<code>deepcopy({test: \"test\"})</code> should return an object.",
          "testString":
            "assert(typeof deepcopy(obj1) === 'object', '<code>deepcopy({test: \"test\"})</code> should return an object.');"
        },
        {
          "text": "Should not return the same object that was provided.",
          "testString":
            "assert(deepcopy(obj2) != obj2, 'Should not return the same object that was provided.');"
        },
        {
          "text":
            "When passed an object containing an array, should return a deep copy of the object.",
          "testString":
            "assert.deepEqual(deepcopy(obj2), obj2, 'When passed an object containing an array, should return a deep copy of the object.');"
        },
        {
          "text":
            "When passed an object containing another object, should return a deep copy of the object.",
          "testString":
            "assert.deepEqual(deepcopy(obj3), obj3, 'When passed an object containing another object, should return a deep copy of the object.');"
        }
      ],
      "id": "596a8888ab7c01048de257d5",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function deepcopy (obj) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const obj1 = { test: 'test' };\nconst obj2 = {\n  t: 'test',\n  a: ['an', 'array']\n};\nconst obj3 = {\n  t: 'try',\n  o: obj2\n};"
        }
      },
      "name": "Deepcopy",
      "dashedName": "deepcopy"
    },
    {
      "description": [
        "Task:",
        "<p>Define a type that behaves like an integer but has a lowest valid value of 1 and a highest valid value of 10.</p>",
        "Errors:",
        "If you try to instantiate a <code>Num</code> with a value outside of 1 - 10",
        "it should throw a <code>TypeError</code> with an error message of <code>'Out of range'</code>.",
        "If you try to instantiate a <code>Num</code> with a value that is not a number",
        "it should throw a <code>TypeError</code> with an error message of <code>'Not a Number'</code>."
      ],
      "tests": [
        {
          "text": "<code>Num</code> should be a function.",
          "testString":
            "assert(typeof Num === 'function', '<code>Num</code> should be a function.');"
        },
        {
          "text": "<code>new Num(4)</code> should return an object.",
          "testString":
            "assert(typeof (new Num(4)) === 'object', '<code>new Num(4)</code> should return an object.');"
        },
        {
          "text":
            "<code>new Num(\\'test\\')</code> should throw a TypeError with message \\'Not a Number\\'.",
          "testString":
            "assert(throws(() => new Num('test'), TypeError, 'Not a Number'), '<code>new Num(\\'test\\')</code> should throw a TypeError with message \\'Not a Number\\'.');"
        },
        {
          "text":
            "<code>new Num(0)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString":
            "assert(throws(() => new Num(0), TypeError, 'Out of range'), '<code>new Num(0)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text":
            "<code>new Num(-5)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString":
            "assert(throws(() => new Num(-5), TypeError, 'Out of range'), '<code>new Num(-5)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text":
            "<code>new Num(10)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString":
            "assert(throws(() => new Num(11), TypeError, 'Out of range'), '<code>new Num(10)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text":
            "<code>new Num(20)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString":
            "assert(throws(() => new Num(20), TypeError, 'Out of range'), '<code>new Num(20)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text": "<code>new Num(3) + new Num(4)</code> should equal 7.",
          "testString":
            "assert.equal(new Num(3) + new Num(4), 7, '<code>new Num(3) + new Num(4)</code> should equal 7.');"
        },
        {
          "text": "<code>new Num(3) - new Num(4)</code> should equal -1.",
          "testString":
            "assert.equal(new Num(3) - new Num(4), -1, '<code>new Num(3) - new Num(4)</code> should equal -1.');"
        },
        {
          "text": "<code>new Num(3) * new Num(4)</code> should equal 12.",
          "testString":
            "assert.equal(new Num(3) * new Num(4), 12, '<code>new Num(3) * new Num(4)</code> should equal 12.');"
        },
        {
          "text": "<code>new Num(3) / new Num(4)</code> should equal 0.75.",
          "testString":
            "assert.equal(new Num(3) / new Num(4), 0.75, '<code>new Num(3) / new Num(4)</code> should equal 0.75.');"
        },
        {
          "text": "<code>new Num(3) < new Num(4)</code> should be true.",
          "testString":
            "assert(new Num(3) < new Num(4), '<code>new Num(3) < new Num(4)</code> should be true.');"
        },
        {
          "text": "<code>new Num(3) > new Num(4)</code> should be false.",
          "testString":
            "assert(!(new Num(3) > new Num(4)), '<code>new Num(3) > new Num(4)</code> should be false.');"
        },
        {
          "text": "<code>(new Num(5)).toString()</code> should return \\'5\\'",
          "testString":
            "assert.equal((new Num(5)).toString(), '5', '<code>(new Num(5)).toString()</code> should return \\'5\\'');"
        }
      ],
      "id": "597089c87eec450c68aa1643",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function Num (n) {\n  // Good luck!\n  return n;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Define a primitive data type",
      "dashedName": "define-a-primitive-data-type"
    },
    {
      "description": [
        "<p>There is a highly organized city that has decided to assign a number to each of their departments:</p>",
        "Police department",
        "Sanitation department",
        "Fire department ",
        "<p>Each department can have a number between 1 and 7  (inclusive).</p><p>The three department numbers are to be unique (different from each other) and must add up to the number 12.</p><p>The Chief of the Police doesn't like odd numbers and wants to have an even number for his department.</p>",
        "Task:",
        "<p>Write a program which outputs all valid combinations:</p>",
        "<p>[2, 3, 7]</p>",
        "<p>[2, 4, 6]</p>",
        "<p>[2, 6, 4]</p>",
        "<p>[2, 7, 3]</p>",
        "<p>[4, 1, 7]</p>",
        "<p>[4, 2, 6]</p>",
        "<p>[4, 3, 5]</p>",
        "<p>[4, 5, 3]</p>",
        "<p>[4, 6, 2]</p>",
        "<p>[4, 7, 1]</p>",
        "<p>[6, 1, 5]</p>",
        "<p>[6, 2, 4]</p>",
        "<p>[6, 4, 2]</p>",
        "<p>[6, 5, 1]</p>"
      ],
      "tests": [
        {
          "text": "<code>combinations</code> should be a function.",
          "testString":
            "assert(typeof combinations === 'function', '<code>combinations</code> should be a function.');"
        },
        {
          "text":
            "<code>combinations([1, 2, 3], 6)</code> should return an Array.",
          "testString":
            "assert(Array.isArray(combinations([1, 2, 3], 6)), '<code>combinations([1, 2, 3], 6)</code> should return an Array.');"
        },
        {
          "text":
            "<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return an array of length 14.",
          "testString":
            "assert(combinations(nums, total).length === len, '<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return an array of length 14.');"
        },
        {
          "text":
            "<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return all valid combinations.",
          "testString":
            "assert.deepEqual(combinations(nums, total), result, '<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return all valid combinations.');"
        }
      ],
      "id": "59f40b17e79dbf1ab720ed7a",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function combinations (possibleNumbers, total) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const nums = [1, 2, 3, 4, 5, 6, 7];\nconst total = 12;\nconst len = 14;\nconst result = [\n  [2, 3, 7],\n  [2, 4, 6],\n  [2, 6, 4],\n  [2, 7, 3],\n  [4, 1, 7],\n  [4, 2, 6],\n  [4, 3, 5],\n  [4, 5, 3],\n  [4, 6, 2],\n  [4, 7, 1],\n  [6, 1, 5],\n  [6, 2, 4],\n  [6, 4, 2],\n  [6, 5, 1]\n];"
        }
      },
      "name": "Department Numbers",
      "dashedName": "department-numbers"
    },
    {
      "description": [
        "Task:",
        "<p>Convert a given date from the  <a href=\"https://en.wikipedia.org/wiki/Gregorian calendar\" title=\"wp: Gregorian calendar\">Gregorian calendar</a>  to the  <a href=\"https://en.wikipedia.org/wiki/Discordian calendar\" title=\"wp: Discordian calendar\">Discordian calendar</a>.</p>"
      ],
      "tests": [
        {
          "text": "<code>discordianDate</code> is a function.",
          "testString":
            "assert(typeof discordianDate === 'function', '<code>discordianDate</code> is a function.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2010, 6, 22))</code> should return <code>\"Pungenday, the 57th day of Confusion in the YOLD 3176\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2010, 6, 22)) === 'Pungenday, the 57th day of Confusion in the YOLD 3176', '<code>discordianDate(new Date(2010, 6, 22))</code> should return <code>\"Pungenday, the 57th day of Confusion in the YOLD 3176\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2012, 1, 28))</code> should return <code>\"Prickle-Prickle, the 59th day of Chaos in the YOLD 3178\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2012, 1, 28)) === 'Prickle-Prickle, the 59th day of Chaos in the YOLD 3178', '<code>discordianDate(new Date(2012, 1, 28))</code> should return <code>\"Prickle-Prickle, the 59th day of Chaos in the YOLD 3178\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2012, 1, 29))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2012, 1, 29)) === 'Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!', '<code>discordianDate(new Date(2012, 1, 29))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2012, 2, 1))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2012, 2, 1)) === 'Setting Orange, the 60th day of Chaos in the YOLD 3178', '<code>discordianDate(new Date(2012, 2, 1))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2010, 0, 5))</code> should return <code>\"Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2010, 0, 5)) === 'Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!', '<code>discordianDate(new Date(2010, 0, 5))</code> should return <code>\"Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2011, 4, 3))</code> should return <code>\"Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2011, 4, 3)) === 'Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!', '<code>discordianDate(new Date(2011, 4, 3))</code> should return <code>\"Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!\"</code>.');"
        },
        {
          "text":
            "<code>discordianDate(new Date(2015, 9, 19))</code> should return <code>\"Boomtime, the 73rd day of Bureaucracy in the YOLD 3181\"</code>.",
          "testString":
            "assert(discordianDate(new Date(2015, 9, 19)) === 'Boomtime, the 73rd day of Bureaucracy in the YOLD 3181', '<code>discordianDate(new Date(2015, 9, 19))</code> should return <code>\"Boomtime, the 73rd day of Bureaucracy in the YOLD 3181\"</code>.');"
        }
      ],
      "id": "59f4eafba0343628bb682785",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function discordianDate (date) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Discordian date",
      "dashedName": "discordian-date"
    },
    {
      "description": [
        "<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p><p>Implement:</p>",
        "<p>::*  addition</p>",
        "<p>::*  subtraction</p>",
        "<p>::*  multiplication</p>",
        "<p>::*  division</p>",
        "<p>::*  exponentiation</p>",
        "<p>The first parameter will be the operation to be performed, for example : \"m_add\" for matrix addition and \"s_add\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed."
      ],
      "tests": [
        {
          "text": "<code>operation</code> is a function.",
          "testString":
            "assert(typeof operation === 'function', '<code>operation</code> is a function.');"
        },
        {
          "text":
            "<code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_add', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[2, 4], [6, 8]], '<code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"s_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.",
          "testString":
            "assert.deepEqual(operation('s_add', [[1, 2], [3, 4]], 2), [[3, 4], [5, 6]], '<code>operation(\"s_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_sub', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[0, 0], [0, 0]], '<code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_mult', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [9, 16]], '<code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_div', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 1], [1, 1]], '<code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_exp', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [27, 256]], '<code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.');"
        },
        {
          "text":
            "<code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.",
          "testString":
            "assert.deepEqual(operation('m_add', [[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]), [[10, 12, 14, 16], [18, 20, 22, 24]], '<code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.');"
        }
      ],
      "id": "599c333915e0ea32d04d4bec",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function operation (op, arr1, arr2) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Elementwise operations",
      "dashedName": "elementwise-operations"
    },
    {
      "description": [
        "<p>An  emirp  (prime spelled backwards)  are primes that when reversed  (in their decimal representation)  are a different prime.</p>",
        "<p>Write a function that should be able to : Show the first <b>n</b> eprimes numbers.Show the eprimes numbers in a range.Show the number of eprimes in a range.Show the <b>n<sup>th</sup></b> eprimes number.<p>The function should have two parameters. The first will receive <b>n</b> or the range as an array. The second will receive a boolean, that specifies if the function returns the eprimes as an array or a single number(the number of primes in the range or the <b>n<sup>th</sup></b> prime). According to the parameters the function should return an array or a number."
      ],
      "tests": [
        {
          "text": "<code>emirps</code> is a function.",
          "testString":
            "assert(typeof emirps === 'function', '<code>emirps</code> is a function.');"
        },
        {
          "text":
            "<code>emirps(20,true)</code> should return <code>[13,17,31,37,71,73,79,97,107,113,149,157,167,179,199,311,337,347,359,389]</code>",
          "testString":
            "assert.deepEqual(emirps(20, true), [13, 17, 31, 37, 71, 73, 79, 97, 107, 113, 149, 157, 167, 179, 199, 311, 337, 347, 359, 389], '<code>emirps(20,true)</code> should return <code>[13,17,31,37,71,73,79,97,107,113,149,157,167,179,199,311,337,347,359,389]</code>');"
        },
        {
          "text":
            "<code>emirps(10000)</code> should return <code>948349</code>",
          "testString":
            "assert.deepEqual(emirps(10000), 948349, '<code>emirps(10000)</code> should return <code>948349</code>');"
        },
        {
          "text":
            "<code>emirps([7700,8000],true)</code> should return <code>[7717,7757,7817,7841,7867,7879,7901,7927,7949,7951,7963]</code>",
          "testString":
            "assert.deepEqual(emirps([7700, 8000], true), [7717, 7757, 7817, 7841, 7867, 7879, 7901, 7927, 7949, 7951, 7963], '<code>emirps([7700,8000],true)</code> should return <code>[7717,7757,7817,7841,7867,7879,7901,7927,7949,7951,7963]</code>');"
        },
        {
          "text":
            "<code>emirps([7700,8000],true)</code> should return <code>11</code>",
          "testString":
            "assert.deepEqual(emirps([7700, 8000], false), 11, '<code>emirps([7700,8000],true)</code> should return <code>11</code>');"
        }
      ],
      "id": "599d0ba974141b0f508b37d5",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function emirps(n) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Emirp primes",
      "dashedName": "emirp-primes"
    },
    {
      "description": [
        "Task:",
        "<p>Calculate the Shannon entropy  H  of a given input string.</p><p>Given the discreet random variable $X$ that is a string of $N$ \"symbols\" (total characters) consisting of $n$ different characters (n=2 for binary), the Shannon entropy of X in bits/symbol is :</p>",
        "<p>$H_2(X) = -\\sum_{i=1}^n \\frac{count_i}{N} \\log_2 \\left(\\frac{count_i}{N}\\right)$</p><p>where $count_i$ is the count of character $n_i$.</p>"
      ],
      "tests": [
        {
          "text": "<code>entropy</code> is a function.",
          "testString":
            "assert(typeof entropy === 'function', '<code>entropy</code> is a function.');"
        },
        {
          "text": "<code>entropy(\"0\")</code> should return <code>0</code>",
          "testString":
            "assert.equal(entropy('0'), 0, '<code>entropy(\"0\")</code> should return <code>0</code>');"
        },
        {
          "text": "<code>entropy(\"01\")</code> should return <code>1</code>",
          "testString":
            "assert.equal(entropy('01'), 1, '<code>entropy(\"01\")</code> should return <code>1</code>');"
        },
        {
          "text": "<code>entropy(\"0123\")</code> should return <code>2</code>",
          "testString":
            "assert.equal(entropy('0123'), 2, '<code>entropy(\"0123\")</code> should return <code>2</code>');"
        },
        {
          "text":
            "<code>entropy(\"01234567\")</code> should return <code>3</code>",
          "testString":
            "assert.equal(entropy('01234567'), 3, '<code>entropy(\"01234567\")</code> should return <code>3</code>');"
        },
        {
          "text":
            "<code>entropy(\"0123456789abcdef\")</code> should return <code>4</code>",
          "testString":
            "assert.equal(entropy('0123456789abcdef'), 4, '<code>entropy(\"0123456789abcdef\")</code> should return <code>4</code>');"
        },
        {
          "text":
            "<code>entropy(\"1223334444\")</code> should return <code>1.8464393446710154</code>",
          "testString":
            "assert.equal(entropy('1223334444'), 1.8464393446710154, '<code>entropy(\"1223334444\")</code> should return <code>1.8464393446710154</code>');"
        }
      ],
      "id": "599d15309e88c813a40baf58",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function entropy (s) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Entropy",
      "dashedName": "entropy"
    },
    {
      "description": [
        "<p>An equilibrium index of a sequence is an index into the sequence such that the sum of elements at lower indices is equal to the sum of elements at higher indices.</p>",
        "<p>For example, in a sequence  <big>$A$</big>:</p><p>::::  <big>$A_0 = -7$</big></p>",
        "<p>::::  <big>$A_1 =  1$</big></p>",
        "<p>::::  <big>$A_2 =  5$</big></p>",
        "<p>::::  <big>$A_3 =  2$</big></p>",
        "<p>::::  <big>$A_4 = -4$</big></p>",
        "<p>::::  <big>$A_5 =  3$</big></p>",
        "<p>::::  <big>$A_6 =  0$</big></p><p>3  is an equilibrium index, because:</p><p>::::  <big>$A_0 + A_1 + A_2 = A_4 + A_5 + A_6$</big></p><p>6  is also an equilibrium index, because:</p><p>::::  <big>$A_0 + A_1 + A_2 + A_3 + A_4 + A_5 = 0$</big></p><p>(sum of zero elements is zero)</p><p>7  is not an equilibrium index, because it is not a valid index of sequence <big>$A$</big>.</p>",
        "<p>Write a function that, given a sequence, returns its equilibrium indices (if any).</p><p>Assume that the sequence may be very long.</p>"
      ],
      "tests": [
        {
          "text": "<code>equilibrium</code> is a function.",
          "testString":
            "assert(typeof equilibrium === 'function', '<code>equilibrium</code> is a function.');"
        },
        {
          "text":
            "<code>equilibrium([-7, 1, 5, 2, -4, 3, 0])</code> should return <code>[3,6]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[0]), ans[0], '<code>equilibrium([-7, 1, 5, 2, -4, 3, 0])</code> should return <code>[3,6]</code>.');"
        },
        {
          "text":
            "<code>equilibrium([2, 4, 6])</code> should return <code>[]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[1]), ans[1], '<code>equilibrium([2, 4, 6])</code> should return <code>[]</code>.');"
        },
        {
          "text":
            "<code>equilibrium([2, 9, 2])</code> should return <code>[1]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[2]), ans[2], '<code>equilibrium([2, 9, 2])</code> should return <code>[1]</code>.');"
        },
        {
          "text":
            "<code>equilibrium([1, -1, 1, -1, 1, -1, 1])</code> should return <code>[0,1,2,3,4,5,6]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[3]), ans[3], '<code>equilibrium([1, -1, 1, -1, 1, -1, 1])</code> should return <code>[0,1,2,3,4,5,6]</code>.');"
        },
        {
          "text":
            "<code>equilibrium([1])</code> should return <code>[0]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[4]), ans[4], '<code>equilibrium([1])</code> should return <code>[0]</code>.');"
        },
        {
          "text": "<code>equilibrium([])</code> should return <code>[]</code>.",
          "testString":
            "assert.deepEqual(equilibrium(tests[5]), ans[5], '<code>equilibrium([])</code> should return <code>[]</code>.');"
        }
      ],
      "id": "5987fd532b954e0f21b5d3f6",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function equilibrium (a) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const tests =\n  [[-7, 1, 5, 2, -4, 3, 0], // 3, 6\n  [2, 4, 6], // empty\n  [2, 9, 2], // 1\n  [1, -1, 1, -1, 1, -1, 1], // 0,1,2,3,4,5,6\n  [1], // 0\n  [] // empty\n  ];\nconst ans = [[3, 6], [], [1], [0, 1, 2, 3, 4, 5, 6], [0], []];"
        }
      },
      "name": "Equilibrium index",
      "dashedName": "equilibrium-index"
    },
    {
      "description": [
        "<p>Ethiopian multiplication is a method of multiplying integers using only addition, doubling, and halving.</p>",
        "<p>Method: </p>",
        "Take two numbers to be multiplied and write them down at the top of two columns.",
        "In the left-hand column repeatedly halve the last number, discarding any remainders, and write the result below the last in the same column, until you write a value of 1.",
        "In the right-hand column repeatedly double the last number and write the result below. stop when you add a result in the same row as where the left hand column shows 1.",
        "Examine the table produced and discard any row where the value in the left column is even.",
        "Sum the values in the right-hand column that remain to produce the result of multiplying the original two numbers together",
        "<p>For example:  17 &times; 34</p>",
        "<p>17    34</p>",
        "<p>Halving the first column:</p>",
        "<p>17    34</p>",
        "<p>8</p>",
        "<p>4</p>",
        "<p>2</p>",
        "<p>1</p>",
        "<p>Doubling the second column:</p>",
        "<p>17    34</p>",
        "<p>8    68</p>",
        "<p>4   136</p>",
        "<p>2   272</p>",
        "<p>1   544</p>",
        "<p>Strike-out rows whose first cell is even:</p>",
        "<p>17    34</p>",
        "<p>8    <strike>68</strike></p>",
        "<p>4   <strike>136</strike></p>",
        "<p>2   <strike>272</strike></p>",
        "<p>1   544</p>",
        "<p>Sum the remaining numbers in the right-hand column:</p>",
        "<p>17    34</p>",
        "<p>8    --</p>",
        "<p>4   ---</p>",
        "<p>2   ---</p>",
        "<p>1   544</p>",
        "<p>====</p>",
        "<p>578</p>",
        "<p>So 17 multiplied by 34, by the Ethiopian method is 578.</p>",
        "Task:",
        "<p>The task is to define three named functions/methods/procedures/subroutines:</p>",
        "one to halve an integer,",
        "one to double an integer, and",
        "one to state if an integer is even.",
        "<p>Use these functions to create a function that does Ethiopian multiplication.</p>"
      ],
      "tests": [
        {
          "text": "<code>eth_mult</code> is a function.",
          "testString":
            "assert(typeof eth_mult === 'function', '<code>eth_mult</code> is a function.');"
        },
        {
          "text":
            "<code>eth_mult(17,34)</code> should return <code>578</code>.",
          "testString":
            "assert.equal(eth_mult(17, 34), 578, '<code>eth_mult(17,34)</code> should return <code>578</code>.');"
        },
        {
          "text":
            "<code>eth_mult(23,46)</code> should return <code>1058</code>.",
          "testString":
            "assert.equal(eth_mult(23, 46), 1058, '<code>eth_mult(23,46)</code> should return <code>1058</code>.');"
        },
        {
          "text":
            "<code>eth_mult(12,27)</code> should return <code>324</code>.",
          "testString":
            "assert.equal(eth_mult(12, 27), 324, '<code>eth_mult(12,27)</code> should return <code>324</code>.');"
        },
        {
          "text":
            "<code>eth_mult(56,98)</code> should return <code>5488</code>.",
          "testString":
            "assert.equal(eth_mult(56, 98), 5488, '<code>eth_mult(56,98)</code> should return <code>5488</code>.');"
        },
        {
          "text":
            "<code>eth_mult(63,74)</code> should return <code>4662</code>.",
          "testString":
            "assert.equal(eth_mult(63, 74), 4662, '<code>eth_mult(63,74)</code> should return <code>4662</code>.');"
        }
      ],
      "id": "599d1566a02b571412643b84",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function eth_mult (a, b) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Ethiopian multiplication",
      "dashedName": "ethiopian-multiplication"
    },
    {
      "description": [
        "<p>Euler's method numerically approximates solutions of first-order ordinary differential equations (ODEs) with a given initial value.  It is an explicit method for solving initial value problems (IVPs), as described in <a href=\"https://en.wikipedia.org/wiki/Euler method\" title=\"wp: Euler method\">the wikipedia page</a>.</p><p>The ODE has to be provided in the following form:</p><p>:: <big>$\\frac{dy(t)}{dt} = f(t,y(t))$</big></p><p>with an initial value</p><p>:: <big>$y(t_0) = y_0$</big></p><p>To get a numeric solution, we replace the derivative on the  LHS  with a finite difference approximation:</p><p>:: <big>$\\frac{dy(t)}{dt}  \\approx \\frac{y(t+h)-y(t)}{h}$</big></p><p>then solve for $y(t+h)$:</p><p>:: <big>$y(t+h) \\approx y(t) + h \\, \\frac{dy(t)}{dt}$</big></p><p>which is the same as</p><p>:: <big>$y(t+h) \\approx y(t) + h \\, f(t,y(t))$</big></p><p>The iterative solution rule is then:</p><p>:: <big>$y_{n+1} = y_n + h \\, f(t_n, y_n)$</big></p><p>where  <big>$h$</big>  is the step size, the most relevant parameter for accuracy of the solution.  A smaller step size increases accuracy but also the computation cost, so it has always has to be hand-picked according to the problem at hand.</p>",
        "<p>Example: Newton's Cooling Law</p><p>Newton's cooling law describes how an object of initial temperature  <big>$T(t_0) = T_0$</big>  cools down in an environment of temperature  <big>$T_R$</big>:</p><p>:: <big>$\\frac{dT(t)}{dt} = -k \\, \\Delta T$</big></p>",
        "<p>or</p>",
        "<p>:: <big>$\\frac{dT(t)}{dt} = -k \\, (T(t) - T_R)$</big></p>",
        "<p>It says that the cooling rate  <big>$\\frac{dT(t)}{dt}$</big>  of the object is proportional to the current temperature difference  <big>$\\Delta T = (T(t) - T_R)$</big>  to the surrounding environment.</p><p>The analytical solution, which we will compare to the numerical approximation, is</p>",
        "<p>:: <big>$T(t) = T_R + (T_0 - T_R) \\; e^{-k t}$</big></p>",
        "Task:",
        "<p>Implement a routine of Euler's method and then to use it to solve the given example of Newton's cooling law with it for three different step sizes of:</p>",
        "<p>::*  2 s</p>",
        "<p>::*  5 s    and </p>",
        "<p>::*  10 s </p>",
        "<p>and to compare with the analytical solution.</p>",
        "Initial values:",
        "<p>::*  initial temperature  <big>$T_0$</big>  shall be  100 °C</p>",
        "<p>::*  room temperature  <big>$T_R$</big>  shall be  20 °C</p>",
        "<p>::*  cooling constant   <big>$k$</big>   shall be  0.07  </p>",
        "<p>::*  time interval to calculate shall be from  0 s  ──►  100 s</p>"
      ],
      "tests": [
        {
          "text": "<code>eulersMethod</code> is a function.",
          "testString":
            "assert(typeof eulersMethod === 'function', '<code>eulersMethod</code> is a function.');"
        },
        {
          "text":
            "<code>eulersMethod(0, 100, 100, 10)</code> should return a number.",
          "testString":
            "assert(typeof eulersMethod(0, 100, 100, 10) === 'number', '<code>eulersMethod(0, 100, 100, 10)</code> should return a number.');"
        },
        {
          "text":
            "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.0424631833732.",
          "testString":
            "assert.equal(eulersMethod(0, 100, 100, 2), 20.0424631833732, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.0424631833732.');"
        },
        {
          "text":
            "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.01449963666907.",
          "testString":
            "assert.equal(eulersMethod(0, 100, 100, 5), 20.01449963666907, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.01449963666907.');"
        },
        {
          "text":
            "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.000472392.",
          "testString":
            "assert.equal(eulersMethod(0, 100, 100, 10), 20.000472392, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.000472392.');"
        }
      ],
      "id": "59880443fb36441083c6c20e",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function eulersMethod (x1, y1, x2, h) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Euler method",
      "dashedName": "euler-method"
    },
    {
      "description": [
        "<p>Write a function to calculate the binomial coefficient for the given value of n and k.</p><p>This formula is recommended:</p>",
        "$\\binom{n}{k} = \\frac{n!}{(n-k)!k!} = \\frac{n(n-1)(n-2)\\ldots(n-k+1)}{k(k-1)(k-2)\\ldots 1}$"
      ],
      "tests": [
        {
          "text": "<code>binom</code> is a function.",
          "testString":
            "assert(typeof binom === 'function', '<code>binom</code> is a function.');"
        },
        {
          "text": "<code>binom(5,3)</code> should return 10.",
          "testString":
            "assert.equal(binom(5, 3), 10, '<code>binom(5,3)</code> should return 10.');"
        },
        {
          "text": "<code>binom(7,2)</code> should return 21.",
          "testString":
            "assert.equal(binom(7, 2), 21, '<code>binom(7,2)</code> should return 21.');"
        },
        {
          "text": "<code>binom(10,4)</code> should return 210.",
          "testString":
            "assert.equal(binom(10, 4), 210, '<code>binom(10,4)</code> should return 210.');"
        },
        {
          "text": "<code>binom(6,1)</code> should return 6.",
          "testString":
            "assert.equal(binom(6, 1), 6, '<code>binom(6,1)</code> should return 6.');"
        },
        {
          "text": "<code>binom(12,8)</code> should return 495.",
          "testString":
            "assert.equal(binom(12, 8), 495, '<code>binom(12,8)</code> should return 495.');"
        }
      ],
      "id": "598de241872ef8353c58a7a2",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function binom (n, k) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Evaluate binomial coefficients",
      "dashedName": "evaluate-binomial-coefficients"
    },
    {
      "description": [
        "Task:",
        "<p>Create an interpreter for a <a href=\"https://en.wikipedia.org/wiki/Markov algorithm\" title=\"wp: Markov algorithm\">Markov Algorithm</a>.</p><p>Rules have the syntax:</p>",
        "<p><ruleset> ::= ((<comment> | <rule>) <newline>+)*</p>",
        "<p><comment> ::= # {<any character>}</p>",
        "<p><rule> ::= <pattern> <whitespace> -> <whitespace> [.] <replacement></p>",
        "<p><whitespace> ::= (<tab> | <space>) [<whitespace>]</p>",
        "<p>There is one rule per line.</p><p>If there is a  <b>.</b>  (period)  present before the  <replacement>,  then this is a terminating rule in which case the interpreter must halt execution.</p><p>A ruleset consists of a sequence of rules, with optional comments.</p>",
        "<p><big><big> Rulesets </big></big></p><p>Use the following tests on entries:</p>",
        "Ruleset 1:",
        "<pre>",
        "This rules file is extracted from Wikipedia:",
        "http://en.wikipedia.org/wiki/Markov_AlgorithmA -> apple",
        "B -> bag",
        "S -> shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code> I bought a B of As from T S. </code></p>",
        "<p>Should generate the output:</p>",
        "<p> <code> I bought a bag of apples from my brother. </code></p>",
        "Ruleset 2:",
        "<p>A test of the terminating rule</p>",
        "<pre>",
        "Slightly modified from the rules on WikipediaA -> apple",
        "B -> bag",
        "S -> .shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule</pre>",
        "<p>Sample text of:</p>",
        "<p> <code>I bought a B of As from T S.</code></p>",
        "<p>Should generate:</p>",
        "<p> <code>I bought a bag of apples from T shop.</code></p>",
        "Ruleset 3:",
        "<p>This tests for correct substitution order and may trap simple regexp based replacement routines if special regexp characters are not escaped.</p>",
        "<pre>",
        "BNF Syntax testing rulesA -> apple",
        "WWWW -> with",
        "Bgage -> ->.*",
        "B -> bag",
        "->.* -> money",
        "W -> WW",
        "S -> .shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code>I bought a B of As W my Bgage from T S.</code></p>",
        "<p>Should generate:</p>",
        "<p> <code>I bought a bag of apples with my money from T shop.</code></p>",
        "Ruleset 4:",
        "<p>This tests for correct order of scanning of rules, and may trap replacement routines that scan in the wrong order.  It implements a general unary multiplication engine.  (Note that the input expression must be placed within underscores in this implementation.)</p>",
        "<pre>",
        "## Unary Multiplication Engine, for testing Markov Algorithm implementations",
        "## By Donal Fellows.",
        "Unary addition engine_+1 -> _1+",
        "1+1 -> 11+",
        "Pass for converting from the splitting of multiplication into ordinary",
        "addition1! -> !1",
        ",! -> !+",
        "_! -> _",
        "Unary multiplication by duplicating left side, right side times1*1 -> x,@y",
        "1x -> xX",
        "X, -> 1,1",
        "X1 -> 1X",
        "_x -> _X",
        ",x -> ,X",
        "y1 -> 1y",
        "y_ -> _",
        "Next phase of applying1@1 -> x,@y",
        "1@_ -> @_",
        ",@_ -> !_",
        "++ -> +",
        "Termination cleanup for addition_1 -> 1",
        "1+_ -> 1",
        "_+_ -> ",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code> _1111*11111_ </code></p>",
        "<p>should generate the output:</p>",
        "<p> <code> 11111111111111111111 </code></p>",
        "Ruleset 5:",
        "<p>A simple <a href=\"http://en.wikipedia.org/wiki/Turing_machine\" title=\"link: http://en.wikipedia.org/wiki/Turing_machine\">Turing machine</a>,</p>",
        "<p>implementing a three-state <a href=\"http://en.wikipedia.org/wiki/Busy_beaver\" title=\"link: http://en.wikipedia.org/wiki/Busy_beaver\">busy beaver</a>.</p><p>The tape consists of 0s and 1s,  the states are A, B, C and H (for Halt), and the head position is indicated by writing the state letter before the character where the head is.</p>",
        "<p>All parts of the initial tape the machine operates on have to be given in the input.</p><p>Besides demonstrating that the Markov algorithm is Turing-complete, it also made me catch a bug in the C++ implementation which wasn't caught by the first four rulesets.</p>",
        "<pre>",
        "Turing machine: three-state busy beaver",
        "# state A, symbol 0 => write 1, move right, new state BA0 -> 1B",
        "state A, symbol 1 => write 1, move left, new state C0A1 -> C01",
        "1A1 -> C11",
        "state B, symbol 0 => write 1, move left, new state A0B0 -> A01",
        "1B0 -> A11",
        "state B, symbol 1 => write 1, move right, new state BB1 -> 1B",
        "state C, symbol 0 => write 1, move left, new state B0C0 -> B01",
        "1C0 -> B11",
        "state C, symbol 1 => write 1, move left, halt0C1 -> H01",
        "1C1 -> H11",
        "</pre>",
        "<p>This ruleset should turn</p>",
        "<p> <code> 000000A000000 </code></p>",
        "<p>into</p>",
        "<p> <code> 00011H1111000 </code></p>"
      ],
      "tests": [
        {
          "text": "<code>markov</code> is a function.",
          "testString":
            "assert(typeof markov === 'function', '<code>markov</code> is a function.');"
        },
        {
          "text":
            "<code>markov([\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from my brother.\".",
          "testString":
            "assert.deepEqual(markov(rules[0],tests[0]),outputs[0],'<code>markov([\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from my brother.\".');"
        },
        {
          "text":
            "<code>markov([\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from T shop.\".",
          "testString":
            "assert.deepEqual(markov(rules[1],tests[1]),outputs[1],'<code>markov([\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from T shop.\".');"
        },
        {
          "text":
            "<code>markov([\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As W my Bgage from T S.\")</code> should return \"I bought a bag of apples with my money from T shop.\".",
          "testString":
            "assert.deepEqual(markov(rules[2],tests[2]),outputs[2],'<code>markov([\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As W my Bgage from T S.\")</code> should return \"I bought a bag of apples with my money from T shop.\".');"
        },
        {
          "text":
            "<code>markov([\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\"_1111*11111_\")</code> should return \"11111111111111111111\".",
          "testString":
            "assert.deepEqual(markov(rules[3],tests[3]),outputs[3],'<code>markov([\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\"_1111*11111_\")</code> should return \"11111111111111111111\".');"
        },
        {
          "text":
            "<code>markov([\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"],\"\")</code> should return \"00011H1111000\".",
          "testString":
            "assert.deepEqual(markov(rules[4],tests[4]),outputs[4],'<code>markov([\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"],\"\")</code> should return \"00011H1111000\".');"
        }
      ],
      "id": "59e09e6d412c5939baa02d16",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function markov (rules,test) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Execute a Markov algorithm",
      "dashedName": "execute-a-markov-algorithm"
    },
    {
      "description": [
        "<p>Write a function to implement a Brain**** interpreter. The function will take a string as a parameter and should return a string as the output. More details are given below : </p>",
        "<p>RCBF is a set of <a href=\"http://rosettacode.org/wiki/Brainf***\" title=\"Brainf***\">Brainf***</a> compilers and interpreters written for Rosetta Code in a variety of languages.</p><p>Below are links to each of the versions of RCBF.</p><p>An implementation need only properly implement the following instructions:</p>",
        "<p>{|</p>",
        "<p>!Command</p>",
        "<p>!Description</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>&gt;</code> || Move the pointer to the right</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>&lt;</code> || Move the pointer to the left</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>+</code> || Increment the memory cell under the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>-</code> || Decrement the memory cell under the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>.</code> || Output the character signified by the cell at the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>,</code> || Input a character and store it in the cell at the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>[</code> || Jump past the matching <code>]</code> if the cell under the pointer is 0</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>]</code> || Jump back to the matching <code>[</code> if the cell under the pointer is nonzero</p>",
        "<p>|}</p>",
        "<p>Any cell size is allowed,  EOF   (<u>E</u>nd-<u>O</u>-<u>F</u>ile)  support is optional, as is whether you have bounded or unbounded memory.</p>",
        ""
      ],
      "tests": [
        {
          "text": "<code>brain(bye)</code> should retuen a string",
          "testString":
            "assert(typeof brain(bye) === 'string', '<code>brain(bye)</code> should return a string');"
        },
        {
          "text":
            "<code>brain(\"++++++[>++++++++++<-]>+++++.\")</code should return \"A\"",
          "testString":
            "assert.equal(brain(\"++++++[>++++++++++<-]>+++++.\"),\"A\", '<code>brain(\"++++++[>++++++++++<-]>+++++.\")</code should return \"A\"');"
        },
        {
          "text":
            "<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>",
          "testString":
            "assert.equal(brain(bye), 'Goodbye, World!\\r\\n', '<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>');"
        },
        {
          "text":
            "<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>'",
          "testString":
            "assert.equal(brain(hello), \"Hello World!\\n\", '<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>');"
        },
        {
          "text":
            "<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>",
          "testString":
            "assert.equal(brain(fib), \"1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89\", '<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>');"
        }
      ],
      "id": "59e0a8df964e4540d5abe599",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function brain (prog) {\n  // Good luck!\n}",
          "head":
            "let fib=`+\n\n++\n\n+++\n\n++++\n\n+>+>>\n\n>>++++\n\n+++++++\n\n++++++++\n\n+++++++++\n\n++++++++++\n\n++++++>++++\n\n++++++++++++\n\n+++++++++++++\n\n+++<<<<<<[>[>>\n\n>>>>+>+<<<<<<<-\n\n]>>>>>>>[<<<<<<<\n\n+>>>>>>>-]<[>++++\n\n++++++[-<-[>>+>+<<\n\n<-]>>>[<<<+>>>-]+<[\n\n>[-]<[-]]>[<<[>>>+<<\n\n<-]>>[-]]<<]>>>[>>+>+\n\n<<<-]>>>[<<<+>>>-]+<[>\n\n[-]<[-]]>[<<+>>[-]]<<<<\n\n<<<]>>>>>[++++++++++++++\n\n+++++++++++++++++++++++++\n\n+++++++++.[-]]++++++++++<[\n\n->-<]>+++++++++++++++++++++\n\n+++++++++++++++++++++++++++.\n\n[-]<<<<<<<<<<<<[>>>+>+<<<<-]>\n\n>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]\n\n<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+\n\n>-]>[<+>-]<<<-]`;\nlet hello='++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'\nlet bye='++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>>+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.<+++++++.--------.<<<<<+.<+++.---.';",
          "tail": ""
        }
      },
      "name": "Execute Brain",
      "dashedName": "execute-brain"
    },
    {
      "description": [
        "<p>Write a generator of prime numbers, in order, that will automatically adjust to accommodate the generation of any reasonably high prime.</p> The generator should be able to : Show the first <b>n</b> prime numbers.Show the prime numbers in a range.Show the number of primes in a range.Show the <b>n<sup>th</sup></b> prime number.<p>The function should have two parameters. The first will receive <b>n</b> or the range as an array. The second will receive a boolean, that specifies if the function returns the prime numbers as an array or a single number(the number of primes in the range or the <b>n<sup>th</sup></b> prime). According to the parameters the function should return an array."
      ],
      "tests": [
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString":
            "assert(typeof primeGenerator === 'function', '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString":
            "assert.deepEqual(primeGenerator(20, true), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString":
            "assert.deepEqual(primeGenerator([100, 150], true), [101, 103, 107, 109, 113, 127, 131, 137, 139, 149], '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString":
            "assert.equal(primeGenerator([7700, 8000], false), 30, '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString":
            "assert.equal(primeGenerator(10000, false), 104729, '<code>primeGenerator</code> is a function.');"
        }
      ],
      "id": "598ee8b91b410510ae82efef",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function primeGenerator (num, showPrimes) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Extensible prime generator",
      "dashedName": "extensible-prime-generator"
    },
    {
      "description": [
        "<p>Write a function to return the factorial of a number.</p>",
        "<p>Factorial of a number is given by : </p>",
        "n! = n * (n-1) * (n-2) * ..... * 1",
        "<p>",
        "For example :",
        "3! = 3*2*1 = 6",
        "4! = 4*3*2*1 = 24",
        "</p>",
        "<p>Note : ",
        "0! = 1 ",
        "</p>"
      ],
      "tests": [
        {
          "text": "<code>factorial</code> is a function.",
          "testString":
            "assert(typeof factorial === 'function', '<code>factorial</code> is a function.');"
        },
        {
          "text": "<code>factorial(2)</code> should return a number.",
          "testString":
            "assert(typeof factorial(2) === 'number', '<code>factorial(2)</code> should return a number.');"
        },
        {
          "text": "<code>factorial(3)</code> should return 6.\")",
          "testString":
            "assert.equal(factorial(3),results[0],\"<code>factorial(3)</code> should return 6.\");"
        },
        {
          "text": "<code>factorial(3)</code> should return 120.\")",
          "testString":
            "assert.equal(factorial(5),results[1],\"<code>factorial(3)</code> should return 120.\");"
        },
        {
          "text": "<code>factorial(3)</code> should return 3,628,800.\")",
          "testString":
            "assert.equal(factorial(10),results[2],\"<code>factorial(3)</code> should return 3,628,800.\");"
        }
      ],
      "id": "597b2b2a2702b44414742771",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function factorial (n) {\n  // Good luck!\n}",
          "head": "",
          "tail": "const results=[6,120,3628800];"
        }
      },
      "name": "Factorial",
      "dashedName": "factorial"
    },
    {
      "description": [
        "<p>A Mersenne number is a number in the form of 2<sup>P</sup>-1.</p><p>If P is prime, the Mersenne number may be a Mersenne prime</p>",
        "<p>(if P is not prime, the Mersenne number is also not prime).</p><p>In the search for Mersenne prime numbers it is advantageous to eliminate exponents by finding a small factor before starting a,  potentially lengthy, <a href=\"http://rosettacode.org/wiki/Lucas-Lehmer test\" title=\"Lucas-Lehmer test\">Lucas-Lehmer test</a>.</p><p>There are very efficient algorithms for determining if a number divides 2<sup>P</sup>-1 (or equivalently, if 2<sup>P</sup> mod (the number) = 1).</p>",
        "<p>Some languages already have built-in implementations of this exponent-and-mod operation (called modPow or similar).</p><p>The following is how to implement this modPow yourself:</p><p>For example, let's compute 2<sup>23</sup> mod 47.</p>",
        "<p>Convert the exponent 23 to binary, you get 10111. Starting with <tt>square</tt> = 1, repeatedly square it.</p>",
        "<p>Remove the top bit of the exponent, and if it's 1 multiply <tt>square</tt> by the base of the exponentiation (2), then compute <tt>square</tt> modulo 47.</p>",
        "<p>Use the result of the modulo from the last step as the initial value of <tt>square</tt> in the next step:</p><p>Remove   Optional</p>",
        "<p>square        top bit  multiply by 2  mod 47</p>",
        "<p>------------  -------  -------------  ------</p>",
        "<p>1*1 = 1       1  0111  1*2 = 2           2</p>",
        "<p>2*2 = 4       0   111     no             4</p>",
        "<p>4*4 = 16      1    11  16*2 = 32        32</p>",
        "<p>32*32 = 1024  1     1  1024*2 = 2048    27</p>",
        "<p>27*27 = 729   1        729*2 = 1458      1</p><p>Since 2<sup>23</sup> mod 47 = 1, 47 is a factor of 2<sup>P</sup>-1.</p>",
        "<p>(To see this, subtract 1 from both sides: 2<sup>23</sup>-1 = 0 mod 47.)</p>",
        "<p>Since we've shown that 47 is a factor, 2<sup>23</sup>-1 is not prime.</p>",
        "<p>Further properties of Mersenne numbers allow us to refine the process even more.</p>",
        "<p>Any factor q of 2<sup>P</sup>-1 must be of the form 2kP+1, k being a positive integer or zero. Furthermore, q must be 1 or 7 mod 8.</p>",
        "<p>Finally any potential factor q must be <a href=\"http://rosettacode.org/wiki/Primality by Trial Division\" title=\"Primality by Trial Division\">prime</a>.</p>",
        "<p>As in other trial division algorithms, the algorithm stops when 2kP+1 > sqrt(N).</p><p>These primality tests only work on Mersenne numbers where P is prime. For example, M<sub>4</sub>=15 yields no factors using these techniques, but factors into 3 and 5, neither of which fit 2kP+1.</p>",
        "Task:",
        "<p>Using the above method find a factor of  2<sup>929</sup>-1 (aka M929)</p>",
        "Related tasks:",
        " <a href=\"http://rosettacode.org/wiki/count in factors\" title=\"count in factors\">count in factors</a>",
        " <a href=\"http://rosettacode.org/wiki/prime decomposition\" title=\"prime decomposition\">prime decomposition</a>",
        " <a href=\"http://rosettacode.org/wiki/factors of an integer\" title=\"factors of an integer\">factors of an integer</a>",
        " <a href=\"http://rosettacode.org/wiki/Sieve of Eratosthenes\" title=\"Sieve of Eratosthenes\">Sieve of Eratosthenes</a>",
        " <a href=\"http://rosettacode.org/wiki/primality by trial division\" title=\"primality by trial division\">primality by trial division</a>",
        " <a href=\"http://rosettacode.org/wiki/trial factoring of a Mersenne number\" title=\"trial factoring of a Mersenne number\">trial factoring of a Mersenne number</a>",
        " <a href=\"http://rosettacode.org/wiki/partition an integer X into N primes\" title=\"partition an integer X into N primes\">partition an integer X into N primes</a>",
        " <a href=\"http://rosettacode.org/wiki/sequence of primes by Trial Division\" title=\"sequence of primes by Trial Division\">sequence of primes by Trial Division</a>",
        " <a href=\"https://www.youtube.com/watch?v=SNwvJ7psoow\" title=\"link: https://www.youtube.com/watch?v=SNwvJ7psoow\">Computers in 1948: 2¹²⁷-1</a>"
      ],
      "tests": [
        {
          "text": "<code>check_mersenne</code> is a function.",
          "testString":
            "assert(typeof check_mersenne === 'function', '<code>check_mersenne</code> is a function.');"
        },
        {
          "text": "<code>check_mersenne(3)</code> should return a string.",
          "testString":
            "assert(typeof check_mersenne(3) == 'string', '<code>check_mersenne(3)</code> should return a string.');"
        },
        {
          "text":
            "<code>check_mersenne(3)</code> should return \"M3 = 2^3-1 is prime\".",
          "testString":
            "assert.equal(check_mersenne(3),\"M3 = 2^3-1 is prime\",'<code>check_mersenne(3)</code> should return \"M3 = 2^3-1 is prime\".');"
        },
        {
          "text":
            "<code>check_mersenne(23)</code> should return \"M23 = 2^23-1 is composite with factor 47\".",
          "testString":
            "assert.equal(check_mersenne(23),\"M23 = 2^23-1 is composite with factor 47\",'<code>check_mersenne(23)</code> should return \"M23 = 2^23-1 is composite with factor 47\".');"
        },
        {
          "text":
            "<code>check_mersenne(929)</code> should return \"M929 = 2^929-1 is composite with factor 13007",
          "testString":
            "assert.equal(check_mersenne(929),\"M929 = 2^929-1 is composite with factor 13007\",'<code>check_mersenne(929)</code> should return \"M929 = 2^929-1 is composite with factor 13007');"
        }
      ],
      "id": "598eea87e5cf4b116c3ff81a",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function check_mersenne (p) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Factors of a Mersenne number",
      "dashedName": "factors-of-a-mersenne-number"
    },
    {
      "description": [
        "<p>Write a function that returns the factors  of a positive integer.</p><p>These factors are the positive integers by which the number being factored can be divided to yield a positive integer result.</p>",
        "///"
      ],
      "tests": [
        {
          "text": "<code>factors</code> is a function.",
          "testString":
            "assert(typeof factors === 'function', '<code>factors</code> is a function.');"
        },
        {
          "text":
            "<code>factors(45)</code> should return <code>[1,3,5,9,15,45]</code>.",
          "testString":
            "assert.deepEqual(factors(45), ans[0], '<code>factors(45)</code> should return <code>[1,3,5,9,15,45]</code>.');"
        },
        {
          "text": "<code>factors(53)</code> should return <code>[1,53]</code>.",
          "testString":
            "assert.deepEqual(factors(53), ans[1], '<code>factors(53)</code> should return <code>[1,53]</code>.');"
        },
        {
          "text":
            "<code>factors(64)</code> should return <code>[1,2,4,8,16,32,64]</code>.",
          "testString":
            "assert.deepEqual(factors(64), ans[2], '<code>factors(64)</code> should return <code>[1,2,4,8,16,32,64]</code>.');"
        }
      ],
      "id": "597f1e7fbc206f0e9ba95dc4",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function factors (num) {\n  // Good luck!\n}",
          "head": "",
          "tail": "const ans=[[1,3,5,9,15,45],[1,53],[1,2,4,8,16,32,64]];"
        }
      },
      "name": "Factors of an integer",
      "dashedName": "factors-of-an-integer"
    },
    {
      "description": [
        "<p>Write a function that returns the Farey sequence of order n. The function should have one parameter that is n. It should return the sequence as an array. Read the following for more details : </p><p>The  <a href=\"https://en.wikipedia.org/wiki/Farey sequence\" title=\"wp: Farey sequence\">Farey sequence</a>   F<sub>n</sub>  of order  n  is the sequence of completely reduced fractions between  0  and  1  which, when in lowest terms, have denominators less than or equal to  n,  arranged in order of increasing size.</p><p>The  Farey sequence  is sometimes incorrectly called a  Farey series.</p>",
        "<p>Each Farey sequence:</p>",
        "<p>::*  starts with the value  0,  denoted by the fraction  $ \\frac{0}{1} $</p>",
        "<p>::*  ends with the value  1,  denoted by the fraction  $ \\frac{1}{1}$.</p>",
        "<p>The Farey sequences of orders  1  to  5  are:</p><p>${\\bf\\it{F}}_1 = \\frac{0}{1}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_2 = \\frac{0}{1}, \\frac{1}{2}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_3 = \\frac{0}{1}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_4 = \\frac{0}{1}, \\frac{1}{4}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{3}{4}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_5 = \\frac{0}{1}, \\frac{1}{5}, \\frac{1}{4}, \\frac{1}{3}, \\frac{2}{5}, \\frac{1}{2}, \\frac{3}{5}, \\frac{2}{3}, \\frac{3}{4}, \\frac{4}{5}, \\frac{1}{1}$</p>"
      ],
      "tests": [
        {
          "text": "<code>farey</code> is a function.",
          "testString":
            "assert(typeof farey === 'function', '<code>farey</code> is a function.');"
        },
        {
          "text": "<code>farey(3)</code> should return an array",
          "testString":
            "assert(Array.isArray(farey(3)), '<code>farey(3)</code> should return an array');"
        },
        {
          "text":
            "<code>farey(3)</code> should return <code>[\"1/3\",\"1/2\",\"2/3\"]</code>",
          "testString":
            "assert.deepEqual(farey(3), [\"1/3\",\"1/2\",\"2/3\"], '<code>farey(3)</code> should return <code>[\"1/3\",\"1/2\",\"2/3\"]</code>');"
        },
        {
          "text":
            "<code>farey(4)</code> should return <code>[\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"]</code>",
          "testString":
            "assert.deepEqual(farey(4), [\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"], '<code>farey(4)</code> should return <code>[\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"]</code>');"
        },
        {
          "text":
            "<code>farey(5)</code> should return <code>[\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"]</code>",
          "testString":
            "assert.deepEqual(farey(5), [\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"], '<code>farey(5)</code> should return <code>[\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"]</code>');"
        }
      ],
      "id": "59c3ec9f15068017c96eb8a3",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function farey (n) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Farey sequence",
      "dashedName": "farey-sequence"
    },
    {
      "description": [
        "<p>Write a function to generate Fibonacci n-step number sequences and Lucas sequences. The first parameter will be n. The second parameter will be the number of elements to be returned. The third parameter will specify whether to output the Fibonacci sequence or the Lucas sequence. If the parameter is \"f\" then return the Fibonacci sequence and if it is \"l\", then return the Lucas sequence. The sequences must be returned as an array. More details are given below : </p><p>These number series are an expansion of the ordinary <a href=\"http://rosettacode.org/wiki/Fibonacci sequence\" title=\"Fibonacci sequence\">Fibonacci sequence</a> where:</p>",
        "For $n = 2$ we have the Fibonacci sequence; with initial values $[1, 1]$ and $F_k^2 = F_{k-1}^2 + F_{k-2}^2$",
        "For $n = 3$ we have the tribonacci sequence; with initial values $[1, 1, 2]$ and $F_k^3 = F_{k-1}^3 + F_{k-2}^3 + F_{k-3}^3$",
        "For $n = 4$ we have the tetranacci sequence; with initial values $[1, 1, 2, 4]$ and $F_k^4 = F_{k-1}^4 + F_{k-2}^4 + F_{k-3}^4 + F_{k-4}^4$...",
        "For general $n>2$ we have the Fibonacci $n$-step sequence - $F_k^n$; with initial values of the first $n$ values of the $(n-1)$'th Fibonacci $n$-step sequence $F_k^{n-1}$; and $k$'th value of this $n$'th sequence being $F_k^n = \\sum_{i=1}^{(n)} {F_{k-i}^{(n)}}$",
        "<p>For small values of $n$, <a href=\"https://en.wikipedia.org/wiki/Number prefix#Greek_series\" title=\"wp: Number prefix#Greek_series\">Greek numeric prefixes</a> are sometimes used to individually name each series.</p><p>{| style=\"text-align: left;\" border=\"4\" cellpadding=\"2\" cellspacing=\"2\"</p>",
        "<p>|+ Fibonacci $n$-step sequences</p>",
        "<p>|- style=\"background-color: rgb(255, 204, 255);\"</p>",
        "<p>! $n$ !! Series name !! Values</p>",
        "<p>|-</p>",
        "<p>|  2 ||  fibonacci || 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 ...</p>",
        "<p>|-</p>",
        "<p>|  3 || tribonacci || 1 1 2 4 7 13 24 44 81 149 274 504 927 1705 3136 ...</p>",
        "<p>|-</p>",
        "<p>|  4 || tetranacci || 1 1 2 4 8 15 29 56 108 208 401 773 1490 2872 5536 ...</p>",
        "<p>|-</p>",
        "<p>|  5 || pentanacci || 1 1 2 4 8 16 31 61 120 236 464 912 1793 3525 6930 ...</p>",
        "<p>|-</p>",
        "<p>|  6 ||  hexanacci || 1 1 2 4 8 16 32 63 125 248 492 976 1936 3840 7617 ...</p>",
        "<p>|-</p>",
        "<p>|  7 || heptanacci || 1 1 2 4 8 16 32 64 127 253 504 1004 2000 3984 7936 ...</p>",
        "<p>|-</p>",
        "<p>|  8 ||  octonacci || 1 1 2 4 8 16 32 64 128 255 509 1016 2028 4048 8080 ...</p>",
        "<p>|-</p>",
        "<p>|  9 ||  nonanacci || 1 1 2 4 8 16 32 64 128 256 511 1021 2040 4076 8144 ...</p>",
        "<p>|-</p>",
        "<p>| 10 ||  decanacci || 1 1 2 4 8 16 32 64 128 256 512 1023 2045 4088 8172 ...</p>",
        "<p>|}</p><p>Allied sequences can be generated where the initial values are changed:</p>",
        "<p> The <a href=\"https://en.wikipedia.org/wiki/Lucas number\" title=\"wp: Lucas number\">Lucas series</a> sums the two preceding values like the fibonacci series for $n=2$ but uses $[2, 1]$ as its initial values.</p><p><!-- Lucas numbers, Lucas number, Lucas series     [added to make searches easier.] --></p>"
      ],
      "tests": [
        {
          "text": "<code>fib_luc</code> is a function.",
          "testString":
            "assert(typeof fib_luc === 'function', '<code>fib_luc</code> is a function.');"
        },
        {
          "text":
            "<code>fib_luc(2,10,\"f\")</code> should return <code>[1,1,2,3,5,8,13,21,34,55]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(2,10,\"f\"),ans[0],'<code>fib_luc(2,10,\"f\")</code> should return <code>[1,1,2,3,5,8,13,21,34,55]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(3,15,\"f\")</code> should return <code>[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(3,15,\"f\"),ans[1],'<code>fib_luc(3,15,\"f\")</code> should return <code>[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(4,15,\"f\")</code> should return <code>[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(4,15,\"f\"),ans[2],'<code>fib_luc(4,15,\"f\")</code> should return <code>[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(2,10,\"l\")</code> should return <code>[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(2,10,\"l\"),ans[3],'<code>fib_luc(2,10,\"l\")</code> should return <code>[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(3,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(3,15,\"l\"),ans[4],'<code>fib_luc(3,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(4,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(4,15,\"l\"),ans[5],'<code>fib_luc(4,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ]</code>.');"
        },
        {
          "text":
            "<code>fib_luc(5,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]</code>.",
          "testString":
            "assert.deepEqual(fib_luc(5,15,\"l\"),ans[6],'<code>fib_luc(5,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]</code>.');"
        }
      ],
      "id": "598eef80ba501f1268170e1e",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function fib_luc (n, len, w) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const ans = [[1,1,2,3,5,8,13,21,34,55],\n[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136],\n[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536],\n[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76],\n[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ],\n[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ],\n[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]];"
        }
      },
      "name": "Fibonacci nstep number sequences",
      "dashedName": "fibonacci-nstep-number-sequences"
    },
    {
      "description": [
        "<p>Write a function to generate the  <big> n<sup>th</sup> </big>  Fibonacci number.</p>",
        "///<p>The <big> n<sup>th</sup> </big>  Fibonacci number is given by :",
        "///<p>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></p>",
        "///<p>The first two terms of the series are 0, 1.</p>",
        "///<p>Hence, the series is : 0, 1, 1, 2, 3, 5, 8, 13...</p>",
        "///"
      ],
      "tests": [
        {
          "text": "<code>fibonacci</code> is a function.",
          "testString":
            "assert(typeof fibonacci === 'function', '<code>fibonacci</code> is a function.');"
        },
        {
          "text": "<code>fibonacci(2)</code> should return a number.",
          "testString":
            "assert(typeof fibonacci(2) == 'number', '<code>fibonacci(2)</code> should return a number.');"
        },
        {
          "text": "<code>fibonacci(3)</code> should return 1.\")",
          "testString":
            "assert.equal(fibonacci(3),1,\"<code>fibonacci(3)</code> should return 1.\");"
        },
        {
          "text": "<code>fibonacci(5)</code> should return 3.\")",
          "testString":
            "assert.equal(fibonacci(5),3,\"<code>fibonacci(5)</code> should return 3.\");"
        },
        {
          "text": "<code>fibonacci(10)</code> should return 34.\")",
          "testString":
            "assert.equal(fibonacci(10),34,\"<code>fibonacci(10)</code> should return 34.\");"
        }
      ],
      "id": "597f24c1dda4e70f53c79c81",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function fibonacci(n) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Fibonacci sequence",
      "dashedName": "fibonacci-sequence"
    },
    {
      "description": [
        "<p>Write a function to return the Fibonacci Words upto N. N will be provided as a parameter to the function. The function should return an array of objects. The objects should be of the form : { N: 1, Length: 1, Entropy: 0, Word: '1' }. More details are given below : </p><p>The  Fibonacci Word  may be created in a manner analogous to the  Fibonacci Sequence   <a href=\"http://hal.archives-ouvertes.fr/docs/00/36/79/72/PDF/The_Fibonacci_word_fractal.pdf\" title=\"link: http://hal.archives-ouvertes.fr/docs/00/36/79/72/PDF/The_Fibonacci_word_fractal.pdf\">as described here</a>:</p><p>Define  F_Word<sub>1</sub>  as  1</p>",
        "<p>Define  F_Word<sub>2</sub>  as  0</p>",
        "<p>Form   F_Word<sub>3</sub>  as  F_Word<sub>2</sub>   concatenated with  F_Word<sub>1</sub>   i.e.:  01</p>",
        "<p>Form   F_Word<sub>n</sub>  as  F_Word<sub>n-1</sub>  concatenated with  F_word<sub>n-2</sub></p>"
      ],
      "tests": [
        {
          "text": "<code>fibWord</code> is a function.",
          "testString":
            "assert(typeof fibWord === 'function', '<code>fibWord</code> is a function.');"
        },
        {
          "text": "<code>fibWord(5)</code> should return an array.",
          "testString":
            "assert(Array.isArray(fibWord(5)),'<code>fibWord(5)</code> should return an array.');"
        },
        {
          "text":
            "<code>fibWord(5)</code> should return <code>'+JSON.stringify(ans)+'</code>.",
          "testString":
            "assert.deepEqual(fibWord(5),ans,'<code>fibWord(5)</code> should return <code>'+JSON.stringify(ans)+'</code>.');"
        }
      ],
      "id": "5992e222d397f00d21122931",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function fibWord (n) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "let ans=[ { N: 1, Length: 1, Entropy: 0, Word: '1' },\n\n  { N: 2, Length: 1, Entropy: 0, Word: '0' },\n\n  { N: 3, Length: 2, Entropy: 1, Word: '01' },\n\n  { N: 4, Length: 3, Entropy: 0.9182958340544896, Word: '010' },\n\n  { N: 5, Length: 5, Entropy: 0.9709505944546688, Word: '01001' }];"
        }
      },
      "name": "Fibonacci word",
      "dashedName": "fibonacci-word"
    },
    {
      "description": [
        "<div class=\"rosetta\"><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--bold\"><a class=\"rosetta__link--wiki\" href=\"https://en.wikipedia.org/wiki/FRACTRAN\" title=\"wp: FRACTRAN\">FRACTRAN</a></span> is a Turing-complete esoteric programming language invented by the mathematician <a class=\"rosetta__link--wiki\" href=\"https://en.wikipedia.org/wiki/John Horton Conway\" title=\"wp: John Horton Conway\">John Horton Conway</a>.</p><br/><p class=\"rosetta__paragraph\">A FRACTRAN program is an ordered list of positive fractions $P = (f_1, f_2, \\ldots, f_m)$, together with an initial positive integer input $n$.</p>",
        "<br/><p class=\"rosetta__paragraph\">The program is run by updating the integer $n$ as follows:</p><br/><ul class=\"rosetta__unordered-list\"><li class=\"rosetta__list-item--unordered\">for the first fraction, $f_i$, in the list for which $nf_i$ is an integer, replace $n$ with $nf_i$ ;</li>",
        "<li class=\"rosetta__list-item--unordered\">repeat this rule until no fraction in the list produces an integer when multiplied by $n$, then halt.</li></ul>",
        "<br>",
        "<p class=\"rosetta__paragraph\">Conway gave a program for primes in FRACTRAN:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\"> $17/91$, $78/85$, $19/51$, $23/38$, $29/33$, $77/29$, $95/23$, $77/19$, $1/17$, $11/13$, $13/11$, $15/14$, $15/2$, $55/1$</span></p><br/><p class=\"rosetta__paragraph\">Starting with $n=2$, this FRACTRAN program will change $n$ to $15=2\\times (15/2)$, then $825=15\\times (55/1)$, generating the following sequence of integers:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\"> $2$, $15$, $825$, $725$, $1925$, $2275$, $425$, $390$, $330$, $290$, $770$, $\\ldots$</span></p><br/><p class=\"rosetta__paragraph\">After 2, this sequence contains the following powers of 2:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\">$2^2=4$, $2^3=8$, $2^5=32$, $2^7=128$, $2^{11}=2048$, $2^{13}=8192$, $2^{17}=131072$, $2^{19}=524288$, $\\ldots$</span></p><br/><p class=\"rosetta__paragraph\">which are the prime powers of 2.</p>",
        "<br/><dl class=\"rosetta__description-list\"><dt class=\"rosetta__description-title\">Task:</dt></dl>",
        "<p class=\"rosetta__paragraph\">Write a function that takes a fractran program as a string parameter and returns the first 10 numbers of the program as an array. If the result does not have 10 numbers then return the numbers as is.</p></div>"
      ],
      "tests": [
        {
          "text": "<code>fractran</code> should be a function.",
          "testString":
            "assert(typeof fractran=='function','<code>fractran</code> should be a function.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[0]+'\")</code> should return an array.",
          "testString":
            "assert(Array.isArray(fractran(tests[0])),'<code>fractran(\"'+tests[0]+'\")</code> should return an array.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[0]+'\")</code> should return <code>'+JSON.stringify(results[0])+'</code>.",
          "testString":
            "assert.deepEqual(fractran(tests[0]),results[0],'<code>fractran(\"'+tests[0]+'\")</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[1]+'\")</code> should return <code>'+JSON.stringify(results[1])+'</code>.",
          "testString":
            "assert.deepEqual(fractran(tests[1]),results[1],'<code>fractran(\"'+tests[1]+'\")</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[2]+'\")</code> should return <code>'+JSON.stringify(results[2])+'</code>.",
          "testString":
            "assert.deepEqual(fractran(tests[2]),results[2],'<code>fractran(\"'+tests[2]+'\")</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[3]+'\")</code> should return <code>'+JSON.stringify(results[3])+'</code>.",
          "testString":
            "assert.deepEqual(fractran(tests[3]),results[3],'<code>fractran(\"'+tests[3]+'\")</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"
        },
        {
          "text":
            "<code>fractran(\"'+tests[4]+'\")</code> should return <code>'+JSON.stringify(results[4])+'</code>.",
          "testString":
            "assert.deepEqual(fractran(tests[4]),results[4],'<code>fractran(\"'+tests[4]+'\")</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"
        }
      ],
      "id": "5a7dad05be01840e1778a0d1",
      "challengeType": 3,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function fractran (progStr) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "let tests=[\n  '3/2,1/3',\n  '3/2,5/3,1/5',\n  '3/2,6/3',\n  '2/7,7/2',\n  '17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1'\n]\nlet results=[\n  [ 2, 3, 1 ],\n  [ 2, 3, 5, 1 ],\n  [ 2, 3, 6, 9, 18, 27, 54, 81, 162, 243 ],\n  [ 2, 7, 2, 7, 2, 7, 2, 7, 2, 7 ],\n  [ 2, 15, 825, 725, 1925, 2275, 425, 390, 330, 290 ]\n]"
        }
      },
      "name": "Fractran",
      "dashedName": "fractran"
    },
    {
      "description": [
        "<p>The Hailstone sequence of numbers can be generated from a starting positive integer,  n  by:</p>",
        " If  n  is   1   then the sequence ends.",
        " If  n  is  even then the next  n  of the sequence <code> = n/2 </code>",
        " If  n  is  odd   then the next  n  of the sequence <code> = (3 * n) + 1 </code><p>The (unproven) <a href=\"https://en.wikipedia.org/wiki/Collatz conjecture\" title=\"wp: Collatz conjecture\">Collatz conjecture</a> is that the hailstone sequence for any starting number always terminates.</p>",
        "<p>The hailstone sequence is also known as hailstone numbers (because the values are usually subject to multiple descents and ascents like hailstones in a cloud), or as the Collatz sequence.</p>",
        "Task:",
        "Create a routine to generate the hailstone sequence for a number.",
        "Use the routine to show that the hailstone sequence for the number 27 has 112 elements starting with <code>27, 82, 41, 124</code> and ending with <code>8, 4, 2, 1</code>",
        "Show the number less than 100,000 which has the longest hailstone sequence together with that sequence's length.   (But don't show the actual sequence!)See also:",
        " <a href=\"http://xkcd.com/710\" title=\"link: http://xkcd.com/710\">xkcd</a> (humourous)."
      ],
      "tests": [
        {
          "text": "<code>hailstoneSequence</code> is a function.",
          "testString":
            "assert(typeof hailstoneSequence === 'function', '<code>hailstoneSequence</code> is a function.');"
        },
        {
          "text":
            "<code>hailstoneSequence()</code> should return <code>[[27,82,41,124,8,4,2,1], [351, 77031]]</code>",
          "testString":
            "assert.deepEqual(hailstoneSequence(), res, '<code>hailstoneSequence()</code> should return <code>[[27,82,41,124,8,4,2,1], [351, 77031]]</code>');"
        }
      ],
      "id": "595608ff8bcd7a50bd490181",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// noprotect\nfunction hailstoneSequence () {\n  const res = [];\n  // Good luck!\n\n  return res;\n}",
          "head": "",
          "tail": "const res = [[27, 82, 41, 124, 8, 4, 2, 1], [351, 77031]];"
        }
      },
      "name": "Hailstone sequence",
      "dashedName": "hailstone-sequence"
    },
    {
      "description": [
        "<p>A happy number is defined by the following process:</p>",
        "<p>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.</p>",
        "<p>Implement a function that returns true if the number is happy, or false if not.</p>"
      ],
      "tests": [
        {
          "text": "<code>happy</code> is a function.",
          "testString":
            "assert(typeof happy === 'function', '<code>happy</code> is a function.');"
        },
        {
          "text": "<code>happy(1)</code> should return a boolean.",
          "testString":
            "assert(typeof happy(1) === 'boolean', '<code>happy(1)</code> should return a boolean.');"
        },
        {
          "text": "<code>happy(1)</code> should return true.",
          "testString":
            "assert(happy(1), '<code>happy(1)</code> should return true.');"
        },
        {
          "text": "<code>happy(2)</code> should return false.",
          "testString":
            "assert(!happy(2), '<code>happy(2)</code> should return false.');"
        },
        {
          "text": "<code>happy(7)</code> should return true.",
          "testString":
            "assert(happy(7), '<code>happy(7)</code> should return true.');"
        },
        {
          "text": "<code>happy(10)</code> should return true.",
          "testString":
            "assert(happy(10), '<code>happy(10)</code> should return true.');"
        },
        {
          "text": "<code>happy(13)</code> should return true.",
          "testString":
            "assert(happy(13), '<code>happy(13)</code> should return true.');"
        },
        {
          "text": "<code>happy(19)</code> should return true.",
          "testString":
            "assert(happy(19), '<code>happy(19)</code> should return true.');"
        },
        {
          "text": "<code>happy(23)</code> should return true.",
          "testString":
            "assert(happy(23), '<code>happy(23)</code> should return true.');"
        },
        {
          "text": "<code>happy(28)</code> should return true.",
          "testString":
            "assert(happy(28), '<code>happy(28)</code> should return true.');"
        },
        {
          "text": "<code>happy(31)</code> should return true.",
          "testString":
            "assert(happy(31), '<code>happy(31)</code> should return true.');"
        },
        {
          "text": "<code>happy(32)</code> should return true:.",
          "testString":
            "assert(happy(32), '<code>happy(32)</code> should return true:.');"
        },
        {
          "text": "<code>happy(33)</code> should return false.",
          "testString":
            "assert(!happy(33), '<code>happy(33)</code> should return false.');"
        }
      ],
      "id": "594810f028c0303b75339ad1",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function happy (number) {\n  // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Happy numbers",
      "dashedName": "happy-numbers"
    },
    {
      "description": [
        "<p>The <a href=\"http://mathworld.wolfram.com/HarshadNumber.html\" title=\"link: http://mathworld.wolfram.com/HarshadNumber.html\">Harshad</a> or Niven numbers are positive integers ≥ 1 that are divisible by the sum of their digits.</p><p>For example,  42  is a <a href=\"http://rosettacode.org/wiki/oeis:A005349\" title=\"oeis:A005349\">Harshad number</a> as  42  is divisible by  (4 + 2)  without remainder.</p>",
        "Assume that the series is defined as the numbers in increasing order.",
        "Task:",
        "<p>Implement a function to generate successive members of the Harshad sequence.</p><p>Use it to list the first twenty members of the sequence and list the first Harshad number greater than 1000.</p>"
      ],
      "tests": [
        {
          "text": "<code>isHarshadOrNiven</code> is a function.",
          "testString":
            "assert(typeof isHarshadOrNiven === 'function', '<code>isHarshadOrNiven</code> is a function.');"
        },
        {
          "text":
            "<code>isHarshadOrNiven()</code> should return <code>{\"firstTwenty\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],\"firstOver1000\": 1002}</code>",
          "testString":
            "assert.deepEqual(isHarshadOrNiven(), res, '<code>isHarshadOrNiven()</code> should return <code>{\"firstTwenty\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],\"firstOver1000\": 1002}</code>');"
        }
      ],
      "id": "595668ca4cfe1af2fb9818d4",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function isHarshadOrNiven () {\n  const res = {\n    firstTwenty: [],\n    firstOver1000: undefined\n  };\n  // Change after this line\n\n  return res;\n}",
          "head": "",
          "tail":
            "const res = {\n  firstTwenty: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],\n  firstOver1000: 1002\n};"
        }
      },
      "name": "Harshad or Niven series",
      "dashedName": "harshad-or-niven-series"
    },
    {
      "description": [
        "Task:",
        "<p>Using two Arrays of equal length, create a Hash object where the elements from one array (the keys) are linked to the elements of the other (the values)</p>",
        "Related task:",
        " <a href=\"http://rosettacode.org/wiki/Associative arrays/Creation\" title=\"Associative arrays/Creation\">Associative arrays/Creation</a>"
      ],
      "tests": [
        {
          "text": "<code>arrToObj</code> is a function.",
          "testString":
            "assert(typeof arrToObj === 'function', '<code>arrToObj</code> is a function.');"
        },
        {
          "text":
            "<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\" }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[0]), res[0], '<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\" }</code>');"
        },
        {
          "text":
            "<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: undefined }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[1]), res[1], '<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: undefined }</code>');"
        },
        {
          "text":
            "<code>arrToObj([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\" }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[2]), res[2], '<code>arrToObj([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\" }</code>');"
        },
        {
          "text":
            "<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": 5 }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[3]), res[3], '<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": 5 }</code>');"
        },
        {
          "text":
            "<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": undefined }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[4]), res[4], '<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": undefined }</code>');"
        },
        {
          "text":
            "<code>arrToObj([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3  }</code>",
          "testString":
            "assert.deepEqual(arrToObj(...testCases[5]), res[5], '<code>arrToObj([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3  }</code>');"
        }
      ],
      "id": "595671d4d2cdc305f0d5b36f",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function arrToObj (keys, vals) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testCases = [\n  [[1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e']],\n  [[1, 2, 3, 4, 5], ['a', 'b', 'c', 'd']],\n  [[1, 2, 3], ['a', 'b', 'c', 'd', 'e']],\n  [['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]],\n  [['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4]],\n  [['a', 'b', 'c'], [1, 2, 3, 4, 5]]\n];\n\nconst res = [\n  { 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e' },\n  { 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: undefined },\n  { 1: 'a', 2: 'b', 3: 'c' },\n  { a: 1, b: 2, c: 3, d: 4, e: 5 },\n  { a: 1, b: 2, c: 3, d: 4, e: undefined },\n  { a: 1, b: 2, c: 3 }\n];"
        }
      },
      "name": "Hash from two arrays",
      "dashedName": "hash-from-two-arrays"
    },
    {
      "description": [
        "<p>An <a href=\"https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join\" title=\"wp: Join_(SQL)#Inner_join\">inner join</a> is an operation that combines two data tables into one table, based on matching column values. The simplest way of implementing this operation is the <a href=\"https://en.wikipedia.org/wiki/Nested loop join\" title=\"wp: Nested loop join\">nested loop join</a> algorithm, but a more scalable alternative is the <a href=\"https://en.wikipedia.org/wiki/hash join\" title=\"wp: hash join\">hash join</a> algorithm.</p>",
        "<p>Implement the \"hash join\" algorithm, and demonstrate that it passes the test-case listed below.</p><p>You should represent the tables as data structures that feel natural in your programming language.</p>",
        "<p>The \"hash join\" algorithm consists of two steps:</p>",
        "Hash phase: Create a <a href=\"https://en.wikipedia.org/wiki/Multimap\" title=\"wp: Multimap\">multimap</a> from one of the two tables, mapping from each join column value to all the rows that contain it.",
        " The multimap must support hash-based lookup which scales better than a simple linear search, because that's the whole point of this algorithm.",
        " Ideally we should create the multimap for the smaller table, thus minimizing its creation time and memory size.",
        "Join phase: Scan the other table, and find matching rows by looking in the multimap created before.",
        "<p>In pseudo-code, the algorithm could be expressed as follows:</p>",
        "<pre>",
        "let A = the first input table (or ideally, the larger one)",
        "let B = the second input table (or ideally, the smaller one)",
        "let j<sub>A</sub> = the join column ID of table A",
        "let j<sub>B</sub> = the join column ID of table B",
        "let M<sub>B</sub> = a multimap for mapping from single values to multiple rows of table B (starts out empty)",
        "let C = the output table (starts out empty)",
        "for each row b in table B:",
        "  place b in multimap M<sub>B</sub> under key b(j<sub>B</sub>)",
        "for each row a in table A:",
        "  for each row b in multimap M<sub>B</sub> under key a(j<sub>A</sub>):",
        "    let c = the concatenation of row a and row b",
        "    place row c in table C</p>",
        "</pre>",
        "Test-case",
        "<p>Input</p>",
        "<table>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\">",
        "<table style=\"border:none; border-collapse:collapse;\">",
        "<tr>",
        "<td style=\"border:none\"> <i>A =</i>",
        "</td>",
        "<td style=\"border:none\">",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> Age </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> Name",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Popeye",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan",
        "</td></tr></table>",
        "</td>",
        "<td style=\"border:none; padding-left:1.5em;\" rowspan=\"2\">",
        "</td>",
        "<td style=\"border:none\"> <i>B =</i>",
        "</td>",
        "<td style=\"border:none\">",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> Character </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> Nemesis",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Whales",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Spiders",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Buffy",
        "</td></tr></table>",
        "</td></tr>",
        "<tr>",
        "<td style=\"border:none\"> <i>j<sub>A</sub> =</i>",
        "</td>",
        "<td style=\"border:none\"> <i><code>Name</code> (i.e. column 1)</i>",
        "</td>",
        "<td style=\"border:none\"> <i>j<sub>B</sub> =</i>",
        "</td>",
        "<td style=\"border:none\"> <i><code>Character</code> (i.e. column 0)</i>",
        "</td></tr></table>",
        "</td>",
        "<td style=\"padding: 4px; margin: 5px;\">",
        "</td></tr></table>",
        "<p>Output</p>",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> A.Age </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> A.Name </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> B.Character </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> B.Nemesis",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Whales",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Spiders",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Buffy",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr></table>",
        "<p></p><p></p><p>The order of the rows in the output table is not significant.</p>",
        "<p>If you're using numerically indexed arrays to represent table rows (rather than referring to columns by name), you could represent the output rows in the form <code style=\"white-space:nowrap\">[[27, \"Jonah\"], [\"Jonah\", \"Whales\"]]</code>.</p><hr>"
      ],
      "tests": [
        {
          "text": "<code>hashJoin</code> is a function.",
          "testString":
            "assert(typeof hashJoin === 'function', '<code>hashJoin</code> is a function.');"
        },
        {
          "text":
            "<code>hashJoin([{ age: 27, name: \"Jonah\" }, { age: 18, name: \"Alan\" }, { age: 28, name: \"Glory\" }, { age: 18, name: \"Popeye\" }, { age: 28, name: \"Alan\" }], [{ character: \"Jonah\", nemesis: \"Whales\" }, { character: \"Jonah\", nemesis: \"Spiders\" }, { character: \"Alan\", nemesis: \"Ghosts\" }, { character:\"Alan\", nemesis: \"Zombies\" }, { character: \"Glory\", nemesis: \"Buffy\" }, { character: \"Bob\", nemesis: \"foo\" }])</code> should return <code>[{\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Whales\"}, {\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Spiders\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}, {\"A_age\": 28,\"A_name\": \"Glory\", \"B_character\": \"Glory\", \"B_nemesis\": \"Buffy\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}]</code>",
          "testString":
            "assert.deepEqual(hashJoin(hash1, hash2), res, '<code>hashJoin([{ age: 27, name: \"Jonah\" }, { age: 18, name: \"Alan\" }, { age: 28, name: \"Glory\" }, { age: 18, name: \"Popeye\" }, { age: 28, name: \"Alan\" }], [{ character: \"Jonah\", nemesis: \"Whales\" }, { character: \"Jonah\", nemesis: \"Spiders\" }, { character: \"Alan\", nemesis: \"Ghosts\" }, { character:\"Alan\", nemesis: \"Zombies\" }, { character: \"Glory\", nemesis: \"Buffy\" }, { character: \"Bob\", nemesis: \"foo\" }])</code> should return <code>[{\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Whales\"}, {\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Spiders\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}, {\"A_age\": 28,\"A_name\": \"Glory\", \"B_character\": \"Glory\", \"B_nemesis\": \"Buffy\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}]</code>');"
        }
      ],
      "id": "5956795bc9e2c415eb244de1",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function hashJoin (hash1, hash2) {\n  // Good luck!\n  return [];\n}",
          "head": "",
          "tail":
            "const hash1 = [\n    { age: 27, name: 'Jonah' },\n    { age: 18, name: 'Alan' },\n    { age: 28, name: 'Glory' },\n    { age: 18, name: 'Popeye' },\n    { age: 28, name: 'Alan' }\n];\n\nconst hash2 = [\n    { character: 'Jonah', nemesis: 'Whales' },\n    { character: 'Jonah', nemesis: 'Spiders' },\n    { character: 'Alan', nemesis: 'Ghosts' },\n    { character: 'Alan', nemesis: 'Zombies' },\n    { character: 'Glory', nemesis: 'Buffy' },\n    { character: 'Bob', nemesis: 'foo' }\n];\n\nconst res = [\n    { A_age: 27, A_name: 'Jonah', B_character: 'Jonah', B_nemesis: 'Whales' },\n    { A_age: 27, A_name: 'Jonah', B_character: 'Jonah', B_nemesis: 'Spiders' },\n    { A_age: 18, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Ghosts' },\n    { A_age: 18, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Zombies' },\n    { A_age: 28, A_name: 'Glory', B_character: 'Glory', B_nemesis: 'Buffy' },\n    { A_age: 28, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Ghosts' },\n    { A_age: 28, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Zombies' }\n];\n\nconst bench1 = [{ name: 'u2v7v', num: 1 }, { name: 'n53c8', num: 10 }, { name: 'oysce', num: 9 }, { name: '0mto2s', num: 1 }, { name: 'vkh5id', num: 4 }, { name: '5od0cf', num: 8 }, { name: 'uuulue', num: 10 }, { name: '3rgsbi', num: 9 }, { name: 'kccv35r', num: 4 }, { name: '80un74', num: 9 }, { name: 'h4pp3', num: 6 }, { name: '51bit', num: 7 }, { name: 'j9ndf', num: 8 }, { name: 'vf3u1', num: 10 }, { name: 'g0bw0om', num: 10 }, { name: 'j031x', num: 7 }, { name: 'ij3asc', num: 9 }, { name: 'byv83y', num: 8 }, { name: 'bjzp4k', num: 4 }, { name: 'f3kbnm', num: 10 }];\nconst bench2 = [{ friend: 'o8b', num: 8 }, { friend: 'ye', num: 2 }, { friend: '32i', num: 5 }, { friend: 'uz', num: 3 }, { friend: 'a5k', num: 4 }, { friend: 'uad', num: 7 }, { friend: '3w5', num: 10 }, { friend: 'vw', num: 10 }, { friend: 'ah', num: 4 }, { friend: 'qv', num: 7 }, { friend: 'ozv', num: 2 }, { friend: '9ri', num: 10 }, { friend: '7nu', num: 4 }, { friend: 'w3', num: 9 }, { friend: 'tgp', num: 8 }, { friend: 'ibs', num: 1 }, { friend: 'ss7', num: 6 }, { friend: 'g44', num: 9 }, { friend: 'tab', num: 9 }, { friend: 'zem', num: 10 }];"
        }
      },
      "name": "Hash join",
      "dashedName": "hash-join"
    },
    {
      "description": [
        "<p><a href=\"https://en.wikipedia.org/wiki/Heron's formula\" title=\"wp: Heron's formula\">Hero's formula</a> for the area of a triangle given the length of its three sides  <big> a,</big>  <big>b,</big>  and  <big>c</big>  is given by:</p><p><big>$$A = \\sqrt{s(s-a)(s-b)(s-c)},$$</big></p><p>where  <big>s</big>  is half the perimeter of the triangle; that is,</p><p><big>$$s=\\frac{a+b+c}{2}.$$</big></p>",
        "<p><a href=\"http://www.had2know.com/academics/heronian-triangles-generator-calculator.html\" title=\"link: http://www.had2know.com/academics/heronian-triangles-generator-calculator.html\">Heronian triangles</a> are triangles whose sides and area are all integers.</p>",
        "<p> An example is the triangle with sides  3, 4, 5  whose area is  6  (and whose perimeter is  12). </p>",
        "<p>Note that any triangle whose sides are all an integer multiple of  3, 4, 5;  such as  6, 8, 10,  will also be a Heronian triangle.</p><p>Define a Primitive Heronian triangle as a Heronian triangle where the greatest common divisor</p>",
        "<p>of all three sides is  1  (unity).</p><p>This will exclude, for example, triangle  6, 8, 10.</p>",
        "Task:",
        "<p>Implement a function based on Hero's formula that returns the first <code>n<sub>th</sub></code> ordered triangles in an array of arrays.</p>"
      ],
      "tests": [
        {
          "text": "<code>heronianTriangle</code> is a function.",
          "testString":
            "assert(typeof heronianTriangle === 'function', '<code>heronianTriangle</code> is a function.');"
        },
        {
          "text":
            "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]]</code>",
          "testString":
            "assert.deepEqual(heronianTriangle(testCases[0]), res[0], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]]</code>');"
        },
        {
          "text":
            "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],</code>",
          "testString":
            "assert.deepEqual(heronianTriangle(testCases[1]), res[1], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],</code>');"
        },
        {
          "text":
            "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],</code>",
          "testString":
            "assert.deepEqual(heronianTriangle(testCases[2]), res[2], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],</code>');"
        },
        {
          "text":
            "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37],[16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]</code>",
          "testString":
            "assert.deepEqual(heronianTriangle(testCases[3]), res[3], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37],[16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]</code>');"
        }
      ],
      "id": "595b98f8b5a2245e243aa831",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// noprotect\nfunction heronianTriangle (n) {\n  // Good luck!\n\n  return [];\n}",
          "head": "",
          "tail":
            "const testCases = [10, 15, 20, 25];\n\nconst res = [\n  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]],\n  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],\n  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],\n  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37], [16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]\n];"
        }
      },
      "name": "Heronian triangles",
      "dashedName": "heronian-triangles"
    },
    {
      "description": [
        "<p>These two sequences of positive integers are defined as:</p>",
        "<p><big>$$R(1)=1\\ ;\\ S(1)=2 \\\\R(n)=R(n-1)+S(n-1), \\quad n>1.$$</big></p>",
        "<p>The sequence <big>$S(n)$</big> is further defined as the sequence of positive integers not present in <big>$R(n)$</big>.</p><p>Sequence <big>$R$</big> starts:</p>",
        "<p>1, 3, 7, 12, 18, ...</p>",
        "<p>Sequence <big>$S$</big> starts:</p>",
        "<p>2, 4, 5, 6, 8, ...</p>",
        "Task:",
        "Create two functions named ffr and ffs that when given n return R(n) or S(n) respectively.(Note that R(1) = 1 and S(1) = 2 to avoid off-by-one errors).",
        "No maximum value for n should be assumed.",
        "Sloane's <a href=\"http://oeis.org/A005228\" title=\"link: http://oeis.org/A005228\">A005228</a> and <a href=\"http://oeis.org/A030124\" title=\"link: http://oeis.org/A030124\">A030124</a>.",
        "<a href=\"http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html\" title=\"link: http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html\">Wolfram MathWorld</a>",
        "Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Figure-Figure_sequences\" title=\"wp: Hofstadter_sequence#Hofstadter_Figure-Figure_sequences\">Hofstadter Figure-Figure sequences</a>."
      ],
      "tests": [
        {
          "text": "<code>ffr</code> is a function.",
          "testString":
            "assert(typeof ffr === 'function', '<code>ffr</code> is a function.');"
        },
        {
          "text": "<code>ffs</code> is a function.",
          "testString":
            "assert(typeof ffs === 'function', '<code>ffs</code> is a function.');"
        },
        {
          "text": "<code>ffr</code> should return integer.",
          "testString":
            "assert(Number.isInteger(ffr(1)), '<code>ffr</code> should return integer.');"
        },
        {
          "text": "<code>ffs</code> should return integer.",
          "testString":
            "assert(Number.isInteger(ffs(1)), '<code>ffs</code> should return integer.');"
        },
        {
          "text": "<code>ffr()</code> should return <code>69</code>",
          "testString":
            "assert.equal(ffr(ffrParamRes[0][0]), ffrParamRes[0][1], '<code>ffr()</code> should return <code>69</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>1509</code>",
          "testString":
            "assert.equal(ffr(ffrParamRes[1][0]), ffrParamRes[1][1], '<code>ffr()</code> should return <code>1509</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>5764</code>",
          "testString":
            "assert.equal(ffr(ffrParamRes[2][0]), ffrParamRes[2][1], '<code>ffr()</code> should return <code>5764</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>526334</code>",
          "testString":
            "assert.equal(ffr(ffrParamRes[3][0]), ffrParamRes[3][1], '<code>ffr()</code> should return <code>526334</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>14</code>",
          "testString":
            "assert.equal(ffs(ffsParamRes[0][0]), ffsParamRes[0][1], '<code>ffs()</code> should return <code>14</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>59</code>",
          "testString":
            "assert.equal(ffs(ffsParamRes[1][0]), ffsParamRes[1][1], '<code>ffs()</code> should return <code>59</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>112</code>",
          "testString":
            "assert.equal(ffs(ffsParamRes[2][0]), ffsParamRes[2][1], '<code>ffs()</code> should return <code>112</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>1041</code>",
          "testString":
            "assert.equal(ffs(ffsParamRes[3][0]), ffsParamRes[3][1], '<code>ffs()</code> should return <code>1041</code>');"
        }
      ],
      "id": "59622f89e4e137560018a40e",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// noprotect\nfunction ffr(n) {\n  return n;\n}\n\nfunction ffs(n) {\n  return n;\n}",
          "head": "",
          "tail":
            "const ffrParamRes = [[10, 69], [50, 1509], [100, 5764], [1000, 526334]];\nconst ffsParamRes = [[10, 14], [50, 59], [100, 112], [1000, 1041]];\n"
        }
      },
      "name": "Hofstadter FigureFigure sequences",
      "dashedName": "hofstadter-figurefigure-sequences"
    },
    {
      "description": [
        "<p>The <a href=\"https://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Q_sequence\" title=\"wp: Hofstadter_sequence#Hofstadter_Q_sequence\">Hofstadter Q sequence</a> is defined as:</p>",
        "<p>$Q(1)=Q(2)=1, \\\\ Q(n)=Q\\big(n-Q(n-1)\\big)+Q\\big(n-Q(n-2)), \\quad n>2.$</p>",
        "<p>It is defined like the <a href=\"http://rosettacode.org/wiki/Fibonacci sequence\" title=\"Fibonacci sequence\">Fibonacci sequence</a>, but whereas the next term in the Fibonacci sequence is the sum of the previous two terms, in the Q sequence the previous two terms tell you how far to go back in the Q sequence to find the two numbers to sum to make the next term of the sequence.</p>",
        "Task:",
        "Implement the Hofstadter Q Sequence equation into JavaScript"
      ],
      "tests": [
        {
          "text": "<code>hofstadterQ</code> is a function.",
          "testString":
            "assert(typeof hofstadterQ === 'function', '<code>hofstadterQ</code> is a function.');"
        },
        {
          "text":
            "<code>hofstadterQ()</code> should return <code>integer</code>",
          "testString":
            "assert(Number.isInteger(hofstadterQ(1000)), '<code>hofstadterQ()</code> should return <code>integer</code>');"
        },
        {
          "text":
            "<code>hofstadterQ(1000)</code> should return <code>502</code>",
          "testString":
            "assert.equal(hofstadterQ(testCase[0]), res[0], '<code>hofstadterQ(1000)</code> should return <code>502</code>');"
        },
        {
          "text":
            "<code>hofstadterQ(1500)</code> should return <code>755</code>",
          "testString":
            "assert.equal(hofstadterQ(testCase[1]), res[1], '<code>hofstadterQ(1500)</code> should return <code>755</code>');"
        },
        {
          "text":
            "<code>hofstadterQ(2000)</code> should return <code>1005</code>",
          "testString":
            "assert.equal(hofstadterQ(testCase[2]), res[2], '<code>hofstadterQ(2000)</code> should return <code>1005</code>');"
        },
        {
          "text":
            "<code>hofstadterQ(2500)</code> should return <code>1261</code>",
          "testString":
            "assert.equal(hofstadterQ(testCase[3]), res[3], '<code>hofstadterQ(2500)</code> should return <code>1261</code>');"
        }
      ],
      "id": "59637c4d89f6786115efd814",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function hofstadterQ (n) {\n  // Good luck!\n  return n;\n}",
          "head": "",
          "tail":
            "const testCase = [1000, 1500, 2000, 2500];\nconst res = [502, 755, 1005, 1261];"
        }
      },
      "name": "Hofstadter Q sequence",
      "dashedName": "hofstadter-q-sequence"
    },
    {
      "description": [
        "<div class=\"rosetta\"><p class=\"rosetta__paragraph\">Implement one algorithm (or more) to compute the <a class=\"rosetta__link--wiki\" href=\"https://en.wikipedia.org/wiki/Gamma function\" title=\"wp: Gamma function\">Gamma</a> ($\\Gamma$) function (in the real field only).</p><p class=\"rosetta__paragraph\">The Gamma function can be defined as:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\">::::: <big><big> $\\Gamma(x) = \\displaystyle\\int_0^\\infty t^{x-1}e^{-t} dt$</big></big></span></p></div>"
      ],
      "tests": [
        {
          "text": "<code>gamma</code> should be a function.",
          "testString":
            "assert(typeof gamma=='function','<code>gamma</code> should be a function.')"
        },
        {
          "text": "<code>gamma('+tests[0]+')</code> should return a number.",
          "testString":
            "assert(typeof gamma(tests[0])=='number','<code>gamma('+tests[0]+')</code> should return a number.')"
        },
        {
          "text":
            "<code>gamma('+tests[0]+')</code> should return <code>'+results[0]+'</code>.",
          "testString":
            "assert.equal(gamma(tests[0]),results[0],'<code>gamma('+tests[0]+')</code> should return <code>'+results[0]+'</code>.')"
        },
        {
          "text":
            "<code>gamma('+tests[1]+')</code> should return <code>'+results[1]+'</code>.",
          "testString":
            "assert.equal(gamma(tests[1]),results[1],'<code>gamma('+tests[1]+')</code> should return <code>'+results[1]+'</code>.')"
        },
        {
          "text":
            "<code>gamma('+tests[2]+')</code> should return <code>'+results[2]+'</code>.",
          "testString":
            "assert.equal(gamma(tests[2]),results[2],'<code>gamma('+tests[2]+')</code> should return <code>'+results[2]+'</code>.')"
        },
        {
          "text":
            "<code>gamma('+tests[3]+')</code> should return <code>'+results[3]+'</code>.",
          "testString":
            "assert.equal(gamma(tests[3]),results[3],'<code>gamma('+tests[3]+')</code> should return <code>'+results[3]+'</code>.')"
        },
        {
          "text":
            "<code>gamma('+tests[4]+')</code> should return <code>'+results[4]+'</code>.",
          "testString":
            "assert.equal(gamma(tests[4]),results[4],'<code>gamma('+tests[4]+')</code> should return <code>'+results[4]+'</code>.')"
        }
      ],
      "id": "5a23c84252665b21eecc7e76",
      "challengeType": 3,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function gaussianElimination (A,b) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "let tests=[.1,.2,.3,.4,.5];\nlet results=[\n  9.513507698668736,\n  4.590843711998803,\n  2.9915689876875904,\n  2.218159543757687,\n  1.7724538509055159\n];"
        }
      },
      "name": "Gamma function",
      "dashedName": "gamma-function"
    },
    {
      "description": [
        " <p>",
        "   Five sailors are shipwrecked on an island and",
        "   collect a large pile of coconuts during the day.",
        " </p>",
        " <p>That night the first sailor wakes up and decides",
        "   to take his first share early  so tries to divide the pile of coconuts equally",
        "   into five piles but finds that there is one coconut left over, so he tosses it",
        "   to a monkey and then hides \"his\" one of the five equally sized piles of",
        "   coconuts and pushes the other four piles together to form a single visible pile",
        "   of coconuts again and goes to bed.",
        " </p>",
        " <p>",
        "   To cut a long story short, each of the sailors in",
        "   turn gets up once during the night and performs the same actions of dividing",
        "   the coconut pile into five, finding that one coconut is left over and giving",
        "   that single remainder coconut to the monkey.",
        " </p>",
        " <p>",
        "   In the morning (after the surreptitious and",
        "   separate action of each of the five sailors during the night), the remaining",
        "   coconuts are divided into five equal piles for each of the sailors, whereupon",
        "   it is found that the pile of coconuts divides equally amongst the sailors with",
        "   no remainder. (Nothing for the monkey in the morning.)",
        " </p>",
        "",
        " The task:",
        "",
        "",
        "     Create a function that returns the",
        "     the minimum possible size",
        "     of the initial pile of coconuts collected during the day for N",
        "     sailors.",
        "",
        "",
        " Note:",
        "",
        "",
        "     Of course the tale is told in a",
        "     world where the collection of any amount of coconuts in a day and multiple",
        "     divisions of the pile, etc can occur in time fitting the story line, so as",
        "     not to affect the mathematics.",
        "",
        "",
        "",
        " C.f:",
        "",
        "   <a",
        "       href=\"https://www.youtube.com/watch?v=U9qU20VmvaU\" title=\"link: https://www.youtube.com/watch?v=U9qU20VmvaU\">",
        "       Monkeys and Coconuts - Numberphile</a> (Video) Analytical solution.",
        "",
        "",
        "     <a",
        "       href=\"http://oeis.org/A002021\" title=\"link: http://oeis.org/A002021\">A002021 Pile of coconuts problem</a> The On-Line",
        "     Encyclopedia of Integer Sequences. (Although some of its references may use",
        "     the alternate form of the tale).",
        "",
        "",
        ""
      ],
      "tests": [
        {
          "text": "<code>splitCoconuts</code> is a function.",
          "testString":
            "assert(typeof splitCoconuts === 'function', '<code>splitCoconuts</code> is a function.');"
        },
        {
          "text": "<code>splitCoconuts(5)</code> should return 3121.",
          "testString":
            "assert(splitCoconuts(5) === 3121, '<code>splitCoconuts(5)</code> should return 3121.');"
        },
        {
          "text": "<code>splitCoconuts(6)</code> should return 233275.",
          "testString":
            "assert(splitCoconuts(6) === 233275, '<code>splitCoconuts(6)</code> should return 233275.');"
        },
        {
          "text": "<code>splitCoconuts(7)</code> should return 823537.",
          "testString":
            "assert(splitCoconuts(7) === 823537, '<code>splitCoconuts(7)</code> should return 823537.');"
        }
      ],
      "id": "59da22823d04c95919d46269",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "// noprotect\nfunction splitCoconuts(intSailors) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Sailors coconuts and a monkey problem",
      "dashedName": "sailors-coconuts-and-a-monkey-problem"
    },
    {
      "description": [
        "    Task:",
        "",
        "  <p>",
        "    For each number list of 6-digit ",
        "    <a href=\"https://en.wikipedia.org/wiki/SEDOL\" title=\"wp: SEDOL\">SEDOL</a>s,",
        "    calculate and append the checksum digit.",
        "  </p>",
        "",
        "  <p>",
        "    That is, given the input string on the left, your function should return the",
        "    corresponding string on the right:",
        "  </p>",
        "",
        "    <pre>",
        "     710889 => 7108899",
        "     B0YBKJ => B0YBKJ7",
        "     406566 => 4065663",
        "     B0YBLH => B0YBLH2",
        "     228276 => 2282765",
        "     B0YBKL => B0YBKL9",
        "     557910 => 5579107",
        "     B0YBKR => B0YBKR5",
        "     585284 => 5852842",
        "     B0YBKT => B0YBKT7",
        "     B00030 => B000300",
        "    </pre>",
        "",
        "  <p>",
        "    Check also that each input is correctly formed, especially",
        "    with respect to valid characters allowed in a SEDOL string. Your function",
        "    should return <code>null</code> on invalid input.",
        "  </p>"
      ],
      "tests": [
        {
          "text": "<code>sedol</code> is a function.",
          "testString":
            "assert(typeof sedol === 'function', '<code>sedol</code> is a function.');"
        },
        {
          "text": "<code>sedol('a')</code> should return null.\")",
          "testString":
            "assert(sedol('a') === null, \"<code>sedol('a')</code> should return null.\");"
        },
        {
          "text": "<code>sedol('710889')</code> should return '7108899'.\")",
          "testString":
            "assert(sedol('710889') === '7108899', \"<code>sedol('710889')</code> should return '7108899'.\");"
        },
        {
          "text": "<code>sedol('BOATER')</code> should return null.\")",
          "testString":
            "assert(sedol('BOATER') === null, \"<code>sedol('BOATER')</code> should return null.\");"
        },
        {
          "text": "<code>sedol('228276')</code> should return '2282765'.\")",
          "testString":
            "assert(sedol('228276') === '2282765', \"<code>sedol('228276')</code> should return '2282765'.\");"
        }
      ],
      "id": "59d9c6bc214c613ba73ff012",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function sedol (input) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "SEDOLs",
      "dashedName": "sedols"
    },
    {
      "description": [
        "<p>",
        "<a href=\"https://en.wikipedia.org/wiki/S-Expression\" title=\"wp: S-Expression\">S-Expressions</a> are one convenient way to parse and store data.",
        "</p>",
        "Task:",
        "<p>",
        "    Write a simple reader/parser for S-Expressions that handles quoted and unquoted strings, integers and floats.",
        "</p>",
        "<p>",
        "The function should read a single but nested S-Expression from a string and",
        "return it as a (nested) array.",
        "</p>",
        "<p>",
        "    Newlines and other whitespace may be ignored unless contained within a quoted string.",
        "</p>",
        "<p>“<tt>()</tt>”  inside quoted strings are not interpreted, but treated as part of the string.",
        "</p>",
        "<p>",
        "Handling escaped quotes inside a string is optional;  thus “<tt>(foo\"bar)</tt>” maybe treated as a string “<tt>foo\"bar</tt>”, or as an error.",
        "</p>",
        "<p>",
        "For this, the reader need not recognize “<tt>\\</tt>” for escaping, but should, in addition, recognize numbers if the language has appropriate datatypes.",
        "</p>",
        "<p>",
        "Note that with the exception of “<tt>()\"</tt>” (“<tt>\\</tt>” if escaping is supported) and whitespace there are no special characters. Anything else is allowed without quotes.",
        "</p>",
        "<p>The reader should be able to read the following input</p>",
        "<p>",
        "<pre>",
        "    ((data \"quoted data\" 123 4.5)",
        "    (data (!@# (4.5) \"(more\" \"data)\")))",
        "</pre>",
        "</p>",
        "<p>",
        "and turn it into a native datastructure. (see the",
        "<a href=\"http://rosettacode.org/wiki/#Pike\" title=\"#Pike\">Pike</a>, ",
        "<a href=\"http://rosettacode.org/wiki/#Python\" title=\"#Python\">Python</a> and",
        "<a href=\"http://rosettacode.org/wiki/#Ruby\" title=\"#Ruby\">Ruby</a> implementations",
        "for examples of native data structures.)",
        "</p>"
      ],
      "tests": [
        {
          "text": "<code>parseSexpr</code> is a function.",
          "testString":
            "assert(typeof parseSexpr === 'function', '<code>parseSexpr</code> is a function.');"
        },
        {
          "text":
            "<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\")",
          "testString":
            "assert.deepEqual(parseSexpr(simpleSExpr), simpleSolution, \"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\");"
        },
        {
          "text":
            "<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\")",
          "testString":
            "assert.deepEqual(parseSexpr(basicSExpr), basicSolution, \"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\");"
        }
      ],
      "id": "59667989bf71cf555dd5d2ff",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function parseSexpr(str) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const simpleSExpr = '(data1 data2 data3)';\nconst simpleSolution = ['data1', 'data2', 'data3'];\n\nconst basicSExpr = '((data \"quoted data\" 123 4.5) (data (!@# (4.5) \"(more\" \"data)\")))';\nconst basicSolution = [[\"data\",\"\\\"quoted data\\\"\",123,4.5],[\"data\",[\"!@#\",[4.5],\"\\\"(more\\\"\",\"\\\"data)\\\"\"]]];"
        }
      },
      "name": "SExpressions",
      "dashedName": "sexpressions"
    },
    {
      "description": [
        "A &nbsp; <a href=\"https://en.wikipedia.org/wiki/Hardy–Ramanujan number\" title=\"wp: Hardy–Ramanujan number\">taxicab number</a>",
        "&nbsp; (the definition that is being used here) &nbsp; is a positive integer that can be expressed as the sum of two positive cubes in more than one way.",
        "The first taxicab number is &nbsp; 1729, &nbsp; which is:",
        "1<sup>3</sup> &nbsp; + &nbsp; 12<sup>3</sup> &nbsp; &nbsp; &nbsp; and",
        "9<sup>3</sup> &nbsp; + &nbsp; 10<sup>3</sup>.",
        "Taxicab numbers are also known as:",
        "  * &nbsp; taxi numbers",
        "  * &nbsp; taxi-cab numbers",
        "  * &nbsp; taxi cab numbers",
        "  * &nbsp; Hardy-Ramanujan numbers",
        "Task:",
        "Write a function that returns the lowest N taxicab numbers.",
        "For each of the taxicab numbers, show the number as well as it's constituent cubes.",
        "See also:",
        "[http://oeis.org/A001235 A001235 taxicab numbers] on The On-Line Encyclopedia of Integer Sequences.",
        "  <a href=\"http://mathworld.wolfram.com/Hardy-RamanujanNumber.html\">Hardy-Ramanujan Number</a> on MathWorld.",
        "  <a href=\"http://mathworld.wolfram.com/TaxicabNumber.html\">taxicab number</a> on MathWorld.",
        "  <a href=\"https://en.wikipedia.org/wiki/Taxicab_number\">taxicab number</a> on Wikipedia."
      ],
      "tests": [
        {
          "text": "<code>taxicabNumbers </code> is a function.",
          "testString":
            "assert(typeof taxicabNumbers === 'function', '<code>taxicabNumbers </code> is a function.');"
        },
        {
          "text": "<code>taxicabNumbers </code> should return an array.",
          "testString":
            "assert(typeof taxicabNumbers(2) === 'object', '<code>taxicabNumbers </code> should return an array.');"
        },
        {
          "text":
            "<code>taxicabNumbers </code> should return an array of numbers.",
          "testString":
            "assert(typeof taxicabNumbers(100)[0] === 'number', '<code>taxicabNumbers </code> should return an array of numbers.');"
        },
        {
          "text":
            "<code>taxicabNumbers(4) </code> must return [1729, 4104, 13832, 20683].",
          "testString":
            "assert.deepEqual(taxicabNumbers(4), res4, '<code>taxicabNumbers(4) </code> must return [1729, 4104, 13832, 20683].');"
        },
        {
          "text":
            "taxicabNumbers(25) should return [1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656, 110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763, 373464, 402597]",
          "testString":
            "assert.deepEqual(taxicabNumbers(25), res25, 'taxicabNumbers(25) should return [1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656, 110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763, 373464, 402597]');"
        },
        {
          "text":
            "taxicabNumbers(39) resulting numbers from 20 - 29 should be [314496,320264,327763,373464,402597,439101,443889,513000,513856].",
          "testString":
            "assert.deepEqual(taxicabNumbers(39).slice(20, 29), res39From20To29, 'taxicabNumbers(39) resulting numbers from 20 - 29 should be [314496,320264,327763,373464,402597,439101,443889,513000,513856].');"
        }
      ],
      "id": "594ecc0d9a8cf816e3340187",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function taxicabNumbers (n) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const res4 = [1729, 4104, 13832, 20683];\nconst res25 = [\n  1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656,\n  110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763,\n  373464, 402597\n];\n\nconst res39From20To29 = [314496, 320264, 327763, 373464, 402597, 439101, 443889, 513000, 513856];"
        }
      },
      "name": "Taxicab numbers",
      "dashedName": "taxicab-numbers"
    },
    {
      "description": [
        "<p>",
        "Write a function or program that can split a string at each non-escaped occurrence of a separator character.",
        "</p>",
        "<p>",
        "It should accept three input parameters:",
        "</p>",
        "  The <b>string</b>",
        "  The <b>separator character</b>",
        "  The <b>escape character</b>",
        "<p>It should output a list of strings.</p>",
        "<p>Rules for splitting:</p>",
        "  The fields that were separated by the separators, become the elements of the output list.",
        "  Empty fields should be preserved, even at the start and end.",
        "<p>Rules for escaping:</p>",
        "  \"Escaped\" means preceded by an occurrence of the escape character that is not already escaped itself.",
        "  When the escape character precedes a character that has no special meaning, it still counts as an escape (but does not do anything special).",
        "  Each occurrences of the escape character that was used to escape something, should not become part of the output.",
        "<p>Demonstrate that your function satisfies the following test-case:",
        "  Given string <pre>one^|uno||three^^^^|four^^^|^cuatro|</pre> and using",
        "  <pre>|</pre> as a separator and <pre>^</pre> as escape character, your",
        "  function should output the following array:",
        "</p>",
        "  <pre>",
        "  ['one|uno', '', 'three^^', 'four^|quatro', '']",
        "  </pre>"
      ],
      "tests": [
        {
          "text": "<code>tokenize</code> is a function.",
          "testString":
            "assert(typeof tokenize === 'function', '<code>tokenize</code> is a function.');"
        },
        {
          "text": "<code>tokenize</code> should return an array.",
          "testString":
            "assert(typeof tokenize('a', 'b', 'c') === 'object', '<code>tokenize</code> should return an array.');"
        },
        {
          "text":
            "<code>tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^') </code> should return ['one|uno', '', 'three^^', 'four^|cuatro', '']\")",
          "testString":
            "assert.deepEqual(tokenize(testStr1, '|', '^'), res1, \"<code>tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^') </code> should return ['one|uno', '', 'three^^', 'four^|cuatro', '']\");"
        },
        {
          "text":
            "<code>tokenize('a@&bcd&ef&&@@hi', '&', '@')</code> should return <code>['a&bcd', 'ef', '', '@hi']</code>",
          "testString":
            "assert.deepEqual(tokenize(testStr2, '&', '@'), res2, '<code>tokenize(\"a@&bcd&ef&&@@hi\", \"&\", \"@\")</code> should return <code>[\"a&bcd\", \"ef\", \"\", \"@hi\"]</code>');"
        }
      ],
      "id": "594faaab4e2a8626833e9c3d",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function tokenize(str, esc, sep) {\n  return true;\n}",
          "head": "",
          "tail":
            "const testStr1 = 'one^|uno||three^^^^|four^^^|^cuatro|';\nconst res1 = ['one|uno', '', 'three^^', 'four^|cuatro', ''];\n\n// TODO add more tests\nconst testStr2 = 'a@&bcd&ef&&@@hi';\nconst res2 = ['a&bcd', 'ef', '', '@hi'];"
        }
      },
      "name": "Tokenize a string with escaping",
      "dashedName": "tokenize-a-string-with-escaping"
    },
    {
      "description": [
        "<p>",
        "Given a mapping between items, and items they depend on, a ",
        "<a href=\"https://en.wikipedia.org/wiki/Topological sorting\" title=\"wp: Topological sorting\">topological sort</a> orders ",
        "items so that no item precedes an item it depends upon.",
        "</p>",
        "<p>",
        "The compiling of a library in the ",
        "<a href=\"https://en.wikipedia.org/wiki/VHDL\" title=\"wp: VHDL\">VHDL</a> language",
        "has the constraint that a library must be compiled after any library it depends on.",
        "</p>",
        "Task:",
        "<p>",
        "Write a function that will return a valid compile order of VHDL libraries from their dependencies.",
        "</p>",
        "  Assume library names are single words. ",
        "  Items mentioned as only dependents have no dependents of their own, but their order of compiling must be given.",
        "  Any self dependencies should be ignored. ",
        "  Any un-orderable dependencies should be ignored.",
        "<p>Use the following data as an example:</p>",
        "<pre>",
        "LIBRARY          LIBRARY DEPENDENCIES",
        "=======          ====================",
        "des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee",
        "dw01             ieee dw01 dware gtech",
        "dw02             ieee dw02 dware",
        "dw03             std synopsys dware dw03 dw02 dw01 ieee gtech",
        "dw04             dw04 ieee dw01 dware gtech",
        "dw05             dw05 ieee dware",
        "dw06             dw06 ieee dware",
        "dw07             ieee dware",
        "dware            ieee dware",
        "gtech            ieee gtech",
        "ramlib           std ieee",
        "std_cell_lib     ieee std_cell_lib",
        "synopsys",
        "</pre>",
        "<p>",
        "<small>Note: the above data would be un-orderable if, for example, <code>dw04</code> is added to the list of dependencies of <code>dw01</code>.</small>",
        "</p>",
        "C.f.:",
        "",
        "    <a href=\"http://rosettacode.org/wiki/Topological sort/Extracted top item\" title=\"Topological sort/Extracted top item\">Topological sort/Extracted top item</a>.",
        "",
        "<p>There are two popular algorithms for topological sorting:</p>",
        "<p>",
        "  Kahn's 1962 topological sort, and depth-first search:",
        "  <a href=\"https://en.wikipedia.org/wiki/Topological sorting\" title=\"wp: Topological sorting\">topological sort</a>",
        "</p>",
        "<p>",
        "  Jason Sachs:",
        "  <a href=\"http://www.embeddedrelated.com/showarticle/799.php\" title=\"link: http://www.embeddedrelated.com/showarticle/799.php\">",
        "  \"Ten little algorithms, part 4: topological sort\"",
        "  </a>.",
        "</p>"
      ],
      "tests": [
        {
          "text": "<code>topologicalSort</code> is a function.",
          "testString":
            "assert(typeof topologicalSort === 'function', '<code>topologicalSort</code> is a function.');"
        },
        {
          "text":
            "<code>topologicalSort</code> must return correct library order..",
          "testString":
            "assert.deepEqual(topologicalSort(libsSimple), ['bbb', 'aaa'], '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text":
            "<code>topologicalSort</code> must return correct library order..",
          "testString":
            "assert.deepEqual(topologicalSort(libsVHDL), solutionVHDL, '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text":
            "<code>topologicalSort</code> must return correct library order..",
          "testString":
            "assert.deepEqual(topologicalSort(libsCustom), solutionCustom, '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text":
            "<code>topologicalSort</code> must ignore unorderable dependencies..",
          "testString":
            "assert.deepEqual(topologicalSort(libsUnorderable), solutionUnorderable, '<code>topologicalSort</code> must ignore unorderable dependencies..');"
        }
      ],
      "id": "594fa2746886f41f7d8bf225",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function topologicalSort(libs) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const libsSimple =\n  `aaa bbb\n  bbb`;\n\nconst libsVHDL =\n  `des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee\n  dw01             ieee dw01 dware gtech\n  dw02             ieee dw02 dware\n  dw03             std synopsys dware dw03 dw02 dw01 ieee gtech\n  dw04             dw04 ieee dw01 dware gtech\n  dw05             dw05 ieee dware\n  dw06             dw06 ieee dware\n  dw07             ieee dware\n  dware            ieee dware\n  gtech            ieee gtech\n  ramlib           std ieee\n  std_cell_lib     ieee std_cell_lib\n  synopsys`;\n\nconst solutionVHDL = [\n  'ieee', 'std_cell_lib', 'gtech', 'dware', 'dw07', 'dw06',\n  'dw05', 'dw02', 'dw01', 'dw04', 'std', 'ramlib', 'synopsys',\n  'dw03', 'des_system_lib'\n];\n\nconst libsCustom =\n  `a b c d\n  b c d\n  d c\n  c base\n  base`;\nconst solutionCustom = ['base', 'c', 'd', 'b', 'a'];\n\nconst libsUnorderable =\n  `TestLib Base MainLib\n  MainLib TestLib\n  Base`;\n\nconst solutionUnorderable = ['Base'];"
        }
      },
      "name": "Topological sort",
      "dashedName": "topological-sort"
    },
    {
      "description": [
        "Task:",
        "<p>Find the top N ranked data in each group, where N  is provided as a parameter. Name of the rank and the group are also provided as parameter.</p>",
        "Given the following data:",
        "<pre>",
        "[",
        "  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },",
        "  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },",
        "  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },",
        "  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },",
        "  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },",
        "  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },",
        "  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },",
        "  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },",
        "  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },",
        "  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },",
        "  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },",
        "  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },",
        "  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }",
        "];",
        "</pre>",
        "one could rank top 10 employees in each department by calling",
        "<code>topRankPerGroup(10, data, 'dept', 'salary')</code>",
        "Given the following data:",
        "<pre>",
        "[",
        "  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },",
        "  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },",
        "  { name: 'Titanic', genre: 'drama', rating: 7.3 },",
        "  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },",
        "  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }",
        "];",
        "</pre>",
        "one could rank the top-rated movie in each genre by calling",
        "<code>topRankPerGroup(1, data, 'genre', 'rating')</code>"
      ],
      "tests": [
        {
          "text": "<code>topRankPerGroup</code> is a function.",
          "testString":
            "assert(typeof topRankPerGroup === 'function', '<code>topRankPerGroup</code> is a function.');"
        },
        {
          "text":
            "<code>topRankPerGroup</code> returns undefined on negative n values.",
          "testString":
            "assert(typeof topRankPerGroup(-1, []) === 'undefined', '<code>topRankPerGroup</code> returns undefined on negative n values.');"
        },
        {
          "text": "First department must be D050",
          "testString":
            "assert.equal(res1[0][0].dept, 'D050', 'First department must be D050');"
        },
        {
          "text": "First department must be D050",
          "testString":
            "assert.equal(res1[0][1].salary, 21900, 'First department must be D050');"
        },
        {
          "text": "The last department must be D202",
          "testString":
            "assert.equal(res1[3][3].dept, 'D202', 'The last department must be D202');"
        },
        {
          "text":
            "<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.",
          "testString":
            "assert.equal(res2[2].length, 1, '<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.');"
        },
        {
          "text":
            "<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.",
          "testString":
            "assert.equal(res3[2][1].name, 'Maze Runner', '<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.');"
        }
      ],
      "id": "595011cba5a81735713873bd",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function topRankPerGroup(n, data, groupName, rankName) {\n  // Good luck!\n  return true;\n}",
          "head": "",
          "tail":
            "const testData1 = [\n  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },\n  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },\n  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },\n  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },\n  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },\n  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },\n  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }\n];\n\nconst res1 = topRankPerGroup(10, testData1, 'dept', 'salary');\n\nconst testData2 = [\n  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },\n  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },\n  { name: 'Titanic', genre: 'drama', rating: 7.3 },\n  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },\n  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }\n];\n\nconst res2 = topRankPerGroup(1, testData2, 'genre', 'rating');\nconst res3 = topRankPerGroup(2, testData2, 'genre', 'rating');\n\n//console.log(JSON.stringify(topRankPerGroup(10, testData1)));"
        }
      },
      "name": "Top rank per group",
      "dashedName": "top-rank-per-group"
    },
    {
      "description": [
        "    Task:",
        "<p>Solve the <a href=\"https://en.wikipedia.org/wiki/Towers_of_Hanoi\" title=\"wp: Towers_of_Hanoi\">Towers of Hanoi</a>  problem.</p>",
        "<p>",
        "Your solution should accept the number of discs as the first parameters, and",
        "three string used to identify each of the three stacks of discs, for example",
        "<code>towerOfHanoi(4, 'A', 'B', 'C')</code>. The function should return an",
        "array of arrays containing the list of moves, source -> destination. For",
        "example, the array <code>[['A', 'C'], ['B', 'A']]</code> indicates that the",
        "1st move was to move a disc from stack A to C, and the 2nd move was to move a",
        "disc from stack B to A.",
        "</p>"
      ],
      "tests": [
        {
          "text": "<code>towerOfHanoi</code> is a function.",
          "testString":
            "assert(typeof towerOfHanoi === 'function', '<code>towerOfHanoi</code> is a function.');"
        },
        {
          "text": "<code>towerOfHanoi(3, ...)</code> should return 7 moves.",
          "testString":
            "assert(res3.length === 7, '<code>towerOfHanoi(3, ...)</code> should return 7 moves.');"
        },
        {
          "text":
            "<code>towerOfHanoi(3, 'A', 'B', 'C')</code> should return [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B']].\")",
          "testString":
            "assert.deepEqual(towerOfHanoi(3, 'A', 'B', 'C'), res3Moves, \"<code>towerOfHanoi(3, 'A', 'B', 'C')</code> should return [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B']].\");"
        },
        {
          "text":
            "<code>towerOfHanoi(5, \"X\", \"Y\", \"Z\")</code> 10th move should be Y -> X.",
          "testString":
            "assert.deepEqual(res5[9], ['Y', 'X'], '<code>towerOfHanoi(5, \"X\", \"Y\", \"Z\")</code> 10th move should be Y -> X.');"
        },
        {
          "text":
            "<code>towerOfHanoi(7, 'A', 'B', 'C')</code> first ten moves are [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B'],['A','C'],['B','C'],['B','A']].\")",
          "testString":
            "assert.deepEqual(towerOfHanoi(7, 'A', 'B', 'C').slice(0, 10), res7First10Moves, \"<code>towerOfHanoi(7, 'A', 'B', 'C')</code> first ten moves are [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B'],['A','C'],['B','C'],['B','A']].\");"
        }
      ],
      "id": "5951ed8945deab770972ae56",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function towerOfHanoi (n, a, b, c) {\n  // Good luck!\n  return [[]];\n}",
          "head": "",
          "tail":
            "const res3 = towerOfHanoi(3, 'A', 'B', 'C');\nconst res3Moves = [['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B'], ['C', 'A'], ['C', 'B'], ['A', 'B']];\nconst res5 = towerOfHanoi(5, 'X', 'Y', 'Z');\nconst res7First10Moves = [['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B'], ['C', 'A'], ['C', 'B'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['B', 'A']];"
        }
      },
      "name": "Towers of Hanoi",
      "dashedName": "towers-of-hanoi"
    },
    {
      "description": [
        "A vector is defined as having three dimensions as being represented by an ordered collection of three numbers: &nbsp; (X, Y, Z).",
        "<p>",
        "Task:",
        "",
        "    Write a function that takes two vectors (arrays) as input and computes their cross product.",
        "",
        "Your function should return <code>null</code> on",
        "invalid inputs (ie vectors of different lengths).",
        "</p>"
      ],
      "tests": [
        {
          "text": "dotProduct must be a function",
          "testString":
            "assert.equal(typeof crossProduct, 'function', 'dotProduct must be a function');"
        },
        {
          "text": "dotProduct() must return null",
          "testString":
            "assert.equal(crossProduct(), null, 'dotProduct() must return null');"
        },
        {
          "text": "crossProduct([1, 2, 3], [4, 5, 6]) must return [-3, 6, -3].",
          "testString":
            "assert.deepEqual(res12, exp12, 'crossProduct([1, 2, 3], [4, 5, 6]) must return [-3, 6, -3].');"
        }
      ],
      "id": "594810f028c0303b75339ad2",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function crossProduct() {\n    // Good luck!\n}",
          "head": "",
          "tail":
            "const tv1 = [1, 2, 3];\nconst tv2 = [4, 5, 6];\nconst res12 = crossProduct(tv1, tv2);\nconst exp12 = [-3, 6, -3];"
        }
      },
      "name": "Vector cross product",
      "dashedName": "vector-cross-product"
    },
    {
      "description": [
        "<p>",
        "A vector is defined as having three dimensions as being represented by an ordered collection of three numbers: &nbsp; (X, Y, Z).",
        "</p>",
        "<p>",
        "Task:",
        "",
        "    Write a function that takes any numbers of vectors (arrays) as input and computes their dot product.",
        "",
        "Your function should return <code>null</code> on",
        "invalid inputs (ie vectors of different lengths).",
        "</p>"
      ],
      "tests": [
        {
          "text": "dotProduct must be a function",
          "testString":
            "assert.equal(typeof dotProduct, 'function', 'dotProduct must be a function');"
        },
        {
          "text": "dotProduct() must return null",
          "testString":
            "assert.equal(dotProduct(), null, 'dotProduct() must return null');"
        },
        {
          "text": "dotProduct([[1], [1]]) must return 1.",
          "testString":
            "assert.equal(dotProduct([1], [1]), 1, 'dotProduct([[1], [1]]) must return 1.');"
        },
        {
          "text": "dotProduct([[1], [1, 2]]) must return null.",
          "testString":
            "assert.equal(dotProduct([1], [1, 2]), null, 'dotProduct([[1], [1, 2]]) must return null.');"
        },
        {
          "text": "dotProduct([1, 3, -5], [4, -2, -1]) must return 3.",
          "testString":
            "assert.equal(dotProduct([1, 3, -5], [4, -2, -1]), 3, 'dotProduct([1, 3, -5], [4, -2, -1]) must return 3.');"
        },
        {
          "text": "<code>dotProduct(...nVectors)</code> should return 156000",
          "testString":
            "assert.equal(dotProduct([ 0, 1, 2, 3, 4 ], [ 0, 2, 4, 6, 8 ], [ 0, 3, 6, 9, 12 ], [ 0, 4, 8, 12, 16 ], [ 0, 5, 10, 15, 20 ]), 156000, '<code>dotProduct(...nVectors)</code> should return 156000');"
        }
      ],
      "id": "594810f028c0303b75339ad3",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function dotProduct() {\n    // Good luck!\n}",
          "head": "",
          "tail": ""
        }
      },
      "name": "Vector dot product",
      "dashedName": "vector-dot-product"
    },
    {
      "description": [
        "<p>",
        "Even today, with proportional fonts and complex layouts, there are still",
        "cases where you need to wrap text at a specified",
        "column.  The basic task is to wrap a paragraph of text in a simple way.",
        "Example text:",
        "</p>",
        "<pre>",
        "Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.",
        "If your language provides this, you get easy extra credit,",
        "but you ''must reference documentation'' indicating that the algorithm",
        "is something better than a simple minimimum length algorithm.",
        "</pre>",
        "<p>",
        "Task:",
        "",
        "    Write a function that can wrap this text to any number of characters.",
        "",
        "As an example, the text wrapped to 80 characters should look like the following:",
        "</p>",
        "<pre>",
        "Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX",
        "algorithm. If your language provides this, you get easy extra credit, but you",
        "must reference documentation indicating that the algorithm is something better",
        "than a simple minimimum length algorithm.",
        "</pre>"
      ],
      "tests": [
        {
          "text": "wrap must be a function.",
          "testString":
            "assert.equal(typeof wrap, 'function', 'wrap must be a function.');"
        },
        {
          "text": "wrap must return a string.",
          "testString":
            "assert.equal(typeof wrap('abc', 10), 'string', 'wrap must return a string.');"
        },
        {
          "text": "wrap(80) must return 4 lines.",
          "testString":
            "assert(wrapped80.split('\\n').length === 4, 'wrap(80) must return 4 lines.');"
        },
        {
          "text":
            "Your <code>wrap</code> function should return our expected text",
          "testString":
            "assert.equal(wrapped80.split('\\n')[0], firstRow80, 'Your <code>wrap</code> function should return our expected text');"
        },
        {
          "text": "wrap(42) must return 7 lines.",
          "testString":
            "assert(wrapped42.split('\\n').length === 7, 'wrap(42) must return 7 lines.');"
        },
        {
          "text":
            "Your <code>wrap</code> function should return our expected text",
          "testString":
            "assert.equal(wrapped42.split('\\n')[0], firstRow42, 'Your <code>wrap</code> function should return our expected text');"
        }
      ],
      "id": "594810f028c0303b75339ad4",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function wrap (text, limit) {\n  return text;\n}",
          "head": "",
          "tail":
            "const text =\n`Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.\nIf your language provides this, you get easy extra credit,\nbut you ''must reference documentation'' indicating that the algorithm\nis something better than a simple minimimum length algorithm.`;\n\nconst wrapped80 = wrap(text, 80);\nconst wrapped42 = wrap(text, 42);\n\nconst firstRow80 =\n    'Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX';\n\nconst firstRow42 = 'Wrap text using a more sophisticated';"
        }
      },
      "name": "Word wrap",
      "dashedName": "word-wrap"
    },
    {
      "description": [
        "<p>",
        "In strict ",
        "<a href=\"https://en.wikipedia.org/wiki/Functional programming\" title=\"wp: functional programming\">functional programming</a> and",
        "the <a href=\"https://en.wikipedia.org/wiki/lambda calculus\" title=\"wp: lambda calculus\">lambda calculus</a>, ",
        "functions (lambda expressions) don't have state and are only allowed to refer to arguments of enclosing functions. ",
        "This rules out the usual definition of a recursive function wherein a function is associated with the state of a variable and this variable's state is used in the body of the function.",
        "</p>",
        "<p>",
        "The <a href=\"http://mvanier.livejournal.com/2897.html\">Y combinator</a> is itself a stateless function that,",
        "when applied to another stateless function, returns a recursive version of the function. The Y combinator is",
        "the simplest of the class of such functions, called ",
        "<a href=\"https://en.wikipedia.org/wiki/Fixed-point combinator\" title=\"wp: fixed-point combinator\">fixed-point combinators</a>.",
        "</p>",
        "Task:",
        "",
        "    Define the stateless Y combinator function and use it to compute",
        "    <a href=\"https://en.wikipedia.org/wiki/Factorial\" title=\"wp: factorial\">factorial</a>.",
        "",
        "<code>factorial(N)</code> function is already given to you.",
        "See also <a href=\"http://vimeo.com/45140590\">Jim Weirich: Adventures in Functional Programming</a>."
      ],
      "tests": [
        {
          "text": "Y must return a function",
          "testString":
            "assert.equal(typeof Y(f => n => n), 'function', 'Y must return a function');"
        },
        {
          "text": "factorial(1) must return 1.",
          "testString":
            "assert.equal(factorial(1), 1, 'factorial(1) must return 1.');"
        },
        {
          "text": "factorial(2) must return 2.",
          "testString":
            "assert.equal(factorial(2), 2, 'factorial(2) must return 2.');"
        },
        {
          "text": "factorial(3) must return 6.",
          "testString":
            "assert.equal(factorial(3), 6, 'factorial(3) must return 6.');"
        },
        {
          "text": "factorial(4) must return 24.",
          "testString":
            "assert.equal(factorial(4), 24, 'factorial(4) must return 24.');"
        },
        {
          "text": "factorial(10) must return 3628800.",
          "testString":
            "assert.equal(factorial(10), 3628800, 'factorial(10) must return 3628800.');"
        }
      ],
      "id": "594810f028c0303b75339ad5",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function Y(f) {\n  return function() {\n  // Good luck!\n  };\n}\n\nvar factorial = Y(function(f) {\n  return function (n) {\n    return n > 1 ? n * f(n - 1) : 1;\n  };\n});",
          "head": "",
          "tail": "var factorial = Y(f => n => (n > 1 ? n * f(n - 1) : 1));"
        }
      },
      "name": "Y combinator",
      "dashedName": "y-combinator"
    },
    {
      "description": [
        "<p>",
        "Just as numbers can be represented in a",
        "positional notation as sums of multiples of the powers of ten (decimal)",
        "or two (binary); all the positive integers can be represented as the sum",
        "of one or zero times the distinct members of the Fibonacci series.",
        "</p>",
        "<p>",
        "Recall that the first six distinct Fibonacci",
        "numbers are:  <code>1, 2, 3, 5, 8, 13</code>. The decimal number eleven can",
        "be written as <code>0*13 + 1*8 + 0*5 + 1*3 + 0*2 + 0*1</code> or",
        "<code>010100</code> in positional notation where the columns represent",
        "multiplication by a particular member of the sequence. Leading zeroes are",
        "dropped so that 11 decimal becomes <code>10100</code>.",
        "</p>",
        "<p>",
        "10100 is not the only way to make 11 from the Fibonacci numbers however",
        "<code>0*13 + 1*8 + 0*5 + 0*3 + 1*2 + 1*1</code> or 010011 would also",
        "represent decimal 11. For a true Zeckendorf number there is the added",
        "restriction that ''no two consecutive Fibonacci numbers can be used''",
        "which leads to the former unique solution.",
        "</p>",
        "<p>",
        " Task:",
        " Write a function that generates and returns an array of first N Zeckendorf numbers in order.",
        "</p>"
      ],
      "tests": [
        {
          "text": "zeckendorf must be function",
          "testString":
            "assert.equal(typeof zeckendorf, 'function', 'zeckendorf must be function');"
        },
        {
          "text":
            "Your <code>zeckendorf</code> function should return the correct answer",
          "testString":
            "assert.deepEqual(answer, solution20, 'Your <code>zeckendorf</code> function should return the correct answer');"
        }
      ],
      "id": "594810f028c0303b75339ad6",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": "function zeckendorf(n) {\n  // good luck!\n}",
          "head": "",
          "tail":
            "const range = (m, n) => (\n  Array.from({\n    length: Math.floor(n - m) + 1\n  }, (_, i) => m + i)\n);\n\nconst solution20 = [\n  '1', '10', '100', '101', '1000', '1001', '1010', '10000', '10001',\n  '10010', '10100', '10101', '100000', '100001', '100010', '100100', '100101',\n  '101000', '101001', '101010'\n];\n\nconst answer = range(1, 20).map(zeckendorf);"
        }
      },
      "name": "Zeckendorf number representation",
      "dashedName": "zeckendorf-number-representation"
    },
    {
      "description": [
        "This is an algorithm used to thin a black and white i.e. one bit per pixel images.",
        "For example, with an input image of:",
        "<pre>",
        " #################                   #############",
        " ##################               ################",
        " ###################            ##################",
        " ########     #######          ###################",
        "   ######     #######         #######       ######",
        "   ######     #######        #######",
        "   #################         #######",
        "   ################          #######",
        "   #################         #######",
        "   ######     #######        #######",
        "   ######     #######        #######",
        "   ######     #######         #######       ######",
        " ########     #######          ###################",
        " ########     ####### ######    ################## ######",
        " ########     ####### ######      ################ ######",
        " ########     ####### ######         ############# ######",
        "                                                           </pre>",
        "It produces the thinned output:",
        "<pre>",
        "",
        "    # ##########                       #######",
        "     ##        #                   ####       #",
        "     #          #                 ##",
        "     #          #                #",
        "     #          #                #",
        "     #          #                #",
        "     ############               #",
        "     #          #               #",
        "     #          #                #",
        "     #          #                #",
        "     #          #                #",
        "     #                            ##",
        "     #                             ############",
        "                       ###                          ###",
        "",
        "                                                           </pre>",
        "<h2>Algorithm</h2>",
        "Assume black pixels are one and white pixels zero, and that the input image is a rectangular N by M array of ones and zeroes.",
        "The algorithm operates on all black pixels P1 that can have eight neighbours. The neighbours are, in order, arranged as:",
        "<table border=\"1\">",
        "  <tr><td>P9</td><td>P2</td><td>P3</td></tr>",
        "  <tr><td>P8</td><td><b>P1</b></td><td>P4</td></tr>",
        "  <tr><td>P7</td><td>P6</td><td>P5</td></tr>",
        "</table>",
        "Obviously the boundary pixels of the image cannot have the full eight neighbours.",
        "",
        "    Define $A(P1)$ = the number of transitions from white to black, (0 -> 1) in the sequence P2,P3,P4,P5,P6,P7,P8,P9,P2. (Note the extra P2 at the end - it is circular).",
        "",
        "",
        "    Define $B(P1)$ = the number of black pixel neighbours of P1. ( = sum(P2 .. P9) )",
        "",
        "<h3>Step 1:</h3>",
        "All pixels are tested and pixels satisfying all the following conditions (simultaneously) are just noted at this stage.",
        "  (0) The pixel is black and has eight neighbours",
        "  (1) $2 <= B(P1) <= 6$",
        "  (2) $A(P1) = 1$",
        "  (3) At least one of P2 and P4 and P6 is white",
        "  (4) At least one of P4 and P6 and P8 is white",
        "After iterating over the image and collecting all the pixels satisfying all step 1 conditions, all these condition satisfying pixels are set to white.",
        "<h3>Step 2:</h3>",
        "All pixels are again tested and pixels satisfying all the following conditions are just noted at this stage.",
        "  (0) The pixel is black and has eight neighbours",
        "  (1) $2 <= B(P1) <= 6$",
        "  (2) $A(P1) = 1$",
        "  (3) At least one of P2 and P4 and '''P8''' is white",
        "  (4) At least one of '''P2''' and P6 and P8 is white",
        "After iterating over the image and collecting all the pixels satisfying all step 2 conditions, all these condition satisfying pixels are again set to white.",
        "Iteration:",
        "If any pixels were set in this round of either step 1 or step 2 then all steps are repeated until no image pixels are so changed.",
        "<p>",
        "Task:",
        "Write a routine to perform Zhang-Suen thinning on an image matrix of ones and zeroes.",
        "</p>"
      ],
      "tests": [
        {
          "text": "<code>thinImage</code> must be a function",
          "testString":
            "assert.equal(typeof thinImage, 'function', '<code>thinImage</code> must be a function');"
        },
        {
          "text": "<code>thinImage</code> must return an array",
          "testString":
            "assert(Array.isArray(result), '<code>thinImage</code> must return an array');"
        },
        {
          "text": "<code>thinImage</code> must return an array of strings",
          "testString":
            "assert.equal(typeof result[0], 'string', '<code>thinImage</code> must return an array of strings');"
        },
        {
          "text": "<code>thinImage</code> must return an array of strings",
          "testString":
            "assert.deepEqual(result, expected, '<code>thinImage</code> must return an array of strings');"
        }
      ],
      "id": "594810f028c0303b75339ad7",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "const testImage = [\n  '                                                          ',\n  ' #################                   #############        ',\n  ' ##################               ################        ',\n  ' ###################            ##################        ',\n  ' ########     #######          ###################        ',\n  '   ######     #######         #######       ######        ',\n  '   ######     #######        #######                      ',\n  '   #################         #######                      ',\n  '   ################          #######                      ',\n  '   #################         #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######         #######       ######        ',\n  ' ########     #######          ###################        ',\n  ' ########     ####### ######    ################## ###### ',\n  ' ########     ####### ######      ################ ###### ',\n  ' ########     ####### ######         ############# ###### ',\n  '                                                          '];\n\nfunction thinImage(image) {\n  // Good luck!\n}",
          "head": "",
          "tail":
            "const imageForTests = [\n  '                                                          ',\n  ' #################                   #############        ',\n  ' ##################               ################        ',\n  ' ###################            ##################        ',\n  ' ########     #######          ###################        ',\n  '   ######     #######         #######       ######        ',\n  '   ######     #######        #######                      ',\n  '   #################         #######                      ',\n  '   ################          #######                      ',\n  '   #################         #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######         #######       ######        ',\n  ' ########     #######          ###################        ',\n  ' ########     ####### ######    ################## ###### ',\n  ' ########     ####### ######      ################ ###### ',\n  ' ########     ####### ######         ############# ###### ',\n  '                                                          '];\nconst expected = [\n  '                                                          ',\n  '                                                          ',\n  '    # ##########                       #######            ',\n  '     ##        #                   ####       #           ',\n  '     #          #                 ##                      ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     ############               #                         ',\n  '     #          #               #                         ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #                            ##                      ',\n  '     #                             ############           ',\n  '                       ###                          ###   ',\n  '                                                          ',\n  '                                                          '\n];\nconst result = thinImage(imageForTests);"
        }
      },
      "name": "ZhangSuen thinning algorithm",
      "dashedName": "zhangsuen-thinning-algorithm"
    },
    {
      "description": [
        "A &nbsp; ''zig-zag'' &nbsp; array is a square arrangement of the first &nbsp;",
        "$N^2$ &nbsp; integers, &nbsp; where the",
        "numbers increase sequentially as you zig-zag along the array's &nbsp;",
        "<a href=\"https://en.wiktionary.org/wiki/antidiagonal\">anti-diagonals</a>.",
        "For example, given &nbsp; '''5''', &nbsp; produce this array:",
        "<pre>",
        " 0  1  5  6 14",
        " 2  4  7 13 15",
        " 3  8 12 16 21",
        " 9 11 17 20 22",
        "10 18 19 23 24",
        "</pre>",
        "Write a function that takes the size of the zig-zag matrix, and returns the",
        "corresponding matrix as two-dimensional array."
      ],
      "tests": [
        {
          "text": "ZigZagMatrix must be a function",
          "testString":
            "assert.equal(typeof ZigZagMatrix, 'function', 'ZigZagMatrix must be a function');"
        },
        {
          "text": "ZigZagMatrix should return array",
          "testString":
            "assert.equal(typeof ZigZagMatrix(1), 'object', 'ZigZagMatrix should return array');"
        },
        {
          "text": "ZigZagMatrix should return an array of nestes arrays",
          "testString":
            "assert.equal(typeof ZigZagMatrix(1)[0], 'object', 'ZigZagMatrix should return an array of nestes arrays');"
        },
        {
          "text": "ZigZagMatrix(1) should return [[0]]",
          "testString":
            "assert.deepEqual(ZigZagMatrix(1), zm1, 'ZigZagMatrix(1) should return [[0]]');"
        },
        {
          "text": "ZigZagMatrix(2) should return [[0, 1], [2, 3]]",
          "testString":
            "assert.deepEqual(ZigZagMatrix(2), zm2, 'ZigZagMatrix(2) should return [[0, 1], [2, 3]]');"
        },
        {
          "text": "ZigZagMatrix(5) must return specified matrix",
          "testString":
            "assert.deepEqual(ZigZagMatrix(5), zm5, 'ZigZagMatrix(5) must return specified matrix');"
        }
      ],
      "id": "594810f028c0303b75339ad8",
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents":
            "function ZigZagMatrix(n) {\n  // Good luck!\n  return [[], []];\n}",
          "head": "",
          "tail":
            "const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];"
        }
      },
      "name": "Zigzag matrix",
      "dashedName": "zigzag-matrix"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd10",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/bELRjV' target='_blank'>https://codepen.io/freeCodeCamp/full/bELRjV</a>.",
        "<strong>Rule #1:</strong> Don't look at the example project's code. Figure it out for yourself.",
        "<strong>Rule #2:</strong> Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can see the weather in my current location.",
        "<strong>User Story:</strong> I can see a different icon or background image (e.g. snowy mountain, hot desert) depending on the weather.",
        "<strong>User Story:</strong> I can push a button to toggle between Fahrenheit and Celsius.",
        "<strong>Note:</strong> Many internet browsers now require an HTTP Secure (<code>https://</code>) connection to obtain a user's locale via HTML5 Geolocation. For this reason, we recommend using HTML5 Geolocation to get user location and then use the freeCodeCamp Weather API <a href='https://fcc-weather-api.glitch.me' target='_blank'>https://fcc-weather-api.glitch.me</a> which uses an HTTP Secure connection for the weather. Also, be sure to connect to <a href='https://codepen.io' target='_blank'>CodePen.io</a> via <code>https://</code>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Show the Local Weather",
      "dashedName": "show-the-local-weather"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd19",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/wGqEga/' target='_blank'>https://codepen.io/freeCodeCamp/full/wGqEga/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can search Wikipedia entries in a search box and see the resulting Wikipedia entries.",
        "<strong>User Story:</strong> I can click a button to see a random Wikipedia entry.",
        "<span class='text-info'>Hint #1:</span> Here's a URL you can use to get a random Wikipedia article: <code>https://en.wikipedia.org/wiki/Special:Random</code>.",
        "<span class='text-info'>Hint #2:</span> Here's an entry on using Wikipedia's API: <code>https://www.mediawiki.org/wiki/API:Main_page</code>.",
        "<span class='text-info'>Hint #3:</span> Use this <a href='https://en.wikipedia.org/wiki/Special:ApiSandbox#action=query&titles=Main%20Page&prop=revisions&rvprop=content&format=jsonfm' target='_blank'>link</a> to experiment with Wikipedia's API.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Build a Wikipedia Viewer",
      "dashedName": "build-a-wikipedia-viewer"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd1f",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/Myvqmo/' target='_blank'>https://codepen.io/freeCodeCamp/full/Myvqmo/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can see whether freeCodeCamp is currently streaming on Twitch.tv.",
        "<strong>User Story:</strong> I can click the status output and be sent directly to the freeCodeCamp's Twitch.tv channel.",
        "<strong>User Story:</strong> if a Twitch user is currently streaming, I can see additional details about what they are streaming.",
        "<strong>Hint:</strong> See an example call to Twitch.tv's JSONP API at <a href='http://forum.freecodecamp.org/t/use-the-twitchtv-json-api/19541' target='_blank'>http://forum.freecodecamp.org/t/use-the-twitchtv-json-api/19541</a>.",
        "<strong>Hint:</strong> The relevant documentation about this API call is here: <a href='https://dev.twitch.tv/docs/v5/reference/streams/#get-stream-by-user' target='_blank'>https://dev.twitch.tv/docs/v5/reference/streams/#get-stream-by-user</a>.",
        "<strong>Hint:</strong> Here's an array of the Twitch.tv usernames of people who regularly stream: <code>[\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\", \"storbeck\", \"habathcx\", \"RobotCaleb\", \"noobs2ninjas\"]</code>",
        "<strong>UPDATE:</strong> Due to a change in conditions on API usage explained <a href='https://blog.twitch.tv/client-id-required-for-kraken-api-calls-afbb8e95f843#.f8hipkht1' target='_blank'>here</a> Twitch.tv now requires an API key, but we've built a workaround. Use <a href='https://wind-bow.glitch.me' target='_blank'>https://wind-bow.glitch.me/twitch-api</a> instead of twitch's API base URL (i.e. https://api.twitch.tv/kraken ) and you'll still be able to get account information, without needing to sign up for an API key.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Use the Twitch JSON API",
      "dashedName": "use-the-twitch-json-api"
    },
    {
      "id": "bd7158d8c443edefaeb5bdee",
      "description": [
        "<strong>Objective:</strong> Build a full stack JavaScript app that allows you to search for images like this: <a href='https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/lolcats%20funny?offset=10' target='_blank'>https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/lolcats%20funny?offset=10</a> and browse recent search queries like this: <a href='https://cryptic-ridge-9197.herokuapp.com/api/latest/imagesearch/' target='_blank'>https://cryptic-ridge-9197.herokuapp.com/api/latest/imagesearch/</a>. Then deploy it to Glitch.",
        "Note that for each project, you should create a new GitHub repository and a new Glitch project. If you can't remember how to do this, revisit <a href='/challenges/get-set-for-our-api-development-projects'>https://freecodecamp.org/challenges/get-set-for-our-api-development-projects</a>.",
        "Here are the specific user stories you should implement for this project:",
        "<strong>User Story:</strong> I can get the image URLs, alt text and page urls for a set of images relating to a given search string.",
        "<strong>User Story:</strong> I can paginate through the responses by adding a ?offset=2 parameter to the URL.",
        "<strong>User Story:</strong> I can get a list of the most recently submitted search strings.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Glitch.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": true,
      "challengeType": 4,
      "name": "Build an Image Search Abstraction Layer",
      "dashedName": "build-an-image-search-abstraction-layer"
    },
    {
      "id": "bd7158d8c442eedfaeb5bd1c",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/KzXQgy/' target='_blank'>https://codepen.io/freeCodeCamp/full/KzXQgy/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can play a game of Tic Tac Toe with the computer.",
        "<strong>User Story:</strong> My game will reset as soon as it's over so I can play again.",
        "<strong>User Story:</strong> I can choose whether I want to play as X or O.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Build a Tic Tac Toe Game",
      "dashedName": "build-a-tic-tac-toe-game"
    },
    {
      "id": "bd7158d8c442eddfaeb5bd1c",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/Em-Ant/full/QbRyqq/' target='_blank'>https://codepen.io/freeCodeCamp/full/obYBjE</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I am presented with a random series of button presses.",
        "<strong>User Story:</strong> Each time I input a series of button presses correctly, I see the same series of button presses but with an additional step.",
        "<strong>User Story:</strong> I hear a sound that corresponds to each button both when the series of button presses plays, and when I personally press a button.",
        "<strong>User Story:</strong> If I press the wrong button, I am notified that I have done so, and that series of button presses starts again to remind me of the pattern so I can try again.",
        "<strong>User Story:</strong> I can see how many steps are in the current series of button presses.",
        "<strong>User Story:</strong> If I want to restart, I can hit a button to do so, and the game will return to a single step.",
        "<strong>User Story:</strong> I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses.",
        "<strong>User Story:</strong> I can win the game by getting a series of 20 steps correct. I am notified of my victory, then the game starts over.",
        "<strong>Hint:</strong> Here are mp3s you can use for each button: <code>https://s3.amazonaws.com/freecodecamp/simonSound1.mp3</code>, <code>https://s3.amazonaws.com/freecodecamp/simonSound2.mp3</code>, <code>https://s3.amazonaws.com/freecodecamp/simonSound3.mp3</code>, <code>https://s3.amazonaws.com/freecodecamp/simonSound4.mp3</code>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Build a Simon Game",
      "dashedName": "build-a-simon-game"
    },
    {
      "id": "bd7156d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/eZGMjp/' target='_blank'>https://codepen.io/freeCodeCamp/full/eZGMjp/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can see a table of the freeCodeCamp campers who've earned the most brownie points in the past 30 days.",
        "<strong>User Story:</strong> I can see how many brownie points they've earned in the past 30 days, and how many they've earned total.",
        "<strong>User Story:</strong> I can toggle between sorting the list by how many brownie points they've earned in the past 30 days and by how many brownie points they've earned total.",
        "<strong>Hint:</strong> To get the top 100 campers for the last 30 days: <a href='https://fcctop100.herokuapp.com/api/fccusers/top/recent' target='_blank'>https://fcctop100.herokuapp.com/api/fccusers/top/recent</a>.",
        "<strong>Hint:</strong> To get the top 100 campers of all time: <a href='https://fcctop100.herokuapp.com/api/fccusers/top/alltime' target='_blank'>https://fcctop100.herokuapp.com/api/fccusers/top/alltime</a>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen. ",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Build a Camper Leaderboard",
      "dashedName": "build-a-camper-leaderboard"
    },
    {
      "id": "bd7155d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/dNVazZ/' target='_blank'>https://codepen.io/freeCodeCamp/full/dNVazZ/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can create recipes that have names and ingredients.",
        "<strong>User Story:</strong> I can see an index view where the names of all the recipes are visible.",
        "<strong>User Story:</strong> I can click into any of those recipes to view it.",
        "<strong>User Story:</strong> I can edit these recipes.",
        "<strong>User Story:</strong> I can delete these recipes.",
        "<strong>User Story:</strong> All new recipes I add are saved in my browser's local storage. If I refresh the page, these recipes will still be there.",
        "<strong>Hint: </strong> You should prefix your local storage keys on CodePen, i.e. <code>_username_recipes</code>",
        "Remember to use <a href='//github.com/FreeCodeCamp/freecodecamp/wiki/FreeCodeCamp-Get-Help' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Build a Recipe Box",
      "dashedName": "build-a-recipe-box"
    },
    {
      "id": "bd7154d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/BpwMZv/' target='_blank'>https://codepen.io/freeCodeCamp/full/BpwMZv/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> When I first arrive at the game, it will randomly generate a board and start playing.",
        "<strong>User Story:</strong> I can start and stop the board.",
        "<strong>User Story:</strong> I can set up the board.",
        "<strong>User Story:</strong> I can clear the board.",
        "<strong>User Story:</strong> When I press start, the game will play out.",
        "<strong>User Story:</strong> Each time the board changes, I can see how many generations have gone by.",
        "<strong>Hint:</strong> Here's an explanation of Conway's Game of Life from John Conway himself: <a href='https://www.youtube.com/watch?v=E8kUJL04ELA' target='_blank'>https://www.youtube.com/watch?v=E8kUJL04ELA</a>",
        "<strong>Hint:</strong> Here's an overview of Conway's Game of Life with rules for your reference: <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank'>https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</a>",
        "Remember to use <a href='//github.com/FreeCodeCamp/freecodecamp/wiki/FreeCodeCamp-Get-Help' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen. ",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Build the Game of Life",
      "dashedName": "build-the-game-of-life"
    },
    {
      "id": "bd7153d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/apLXEJ/' target='_blank'>https://codepen.io/freeCodeCamp/full/apLXEJ/</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.",
        "<strong>User Story:</strong> All the items and enemies on the map are arranged at random.",
        "<strong>User Story:</strong> I can move throughout a map, discovering items.",
        "<strong>User Story:</strong> I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.",
        "<strong>User Story:</strong> Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.",
        "<strong>User Story:</strong> When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.",
        "<strong>User Story:</strong> When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.",
        "<strong>User Story:</strong> When I find and beat the boss, I win.",
        "<strong>User Story:</strong> The game should be challenging, but theoretically winnable.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen. ",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Build a Roguelike Dungeon Crawler Game",
      "dashedName": "build-a-roguelike-dungeon-crawler-game"
    },
    {
      "id": "bd7150d8c442eddfafb5bd1c",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://glitch.com' target='_blank'>Glitch</a> app that is functionally similar to this: <a href='https://grove-voice.glitch.me/' target='_blank'>https://grove-voice.glitch.me</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> Upon arriving, the browser will prompt me to access my camera and microphone. ",
        "<strong>User Story:</strong> After I give it permission, I am prompted to type in a room name.",
        "<strong>User Story:</strong> Once I type in the room name, a room will be created if no room of that name existed before. ",
        "<strong>User Story:</strong> A friend of mine can subsequently go to the same website, type in the same room I entered, and join the same room, then enter into a video chat with me. ",
        "<strong>User Story:</strong> If I type in a room name, and there are already two people in that room, I get a notification that the room is full. ",
        "<strong>User Story:</strong> Anyone can create or join any room. And there can be any number of rooms, but all of them must have unique names. ",
        "<strong>User Story:</strong> I can choose to not permit the site to access my microphone and webcam. If I choose not to do this, if some other driver problem occurs, I see an error message saying these are required. ",
        "<strong>User Story:</strong> When I choose to cancel the room name input step, or if I type in no name, or just spaces, it should again ask me again to type in a valid room name. ",
        "<strong>User Story:</strong> If one of the two people in the room get disconnected, they can reconnect to the same room and continue chatting.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your Glitch App.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "P2P Video Chat Application",
      "dashedName": "p2p-video-chat-application"
    },
    {
      "id": "bd7198d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/xVopBo' target='_blank'>https://codepen.io/freeCodeCamp/full/xVopBo</a>.",
        "Fulfill the following <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can see a Force-directed Graph that shows which countries share borders.",
        "<strong>User Story:</strong> I can see each country's flag on its node.",
        "<strong>Hint:</strong> Here's a dataset you can use to build this: <a href='https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json' target='_blank'>https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json</a>",
        "<strong>Hint:</strong> You can create a spritesheet of national flags at <a href='https://www.flag-sprites.com' target='_blank'>https://www.flag-sprites.com</a>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen. ",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Show National Contiguity with a Force Directed Graph",
      "dashedName": "show-national-contiguity-with-a-force-directed-graph"
    },
    {
      "id": "bd7108d8c242eddfaeb5bd13",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/mVEJag' target='_blank'>https://codepen.io/freeCodeCamp/full/mVEJag</a>.",
        "Fulfill the following <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can see where all Meteorites landed on a world map.",
        "<strong>User Story:</strong> I can tell the relative size of the meteorite, just by looking at the way it's represented on the map.",
        "<strong>User Story:</strong> I can mouse over the meteorite's data point for additional data.",
        "<strong>Hint:</strong> Here's a dataset you can use to build this: <a href='https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json' target='_blank'>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json</a>",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen. ",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "isRequired": false,
      "challengeType": 3,
      "name": "Map Data Across the Globe",
      "dashedName": "map-data-across-the-globe"
    },
    {
      "id": "bd7158d8c443eddfaeb5bd0f",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://glitch.com' target='_blank'>Glitch</a> app that is functionally similar to this: <a href='https://chrome-delivery.glitch.me/ /' target='_blank'>https://chrome-delivery.glitch.me</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can view all books posted by every user.",
        "<strong>User Story:</strong> I can add a new book.",
        "<strong>User Story:</strong> I can update my settings to store my full name, city, and state.",
        "<strong>User Story:</strong> I can propose a trade and wait for the other user to accept the trade.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Heroku.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 4,
      "name": "Manage a Book Trading Club",
      "dashedName": "manage-a-book-trading-club"
    },
    {
      "id": "bd7158d8c443eddfaeb5bdee",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://glitch.com' target='_blank'>Glitch</a> app that is functionally similar to this: <a href='https://wild-song.glitch.me/' target='_blank'>https://wild-song.glitch.me</a>.",
        "Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> As an unauthenticated user, I can login with GitHub.",
        "<strong>User Story:</strong> As an authenticated user, I can link to images.",
        "<strong>User Story:</strong> As an authenticated user, I can delete images that I've linked to.",
        "<strong>User Story:</strong> As an authenticated user, I can see a Pinterest-style wall of all the images I've linked to.",
        "<strong>User Story:</strong> As an unauthenticated user, I can browse other users' walls of images.",
        "<strong>User Story:</strong> As an authenticated user, if I upload an image that is broken, it will be replaced by a placeholder image. (can use jQuery broken image detection)",
        "<strong>Hint:</strong> <a href='http://masonry.desandro.com/' target='_blank'>Masonry.js</a> is a library that allows for Pinterest-style image grids.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Heroku.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 4,
      "name": "Build a Pinterest Clone",
      "dashedName": "build-a-pinterest-clone"
    },
    {
      "id": "bd7158d8c443eddfaeb5bdff",
      "description": [
        "<strong>Objective:</strong> Build a full stack JavaScript app that is functionally similar to this: <a href='http://whatsgoinontonight.herokuapp.com/' target='_blank'>http://whatsgoinontonight.herokuapp.com/</a> and deploy it to Heroku.",
        "Note that for each project, you should create a new GitHub repository and a new Heroku project. If you can't remember how to do this, revisit <a href='/challenges/get-set-for-our-dynamic-web-application-projects'>https://freecodecamp.com/challenges/get-set-for-our-dynamic-web-application-projects</a>.",
        "Here are the specific user stories you should implement for this project:",
        "<strong>User Story:</strong> As an unauthenticated user, I can view all bars in my area.",
        "<strong>User Story:</strong> As an authenticated user, I can add myself to a bar to indicate I am going there tonight.",
        "<strong>User Story:</strong> As an authenticated user, I can remove myself from a bar if I no longer want to go there.",
        "<strong>User Story:</strong> As an unauthenticated user, when I login I should not have to search again.",
        "<strong>Hint:</strong> Try using the <a href='https://www.yelp.com/developers/documentation/v2/overview' target='_blank'>Yelp API</a> to find venues in the cities your users search for. If you use Yelp's API, be sure to mention so in your app.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Heroku.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 4,
      "isRequired": true,
      "name": "Build a Nightlife Coordination App",
      "dashedName": "build-a-nightlife-coordination-app"
    },
    {
      "id": "bd7158d8c443eddfaeb5bd0e",
      "description": [
        "<strong>Objective:</strong> Build a full stack JavaScript app that is functionally similar to this: <a href='http://watchstocks.herokuapp.com/' target='_blank'>http://watchstocks.herokuapp.com/</a> and deploy it to Heroku.",
        "Note that for each project, you should create a new GitHub repository and a new Heroku project. If you can't remember how to do this, revisit <a href='/challenges/get-set-for-our-dynamic-web-application-projects'>https://freecodecamp.com/challenges/get-set-for-our-dynamic-web-application-projects</a>.",
        "Here are the specific user stories you should implement for this project:",
        "<strong>User Story:</strong> I can view a graph displaying the recent trend lines for each added stock.",
        "<strong>User Story:</strong> I can add new stocks by their symbol name.",
        "<strong>User Story:</strong> I can remove stocks.",
        "<strong>User Story:</strong> I can see changes in real-time when any other user adds or removes a stock. For this you will need to use Web Sockets.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Heroku.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 4,
      "isRequired": true,
      "name": "Chart the Stock Market",
      "dashedName": "chart-the-stock-market"
    },
    {
      "id": "bd7158d8c443eddfaeb5bdef",
      "description": [
        "<strong>Objective:</strong> Build a full stack JavaScript app that is functionally similar to this: <a href='https://fcc-voting-arthow4n.herokuapp.com/' target='_blank'>https://fcc-voting-arthow4n.herokuapp.com/</a> and deploy it to Heroku.",
        "Note that for each project, you should create a new GitHub repository and a new Heroku project. If you can't remember how to do this, revisit <a href='/challenges/get-set-for-our-dynamic-web-application-projects'>https://freecodecamp.com/challenges/get-set-for-our-dynamic-web-application-projects</a>.",
        "Here are the specific user stories you should implement for this project:",
        "<strong>User Story:</strong> As an authenticated user, I can keep my polls and come back later to access them.",
        "<strong>User Story:</strong> As an authenticated user, I can share my polls with my friends.",
        "<strong>User Story:</strong> As an authenticated user, I can see the aggregate results of my polls.",
        "<strong>User Story:</strong> As an authenticated user, I can delete polls that I decide I don't want anymore.",
        "<strong>User Story:</strong> As an authenticated user, I can create a poll with any number of possible items.",
        "<strong>User Story:</strong> As an unauthenticated or authenticated user, I can see and vote on everyone's polls.",
        "<strong>User Story:</strong> As an unauthenticated or authenticated user, I can see the results of polls in chart form. (This could be implemented using Chart.js or Google Charts.)",
        "<strong>User Story:</strong> As an authenticated user, if I don't like the options on a poll, I can create a new option.",
        "Once you've finished implementing these user stories, click the \"I've completed this challenge\" button and enter the URLs for both your GitHub repository and your live app running on Heroku.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 4,
      "isRequired": true,
      "name": "Build a Voting App",
      "dashedName": "build-a-voting-app"
    },
    {
      "id": "5a4b7fcdb66f799f199e11db",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/satyamdev/full/pdMmBp' target='_blank'>https://codepen.io/satyamdev/full/pdMmBp</a>.",
        "<strong>Rule #1:</strong> Don't look at the example project's code. Figure it out for yourself.",
        "<strong>Rule #2:</strong> Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can control a paddle.",
        "<strong>User Story:</strong> The computer can control the other paddle.",
        "<strong>User Story:</strong> The computer's paddle is unbeatable. It should never miss the ball.",
        "<strong>User Story:</strong> The game keeps track of the player and computer's score.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Build a Pong Game",
      "dashedName": "build-a-pong-game"
    },
    {
      "id": "5a5d02bd919fcf9ca8cf46cb",
      "description": [
        "<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/eyLYXE' target='_blank'>https://codepen.io/freeCodeCamp/full/eyLYXE</a>.",
        "<strong>Rule #1:</strong> Don't look at the example project's code. Figure it out for yourself.",
        "<strong>Rule #2:</strong> Fulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a>. Use whichever libraries or APIs you need. Give it your own personal style.",
        "<strong>User Story:</strong> I can click or drag the mouse cursor to color the circles.",
        "<strong>User Story:</strong> I can double-click on a colored circle to remove the color.",
        "<strong>User Story:</strong> I can click on a colored circle to change its color.",
        "<strong>User Story:</strong> I should get a circle of different color on each click.",
        "<strong>User Story:</strong> I can click on the 'Reset' button to remove the recent color.",
        "<strong>User Story:</strong> I can click on the 'Reset All' button to remove all the colors from the circles.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck.",
        "When you are finished, click the \"I've completed this challenge\" button and include a link to your CodePen.",
        "You can get feedback on your project by sharing it with your friends on Facebook."
      ],
      "tests": [],
      "challengeType": 3,
      "isRequired": false,
      "name": "Build a LightBright App",
      "dashedName": "build-a-lightbright-app"
    },
    {
      "id": "561add10cb82ac38a17523bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        { "id": "bd7158d8c443edefaeb5bdef", "title": "Timestamp Microservice" },
        {
          "id": "bd7158d8c443edefaeb5bdff",
          "title": "Request Header Parser Microservice"
        },
        {
          "id": "bd7158d8c443edefaeb5bd0e",
          "title": "URL Shortener Microservice"
        },
        { "id": "bd7158d8c443edefaeb5bdee", "title": "Exercise Tracker" },
        {
          "id": "bd7158d8c443edefaeb5bd0f",
          "title": "File Metadata Microservice"
        }
      ],
      "name": "APIs and Microservices Certificate",
      "dashedName": "apis-and-microservices-certificate"
    },
    {
      "id": "5a553ca864b52e1d8bceea14",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        {
          "id": "bd7168d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Bar Chart"
        },
        {
          "id": "bd7178d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Scatterplot Graph"
        },
        {
          "id": "bd7188d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Heat Map"
        },
        {
          "id": "587d7fa6367417b2b2512bbf",
          "title": "Visualize Data with a Choropleth Map"
        },
        {
          "id": "587d7fa6367417b2b2512bc0",
          "title": "Visualize Data with a Treemap Diagram"
        }
      ],
      "name": "Data Visualization Certificate",
      "dashedName": "data-visualization-certificate"
    },
    {
      "id": "561acd10cb82ac38a17513bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        {
          "id": "bd7158d8c442eddfaeb5bd13",
          "title": "Build a Random Quote Machine"
        },
        {
          "id": "bd7157d8c242eddfaeb5bd13",
          "title": "Build a Markdown Previewer"
        },
        { "id": "587d7dbc367417b2b2512bae", "title": "Build a Drum Machine" },
        {
          "id": "bd7158d8c442eddfaeb5bd17",
          "title": "Build a JavaScript Calculator"
        },
        { "id": "bd7158d8c442eddfaeb5bd0f", "title": "Build a Pomodoro Clock" }
      ],
      "name": "Front End Libraries Certificate",
      "dashedName": "front-end-libraries-certificate"
    },
    {
      "id": "561add10cb82ac38a17213bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        { "id": "587d8249367417b2b2512c42", "title": "Issue Tracker" },
        {
          "id": "587d8249367417b2b2512c41",
          "title": "Metric-Imperial Converter"
        },
        { "id": "587d824a367417b2b2512c43", "title": "Personal Library" },
        { "id": "587d824a367417b2b2512c44", "title": "Stock Price Checker" },
        { "id": "587d824a367417b2b2512c45", "title": "Anonymous Message Board" }
      ],
      "name": "Information Securtiy and Quality Assurance Certificate",
      "dashedName": "information-securtiy-and-quality-assurance-certificate"
    },
    {
      "id": "561abd10cb81ac38a17513bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        { "id": "aaa48de84e1ecc7c742e1124", "title": "Palindrome Checker" },
        {
          "id": "a7f4d8f2483413a6ce226cac",
          "title": "Roman Numeral Converter"
        },
        { "id": "56533eb9ac21ba0edf2244e2", "title": "Caesars Cipher" },
        {
          "id": "aff0395860f5d3034dc0bfc9",
          "title": "Telephone Number Validator"
        },
        { "id": "aa2e6f85cab2ab736c9a9b24", "title": "Cash Register" }
      ],
      "name": "JavaScript Algorithms and Data Structures Certificate",
      "dashedName": "javascript-algorithms-and-data-structures-certificate"
    },
    {
      "id": "660add10cb82ac38a17513be",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        { "id": "bd7158d8c443edefaeb5bdef", "title": "Timestamp Microservice" },
        {
          "id": "bd7158d8c443edefaeb5bdff",
          "title": "Request Header Parser Microservice"
        },
        {
          "id": "bd7158d8c443edefaeb5bd0e",
          "title": "URL Shortener Microservice"
        },
        {
          "id": "bd7158d8c443edefaeb5bdee",
          "title": "Image Search Abstraction Layer"
        },
        {
          "id": "bd7158d8c443edefaeb5bd0f",
          "title": "File Metadata Microservice"
        },
        { "id": "bd7158d8c443eddfaeb5bdef", "title": "Build a Voting App" },
        {
          "id": "bd7158d8c443eddfaeb5bdff",
          "title": "Build a Nightlife Coordination App"
        },
        { "id": "bd7158d8c443eddfaeb5bd0e", "title": "Chart the Stock Market" },
        {
          "id": "bd7158d8c443eddfaeb5bd0f",
          "title": "Manage a Book Trading Club"
        },
        { "id": "bd7158d8c443eddfaeb5bdee", "title": "Build a Pinterest Clone" }
      ],
      "name": "Legacy Back End Certificate",
      "dashedName": "legacy-back-end-certificate"
    },
    {
      "id": "561add10cb82ac39a17513bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        {
          "id": "bd7157d8c242eddfaeb5bd13",
          "title": "Build a Markdown Previewer"
        },
        {
          "id": "bd7156d8c242eddfaeb5bd13",
          "title": "Build a Camper Leaderboard"
        },
        { "id": "bd7155d8c242eddfaeb5bd13", "title": "Build a Recipe Box" },
        { "id": "bd7154d8c242eddfaeb5bd13", "title": "Build the Game of Life" },
        {
          "id": "bd7153d8c242eddfaeb5bd13",
          "title": "Build a Roguelike Dungeon Crawler Game"
        },
        {
          "id": "bd7168d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Bar Chart"
        },
        {
          "id": "bd7178d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Scatterplot Graph"
        },
        {
          "id": "bd7188d8c242eddfaeb5bd13",
          "title": "Visualize Data with a Heat Map"
        },
        {
          "id": "bd7198d8c242eddfaeb5bd13",
          "title": "Show National Contiguity with a Force Directed Graph"
        },
        {
          "id": "bd7108d8c242eddfaeb5bd13",
          "title": "Map Data Across the Globe"
        }
      ],
      "name": "Legacy Data Visualization Certificate",
      "dashedName": "legacy-data-visualization-certificate"
    },
    {
      "id": "561add10cb82ac38a17513be",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        {
          "id": "bd7158d8c242eddfaeb5bd13",
          "title": "Build a Personal Portfolio Webpage"
        },
        {
          "id": "bd7158d8c442eddfaeb5bd13",
          "title": "Build a Random Quote Machine"
        },
        { "id": "bd7158d8c442eddfaeb5bd0f", "title": "Build a Pomodoro Clock" },
        {
          "id": "bd7158d8c442eddfaeb5bd17",
          "title": "Build a JavaScript Calculator"
        },
        { "id": "bd7158d8c442eddfaeb5bd10", "title": "Show the Local Weather" },
        {
          "id": "bd7158d8c442eddfaeb5bd1f",
          "title": "Use the Twitch JSON API"
        },
        {
          "id": "bd7158d8c442eddfaeb5bd18",
          "title": "Stylize Stories on Camper News"
        },
        {
          "id": "bd7158d8c442eddfaeb5bd19",
          "title": "Build a Wikipedia Viewer"
        },
        {
          "id": "bd7158d8c442eedfaeb5bd1c",
          "title": "Build a Tic Tac Toe Game"
        },
        { "id": "bd7158d8c442eddfaeb5bd1c", "title": "Build a Simon Game" }
      ],
      "name": "Legacy Front End Certificate",
      "dashedName": "legacy-front-end-certificate"
    },
    {
      "id": "561add10cb82ac38a17513bc",
      "challengeType": 7,
      "description": [],
      "isPrivate": true,
      "tests": [
        { "id": "bd7158d8c442eddfaeb5bd18", "title": "Build a Tribute Page" },
        { "id": "587d78af367417b2b2512b03", "title": "Build a Survey Form" },
        {
          "id": "587d78af367417b2b2512b04",
          "title": "Build a Product Landing Page"
        },
        {
          "id": "587d78b0367417b2b2512b05",
          "title": "Build a Technical Documentation Page"
        },
        {
          "id": "bd7158d8c242eddfaeb5bd13",
          "title": "Build a Personal Portfolio Webpage"
        }
      ],
      "name": "Responsive Web Design Certificate",
      "dashedName": "responsive-web-design-certificate"
    }
  ];

